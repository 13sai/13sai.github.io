<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gorm读写分离</title>
    <link href="/2022/06/05/402/"/>
    <url>/2022/06/05/402/</url>
    
    <content type="html"><![CDATA[<p>之前同事反馈 MySQL 主库压力越来越大，虽然主从同步早就已经有了，但升级 gorm 之后一直没有引入读写分离，便商量着加入读写分离减轻主库压力。如今已上线两月有余了，比较稳定，今天来分享一下利用 gorm 实现读写分离。</p><p>gorm 的读写分离是已扩展插件的形式实现的，即 <a href="https://github.com/go-gorm/dbresolver">dbresolver</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">db:</span>  <span class="hljs-attr">separation:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 配置是否使用读写分离，方便改配置切换</span>  <span class="hljs-attr">master:</span> <span class="hljs-string">&quot;root:123456@tcp(127.0.0.1:3306)/a0001_chat?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>  <span class="hljs-attr">slave:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;root:123456@tcp(127.0.0.1:3307)/a0001_chat?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;root:123456@tcp(127.0.0.1:3308)/a0001_chat?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></code></pre></div><h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/pkg/errors&quot;</span><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><span class="hljs-string">&quot;gorm.io/plugin/dbresolver&quot;</span>)<span class="hljs-keyword">var</span> (MainDB *gorm.DB)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;viper.SetConfigName(<span class="hljs-string">&quot;config&quot;</span>)viper.SetConfigType(<span class="hljs-string">&quot;yaml&quot;</span>)viper.AddConfigPath(<span class="hljs-string">&quot;.&quot;</span>)err := viper.ReadInConfig()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;Fatal error config file: %w \n&quot;</span>, err))&#125;MainDB, err = ConnectDB()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;Fatal MainDB config file: %w \n&quot;</span>, err))&#125;err = MainDB.Raw(<span class="hljs-string">&quot;select version()&quot;</span>).Error<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;logrus.Infof(<span class="hljs-string">&quot;err=%+v&quot;</span>, err)<span class="hljs-keyword">return</span>&#125;logrus.Info(<span class="hljs-string">&quot;13sai&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConnectDB</span><span class="hljs-params">()</span> <span class="hljs-params">(d *gorm.DB, err error)</span></span> &#123;<span class="hljs-keyword">if</span> viper.GetBool(<span class="hljs-string">&quot;db.separation&quot;</span>) &#123;<span class="hljs-keyword">return</span> ConnectRWDB()&#125;dsn := viper.GetString(<span class="hljs-string">&quot;db.master&quot;</span>)d, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">&quot;数据库连接失败&quot;</span>)&#125;db, err := d.DB()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">&quot;获取数据库实例失败&quot;</span>)&#125;db.SetMaxIdleConns(<span class="hljs-number">10</span>)db.SetConnMaxLifetime(time.Hour)<span class="hljs-keyword">return</span> d, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConnectRWDB</span><span class="hljs-params">()</span> <span class="hljs-params">(d *gorm.DB, err error)</span></span> &#123;logrus.Info(<span class="hljs-string">&quot;使用读写分离&quot;</span>)dsn := viper.GetString(<span class="hljs-string">&quot;db.master&quot;</span>)d, err = gorm.Open(mysql.New(mysql.Config&#123;DSN: dsn,&#125;))<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err&#125;replicas := []gorm.Dialector&#123;&#125;<span class="hljs-keyword">for</span> i, s := <span class="hljs-keyword">range</span> viper.GetStringSlice(<span class="hljs-string">&quot;db.slave&quot;</span>) &#123;cfg := mysql.Config&#123;DSN: s,&#125;logrus.Infof(<span class="hljs-string">&quot;读写分离-%d-%s&quot;</span>, i, s)replicas = <span class="hljs-built_in">append</span>(replicas, mysql.New(cfg))&#125;d.Use(dbresolver.Register(dbresolver.Config&#123;Sources: []gorm.Dialector&#123;mysql.New(mysql.Config&#123;DSN: dsn,&#125;)&#125;,Replicas: replicas,Policy:   dbresolver.RandomPolicy&#123;&#125;,&#125;).SetMaxIdleConns(<span class="hljs-number">10</span>).SetConnMaxLifetime(time.Hour).SetMaxOpenConns(<span class="hljs-number">200</span>),)<span class="hljs-keyword">return</span> d, <span class="hljs-literal">nil</span>&#125;</code></pre></div><p>主要代码就是:</p><div class="code-wrapper"><pre><code class="hljs go">d.Use(dbresolver.Register(dbresolver.Config&#123;Sources: []gorm.Dialector&#123;mysql.New(mysql.Config&#123;DSN: dsn,&#125;)&#125;,Replicas: replicas,Policy:   dbresolver.RandomPolicy&#123;&#125;,&#125;),)</code></pre></div><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>这里只是做个demo，省略了业务代码，所以提醒一下</p><ul><li>务必测试下具体业务</li><li>注意写后立即读的问题</li><li>注意db与缓存一致性问题</li><li>连接池和超时设置根据业务定义</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://gorm.io/zh_CN/docs/dbresolver.html">gorm  DBResolver</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引提示-强制索引和忽略索引</title>
    <link href="/2022/06/02/401/"/>
    <url>/2022/06/02/401/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>昨天在迭代新功能时，遇到了一个问题，分享一下。<br>我们有一个大表，千万级数据，大概结构如下：</p><div class="code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `msg` (  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,  `uid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,  `nickname` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;用户昵称&#x27;</span>,  `room_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;房间id&#x27;</span>,  `msg` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  `add_time` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;添加时间&#x27;</span>,  `del_flag` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;删除标记&#x27;</span>,  `check_status` tinyint(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;审核状态&#x27;</span>,  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),  KEY `idx` (`room_id`,`add_time`,`check_status`)) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;</code></pre></div><p>查询语句如下：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `msg`  <span class="hljs-keyword">WHERE</span> room_id <span class="hljs-operator">=</span> <span class="hljs-number">225928</span>  <span class="hljs-keyword">AND</span> (add_time <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1653926400</span> <span class="hljs-keyword">and</span> add_time <span class="hljs-operator">&lt;</span> <span class="hljs-number">1654012800</span>) <span class="hljs-keyword">AND</span> uid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1111111</span>,<span class="hljs-number">2222222</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">desc</span> LIMIT <span class="hljs-number">10</span>;</code></pre></div><p>Explain 执行之后发现 key 是 PRIMARY， possible_keys 是 idx。<br>当然，Explain 的显示信息并不一定正确，实际查询一下试试看（建议在mysql负载不高时试验，很慢的哦）</p><p><img src="/images/post/indexforce.png" alt="slow query"><br>慢出天际了！！！</p><h3 id="解释与解决"><a href="#解释与解决" class="headerlink" title="解释与解决"></a>解释与解决</h3><p>说明可能如 Explain 显示，没走idx这个索引，而扫描了全表。MySQL 的查询优化并不完全可靠，它认为全表扫描代价更小时，会按全表扫描走逐渐索引。</p><p>那么怎么办呢？</p><h3 id="Index-Hints-索引提示"><a href="#Index-Hints-索引提示" class="headerlink" title="Index Hints 索引提示"></a>Index Hints 索引提示</h3><p>MySQL 有三种索引提示：</p><ul><li><code>USE</code> 用指定的某个索引去做查询，不再考虑其他可用的索引（可以指定多个索引，但是MySQL也可能不会用指定的这些索引）</li><li><code>FORCE</code> 强制MySQL使用一个特定的索引查询</li><li><code>IGNORE</code> 不要使用某些索引查询</li></ul><p>上面遇到的情况我们可以使用 Force</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `msg`  FORCE INDEX(index_team_id_add_time)<span class="hljs-keyword">WHERE</span> room_id <span class="hljs-operator">=</span> <span class="hljs-number">225928</span>  <span class="hljs-keyword">AND</span> (add_time <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1653926400</span> <span class="hljs-keyword">and</span> add_time <span class="hljs-operator">&lt;</span> <span class="hljs-number">1654012800</span>) <span class="hljs-keyword">AND</span> uid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1111111</span>,<span class="hljs-number">2222222</span>) <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">desc</span> LIMIT <span class="hljs-number">10</span>;</code></pre></div><p>我们执行一下看看：<br><img src="/images/post/indexerr.png" alt="force index"><br>多测试几次，发现确实快了很多，达成预期效果。</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li>索引提示建议配合 explain 使用</li><li>测试的时候务必在流量谷底，以免影响生产</li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/index-hints.html">Index Hints</a></li><li><a href="https://www.cnblogs.com/jkin/p/12868434.html">MySQL索引提示</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>proto文件生成go代码</title>
    <link href="/2022/05/25/400/"/>
    <url>/2022/05/25/400/</url>
    
    <content type="html"><![CDATA[<p>最近修改历史项目的时候，有使用到 proto文件生成go代码，有踩一下坑，分享一下。</p><h2 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h2><p>如果不熟悉Protobuf语法可以先看这篇-<a href="/images/post//2021/05/27/340/">Protobuf语法</a>，如果没有安装生产工具请先执行：</p><div class="code-wrapper"><pre><code class="hljs sh">go get -u github.com/golang/protobuf/protogo get -u github.com/golang/protobuf/protoc-gen-gogo get -u github.com/micro/micro/v2/cmd/protoc-gen-micro</code></pre></div><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><h4 id="编写-proto-文件"><a href="#编写-proto-文件" class="headerlink" title="编写 proto 文件"></a>编写 proto 文件</h4><p>我们先新建common.proto：</p><div class="code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">syntax</span> = <span class="hljs-string">&quot;proto3&quot;</span><span class="hljs-comment">;  //语法声明</span>enum TypeHello &#123;    Unuse = <span class="hljs-number">0</span><span class="hljs-comment">;</span>    Morning = <span class="hljs-number">1</span><span class="hljs-comment">;</span>    Afernoon = <span class="hljs-number">2</span><span class="hljs-comment">;</span>    Evening = <span class="hljs-number">3</span><span class="hljs-comment">;</span>&#125;</code></pre></div><h3 id="protoc-生成-pb-go"><a href="#protoc-生成-pb-go" class="headerlink" title="protoc 生成 .pb.go"></a>protoc 生成 .pb.go</h3><div class="code-wrapper"><pre><code class="hljs sh">protoc --proto_path=./ --micro_out=. --go_out=. *.proto</code></pre></div><p><img src="/images/post/proto.png" alt="proto"></p><h4 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h4><p>能看到错误其实是protoc-gen-go报出的，解决方案有两种：</p><ol><li>使用 go_package 参数</li><li>命令行使用–go_opt=M</li></ol><p>我比较建议使用 go_package，当多个proto文件有依赖时，使用 go_package 比较清晰，使用 –go_opt=M 可能要麻烦得多，甚至出错。诸如以下：<br><img src="/images/post/protoerror.png"></p><div class="code-wrapper"><pre><code class="hljs abnf">// common.proto<span class="hljs-attribute">syntax</span> = <span class="hljs-string">&quot;proto3&quot;</span><span class="hljs-comment">;  //语法声明</span>package common<span class="hljs-comment">; //包名</span>// go_package 使用 go mod 需要的路径即可，也可以是私有 gitlab packageoption go_package = <span class="hljs-string">&quot;github.com/13sai/go-learing/micro/hello/common&quot;</span><span class="hljs-comment">;</span>enum TypeHello &#123;    Unuse = <span class="hljs-number">0</span><span class="hljs-comment">;</span>    Morning = <span class="hljs-number">1</span><span class="hljs-comment">;</span>    Afernoon = <span class="hljs-number">2</span><span class="hljs-comment">;</span>    Evening = <span class="hljs-number">3</span><span class="hljs-comment">;</span>&#125;</code></pre></div><p>生成时务必加上 –go_out=paths=source_relative，具体说明可见文末说明。</p><div class="code-wrapper"><pre><code class="hljs sh">protoc --proto_path=. --go_out=paths=source_relative:. -I=../common *.proto</code></pre></div><p>这里我们稍微弄复杂一点，hello.proto 依赖 common.proto:</p><div class="code-wrapper"><pre><code class="hljs awk">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;  <span class="hljs-regexp">//</span>语法声明import <span class="hljs-string">&quot;common.proto&quot;</span>; <span class="hljs-regexp">//</span> 依赖package hello; option go_package=<span class="hljs-string">&quot;github.com/13sai/go-learing/micro/hello/hello&quot;</span>;<span class="hljs-regexp">//</span> 定义服务service Demo &#123;  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;&#125;<span class="hljs-regexp">//</span> 请求数据格式message HelloRequest &#123;  string name = <span class="hljs-number">1</span>;&#125;<span class="hljs-regexp">//</span> 响应数据格式message HelloReply &#123;  common.TypeHello hello = <span class="hljs-number">2</span>;  string message = <span class="hljs-number">1</span>;&#125;</code></pre></div><p>注意这里多了个 micro_out，这时需要 protoc-gen-micro的，会多生成一个.pb.micro.go文件。</p><div class="code-wrapper"><pre><code class="hljs sh">protoc --proto_path=. --go_out=paths=source_relative:. --micro_out=paths=source_relative:. -I=../common *.proto</code></pre></div><p>文件生成了，使用go-micro（V2）写一个简单的demo。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;os/signal&quot;</span><span class="hljs-string">&quot;syscall&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/13sai/go-learing/micro/hello/common&quot;</span><span class="hljs-string">&quot;github.com/13sai/go-learing/micro/hello/hello&quot;</span><span class="hljs-string">&quot;github.com/micro/go-micro/v2&quot;</span>_ <span class="hljs-string">&quot;github.com/micro/go-plugins/registry/kubernetes/v2&quot;</span><span class="hljs-string">&quot;github.com/sirupsen/logrus&quot;</span>)<span class="hljs-keyword">const</span> (ServiceName = <span class="hljs-string">&quot;hello-server&quot;</span>)<span class="hljs-keyword">type</span> HelloServer <span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *HelloServer)</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(ctx context.Context, req *hello.HelloRequest, res *hello.HelloReply)</span> <span class="hljs-title">error</span></span> &#123;res.Message = <span class="hljs-string">&quot;hello &quot;</span> + req.Nameres.Hello = common.TypeHello_Afernoon<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;service := micro.NewService(<span class="hljs-comment">// Set service name</span>micro.Name(ServiceName),micro.AfterStart(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;fmt.Println(<span class="hljs-string">&quot;starting...&quot;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;),micro.Address(<span class="hljs-string">&quot;:8089&quot;</span>),)service.Init()hello.RegisterDemoHandler(service.Server(), &amp;HelloServer&#123;&#125;)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">if</span> err := service.Run(); err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;&#125;()stop := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)signal.Notify(stop, syscall.SIGTERM, syscall.SIGINT, os.Interrupt)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;tick := time.NewTicker(<span class="hljs-number">3</span> * time.Second)<span class="hljs-keyword">for</span> &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-stop:tick.Stop()<span class="hljs-keyword">default</span>:&lt;-tick.Cclient()&#125;&#125;&#125;()<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-stop:logrus.Infof(<span class="hljs-string">&quot;got exit signal, shutdown&quot;</span>)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">client</span><span class="hljs-params">()</span></span> &#123;service := micro.NewService(micro.Name(ServiceName + <span class="hljs-string">&quot;client&quot;</span>))c := hello.NewDemoService(ServiceName, service.Client())<span class="hljs-comment">// 发起RPC调用</span>rsp, err := c.SayHello(context.TODO(), &amp;hello.HelloRequest&#123;Name: <span class="hljs-string">&quot;13sai&quot;</span>&#125;)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)&#125;<span class="hljs-comment">// 打印返回值</span>fmt.Println(rsp.Message)&#125;</code></pre></div><p><img src="/images/post/protorpc.png"><br>可以看到我们通过protoc生成的代码是没有问题的。</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><h4 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h4><p>生成的文件在输出目录中的<code>.pb.go</code>位置取决于–go_out 标识符。有以下模式：</p><ul><li>  <code>paths=import</code>: 输出文件将放置在以 Go 包的导入路径命名的目录中。例如，<code>protos/buzz.proto</code> 具有 Go 导入路径的输入文件会<code>example.com/project/protos/fizz</code> 导致输出文件位于<code>example.com/project/protos/fizz/buzz.pb.go</code>. <code>paths</code></li><li>  <code>module=$PREFIX</code>: 输出文件将放置在以 Go 包的导入路径命名的目录中，但从输出文件名中删除指定的目录前缀。例如，<code>protos/buzz.proto</code> 具有 Go 导入路径<code>example.com/project/protos/fizz</code>并 <code>example.com/project</code>指定为<code>module</code>前缀的输入文件会生成位于<code>protos/fizz/buzz.pb.go</code>. 在模块路径之外生成任何 Go 包都会导致错误。此模式对于将生成的文件直接输出到 Go 模块很有用。</li><li>  <code>paths=source_relative</code>: 输出文件与输入文件放在相同的相对目录中。例如，输入文件<code>protos/buzz.proto</code> 导致输出文件位于<code>protos/buzz.pb.go</code>.<br>默认是第一种 `paths=import</li></ul><hr><p>其实写文章的时候我也尝试了下使用M，执行命令如下：</p><div class="code-wrapper"><pre><code class="hljs sh">// 这里写法有点特殊哦，注意，因为我是在文件同一目录运行，所以 common.proto=../common，这样生成的package才会是common，若是 common.proto=./生成就是下划线了protoc --proto_path=./ --micro_out=. --go_out=. --go_opt=Mcommon.proto=../common *.proto</code></pre></div><p>虽然这样也能生成，但生成代码并不是我想要的（import部分只是个相对路径，或许换成类似<code>example.com/project/protos/fizz</code>也能生成）。如果感兴趣，我更建议可以阅读参考文章，自自己，我用错了也未尝不可能呢？</p><p>参考:</p><ul><li><a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated#package">Go Generated Code</a></li><li><a href="https://www.sining.io/2022/01/15/how-to-use-a-shared-protobuf-schema-in-golang/">How to: use a shared protobuf schema (in golang)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>influxdb数据迁移</title>
    <link href="/2022/03/07/391/"/>
    <url>/2022/03/07/391/</url>
    
    <content type="html"><![CDATA[<p>之前公司用的influxdb是直接买的influxdb实例，最近厂商产品下线，不得不迁移到自己的机器，以下是迁移过程。</p><p>考虑生产有现成的k8s集群，influxdb官网文档也有k8s部署说明，便直接将influxdb部署到k8s中。（版本1.8.x)</p><h3 id="部署新的influxdb"><a href="#部署新的influxdb" class="headerlink" title="部署新的influxdb"></a>部署新的influxdb</h3><p>部署的yaml文件如下：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 单独弄个ns influxdb</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><span class="hljs-attr">metadata:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span><span class="hljs-meta">---</span><span class="hljs-comment"># 配置文件弄个ConfigMap，便于修改</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb-config</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">influxdb</span><span class="hljs-attr">data:</span>  <span class="hljs-attr">influxdb.conf:</span> <span class="hljs-string">&gt;-</span><span class="hljs-string">    [meta]</span><span class="hljs-string">      dir = &quot;/var/lib/influxdb/meta&quot;</span><span class="hljs-string"></span>    [<span class="hljs-string">coordinator</span>]      <span class="hljs-string">log-queries-after</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;60s&quot;</span>      <span class="hljs-string">max-select-series</span> <span class="hljs-string">=</span> <span class="hljs-number">10000</span>      <span class="hljs-string">write-timeout</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;30s&quot;</span>    [<span class="hljs-string">data</span>]      <span class="hljs-string">dir</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/var/lib/influxdb/data&quot;</span>      <span class="hljs-string">engine</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;tsm1&quot;</span>      <span class="hljs-string">wal-dir</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;/var/lib/influxdb/wal&quot;</span>      <span class="hljs-string">cache-max-memory-size</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;0&quot;</span>      <span class="hljs-string">cache-snapshot-memory-size</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;256m&quot;</span>      <span class="hljs-string">index-version</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;tsi1&quot;</span>      <span class="hljs-string">max-index-log-file-size</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;64k&quot;</span>      <span class="hljs-string">max-series-per-database</span> <span class="hljs-string">=</span> <span class="hljs-number">3000000</span>      <span class="hljs-string">max-values-per-tag</span> <span class="hljs-string">=</span> <span class="hljs-number">100000</span><span class="hljs-meta">---</span><span class="hljs-comment">## 挂个PersistentVolumeClaim</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb-data</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">influxdb</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">accessModes:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">csi-xxx</span> <span class="hljs-comment"># 自行配置</span>  <span class="hljs-attr">resources:</span>    <span class="hljs-attr">requests:</span>      <span class="hljs-attr">storage:</span> <span class="hljs-string">8Gi</span> <span class="hljs-comment"># 按需配置，存储数据较多可适当放大</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><span class="hljs-attr">metadata:</span>    <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">influxdb</span><span class="hljs-attr">spec:</span>    <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>    <span class="hljs-attr">selector:</span>        <span class="hljs-attr">matchLabels:</span>            <span class="hljs-attr">app:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">serviceName:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">template:</span>        <span class="hljs-attr">metadata:</span>            <span class="hljs-attr">labels:</span>                <span class="hljs-attr">app:</span> <span class="hljs-string">influxdb</span>        <span class="hljs-attr">spec:</span>            <span class="hljs-attr">containers:</span>              <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">uhub.service.ucloud.cn/tv1234pub/influxdb:1.8.10</span>                <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span>                <span class="hljs-attr">ports:</span>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8086</span>                    <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span>                <span class="hljs-attr">volumeMounts:</span>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/influxdb</span>                    <span class="hljs-attr">name:</span> <span class="hljs-string">data</span>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb-config</span>                    <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/influxdb/influxdb.conf</span>                    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span>                    <span class="hljs-attr">subPath:</span> <span class="hljs-string">influxdb.conf</span>            <span class="hljs-attr">volumes:</span>              <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span>                <span class="hljs-attr">persistentVolumeClaim:</span>                  <span class="hljs-attr">claimName:</span> <span class="hljs-string">influxdb-data</span>              <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">timezone-config</span>                <span class="hljs-attr">hostPath:</span>                  <span class="hljs-attr">path:</span> <span class="hljs-string">/usr/share/zoneinfo/Asia/Shanghai</span>              <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb-config</span>                <span class="hljs-attr">configMap:</span>                  <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span>                  <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb-config</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">metadata:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">influxdb</span><span class="hljs-attr">spec:</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">influxdb</span>        <span class="hljs-attr">port:</span> <span class="hljs-number">8086</span>        <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8086</span>    <span class="hljs-attr">selector:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">influxdb</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span></code></pre></div><h3 id="dump-历史数据"><a href="#dump-历史数据" class="headerlink" title="dump 历史数据"></a>dump 历史数据</h3><p>dump 需要开启 8088 端口</p><div class="code-wrapper"><pre><code class="hljs sh">influxd backup -portable -host 172.16.xx.xxx:8088 sai-snapshot</code></pre></div><h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><p>上传</p><div class="code-wrapper"><pre><code class="hljs sh">kubectl cp -r sai-snapshot influxdb/influxdb-0:/root/</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">influxd restore -portable ./sai-snapshot</code></pre></div><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>influx客户端查验数据即可。</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>influxdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim快捷操作删除,移动</title>
    <link href="/2022/02/24/390/"/>
    <url>/2022/02/24/390/</url>
    
    <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ol><li>命令模式(进入即此模式)</li><li>输入模式(输入i切换到此模式)</li><li>底线命令模式(ESC然后:)</li></ol><h2 id="常用（不特殊说明都在命令模式，带-的底线命令模式）"><a href="#常用（不特殊说明都在命令模式，带-的底线命令模式）" class="headerlink" title="常用（不特殊说明都在命令模式，带:的底线命令模式）"></a>常用（不特殊说明都在命令模式，带:的底线命令模式）</h2><div class="code-wrapper"><pre><code class="hljs ruby">空格键  向右移动一格x  删除后面的字符,删除<span class="hljs-number">3</span>个字符就是3x  X  删除前一个字符  dd  删除一行   D  删除到行尾caw 改写单词  J  删除换行符，使下一行并上来,<span class="hljs-symbol">nJ:</span>连接后面的n行u  撤销上一次操作      U  撤销当前行的所有修改i  在光标前插入I  在行首插入 a  在光标后插入A  在行末插入o  在当前行的下面另起一行，并变为插入模式O  在当前行上面另起一行，变为插入模式b、3b、w、3w  向前\后移动几个单词，标点也算一个单词。相应的大写状态为不含标点，即只把空格和换行符作为单词间隔符。<span class="hljs-variable">$ </span> 移动到行尾，<span class="hljs-number">3</span><span class="hljs-variable">$移</span>动到<span class="hljs-number">3</span>行后的行尾^  移动到行首，<span class="hljs-number">0</span>也是+  移到下一行的行首-  移到上一行的行首f  搜索命令，小写时向后搜索（用来定位）如 fx：定位到下一个x上Fx  定位到上一个x上，重复时，可用;或,  不过 , 表示反方向% 跳到相对应的括号上，编程时常用33G  跳转到<span class="hljs-number">33</span>行   此时按<span class="hljs-string">``</span>可以返回到原来行gg 文件头   G  文件尾<span class="hljs-number">30</span>% 跳转到文件的<span class="hljs-number">30</span>%处H为HomeM为MiddleL为Last当前屏幕的上中下位置，大小写皆可Ctrl+<span class="hljs-symbol">G:</span>显示当前位置set <span class="hljs-symbol">number:</span>设置显示行号，set <span class="hljs-symbol">nonumber:</span>关闭显示ctrl+u\d  向上\下滚动半屏ctrl+e\y  向上\下滚动一行ctrl+b\f  向上\下滚动一屏　　这个比较实用，记住。zz  将当前行滚动于屏幕中间，方便查看上下文  zt  置顶zb  置尾/string  查找string，回车后，按n键可以跳到下一个，N上一个，另外按/键后，按上下键可以找到以前查找的记录，同样的 ：也有记录<span class="hljs-string">?/</span>string 同上，默认向上查找% 匹配到相应括号处<span class="hljs-meta">&gt;&gt;</span>   向右移动本行一段距离     &lt;&lt;   向左移动本行一段距离    <span class="hljs-number">3</span>&lt;&lt;    把下面<span class="hljs-number">3</span>行（包括本行），向左移动一段距离 <span class="hljs-symbol">:</span><span class="hljs-number">20</span>,<span class="hljs-number">30</span>&gt;&gt;  把<span class="hljs-number">20</span>行到<span class="hljs-number">30</span>行向右移动一段距离<span class="hljs-symbol">:set</span> ignorecase 大小写无关<span class="hljs-symbol">:set</span> noignorecase 大小写敏感*  查找下一个光标所在单词  <span class="hljs-comment">#  查找上一个</span><span class="hljs-symbol">:set</span> hlsearch  高亮显示查找结果<span class="hljs-symbol">:set</span> nohlsearch  取消高亮<span class="hljs-symbol">:nohlsearch</span>  去掉当前显示的高完（一次性）<span class="hljs-symbol">:set</span> paste 格式化粘贴<span class="hljs-symbol">:set</span> ruler 设置在窗口右下角显示行号，与上面的好处是，节省空间<span class="hljs-symbol">:wq</span>  保存退出<span class="hljs-symbol">:q!</span>  丢弃修改退出<span class="hljs-symbol">:q</span>  正常退出</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go性能工具pprof</title>
    <link href="/2022/01/29/385/"/>
    <url>/2022/01/29/385/</url>
    
    <content type="html"><![CDATA[<p>Go 语言自带的 pprof 库就可以分析程序的运行情况，并且提供可视化的功能。它包含两个相关的库：</p><ol><li><p>runtime/pprof<br>对于只跑一次的程序，例如每天只跑一次的离线预处理程序，调用 pprof 包提供的函数，手动开启性能数据采集。</p></li><li><p>net/http/pprof<br>对于在线服务，对于一个 HTTP Server，访问 pprof 提供的 HTTP 接口，获得性能数据。当然，实际上这里底层也是调用的 runtime/pprof 提供的函数，封装成接口对外提供网络访问。</p></li></ol><p>因为自己用gin比较多，所以使用github.com/gin-contrib/pprof，其实内部也就是上面两个库。使用非常简单。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> debugHttp *http.Server<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runPPROF</span><span class="hljs-params">()</span></span> &#123;g := gin.New()g.Use(gin.Recovery())g.Use(gin.Logger())pprof.Register(g)    <span class="hljs-comment">// 使用9000端口开启http服务</span>debugHttp = &amp;http.Server&#123;Addr:    <span class="hljs-string">&quot;:9000&quot;</span>,Handler: g,&#125;debugHttp.ListenAndServe()&#125;</code></pre></div><p>开启之后可以web访问 <a href="http://127.0.0.1:9000/debug/pprof/%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8B%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%EF%BC%8C">http://127.0.0.1:9000/debug/pprof/可以查看实时数据，</a><br><img src="/images/pprof/pprof.png" alt="pprof"></p><p>当然也可以查看某个时间段的性能情况：</p><div class="code-wrapper"><pre><code class="hljs sh">// 监听60s性能情况，默认进入命令行go tool pprof http://127.0.0.1:9000/debug/pprof/profile\?seconds\=60</code></pre></div><p><img src="/images/pprof/pprof2.png" alt="pprof"></p><div class="code-wrapper"><pre><code class="hljs sh">// 本地启动http服务查看，需要装graphviz插件go tool pprof -http=:8080  ~/pprof/pprof.go.samples.cpu.032.pb.gz</code></pre></div><p><img src="/images/pprof/pprof3.png" alt="pprof"></p><p>可以切换看占用最高的，还有火焰图等等，相当好用，一般性能瓶颈就在占用比较多的。</p><p>PS: 有时候线上可能没有开启，也可以使用perf去debug查看占用资源比较多的。</p><div class="code-wrapper"><pre><code class="hljs sh">// 19323 端口号perf record -p 19323perf report</code></pre></div><hr><p>参考：</p><ul><li><a href="https://www.cnblogs.com/qcrao-2018/p/11832732.html">深度解密Go语言之 pprof</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>supervisord</title>
    <link href="/2022/01/29/384/"/>
    <url>/2022/01/29/384/</url>
    
    <content type="html"><![CDATA[<p>相信大多数人都用过 python 版本的 supervisor ，那么你知道 go 版本的 supervisor 吗？</p><h2 id="ochinchina-supervisord"><a href="#ochinchina-supervisord" class="headerlink" title="ochinchina/supervisord"></a>ochinchina/supervisord</h2><p><a href="https://github.com/ochinchina/supervisord">ochinchina/supervisord源码</a></p><p><a href="https://github.com/ochinchina/supervisord/releases">下载地址</a></p><p>源码安装：</p><div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ochinchina/</span>supervisord.git<span class="hljs-regexp">//</span> 切换到需要的版本分支git checkout v0.<span class="hljs-number">7.3</span> <span class="hljs-regexp">//</span> linux 编译安装<span class="hljs-regexp">//</span> <span class="hljs-number">64</span>位版本env GOOS=linux GOARCH=amd64 go build -o supervisord_linux_amd64</code></pre></div><p>配置文件demo</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 内网地址[inet_http_server]port = :<span class="hljs-number">9001</span><span class="hljs-regexp">//</span> UI地址[supervisorctl]serverurl=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9001</span><span class="hljs-regexp">//</span> 进程配置[program:hello]directory = Work<span class="hljs-regexp">/golang/</span>command =stdout_logfile = stderr_logfile = autostart = trueuser=<span class="hljs-regexp">//</span> depends_on=B, C</code></pre></div><p>启动命令</p><blockquote><p>supervisord -c supervisor.conf -d</p></blockquote><p>ctl 命令</p><div class="code-wrapper"><pre><code class="hljs fortran">// 不是<span class="hljs-number">9001</span>端口，务必指定-s参数supervisord ctl -s=http://localhost:<span class="hljs-number">9010</span> <span class="hljs-keyword">status</span>supervisord ctl -s=http://localhost:<span class="hljs-number">9010</span> <span class="hljs-keyword">status</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">2.</span>..supervisord ctl -s=http://localhost:<span class="hljs-number">9010</span> <span class="hljs-keyword">status</span> group:*supervisord ctl <span class="hljs-keyword">stop</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">2.</span>..supervisord ctl <span class="hljs-keyword">stop</span> group:*supervisord ctl <span class="hljs-keyword">stop</span> <span class="hljs-built_in">all</span>supervisord ctl -s=http://localhost:<span class="hljs-number">9010</span> start <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">program</span></span>-<span class="hljs-number">2.</span>..supervisord ctl start group:*supervisord ctl start <span class="hljs-built_in">all</span>supervisord ctl shutdownsupervisord ctl reloadsupervisord ctl signal &lt;signal_name&gt; &lt;process_name&gt; &lt;process_name&gt; ...supervisord ctl signal <span class="hljs-built_in">all</span>supervisord ctl pid &lt;process_name&gt;supervisord ctl fg &lt;process_name&gt;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>supervisord</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go实现LRU</title>
    <link href="/2022/01/16/383/"/>
    <url>/2022/01/16/383/</url>
    
    <content type="html"><![CDATA[<p>前一段时间重构聊天服务的时候，需要定期去检测C端长连接的活跃情况，当检测到长链接失去心跳60s后，主动释放掉以节省内存开销。需要检测所有的长连接显然是不太明智的做法，因而想到了使用LRU算法，从最不活跃的连接检测，当检测到某个连接的活跃时间大于最近一分钟，后续的连接就无需检测了。</p><p>LRU（Least Recently Used）算法是一种常用的缓存淘汰策略算法，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> lru<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;container/list&quot;</span>)<span class="hljs-keyword">type</span> Link <span class="hljs-keyword">struct</span> &#123;ID         <span class="hljs-keyword">int</span>ActiveTime <span class="hljs-keyword">int</span>&#125;<span class="hljs-keyword">type</span> Lru <span class="hljs-keyword">struct</span> &#123;maxSize <span class="hljs-keyword">int</span> <span class="hljs-comment">// 最大容量</span>list    *list.List <span class="hljs-comment">// 链表</span>cache   <span class="hljs-keyword">map</span>[*Link]*list.Element <span class="hljs-comment">// map</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newLru</span><span class="hljs-params">(max <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Lru</span></span> &#123;<span class="hljs-keyword">return</span> &amp;Lru&#123;maxSize: max,cache:   <span class="hljs-keyword">map</span>[*Link]*list.Element&#123;&#125;,list:    list.New(),&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lru)</span> <span class="hljs-title">Push</span><span class="hljs-params">(key *Link)</span></span> &#123;    <span class="hljs-comment">// 已存在，调整链表顺序</span><span class="hljs-keyword">if</span> e, ok := l.cache[key]; ok &#123;l.list.MoveToFront(e)&#125; <span class="hljs-keyword">else</span> &#123;row := l.list.PushFront(key)l.cache[key] = row&#125;    <span class="hljs-comment">// 我这里无需检测长度</span><span class="hljs-keyword">for</span> l.maxSize &gt; <span class="hljs-number">0</span> &amp;&amp; l.list.Len() &gt; l.maxSize &#123;l.removePassive()&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lru)</span> <span class="hljs-title">CheckPassive</span><span class="hljs-params">()</span> <span class="hljs-params">(*Link, <span class="hljs-keyword">bool</span>)</span></span> &#123;e := l.list.Back()<span class="hljs-keyword">if</span> e == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>&#125;link := e.Value.(*Link)<span class="hljs-keyword">return</span> link, <span class="hljs-literal">true</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lru)</span> <span class="hljs-title">Remove</span><span class="hljs-params">(key *Link)</span></span> &#123;<span class="hljs-keyword">if</span> e, ok := l.cache[key]; ok &#123;l.list.Remove(e)<span class="hljs-built_in">delete</span>(l.cache, key)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lru)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> l.list.Len()&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Lru)</span> <span class="hljs-title">removePassive</span><span class="hljs-params">()</span></span> &#123;e := l.list.Back()l.list.Remove(e)<span class="hljs-built_in">delete</span>(l.cache, e.Value.(*Link))&#125;</code></pre></div><p>我们测试一下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> lru<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;testing&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestLRU</span><span class="hljs-params">(t *testing.T)</span></span> &#123;lru := newLru(<span class="hljs-number">10</span>)<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++ &#123;link1 := &amp;Link&#123;i, i + <span class="hljs-number">1642262400</span>&#125;lru.Push(link1)&#125;old, _ := lru.CheckPassive()t.Logf(<span class="hljs-string">&quot;CheckPassive:%+v&quot;</span>, old)t.Log(<span class="hljs-string">&quot;len=&quot;</span>, lru.Len())<span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;item, ok := lru.CheckPassive()<span class="hljs-keyword">if</span> !ok &#123;<span class="hljs-keyword">break</span>&#125;t.Logf(<span class="hljs-string">&quot;Remove:%+v&quot;</span>, item)lru.Remove(item)&#125;old, _ = lru.CheckPassive()t.Logf(<span class="hljs-string">&quot;CheckPassive:%+v&quot;</span>, old)t.Log(<span class="hljs-string">&quot;len=&quot;</span>, lru.Len())&#125;</code></pre></div><p>我们看一下输出：<br><img src="/images/post/lru.png" alt="LRU"></p><p>看效果是ok的。别着急应用到项目中，记得压测对比下再实施哦！</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/Jun10ng/p/12562818.html">golang 实现 LRU</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go有缓冲channel和无缓冲channel</title>
    <link href="/2022/01/11/382/"/>
    <url>/2022/01/11/382/</url>
    
    <content type="html"><![CDATA[<p>我们都知道通道（channel）分两种：</p><ol><li>缓冲通道</li><li>非缓冲通道<div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 缓冲通道</span>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">10</span>)ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>, <span class="hljs-number">2</span>)<span class="hljs-comment">// 非缓冲通道</span>ch3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)ch4 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>, <span class="hljs-number">0</span>)</code></pre></div></li></ol><h3 id="发送通道数据"><a href="#发送通道数据" class="headerlink" title="发送通道数据"></a>发送通道数据</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个空接口通道，注意定义的通道类型有</span>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)<span class="hljs-comment">// 将0放入通道中</span>ch &lt;- <span class="hljs-number">0</span><span class="hljs-comment">// 将hello字符串放入通道中</span>ch &lt;- <span class="hljs-string">&quot;hello&quot;</span></code></pre></div><h3 id="接收通道数据"><a href="#接收通道数据" class="headerlink" title="接收通道数据"></a>接收通道数据</h3><ol><li><p>阻塞接收数据</p><div class="code-wrapper"><pre><code class="hljs go">data := &lt;-ch</code></pre></div><p>执行该语句时将会阻塞，直到接收到数据并赋值给 data 变量。</p></li><li><p>非阻塞接收数据</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// data：表示接收到的数据。未接收到数据时，data 为通道类型的零值</span><span class="hljs-comment">// ok：表示是否接收到数据。</span>data, ok := &lt;-ch</code></pre></div><p>非阻塞的通道接收方法可能造成高的 CPU 占用，因此使用非常少。如果需要实现接收超时检测，可以配合 select 和计时器 channel 进行，可以参见后面的内容。</p></li><li><p>接收任意数据，忽略接收的数据</p><div class="code-wrapper"><pre><code class="hljs go">&lt;-ch</code></pre></div></li><li><p>循环接收</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)    <span class="hljs-comment">// 开启一个并发匿名函数</span>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-keyword">for</span> i := <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;            ch &lt;- i            time.Sleep(time.Second)        &#125;    &#125;()    <span class="hljs-comment">// 遍历接收通道数据</span>    <span class="hljs-keyword">for</span> data := <span class="hljs-keyword">range</span> ch &#123;        fmt.Println(data)        <span class="hljs-keyword">if</span> data == <span class="hljs-number">0</span> &#123;            <span class="hljs-keyword">break</span>        &#125;    &#125;&#125;</code></pre></div></li></ol><h3 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h3><div class="code-wrapper"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)...<span class="hljs-built_in">close</span>(ch)</code></pre></div><p>通道特性:</p><ol><li>同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的（并发安全）</li><li>发送操作和接收操作中对元素值的处理都是不可分割的。</li><li>发送操作在完全完成之前会被阻塞，接收操作也是一样。</li><li>对于缓冲通道：如果通道已满，那么对它的所有发送操作都会被阻塞，直到通道中有元素值被接收走；如果通道已空，那么对它的所有接收操作都会被阻塞，直到通道中有新的元素值出现。<br>对于非缓冲通道：无论是发送操作还是接收操作，一开始执行就会被阻塞，直到配对的操作也开始执行，才会继续传递。</li></ol><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>关闭通道要在发送方关闭，关闭后如果channel内还有元素，并不会对接下来的接收产生影响<br>单向通道最主要的用途就是约束其他代码的行为<br>通过函数的参数类型或者返回值类型来限制（Go的语法糖）。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>)</span> //传入双向通道，在函数里面调用<span class="hljs-title">ch</span>只能发送</span><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span> //返回双向通道，在函数外面里面调用<span class="hljs-title">ch</span>只能接收</span></code></pre></div><p>那么非缓冲通道是不是就是缓冲size为1的缓冲通道呢？我们来测试下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestChan</span><span class="hljs-params">(t *testing.T)</span></span> &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)ch &lt;- <span class="hljs-number">1</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;&lt;-ch&#125;()ch &lt;- <span class="hljs-number">2</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestChan2</span><span class="hljs-params">(t *testing.T)</span></span> &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">1</span>)ch &lt;- <span class="hljs-number">1</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;&lt;-ch&#125;()ch &lt;- <span class="hljs-number">2</span>&#125;</code></pre></div><p>go test 运行一下，会发现TestChan阻塞住了，ch &lt;- 1 不能写在go func 前面，那么非缓冲通道显然不是就是缓冲size为1的缓冲通道。非缓冲通道像是以前的快递员，必须有收货人当面接收成功，否则他会等着你送货，有缓冲通道更像是现在的快递员，直接放在驿站或者快递柜，除非驿站快递柜满了，否则他就胡塞，不管你在不在家，有没有接收成功。</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubebuilder实战之二</title>
    <link href="/2021/11/30/382/"/>
    <url>/2021/11/30/382/</url>
    
    <content type="html"><![CDATA[<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><blockquote><p>go mod init elastic-web</p><p>kubebuilder init –domain com.13sai</p></blockquote><div class="code-wrapper"><pre><code class="hljs sh">kubebuilder create api --group sai --version v1 --kind ElasticWeb</code></pre></div><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/*</span><span class="hljs-comment">Copyright 2021.</span><span class="hljs-comment"></span><span class="hljs-comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><span class="hljs-comment">you may not use this file except in compliance with the License.</span><span class="hljs-comment">You may obtain a copy of the License at</span><span class="hljs-comment"></span><span class="hljs-comment">    http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment"></span><span class="hljs-comment">Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><span class="hljs-comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment">See the License for the specific language governing permissions and</span><span class="hljs-comment">limitations under the License.</span><span class="hljs-comment">*/</span><span class="hljs-keyword">package</span> v1<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;github.com/spf13/cast&quot;</span>metav1 <span class="hljs-string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span>)<span class="hljs-keyword">type</span> ElasticWebSpec <span class="hljs-keyword">struct</span> &#123;<span class="hljs-comment">// 镜像</span>Image     <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;image&quot;`</span><span class="hljs-comment">// 端口</span>Port      *<span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;port&quot;`</span><span class="hljs-comment">// 单个 pod 的 qps</span>SingleQPS *<span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;singleQPS&quot;`</span><span class="hljs-comment">// 总 qps</span>TotalQPS  *<span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;totalQPS&quot;`</span>&#125;<span class="hljs-comment">// ElasticWebStatus defines the observed state of ElasticWeb</span><span class="hljs-keyword">type</span> ElasticWebStatus <span class="hljs-keyword">struct</span> &#123;<span class="hljs-comment">// 实际 qps</span>RealQPS *<span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;realQPS&quot;`</span>&#125;<span class="hljs-keyword">type</span> ElasticWeb <span class="hljs-keyword">struct</span> &#123;metav1.TypeMeta   <span class="hljs-string">`json:&quot;,inline&quot;`</span>metav1.ObjectMeta <span class="hljs-string">`json:&quot;metadata,omitempty&quot;`</span>Spec   ElasticWebSpec   <span class="hljs-string">`json:&quot;spec,omitempty&quot;`</span>Status ElasticWebStatus <span class="hljs-string">`json:&quot;status,omitempty&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(web *ElasticWeb)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;realQPS := <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">if</span> web.Status.RealQPS == <span class="hljs-literal">nil</span> &#123;realQPS = <span class="hljs-string">&quot;nil&quot;</span>&#125; <span class="hljs-keyword">else</span> &#123;realQPS = cast.ToString(*web.Status.RealQPS)&#125;<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Image [%s], Port [%d], SingleQPS [%d], TotalQPS [%d], RealQPS [%s]&quot;</span>, web.Spec.Image, *web.Spec.Port, *web.Spec.SingleQPS, *web.Spec.TotalQPS, realQPS)&#125;<span class="hljs-comment">// ElasticWebList contains a list of ElasticWeb</span><span class="hljs-keyword">type</span> ElasticWebList <span class="hljs-keyword">struct</span> &#123;metav1.TypeMeta <span class="hljs-string">`json:&quot;,inline&quot;`</span>metav1.ListMeta <span class="hljs-string">`json:&quot;metadata,omitempty&quot;`</span>Items           []ElasticWeb <span class="hljs-string">`json:&quot;items&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;SchemeBuilder.Register(&amp;ElasticWeb&#123;&#125;, &amp;ElasticWebList&#123;&#125;)&#125;</code></pre></div><p>设置RBAC权限：</p><p>elasticweb_controller.go:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">//+kubebuilder:rbac:groups=k8s.com.13sai,resources=elasticwebs,verbs=get;list;watch;create;update;patch;delete</span><span class="hljs-comment">//+kubebuilder:rbac:groups=k8s.com.13sai,resources=elasticwebs/status,verbs=get;update;patch</span><span class="hljs-comment">//+kubebuilder:rbac:groups=k8s.com.13sai,resources=elasticwebs/finalizers,verbs=update</span><span class="hljs-comment">// RBAC 新增</span><span class="hljs-comment">//+kubebuilder:rbac:groups=apps,resources=deployments,verbs=get;list;watch;create;update;patch;delete</span><span class="hljs-comment">//+kubebuilder:rbac:groups=core,resources=services,verbs=get;list;watch;create;update;patch;delete</span></code></pre></div><p>代码比较枯燥，<br>主要方法都在controller，</p><ul><li>getExpectReplicas</li><li>createServiceIfNotExists</li><li>createDeployment</li><li>Reconcile(默认)</li></ul><p>可参考：<a href="https://github.com/13sai/kubebuilder-demo/tree/master/elasticWeb">https://github.com/13sai/kubebuilder-demo/tree/master/elasticWeb</a></p><p>编码完成后：</p><blockquote><p>make install</p><p>kubectl api-versions|grep “k8s.com”</p></blockquote><p><img src="/images/Kubebuilder2.png" alt="Kubebuilder2"></p><p>最后可以执行</p><blockquote><p>make run </p></blockquote><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">sai-test</span>  <span class="hljs-attr">labels:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><span class="hljs-meta">---</span><span class="hljs-meta"></span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">k8s.com.13sai/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ElasticWeb</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">sai-test</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticweb-sample</span><span class="hljs-attr">spec:</span>  <span class="hljs-comment"># Add fields here</span>  <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.20.2-alpine</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>  <span class="hljs-attr">singleQPS:</span> <span class="hljs-number">1000</span>  <span class="hljs-attr">totalQPS:</span> <span class="hljs-number">8800</span></code></pre></div><blockquote><p>kubectl apply -f config/samples/k8s_v1_elasticweb.yaml</p></blockquote><hr><p>参考：</p><ul><li><a href="https://juejin.cn/post/6983824024249827358">kubebuilder实战之五：operator编码</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubebuilder之一</title>
    <link href="/2021/11/21/381/"/>
    <url>/2021/11/21/381/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>准备：docker、kubectl、golang</p><h4 id="安装-kustomize"><a href="#安装-kustomize" class="headerlink" title="安装 kustomize"></a>安装 kustomize</h4><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/binGOBIN=$(<span class="hljs-built_in">pwd</span>)/ GO111MODULE=on go get sigs.k8s.io/kustomize/kustomize/v3</code></pre></div><h4 id="安装-kubebuilder"><a href="#安装-kubebuilder" class="headerlink" title="安装 kubebuilder"></a>安装 kubebuilder</h4><p>根据你电脑的 GOOS 和 GOARCH 去<a href="https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.2.0/kubebuilder_darwin_amd64">下载</a> 对应的版本，然后把文件挪到 <code>/usr/local/bin/kubebuilder</code>，执行</p><div class="code-wrapper"><pre><code class="hljs sh">kubebuilder version</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/sai<span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/sai<span class="hljs-comment"># 务必在gopath目录执行，否则报错</span>kubebuilder init --domain com.sai<span class="hljs-comment"># 可有可无的一步</span>go mod tidy<span class="hljs-comment"># make</span>make</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">➜  sai tree         ├── Dockerfile├── Makefile├── PROJECT├── bin│   ├── controller-gen│   └── manager├── config│   ├── default│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   ├── manager_auth_proxy_patch<span class="hljs-selector-class">.yaml</span>│   │   └── manager_config_patch<span class="hljs-selector-class">.yaml</span>│   ├── manager│   │   ├── controller_manager_config<span class="hljs-selector-class">.yaml</span>│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   └── manager<span class="hljs-selector-class">.yaml</span>│   ├── prometheus│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   └── monitor<span class="hljs-selector-class">.yaml</span>│   └── rbac│       ├── auth_proxy_client_clusterrole<span class="hljs-selector-class">.yaml</span>│       ├── auth_proxy_role<span class="hljs-selector-class">.yaml</span>│       ├── auth_proxy_role_binding<span class="hljs-selector-class">.yaml</span>│       ├── auth_proxy_service<span class="hljs-selector-class">.yaml</span>│       ├── kustomization<span class="hljs-selector-class">.yaml</span>│       ├── leader_election_role<span class="hljs-selector-class">.yaml</span>│       ├── leader_election_role_binding<span class="hljs-selector-class">.yaml</span>│       ├── role_binding<span class="hljs-selector-class">.yaml</span>│       └── service_account<span class="hljs-selector-class">.yaml</span>├── go<span class="hljs-selector-class">.mod</span>├── go<span class="hljs-selector-class">.sum</span>├── hack│   └── boilerplate<span class="hljs-selector-class">.go</span><span class="hljs-selector-class">.txt</span>└── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span><span class="hljs-number">7</span> directories, <span class="hljs-number">26</span> files</code></pre></div><h5 id="创建API-CRD和Controller"><a href="#创建API-CRD和Controller" class="headerlink" title="创建API(CRD和Controller)"></a>创建API(CRD和Controller)</h5><div class="code-wrapper"><pre><code class="hljs sh">kubebuilder create api --version v1beta1 --kind Sai --group sai</code></pre></div><div class="code-wrapper"><pre><code class="hljs stylus">➜ sai tree.├── Dockerfile├── Makefile├── PROJECT├── api│   └── v1beta1│       ├── groupversion_info<span class="hljs-selector-class">.go</span>│       ├── sai_types<span class="hljs-selector-class">.go</span>│       └── zz_generated<span class="hljs-selector-class">.deepcopy</span><span class="hljs-selector-class">.go</span>├── bin│   ├── controller-gen│   └── manager├── config│   ├── crd│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   ├── kustomizeconfig<span class="hljs-selector-class">.yaml</span>│   │   └── patches│   │       ├── cainjection_in_sais<span class="hljs-selector-class">.yaml</span>│   │       └── webhook_in_sais<span class="hljs-selector-class">.yaml</span>│   ├── default│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   ├── manager_auth_proxy_patch<span class="hljs-selector-class">.yaml</span>│   │   └── manager_config_patch<span class="hljs-selector-class">.yaml</span>│   ├── manager│   │   ├── controller_manager_config<span class="hljs-selector-class">.yaml</span>│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   └── manager<span class="hljs-selector-class">.yaml</span>│   ├── prometheus│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   └── monitor<span class="hljs-selector-class">.yaml</span>│   ├── rbac│   │   ├── auth_proxy_client_clusterrole<span class="hljs-selector-class">.yaml</span>│   │   ├── auth_proxy_role<span class="hljs-selector-class">.yaml</span>│   │   ├── auth_proxy_role_binding<span class="hljs-selector-class">.yaml</span>│   │   ├── auth_proxy_service<span class="hljs-selector-class">.yaml</span>│   │   ├── kustomization<span class="hljs-selector-class">.yaml</span>│   │   ├── leader_election_role<span class="hljs-selector-class">.yaml</span>│   │   ├── leader_election_role_binding<span class="hljs-selector-class">.yaml</span>│   │   ├── role_binding<span class="hljs-selector-class">.yaml</span>│   │   ├── sai_editor_role<span class="hljs-selector-class">.yaml</span>│   │   ├── sai_viewer_role<span class="hljs-selector-class">.yaml</span>│   │   └── service_account<span class="hljs-selector-class">.yaml</span>│   └── samples│       └── sai_v1beta1_sai<span class="hljs-selector-class">.yaml</span>├── controllers│   ├── sai_controller<span class="hljs-selector-class">.go</span>│   └── suite_test<span class="hljs-selector-class">.go</span>├── go<span class="hljs-selector-class">.mod</span>├── go<span class="hljs-selector-class">.sum</span>├── hack│   └── boilerplate<span class="hljs-selector-class">.go</span><span class="hljs-selector-class">.txt</span>└── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.go</span><span class="hljs-number">13</span> directories, <span class="hljs-number">38</span> files</code></pre></div><h5 id="构建和部署CRD"><a href="#构建和部署CRD" class="headerlink" title="构建和部署CRD"></a>构建和部署CRD</h5> <div class="code-wrapper"><pre><code class="hljs sh">make installoutput：Unable to connect to the server: dial tcp: lookup kubernetes.docker.internal on 192.168.0.1:53: no such hostmake: *** [install] Error 1</code></pre></div><p>把<code>127.0.0.1 kubernetes.docker.internal</code> 加入本地hosts重新执行<code>make install</code> 即可。</p><div class="code-wrapper"><pre><code class="hljs sh">/Users/sai/go/src/sai/bin/controller-gen rbac:roleName=manager-role crd webhook paths=<span class="hljs-string">&quot;./...&quot;</span> output:crd:artifacts:config=config/crd/bases/Users/sai/go/src/sai/bin/kustomize build config/crd | kubectl apply -f -customresourcedefinition.apiextensions.k8s.io/sais.sai.com.sai created</code></pre></div><h5 id="编译和运行controller"><a href="#编译和运行controller" class="headerlink" title="编译和运行controller"></a>编译和运行controller</h5><p> 打开 <code>/Users/sai/go/src/sai/controllers/sai_controller.go</code> , 自行增加逻辑。</p><p>Demo:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *SaiReconciler)</span> <span class="hljs-title">Reconcile</span><span class="hljs-params">(ctx context.Context, req ctrl.Request)</span> <span class="hljs-params">(ctrl.Result, error)</span></span> &#123;_ = log.FromContext(ctx)<span class="hljs-comment">// TODO(user): your logic here</span>fmt.Println(<span class="hljs-string">&quot;------sai builder used by 13sai-----&quot;</span>)<span class="hljs-keyword">return</span> ctrl.Result&#123;&#125;, <span class="hljs-literal">nil</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># sai.yaml</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">sai.com.sai/v1beta1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Sai</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">sai-demo</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">kubectl apply -f sai.yaml➜ kubectl get SaiNAME       AGEsai-demo   79s</code></pre></div><h5 id="制作docker镜像"><a href="#制作docker镜像" class="headerlink" title="制作docker镜像"></a>制作docker镜像</h5><p>修改下dockerfile</p><div class="code-wrapper"><pre><code class="hljs docker"><span class="hljs-comment"># Build the manager binary</span><span class="hljs-keyword">FROM</span> golang:<span class="hljs-number">1.16</span> as builder<span class="hljs-keyword">WORKDIR</span><span class="bash"> /workspace</span><span class="hljs-comment"># Copy the Go Modules manifests</span><span class="hljs-keyword">COPY</span><span class="bash"> go.mod go.mod</span><span class="hljs-keyword">COPY</span><span class="bash"> go.sum go.sum</span><span class="hljs-comment"># cache deps before building and copying source so that we don&#x27;t need to re-download as much</span><span class="hljs-comment"># and so that source changes don&#x27;t invalidate our downloaded layer</span><span class="hljs-comment"># 改改改这里------</span><span class="hljs-keyword">RUN</span><span class="bash"> go env -w GOPROXY=https://goproxy.cn,direct</span><span class="hljs-keyword">RUN</span><span class="bash"> go mod download</span><span class="hljs-comment"># Copy the go source</span><span class="hljs-keyword">COPY</span><span class="bash"> main.go main.go</span><span class="hljs-keyword">COPY</span><span class="bash"> api/ api/</span><span class="hljs-keyword">COPY</span><span class="bash"> controllers/ controllers/</span><span class="hljs-comment"># Build</span><span class="hljs-keyword">RUN</span><span class="bash"> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go</span><span class="hljs-comment"># Use distroless as minimal base image to package the manager binary</span><span class="hljs-comment"># Refer to https://github.com/GoogleContainerTools/distroless for more details</span><span class="hljs-comment"># 改改改这里------</span><span class="hljs-keyword">FROM</span> katanomi/distroless-static:nonroot<span class="hljs-keyword">WORKDIR</span><span class="bash"> /</span><span class="hljs-keyword">COPY</span><span class="bash"> --from=builder /workspace/manager .</span><span class="hljs-keyword">USER</span> <span class="hljs-number">65532</span>:<span class="hljs-number">65532</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/manager&quot;</span>]</span></code></pre></div><blockquote><p>make docker-build docker-push IMG=13sai/kubebuilder-demo</p></blockquote><p>操作成功即可！</p><p>参考：</p><ul><li><a href="https://juejin.cn/post/6981961233956077581">kubebuilder实战之一：准备工作kubebuilder实战之一：准备工作</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch的ILM错误问题排查</title>
    <link href="/2021/11/15/380/"/>
    <url>/2021/11/15/380/</url>
    
    <content type="html"><![CDATA[<p>今天看到生产的es集群有报错：</p><div class="code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;server&quot;</span>, <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2021-11-15T14:19:15,189Z&quot;</span>, <span class="hljs-attr">&quot;level&quot;</span>: <span class="hljs-string">&quot;ERROR&quot;</span>, <span class="hljs-attr">&quot;component&quot;</span>: <span class="hljs-string">&quot;o.e.x.i.IndexLifecycleRunner&quot;</span>, <span class="hljs-attr">&quot;cluster.name&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span>, <span class="hljs-attr">&quot;node.name&quot;</span>: <span class="hljs-string">&quot;elasticsearch-master-2&quot;</span>, <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;policy [sai-log] for index [sai-detail-2021-11-02] failed on step [&#123;\&quot;phase\&quot;:\&quot;hot\&quot;,\&quot;action\&quot;:\&quot;rollover\&quot;,\&quot;name\&quot;:\&quot;check-rollover-ready\&quot;&#125;]. Moving to ERROR step&quot;</span>, <span class="hljs-attr">&quot;cluster.uuid&quot;</span>: <span class="hljs-string">&quot;dscxSgouRw--mhyuj5Y2fw&quot;</span>, <span class="hljs-attr">&quot;node.id&quot;</span>: <span class="hljs-string">&quot;9yklgtqpTNuQU25hIOWkxQ&quot;</span> , <span class="hljs-attr">&quot;stacktrace&quot;</span>: [<span class="hljs-string">&quot;java.lang.IllegalArgumentException: setting [index.lifecycle.rollover_alias] for index [sai-detail-2021-11-02] is empty or not defined&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.core.ilm.WaitForRolloverReadyStep.evaluateCondition(WaitForRolloverReadyStep.java:65) [x-pack-core-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.ilm.IndexLifecycleRunner.runPeriodicStep(IndexLifecycleRunner.java:174) [x-pack-ilm-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.ilm.IndexLifecycleService.triggerPolicies(IndexLifecycleService.java:327) [x-pack-ilm-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.ilm.IndexLifecycleService.triggered(IndexLifecycleService.java:265) [x-pack-ilm-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.core.scheduler.SchedulerEngine.notifyListeners(SchedulerEngine.java:183) [x-pack-core-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at org.elasticsearch.xpack.core.scheduler.SchedulerEngine$ActiveSchedule.run(SchedulerEngine.java:216) [x-pack-core-7.10.1.jar:7.10.1]&quot;</span>,<span class="hljs-string">&quot;at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]&quot;</span>,<span class="hljs-string">&quot;at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]&quot;</span>,<span class="hljs-string">&quot;at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) [?:?]&quot;</span>,<span class="hljs-string">&quot;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) [?:?]&quot;</span>,<span class="hljs-string">&quot;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) [?:?]&quot;</span>,<span class="hljs-string">&quot;at java.lang.Thread.run(Thread.java:832) [?:?]&quot;</span>] &#125;</code></pre></div><p>跟同事一起查看了下，发现kibana的Index Management界面，有错误提示：</p><p><img src="/images/es-ilm.png" alt="ILM"></p><p>后面同事修改了ILM，错误消失。</p><hr><p>下班回家，去查了日志，发现错误仍在，看来美誉解决问题，</p><div class="code-wrapper"><pre><code class="hljs sh">GET /sai-log-2021-11-13/_ilm/explainoutput：&#123;  <span class="hljs-string">&quot;indices&quot;</span> : &#123;    <span class="hljs-string">&quot;sai-log-2021-11-13&quot;</span> : &#123;      <span class="hljs-string">&quot;index&quot;</span> : <span class="hljs-string">&quot;sai-log-2021-11-13&quot;</span>,      <span class="hljs-string">&quot;managed&quot;</span> : <span class="hljs-literal">false</span>    &#125;  &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs smalltalk"><span class="hljs-type">POST</span> /sai-log<span class="hljs-number">-2021</span><span class="hljs-number">-11</span><span class="hljs-number">-13</span>/_ilm/retryoutput:&#123;  <span class="hljs-comment">&quot;error&quot;</span> : &#123;    <span class="hljs-comment">&quot;root_cause&quot;</span> : [      &#123;        <span class="hljs-comment">&quot;type&quot;</span> : <span class="hljs-comment">&quot;illegal_argument_exception&quot;</span>,        <span class="hljs-comment">&quot;reason&quot;</span> : <span class="hljs-comment">&quot;cannot retry an action for an index [sai-log-2021-11-13] that has not encountered an error when running a Lifecycle Policy&quot;</span>      &#125;    ],    <span class="hljs-comment">&quot;type&quot;</span> : <span class="hljs-comment">&quot;illegal_argument_exception&quot;</span>,    <span class="hljs-comment">&quot;reason&quot;</span> : <span class="hljs-comment">&quot;cannot retry an action for an index [sai-log-2021-11-13] that has not encountered an error when running a Lifecycle Policy&quot;</span>  &#125;,  <span class="hljs-comment">&quot;status&quot;</span> : <span class="hljs-number">400</span>&#125;</code></pre></div><p>前往kibana的ILM界面，绑定ILM策略到index template<br><img src="ILM_bing.png" alt="ILM poliy"></p><div class="code-wrapper"><pre><code class="hljs sh">GET /sai-log-2021-11-13/_ilm/explainoutput:&#123;  <span class="hljs-string">&quot;indices&quot;</span> : &#123;    <span class="hljs-string">&quot;sai-log-2021-11-13&quot;</span> : &#123;      <span class="hljs-string">&quot;index&quot;</span> : <span class="hljs-string">&quot;sai-log-2021-11-13&quot;</span>,      <span class="hljs-string">&quot;managed&quot;</span> : <span class="hljs-literal">true</span>,      <span class="hljs-string">&quot;policy&quot;</span> : <span class="hljs-string">&quot;sai-log&quot;</span>,      <span class="hljs-string">&quot;lifecycle_date_millis&quot;</span> : 1636732801982,      <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-string">&quot;2.94d&quot;</span>,      <span class="hljs-string">&quot;phase&quot;</span> : <span class="hljs-string">&quot;hot&quot;</span>,      <span class="hljs-string">&quot;phase_time_millis&quot;</span> : 1636986555834,      <span class="hljs-string">&quot;action&quot;</span> : <span class="hljs-string">&quot;rollover&quot;</span>,      <span class="hljs-string">&quot;action_time_millis&quot;</span> : 1636733356166,      <span class="hljs-string">&quot;step&quot;</span> : <span class="hljs-string">&quot;check-rollover-ready&quot;</span>,      <span class="hljs-string">&quot;step_time_millis&quot;</span> : 1636986555834,      <span class="hljs-string">&quot;is_auto_retryable_error&quot;</span> : <span class="hljs-literal">true</span>,      <span class="hljs-string">&quot;failed_step_retry_count&quot;</span> : 211,      <span class="hljs-string">&quot;phase_execution&quot;</span> : &#123;        <span class="hljs-string">&quot;policy&quot;</span> : <span class="hljs-string">&quot;sai-log&quot;</span>,        <span class="hljs-string">&quot;phase_definition&quot;</span> : &#123;          <span class="hljs-string">&quot;min_age&quot;</span> : <span class="hljs-string">&quot;0ms&quot;</span>,          <span class="hljs-string">&quot;actions&quot;</span> : &#123;            <span class="hljs-string">&quot;rollover&quot;</span> : &#123;              <span class="hljs-string">&quot;max_size&quot;</span> : <span class="hljs-string">&quot;30gb&quot;</span>,              <span class="hljs-string">&quot;max_age&quot;</span> : <span class="hljs-string">&quot;60d&quot;</span>            &#125;          &#125;        &#125;,        <span class="hljs-string">&quot;version&quot;</span> : 3,        <span class="hljs-string">&quot;modified_date_in_millis&quot;</span> : 1636960453087      &#125;    &#125;  &#125;&#125;</code></pre></div><p>解决了？</p><p>前往kibana的Index Management界面，依旧存在 42 indices have lifecycle errors。</p><p>手动来一下：</p><div class="code-wrapper"><pre><code class="hljs sh">POST /sai-log-2021-11-13/_ilm/retryoutput:&#123;  <span class="hljs-string">&quot;acknowledged&quot;</span> : <span class="hljs-literal">true</span>&#125;</code></pre></div><p>重复explain，发现输出一致，再去kibana的Index Management界面瞅瞅：<br><img src="/images/esindex.png" alt="Index Management"></p><p>还有一个，retry命令处理下即可。</p><p>基本算是解决了。</p><hr><p>参考：</p><ul><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/index-lifecycle-error-handling.html">Troubleshooting index lifecycle management errorse</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC重置系统后各种软件安装</title>
    <link href="/2021/10/30/376/"/>
    <url>/2021/10/30/376/</url>
    
    <content type="html"><![CDATA[<p>前一阵MBP的电池出现问题，重置了系统，于是有了下面这些。</p><h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>打开<a href="https://git-scm.com/downloads">git下载地址</a> 下载git后安装即可，作为开发者，git应该是基础，brew对git也有依赖，我一开始就装上。</p><h3 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h3><p>brew 完全是为了安装各种软件方便。</p><div class="code-wrapper"><pre><code class="hljs sh">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></code></pre></div><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h3><p>美化一下命令行，看着心情愉悦。</p><div class="code-wrapper"><pre><code class="hljs sh">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></code></pre></div><h4 id="设置语法高亮-–-zsh-syntax-highlighting"><a href="#设置语法高亮-–-zsh-syntax-highlighting" class="headerlink" title="设置语法高亮 – zsh-syntax-highlighting"></a>设置语法高亮 – zsh-syntax-highlighting</h4><blockquote><p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a></p></blockquote><blockquote><p>echo “source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh” &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrc</p></blockquote><blockquote><p>source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</p></blockquote><p>美化之后舒服多了。<br><img src="/images/zsh.png" alt="zsh"></p><p>命令行补全<br><a href="https://mimosa-pudica.net/zsh-incremental.html">https://mimosa-pudica.net/zsh-incremental.html</a></p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/plugins/mkdir -p incr<span class="hljs-built_in">cd</span> incr</code></pre></div><p>将上面链接下载的文件移动到incr文件夹中</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/.oh-my-zsh/plugins/incr/incr*.zsh&quot;</span> &gt;&gt; ~/.zshrc<span class="hljs-built_in">source</span> ~/.zshrc</code></pre></div><h3 id="安装各种软件"><a href="#安装各种软件" class="headerlink" title="安装各种软件"></a>安装各种软件</h3><h4 id="brew-傻瓜式安装"><a href="#brew-傻瓜式安装" class="headerlink" title="brew 傻瓜式安装"></a>brew 傻瓜式安装</h4><p>有了brew 以后安装十分简单</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>node<span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>yarn<span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>mysql@<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.......</code></pre></div><p>yarn和npm建议替换国内源（开VPN就不需要了）：</p><div class="code-wrapper"><pre><code class="hljs sh">// yarn 🌰yarn config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.orgyarn config <span class="hljs-built_in">set</span> sass_binary_site <span class="hljs-string">&quot;https://npm.taobao.org/mirrors/node-sass/&quot;</span>yarn config <span class="hljs-built_in">set</span> phantomjs_cdnurl <span class="hljs-string">&quot;http://cnpmjs.org/downloads&quot;</span>yarn config <span class="hljs-built_in">set</span> electron_mirror <span class="hljs-string">&quot;https://npm.taobao.org/mirrors/electron/&quot;</span>yarn config <span class="hljs-built_in">set</span> sqlite3_binary_host_mirror <span class="hljs-string">&quot;https://foxgis.oss-cn-shanghai.aliyuncs.com/&quot;</span>yarn config <span class="hljs-built_in">set</span> profiler_binary_host_mirror <span class="hljs-string">&quot;https://npm.taobao.org/mirrors/node-inspector/&quot;</span>yarn config <span class="hljs-built_in">set</span> chromedriver_cdnurl <span class="hljs-string">&quot;https://cdn.npm.taobao.org/dist/chromedriver&quot;</span></code></pre></div><h4 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h4><p>而像redis 这类，经常需要改配置甚至是实验布置集群的，我还是习惯官网下载安装，便于操作配置、各种捣鼓。</p><div class="code-wrapper"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">6.0</span>.<span class="hljs-number">6</span>.tar.gz</code></pre></div><p>此外，docker、vscode、go 这类都可以前往官网下载，下面以 go 为例。</p><p>对于vscode、谷歌浏览器等提供了账号同步的，建议重置系统前设置同步，后续重新安装登录同步书签、配置、插件等，简直是太爽了。</p><h5 id="安装-go"><a href="#安装-go" class="headerlink" title="安装 go"></a>安装 go</h5><p><a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></p><p>下载需要的版本即可。</p><p>简单配置：</p><div class="code-wrapper"><pre><code class="hljs sh">// 使用 goproxy.cn 代理加速go env -w GOPROXY=https://goproxy.cn// 私有仓库go env -w GOPRIVATE=git.13sai.cngit config --global url.<span class="hljs-string">&quot;git@git.13sai.cn:&quot;</span>.insteadOf https://git.13sai.cn</code></pre></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他软件可按需前往appstore或软件官网即可，建议官网下载更快。</p>]]></content>
    
    
    <categories>
      
      <category>mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go使用私有module</title>
    <link href="/2021/10/30/375/"/>
    <url>/2021/10/30/375/</url>
    
    <content type="html"><![CDATA[<p>假如自建git，但又需要使用里面的库，就需要配置私有仓库可用。</p><p>如果没有配置git ssh key，可参照<a href="/2018/05/09/153/">git解决总要输入密码的问题</a> 自行配置。</p><p>然后，只需要执行：</p><div class="code-wrapper"><pre><code class="hljs sh">// 私有库go env -w GOPRIVATE=git.13sai.cn// 配置 git.13sai.cn 库使用 git@git.13sai.cn 拉取，主要后面的 : 不可以丢了git config --global url.<span class="hljs-string">&quot;git@git.13sai.cn:&quot;</span>.insteadOf https://git.13sai.cn</code></pre></div><p>这样就可以使用了，如果没配置git 的 ssh key，就不能使用<a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#105;&#116;&#x2e;&#49;&#51;&#115;&#97;&#x69;&#x2e;&#99;&#110;">&#103;&#x69;&#116;&#64;&#103;&#105;&#116;&#x2e;&#49;&#51;&#115;&#97;&#x69;&#x2e;&#99;&#110;</a>，可以把url 换成https + 用户名密码的格式：</p><div class="code-wrapper"><pre><code class="hljs sh">https://13sai:123456@git.13sai.cn</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go局部变量:=要注意作用域</title>
    <link href="/2021/09/15/372/"/>
    <url>/2021/09/15/372/</url>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>今天写接口写了这么个代码：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 伪代码</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">abc</span><span class="hljs-params">(id <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">([]*model, error)</span></span> &#123;key := <span class="hljs-string">&quot;abc&quot;</span>cache, err := redis.Get(key).Bytes()<span class="hljs-keyword">var</span> res []*model<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;res, err := service.GetFromDB(id)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> res, err&#125;redis.Set(key, gostring.JsonEncode(res), <span class="hljs-number">2</span>*time.Minute)&#125; <span class="hljs-keyword">else</span> &#123;        json.Unmarshal(cache, &amp;res)&#125;<span class="hljs-keyword">return</span> res, <span class="hljs-literal">nil</span>&#125;</code></pre></div><p>然后本地测试接口，发现没有命中redis时，res 总是 null，十分奇怪。</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>仔细看看，你能知道是什么原因吗？</p><hr><p>看到文章标题，应该能猜到吧！</p><p>我们写个test</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> tests<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;errors&quot;</span><span class="hljs-string">&quot;testing&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestVar</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<span class="hljs-keyword">var</span> a <span class="hljs-keyword">int64</span>btn := <span class="hljs-literal">true</span><span class="hljs-keyword">if</span> btn &#123;a, err := <span class="hljs-number">2</span>, errors.New(<span class="hljs-string">&quot;11&quot;</span>)t.Log(<span class="hljs-string">&quot;btn&quot;</span>, a, err)&#125;t.Log(a)&#125;</code></pre></div><p>运行一下，</p><p><img src="/images/iShot2021-09-15.png" alt="test"></p><h2 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h2><p>结果看出来了吗？就是因为使用了 ##:=## 的缘故，变量在 if 内部才有效，不影响 if 外部变量，修改也就简单了：</p><div class="code-wrapper"><pre><code class="hljs go">...res, err = service.GetFromDB(id)...</code></pre></div><p>去掉:即可。</p><p>这是使用go的:=需要注意的点，变量作用域需要注意哦！</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>curl的用法指南</title>
    <link href="/2021/09/11/371/"/>
    <url>/2021/09/11/371/</url>
    
    <content type="html"><![CDATA[<p>From: <a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">阮一峰-curl 的用法指南</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" alt="img"></p><p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自<a href="https://catonmat.net/cookbooks/curl">《curl cookbook》</a>。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的<a href="https://www.ruanyifeng.com/blog/2011/09/curl.html">《curl 初学者教程》</a>。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl https://www.example.com</code></pre></div></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">&#x27;&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">&#x27;User-Agent: php/1.0&#x27;</span> https://google.com</code></pre></div></blockquote><h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">&#x27;foo=bar&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">&#x27;foo1=bar;foo2=bar2&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -b cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -c cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -d<span class="hljs-string">&#x27;login=emma＆password=123&#x27;</span>-X POST https://google.com/login<span class="hljs-comment"># 或者</span>$ curl -d <span class="hljs-string">&#x27;login=emma&#x27;</span> -d <span class="hljs-string">&#x27;password=123&#x27;</span> -X POST  https://google.com/login</code></pre></div></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">&#x27;@data.txt&#x27;</span> https://google.com/login</code></pre></div></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl --data-urlencode <span class="hljs-string">&#x27;comment=hello world&#x27;</span> https://google.com/login</code></pre></div></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">curl -e <span class="hljs-string">&#x27;https://google.com?q=example&#x27;</span> https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">curl -H <span class="hljs-string">&#x27;Referer: https://google.com?q=example&#x27;</span> https://www.example.com</code></pre></div></blockquote><h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">&#x27;file=@photo.png&#x27;</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">&#x27;file=@photo.png;filename=me.png&#x27;</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -G -d <span class="hljs-string">&#x27;q=kitties&#x27;</span> -d <span class="hljs-string">&#x27;count=20&#x27;</span> https://google.com/search</code></pre></div></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -G --data-urlencode <span class="hljs-string">&#x27;comment=hello world&#x27;</span> https://www.example.com</code></pre></div></blockquote><h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">&#x27;Accept-Language: en-US&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">&#x27;Accept-Language: en-US&#x27;</span> -H <span class="hljs-string">&#x27;Secret-Message: xyzzy&#x27;</span> https://google.com</code></pre></div></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">&#x27;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#x27;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> https://google.com/login</code></pre></div></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -i https://www.example.com</code></pre></div></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -I https://www.example.com</code></pre></div></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl --head https://www.example.com</code></pre></div></blockquote><h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -k https://www.example.com</code></pre></div></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -L -d <span class="hljs-string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet</code></pre></div></blockquote><h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl --limit-rate 200k https://google.com</code></pre></div></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -o example.html https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -O https://www.example.com/foo/bar.html</code></pre></div></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s"><a href="#s" class="headerlink" title="-s"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -s https://www.example.com</code></pre></div></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u"><a href="#u" class="headerlink" title="-u"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">&#x27;bob:12345&#x27;</span> https://google.com/login</code></pre></div></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl https://bob:12345@google.com/login</code></pre></div></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">&#x27;bob&#x27;</span> https://google.com/login</code></pre></div></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -v https://www.example.com</code></pre></div></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl --trace - https://www.example.com</code></pre></div></blockquote><h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="X"><a href="#X" class="headerlink" title="-X"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><div class="code-wrapper"><pre><code class="hljs bash">$ curl -X POST https://www.example.com</code></pre></div></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://catonmat.net/cookbooks/curl">Curl Cookbook</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>curl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose搭建ELK</title>
    <link href="/2021/09/10/370/"/>
    <url>/2021/09/10/370/</url>
    
    <content type="html"><![CDATA[<p>github已经有人弄好了，直接clone一下，</p><div class="code-wrapper"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/deviantony/docker-elk.git</code></pre></div><p>进入kibana目录kibana.yml修改密码，注意字符串加引号。</p><p>再进入docker-compose.yml修改es密码，注意字符串加引号。</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span>docker compose up -d</code></pre></div><p>tips:</p><ol><li>拉取docker.elastic.co的镜像贼慢，建议换成阿里云或其他国内镜像。</li><li>es插件可以下载到elasticsearch/plugins，然后挂载一下，或者构建镜像过程中copy进去。</li></ol><p>下面是我修改的docker-compose.yml，可供参考。</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.2&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">elasticsearch:</span>    <span class="hljs-attr">build:</span>      <span class="hljs-attr">context:</span> <span class="hljs-string">elasticsearch/</span>      <span class="hljs-attr">args:</span>        <span class="hljs-attr">ELK_VERSION:</span> <span class="hljs-string">$ELK_VERSION</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">./elasticsearch/config/elasticsearch.yml</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/elasticsearch/config/elasticsearch.yml</span>        <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">elasticsearch</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span>    <span class="hljs-comment"># 增加 es 插件  </span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">./elasticsearch/plugins</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/elasticsearch/plugins</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9200:9200&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9300:9300&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">ES_JAVA_OPTS:</span> <span class="hljs-string">&quot;-Xmx256m -Xms256m&quot;</span>      <span class="hljs-attr">ELASTIC_PASSWORD:</span> <span class="hljs-string">&quot;123456&quot;</span>      <span class="hljs-attr">discovery.type:</span> <span class="hljs-string">single-node</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elk</span>  <span class="hljs-attr">logstash:</span>    <span class="hljs-attr">build:</span>      <span class="hljs-attr">context:</span> <span class="hljs-string">logstash/</span>      <span class="hljs-attr">args:</span>        <span class="hljs-attr">ELK_VERSION:</span> <span class="hljs-string">$ELK_VERSION</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">./logstash/config/logstash.yml</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/logstash/config/logstash.yml</span>        <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">./logstash/pipeline</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/logstash/pipeline</span>        <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5044:5044&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000/tcp&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000/udp&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9600:9600&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">LS_JAVA_OPTS:</span> <span class="hljs-string">&quot;-Xmx256m -Xms256m&quot;</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elk</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span>  <span class="hljs-attr">kibana:</span>    <span class="hljs-attr">build:</span>      <span class="hljs-attr">context:</span> <span class="hljs-string">kibana/</span>      <span class="hljs-attr">args:</span>        <span class="hljs-attr">ELK_VERSION:</span> <span class="hljs-string">$ELK_VERSION</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">bind</span>        <span class="hljs-attr">source:</span> <span class="hljs-string">./kibana/config/kibana.yml</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">/usr/share/kibana/config/kibana.yml</span>        <span class="hljs-attr">read_only:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5601:5601&quot;</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elk</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span><span class="hljs-attr">networks:</span>  <span class="hljs-attr">elk:</span>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><span class="hljs-attr">volumes:</span>  <span class="hljs-attr">elasticsearch:</span></code></pre></div><p>启动成功就可以进kibana玩耍了，es 比较吃机器内存，但相比 gitlab 感觉好一丢丢。</p>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GithubProfile</title>
    <link href="/2021/08/15/362/"/>
    <url>/2021/08/15/362/</url>
    
    <content type="html"><![CDATA[<p>几个月前发现github 的 public profile 开放了新功能，应该开放时间蛮久的，但可能并没有太多人关注，今天来说说怎么使用，真是简单。</p><h2 id="新建同名仓库13sai"><a href="#新建同名仓库13sai" class="headerlink" title="新建同名仓库13sai"></a>新建同名仓库13sai</h2><p>比如我，新建仓库：<a href="https://github.com/13sai/13sai">https://github.com/13sai/13sai</a></p><p>然后会有项目右侧会提示，这是一个特殊的仓库，此仓库的 readme 会显示在 public profile 。</p><h2 id="编辑readme"><a href="#编辑readme" class="headerlink" title="编辑readme"></a>编辑readme</h2><p>你可以自行创意，makedown语法，也可以参考 <a href="https://github.com/anuraghazra/github-readme-stats">https://github.com/anuraghazra/github-readme-stats</a> 做一些酷炫一点的效果。</p><p>比如我的：</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section">### 👋 Hi there , [<span class="hljs-string">I&#x27;m 13sai!</span>](<span class="hljs-link">https://github.13sai.com</span>)  ![<span class="hljs-string">13sai</span>](<span class="hljs-link">https://visitor-badge.glitch.me/badge?page_id=13sai.13sai</span>)</span><span class="hljs-bullet">-</span> 🔭 I’m currently working in NanJing, China.<span class="hljs-bullet">-</span> 🌱 I’m currently learning kubernetes, go, micro service...<span class="hljs-bullet">-</span> 📫 How to reach me: sai0556@qq.com<span class="hljs-bullet">-</span> 💬 Ask me about anything [<span class="hljs-string">here</span>](<span class="hljs-link">https://github.com/13sai/13sai/issues</span>)<span class="hljs-bullet">-</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/images/qiniu/wechat.png&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.buymeacoffee.com/buttons/v2/default-red.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Buy Me A Coffee&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span> &gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>![<span class="hljs-string">Anurag&#x27;s GitHub stats</span>](<span class="hljs-link">https://github-readme-stats.vercel.app/api?username=13sai&amp;show_icons=true&amp;theme=tokyonight</span>)![<span class="hljs-string">Top Langs</span>](<span class="hljs-link">https://github-readme-stats.vercel.app/api/top-langs/?username=13sai&amp;&amp;hide=javascript,html,css,blade&amp;layout=compact&amp;theme=material-palenight</span>)</code></pre></div><p>保存发布即可。</p><p>看看效果吧！</p><p><img src="/images/profile.jpg" alt="github profile"></p><p>用起来很简单，看到别人 profile 好的效果也可以去看下源码贴到自己的仓库使用哈！</p>]]></content>
    
    
    <categories>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>boltdb的使用</title>
    <link href="/2021/08/08/361/"/>
    <url>/2021/08/08/361/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Bolt is a pure Go key/value store inspired by Howard Chu’s LMDB project. The goal of the project is to provide a simple, fast, and reliable database for projects that don’t require a full database server such as Postgres or MySQL.</p></blockquote><p><a href="https://github.com/boltdb/bolt">bolt</a> 是一个简单的kv数据库，使用及其简单，目前github项目处于只读状态。</p><h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;github.com/boltdb/bolt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">// 文件不存在，会新建文件</span>db, err := bolt.Open(<span class="hljs-string">&quot;sai.db&quot;</span>, <span class="hljs-number">0600</span>, <span class="hljs-literal">nil</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;<span class="hljs-keyword">defer</span> db.Close()...&#125;</code></pre></div><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 读写</span>err := db.Update(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(tx *bolt.Tx)</span> <span class="hljs-title">error</span></span> &#123;...<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;)<span class="hljs-comment">// 只读，里面只能进行读取操作</span>err := db.View(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(tx *bolt.Tx)</span> <span class="hljs-title">error</span></span> &#123;...<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;)</code></pre></div><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个bucket，可以理解成一个table</span>b, _ := tx.CreateBucketIfNotExists([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;sai0556&quot;</span>))<span class="hljs-comment">// 新增</span>b.Put([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;a&quot;</span>), []<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;11&quot;</span>))b.Put([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;b&quot;</span>), []<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;22&quot;</span>))<span class="hljs-comment">// 取</span>v := b.Get([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;a&quot;</span>))fmt.Printf(<span class="hljs-string">&quot;The a is: %s\n&quot;</span>, v)<span class="hljs-comment">// 删除</span>b.Delete([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;a&quot;</span>))<span class="hljs-comment">// 游标遍历</span><span class="hljs-comment">/*</span><span class="hljs-comment">First()  Move to the first key.</span><span class="hljs-comment">Last()   Move to the last key.</span><span class="hljs-comment">Seek()   Move to a specific key.</span><span class="hljs-comment">Next()   Move to the next key.</span><span class="hljs-comment">Prev()   Move to the previous key</span><span class="hljs-comment">*/</span>c := b.Cursor()<span class="hljs-keyword">for</span> k, v := c.First(); k != <span class="hljs-literal">nil</span>; k, v = c.Next() &#123;    fmt.Printf(<span class="hljs-string">&quot;key=%s, value=%s\n&quot;</span>, k, v)&#125;<span class="hljs-comment">// ForEach 遍历</span>b.ForEach(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(k, v []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span> &#123;    fmt.Printf(<span class="hljs-string">&quot;key=%s, value=%s\n&quot;</span>, k, v)    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;)<span class="hljs-comment">// 删除bucket</span>tx.DeleteBucket([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;sai0556&quot;</span>))</code></pre></div><p>使用很简单，但需要注意以下几点：</p><ul><li>只读View中，不能使用编辑、删除、新增等写操作，会产生错误</li><li>因为底层使用了读写锁，进行写操作，要尽可能快，更不要开启长事务，会造成阻塞，影响性能</li></ul><p>更多说明可参考：</p><ul><li><a href="https://pkg.go.dev/github.com/boltdb/bolt@v1.3.1">https://pkg.go.dev/github.com/boltdb/bolt@v1.3.1</a></li><li><a href="https://github.com/boltdb/bolt">https://github.com/boltdb/bolt</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>boltdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nsq基础知识与简单demo</title>
    <link href="/2021/07/31/360/"/>
    <url>/2021/07/31/360/</url>
    
    <content type="html"><![CDATA[<h2 id="NSQ"><a href="#NSQ" class="headerlink" title="NSQ"></a>NSQ</h2><blockquote><p>A realtime distributed messaging platform</p></blockquote><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>基于golang</li><li>分布式</li><li>水平扩展</li><li>自带UI，操作友好</li><li>多语言client</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><table><thead><tr><th>组件</th><th>功能</th></tr></thead><tbody><tr><td>nsqd</td><td>接收、排队和向客户端传递消息的守护进程</td></tr><tr><td>nsqlookupd</td><td>管理拓扑信息的守护进程</td></tr><tr><td>nsqadmin</td><td>Web UI，用于实时查看聚合的集群统计信息并执行各种管理任务</td></tr><tr><td>utilities</td><td>常见基础功能、数据流处理工具，如nsq_stat、nsq_tail、nsq_to_file、nsq_to_http、nsq_to_nsq、to_nsq</td></tr></tbody></table><h4 id="nsqd"><a href="#nsqd" class="headerlink" title="nsqd"></a>nsqd</h4><p>它可以独立运行，但通常与nsqlookupd 实例一起配置在集群中（在这种情况下，它将宣布主题和频道以供发现）。</p><p>它侦听两个 TCP 端口，一个用于客户端，另一个用于 HTTP API。它可以选择在第三个端口上侦听 HTTPS。</p><h4 id="nsqlookupd"><a href="#nsqlookupd" class="headerlink" title="nsqlookupd"></a>nsqlookupd</h4><p>有两个接口：nsqd用于广播的TCP 接口和用于客户端执行发现和管理操作的 HTTP 接口。</p><h2 id="MAC安装"><a href="#MAC安装" class="headerlink" title="MAC安装"></a>MAC安装</h2><blockquote><p>brew install nsq<br>nsqlookupd<br>nsqd –lookupd-tcp-address=127.0.0.1:4160 –broadcast-address=127.0.0.1<br>nsqadmin –lookupd-http-address=127.0.0.1:4161</p></blockquote><h2 id="go-nsq"><a href="#go-nsq" class="headerlink" title="go-nsq"></a>go-nsq</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// producer</span><span class="hljs-keyword">package</span> nsq<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/nsqio/go-nsq&quot;</span><span class="hljs-string">&quot;github.com/spf13/cast&quot;</span>)<span class="hljs-comment">// 主函数</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Send</span><span class="hljs-params">(ctx context.Context, cancel context.CancelFunc, topic <span class="hljs-keyword">string</span>)</span></span> &#123;<span class="hljs-keyword">defer</span> cancel()str := <span class="hljs-string">&quot;127.0.0.1:4150&quot;</span>fmt.Println(<span class="hljs-string">&quot;address: &quot;</span>, str)producer, err := nsq.NewProducer(str, nsq.NewConfig())<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;producer.SetLogger(<span class="hljs-literal">nil</span>, <span class="hljs-number">0</span>)<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;msg := <span class="hljs-string">&quot;13sai, &quot;</span> + cast.ToString(i)fmt.Println(<span class="hljs-string">&quot;publish&quot;</span>, msg, producer.Publish(topic, []<span class="hljs-keyword">byte</span>(msg)))time.Sleep(time.Second * <span class="hljs-number">1</span>)&#125;&lt;-ctx.Done()producer.Stop()fmt.Println(<span class="hljs-string">&quot;producer exit&quot;</span>)&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// consumer</span><span class="hljs-keyword">package</span> nsq<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/nsqio/go-nsq&quot;</span>)<span class="hljs-comment">// 消费者</span><span class="hljs-keyword">type</span> Consumer <span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-comment">// 主函数</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Receive</span><span class="hljs-params">(ctx context.Context, cancel context.CancelFunc, topic <span class="hljs-keyword">string</span>)</span></span> &#123;<span class="hljs-keyword">defer</span> cancel()<span class="hljs-comment">// address := &quot;127.0.0.1:4161&quot;</span>channel := topic + <span class="hljs-string">&quot;-channel&quot;</span>cfg := nsq.NewConfig()cfg.LookupdPollInterval = time.Second * <span class="hljs-number">2</span>c, err := nsq.NewConsumer(topic, channel, cfg)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;c.SetLogger(<span class="hljs-literal">nil</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">//屏蔽系统日志</span>c.AddConcurrentHandlers(&amp;Consumer&#123;&#125;, <span class="hljs-number">3</span>)<span class="hljs-comment">//建立NSQLookupd连接</span><span class="hljs-comment">// if err := c.ConnectToNSQLookupd(address); err != nil &#123;</span><span class="hljs-comment">// panic(err)</span><span class="hljs-comment">// &#125;</span><span class="hljs-comment">//建立多个nsqd连接</span><span class="hljs-keyword">if</span> err := c.ConnectToNSQDs([]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;127.0.0.1:4150&quot;</span>&#125;); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;&lt;-ctx.Done()c.Stop()fmt.Println(<span class="hljs-string">&quot;consumer exit&quot;</span>)&#125;<span class="hljs-comment">// 处理消息</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*Consumer)</span> <span class="hljs-title">HandleMessage</span><span class="hljs-params">(msg *nsq.Message)</span> <span class="hljs-title">error</span></span> &#123;fmt.Println(<span class="hljs-string">&quot;receive&quot;</span>, msg.NSQDAddress, <span class="hljs-string">&quot;message:&quot;</span>, <span class="hljs-keyword">string</span>(msg.Body))<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// nsq_test</span><span class="hljs-keyword">package</span> nsq<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;os/signal&quot;</span><span class="hljs-string">&quot;syscall&quot;</span><span class="hljs-string">&quot;testing&quot;</span><span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestReceive</span><span class="hljs-params">(t *testing.T)</span></span> &#123;topic := <span class="hljs-string">&quot;sai0556&quot;</span>ctx, cancel := context.WithCancel(context.Background())<span class="hljs-keyword">defer</span> cancel()<span class="hljs-keyword">go</span> Send(ctx, cancel, topic)<span class="hljs-keyword">go</span> Receive(ctx, cancel, topic)sig := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)signal.Notify(sig, syscall.SIGTERM, syscall.SIGINT)t.Log(<span class="hljs-string">&quot;开始监听&quot;</span>)<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():t.Log(<span class="hljs-string">&quot;ctx done&quot;</span>)<span class="hljs-keyword">return</span><span class="hljs-keyword">case</span> &lt;-sig:t.Log(<span class="hljs-string">&quot;signal exit...&quot;</span>)cancel()time.Sleep(<span class="hljs-number">2</span> * time.Second)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// send(topic)</span>&#125;</code></pre></div><p>测试走一波，</p><p><img src="/images/nsq.jpg" alt="nsq"></p><p>对于NSQ，自己也是刚刚使用，给我的感觉是相当好上手，之前有用过RabbitMQ，nsq相比来说更简单，可能是go-client相对好用一些吧。<br>后续有其他值得分享的点再继续补充。如有需要交流，可联系我email/qq。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://nsq.io/">nsq</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nsq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode调试go程序</title>
    <link href="/2021/07/07/355/"/>
    <url>/2021/07/07/355/</url>
    
    <content type="html"><![CDATA[<p>在项目目录新建，.vscode/launch.json</p><div class="code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>, <span class="hljs-comment">// 版本好</span>  <span class="hljs-attr">&quot;configurations&quot;</span>: [      &#123;          <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-comment">// 名称</span>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;go&quot;</span>,          <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,          <span class="hljs-attr">&quot;mode&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,          <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;cwd&#125;&quot;</span>,          <span class="hljs-attr">&quot;env&quot;</span>: &#123;<span class="hljs-attr">&quot;DebugEnv&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;, <span class="hljs-comment">// 环境变量</span>          <span class="hljs-attr">&quot;args&quot;</span>: [<span class="hljs-string">&quot;--config&quot;</span>,<span class="hljs-string">&quot;./config-local.yaml&quot;</span>, <span class="hljs-string">&quot;--listen&quot;</span>, <span class="hljs-string">&quot;:8087&quot;</span>] <span class="hljs-comment">// 启动参数</span>      &#125;  ]&#125;</code></pre></div><p>对于program:</p><div class="code-wrapper"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;workspaceRoot&#125; VSCode当前打开的文件夹<span class="hljs-symbol">$</span>&#123;<span class="hljs-keyword">file</span>&#125; 当前打开的文件<span class="hljs-symbol">$</span>&#123;relativeFile&#125; 相对于workspaceRoot的相对路径<span class="hljs-symbol">$</span>&#123;fileBasename&#125; 当前打开文件的文件名<span class="hljs-symbol">$</span>&#123;fileDirname&#125; 所在的文件夹，是绝对路径<span class="hljs-symbol">$</span>&#123;fileExtname&#125; 当前打开文件的拓展名，如.json<span class="hljs-symbol">$</span>&#123;cwd&#125; 启动时任务运行程序的当前工作目录</code></pre></div><p>然后运行-》启动调试，就能跑起来了，可以打断点调试了。</p><p>断点点击代码行左侧即可，还是很方便的。</p><p><img src="/images/vscodeDebug.jpg" alt="vscodeDebug"></p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ConfigMap作为容器的配置文件</title>
    <link href="/2021/06/26/350/"/>
    <url>/2021/06/26/350/</url>
    
    <content type="html"><![CDATA[<h2 id="构建demo镜像"><a href="#构建demo镜像" class="headerlink" title="构建demo镜像"></a>构建demo镜像</h2><p>自己制作个镜像方便测试。</p><blockquote><p>go mod init k8s-configmap-demo</p></blockquote><p>main.go</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;net/http&quot;</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><span class="hljs-string">&quot;github.com/spf13/pflag&quot;</span><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-keyword">var</span> (conf = pflag.StringP(<span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config filepath&quot;</span>))<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;Name <span class="hljs-keyword">string</span>&#125;<span class="hljs-comment">// 对外的初始化配置方法</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">configRun</span><span class="hljs-params">(cfg <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;c := Config&#123;Name: cfg,&#125;<span class="hljs-keyword">if</span> err := c.init(); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> err&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Config)</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">if</span> c.Name != <span class="hljs-string">&quot;&quot;</span> &#123;viper.SetConfigFile(c.Name)&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 默认配置文件是./config.yaml</span>viper.AddConfigPath(<span class="hljs-string">&quot;.&quot;</span>)viper.SetConfigName(<span class="hljs-string">&quot;config&quot;</span>)&#125;viper.SetConfigType(<span class="hljs-string">&quot;yaml&quot;</span>)<span class="hljs-comment">// viper解析配置文件</span>err := viper.ReadInConfig() <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;Fatal error config file: %s \n&quot;</span>, err))&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;pflag.Parse()<span class="hljs-comment">// 初始化配置</span><span class="hljs-keyword">if</span> err := configRun(*conf); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(err)&#125;gin.SetMode(viper.GetString(<span class="hljs-string">&quot;mode&quot;</span>))g := gin.New()g = LoadRoute(g)g.Run(viper.GetString(<span class="hljs-string">&quot;addr&quot;</span>))&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadRoute</span><span class="hljs-params">(g *gin.Engine)</span> *<span class="hljs-title">gin</span>.<span class="hljs-title">Engine</span></span> &#123;g.Use(gin.Recovery())<span class="hljs-comment">// 404</span>g.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *gin.Context)</span></span>  &#123;c.String(http.StatusNotFound, <span class="hljs-string">&quot;404 not found&quot;</span>);&#125;)g.GET(<span class="hljs-string">&quot;/&quot;</span>, Index)<span class="hljs-keyword">return</span> g&#125;<span class="hljs-comment">// 返回</span><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;Code <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;code&quot;`</span>Message <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;message&quot;`</span>Data <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-string">`json:&quot;data&quot;`</span>&#125;<span class="hljs-comment">// api返回结构</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ApiResponse</span><span class="hljs-params">(c *gin.Context, code <span class="hljs-keyword">int</span>, message <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;c.JSON(http.StatusOK, Response&#123;Code: code,Message: message,Data: data,&#125;)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;ApiResponse(c, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;success&quot;</span>, viper.GetString(<span class="hljs-string">&quot;hi&quot;</span>))&#125;</code></pre></div><p>代码比较简单，读取config,运行一个gin http服务，返回配置项[hi]的字符串。</p><p>config.yaml</p><div class="code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">name:</span> demo2<span class="hljs-symbol">mode:</span> debug<span class="hljs-symbol">addr:</span> :<span class="hljs-number">8080</span><span class="hljs-symbol">hi:</span> w~o~w</code></pre></div><p>Dockerfile</p><div class="code-wrapper"><pre><code class="hljs Do">FROM golang:alpine <span class="hljs-keyword">AS</span> builderENV CGO_ENABLED 0ENV GOPROXY https:<span class="hljs-comment">//goproxy.cn,direct</span>WORKDIR /<span class="hljs-keyword">app</span>ADD go.mod .ADD go.<span class="hljs-keyword">sum</span> .<span class="hljs-keyword">RUN</span> go mod download<span class="hljs-keyword">COPY</span> main.go .<span class="hljs-keyword">RUN</span> go build -o 13sai main.goFROM alpineWORKDIR /<span class="hljs-keyword">app</span><span class="hljs-keyword">COPY</span> --from=builder /<span class="hljs-keyword">app</span>/13sai /<span class="hljs-keyword">app</span>/13saiADD config.yaml .CMD [<span class="hljs-string">&quot;./13sai&quot;</span>]</code></pre></div><p>构建：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t k<span class="hljs-number">8</span>s-configmap-demo:<span class="hljs-number">0</span>.<span class="hljs-number">2</span> .<span class="hljs-attribute">docker</span> tag k<span class="hljs-number">8</span>s-configmap-demo:<span class="hljs-number">0</span>.<span class="hljs-number">2</span> <span class="hljs-number">13</span>sai/k<span class="hljs-number">8</span>s-configmap-demo:<span class="hljs-number">0</span>.<span class="hljs-number">2</span></code></pre></div><h3 id="提交镜像到hub"><a href="#提交镜像到hub" class="headerlink" title="提交镜像到hub"></a>提交镜像到hub</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> login<span class="hljs-attribute">docker</span> push <span class="hljs-number">13</span>sai/k<span class="hljs-number">8</span>s-configmap-demo:<span class="hljs-number">0</span>.<span class="hljs-number">2</span></code></pre></div><blockquote><p>k8s的配置我使用的是Kuboard，下面的操作都是在Kuboard执行</p></blockquote><h3 id="ConfigMap配置"><a href="#ConfigMap配置" class="headerlink" title="ConfigMap配置"></a>ConfigMap配置</h3><h4 id="创建ConfigMap"><a href="#创建ConfigMap" class="headerlink" title="创建ConfigMap:"></a>创建ConfigMap:</h4><p>进入default空间 &gt; 资源 &gt; 配置字典：</p><table><thead><tr><th>名称</th><th>sai</th></tr></thead><tbody><tr><td>配置数据名称</td><td>config.yaml</td></tr><tr><td>配置内容</td><td>config.yaml里的内容</td></tr></tbody></table><h4 id="创建负载"><a href="#创建负载" class="headerlink" title="创建负载"></a>创建负载</h4><p>配置可参照下面截图，注意几处：</p><ul><li>数据卷 Volume，选择configMap</li><li>运行容器组pod的Command和挂载点</li></ul><p><img src="/images/post/config1.jpg" alt="负载配置"></p><p>保存后即可。</p><p><img src="/images/post/crd.jpg" alt="crd"></p><p>最后贴出生成的yaml文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><span class="hljs-attr">metadata:</span> <span class="hljs-comment"># 元数据，定义基本属性和信息</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">sai-config</span> <span class="hljs-comment"># 名称</span><span class="hljs-attr">data:</span>  <span class="hljs-attr">config.yaml:</span> <span class="hljs-string">|-</span><span class="hljs-string">    name: sai0556</span><span class="hljs-string">    mode: debug</span><span class="hljs-string">    addr: :8080</span><span class="hljs-string">    hi: w~o~w</span><span class="hljs-string"></span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">sai</span>  <span class="hljs-attr">labels:</span> <span class="hljs-comment"># 标签</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">sai</span><span class="hljs-attr">spec:</span> <span class="hljs-comment"># 描述</span>  <span class="hljs-attr">ports:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span>  <span class="hljs-attr">selector:</span>    <span class="hljs-attr">app:</span> <span class="hljs-string">sai</span><span class="hljs-meta">---</span><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><span class="hljs-attr">metadata:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">sai</span><span class="hljs-attr">spec:</span>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 创建应用程序实例个数</span>  <span class="hljs-attr">selector:</span> <span class="hljs-comment"># 标签选择器</span>    <span class="hljs-attr">matchLabels:</span> <span class="hljs-comment"># 选择包含标签app:sai的资源</span>      <span class="hljs-attr">app:</span> <span class="hljs-string">sai</span>  <span class="hljs-attr">template:</span> <span class="hljs-comment"># 模板</span>    <span class="hljs-attr">metadata:</span>      <span class="hljs-attr">labels:</span>        <span class="hljs-attr">app:</span> <span class="hljs-string">sai</span>    <span class="hljs-attr">spec:</span>      <span class="hljs-attr">containers:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">sai</span>        <span class="hljs-attr">image:</span> <span class="hljs-string">13sai/k8s-configmap-demo:0.2</span>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>        <span class="hljs-attr">command:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/app/13sai&#x27;</span>        <span class="hljs-attr">volumeMounts:</span>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span>            <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/app/config.yaml</span>            <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span>            <span class="hljs-attr">subPath:</span> <span class="hljs-string">config.yaml</span>      <span class="hljs-attr">volumes:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span>          <span class="hljs-attr">configMap:</span>            <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span>            <span class="hljs-attr">name:</span> <span class="hljs-string">sai-config</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>领域驱动设计</title>
    <link href="/2021/06/10/345/"/>
    <url>/2021/06/10/345/</url>
    
    <content type="html"><![CDATA[<p>领域驱动设计（Domain Driven Design）的概念出现于 2003 年，与敏捷相比，DDD 在提出之后的很多年都没有称得上“流行”，甚至说从未真正流行过。一部分是因为 DDD 涉及了一些新的名词和概念（比如聚合、限界上下文和领域等），在缺乏具体实践案例的场景下，较难理解这些抽象概念，这导致了学习和应用 DDD 的初期阶段就变得不太顺畅，开发人员可能并不能领会到其中的设计思想及其带来的价值。但是在小范围群体内，逐渐有一批工程师开始能够掌控这种建模方法，并使用 DDD 来设计出具有较高业务复杂性的软件应用。</p><p>2013年后，分布式的基础设施逐渐成熟。Martin Fowler 于 2014 年发表了系统阐述微服务的文章，微服务架构开始兴起。软件工程师们发现将单体应用采用微服务架构进行划分需要大量的实践经验和理论基础作指导，否则不能完全体现微服务架构所带来的优势。不过早期熟悉 DDD 思想的开发者发现，DDD 可以有效地根据业务对复杂软件系统进行拆解，微服务架构与 DDD 相得益彰。按照软件工程的思想，我们在创建微服务时，需要满足高内聚、低耦合的要求。而根据 DDD 的思想，可以将限界上下文与微服务进程对应起来。DDD 中限界上下文的概念很契合匹配微服务要求，这两者都强调从业务角度进行划分，以应对日益复杂的软件系统。由此，DDD 迎来了它的高速发展和推广时期。</p><p>DDD 不是语言，不是框架，不是架构，而是一种思想，一种方法论，它可以分离业务复杂度和技术复杂度；DDD 也并不是一个新的事物，它是面向对象的提升，最终目标还是<strong>高内聚、低耦合</strong>。</p><p>Eric Evans在《领域驱动设计》一书中，提出了经典的四层架构，如下图所示：</p><p><img src="https://images0.cnblogs.com/blog/503745/201311/05143440-6c435a190e634ef6a474815d5a741ac0.gif" alt="DDD领域分层"></p><ul><li>用户界面User Interface<br>负责给用户展示信息，并解释用户命令。</li><li>应用层Application<br>负责协调应用程序的活动。不包括任何业务逻辑，不保存业务对象的状态，但能保存应用程序任务过程的状态。</li><li>领域层Domain<br>负责业务领域的信息和状态的保存和维护。业务对象的持久化和它们的状态可能会委托给基础设施层。</li><li>基础设施层Infrastructure<br>负责支持其他层次，提供基础的消息传递、数据持久化等功能。它提供层之间的信息传递，实现业务对象的持久化，包含对用户界面层的支持性库等。</li></ul><p>我们以购物车下订单功能为例来解释这各个层面的作用：</p><ul><li>用户界面层提供下单的接口</li><li>应用层负责逻辑的整合，如购物车清空、检查库存等</li><li>领域层将购物车相关的业务逻辑封装到一个 ShoppingCar 对象中，调用 shoppingCar.order下订单，业务服务的重心从生成订单表中的记录转移到购物车对象本身</li><li>底层数据库中如何生成这条记录并不属于我们的核心业务逻辑，这对应 DDD 中的基础设施层，由 Repository 或者 Dao 等数据交互对象负责去持久化我们对领域模型下达的指令所产生的数据库变化。</li></ul>]]></content>
    
    
    <categories>
      
      <category>design</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DDD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Protobuf语法</title>
    <link href="/2021/05/27/340/"/>
    <url>/2021/05/27/340/</url>
    
    <content type="html"><![CDATA[<p>Protobuf是Protocol Buffer的简称，它是Google公司开发的一种数据描述语言，用于描述一种轻便高效的结构化数据存储格式，是一种高效的数据格式，平台无关、语言无关、可扩展，常用于RPC系统和持续数据存储系统。</p><h2 id="字段规则"><a href="#字段规则" class="headerlink" title="字段规则"></a>字段规则</h2><h3 id="字段格式"><a href="#字段格式" class="headerlink" title="字段格式"></a>字段格式</h3><blockquote><p>限定修饰符 | 数据类型 | 字段名称 | = | 字段编码值 | [字段默认值]</p></blockquote><h3 id="限定修饰符"><a href="#限定修饰符" class="headerlink" title="限定修饰符"></a>限定修饰符</h3><blockquote><p>required、optional、repeated</p></blockquote><ul><li>Required：表示是一个必须字段</li><li>Optional：表示一个可选字段。对于接收方，如果能够识别可选字段就进行相应的处理，如果无法识别，则忽略该字段</li><li>Repeated：表示该字段可以包含0-N个元素。其中特性和optional一样，但是每一次可以包含多个值。可以看做是在传递一个数组的值</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Protobuf定义了一套基本数据类型：</p><table><thead><tr><th>.proto 类型</th><th>Notes</th><th>C++ Type</th><th>Java Type</th><th>Python Type</th><th>Go Type</th><th>Ruby Type</th><th>C# Type</th><th>PHP Type</th><th>Dart Type</th></tr></thead><tbody><tr><td>double</td><td></td><td>double</td><td>double</td><td>float</td><td>float64</td><td>Float</td><td>double</td><td>float</td><td>double</td></tr><tr><td>float</td><td></td><td>float</td><td>float</td><td>float</td><td>float32</td><td>Float</td><td>float</td><td>float</td><td>double</td></tr><tr><td>int32</td><td>使用可变长度编码。编码负数的效率低 - 如果您的字段可能有负值，请改用sint32。</td><td>int32</td><td>int</td><td>int</td><td>int32</td><td>Fixnum or Bignum (as required)</td><td>int</td><td>integer</td><td>int</td></tr><tr><td>int64</td><td>使用可变长度编码。编码负数的效率低 - 如果您的字段可能有负值，请改用sint64。</td><td>int64</td><td>long</td><td>int/long[]</td><td>int64</td><td>Bignum</td><td>long</td><td>integer/string[]</td><td>Int64</td></tr><tr><td>uint32</td><td>使用可变长度编码</td><td>uint32</td><td>int</td><td>int/long</td><td>uint32</td><td>Fixnum or Bignum (as required)</td><td>uint</td><td>integer</td><td>int</td></tr><tr><td>uint64</td><td>使用可变长度编码.</td><td>uint64</td><td>long</td><td>int/long</td><td>uint64</td><td>Bignum</td><td>ulong</td><td>integer/string[]</td><td>Int64</td></tr><tr><td>sint32</td><td>使用可变长度编码。签名的int值。这些比常规int32更有效地编码负数。</td><td>int32</td><td>int</td><td>int</td><td>int32</td><td>Fixnum or Bignum (as required)</td><td>int</td><td>integer</td><td>int</td></tr><tr><td>sint64</td><td>使用可变长度编码。签名的int值。这些比常规int64更有效地编码负数。</td><td>int64</td><td>long</td><td>int/long</td><td>int64</td><td>Bignum</td><td>long</td><td>integer/string[]</td><td>Int64</td></tr><tr><td>fixed32</td><td>总是四个字节。如果值通常大于228，则比uint32更有效。</td><td>uint32</td><td>int</td><td>int/long</td><td>uint32</td><td>Fixnum or Bignum (as required)</td><td>uint</td><td>integer</td><td>int</td></tr><tr><td>fixed64</td><td>总是八个字节。如果值通常大于256，则比uint64更有效</td><td>uint64</td><td>long</td><td>int/long[]</td><td>uint64</td><td>Bignum</td><td>ulong</td><td>integer/string[]</td><td>Int64</td></tr><tr><td>sfixed32</td><td>总是四个字节</td><td>int32</td><td>int</td><td>int</td><td>int32</td><td>Fixnum or Bignum (as required)</td><td>int</td><td>integer</td><td>int</td></tr><tr><td>sfixed64</td><td>总是八个字节</td><td>int64</td><td>long</td><td>int/long</td><td>int64</td><td>Bignum</td><td>long</td><td>integer/string[]</td><td>Int64</td></tr><tr><td>bool</td><td></td><td>bool</td><td>boolean</td><td>bool</td><td>bool</td><td>TrueClass/FalseClass</td><td>bool</td><td>boolean</td><td>bool</td></tr><tr><td>string</td><td>字符串必须始终包含UTF-8编码或7位ASCII文本，且不能超过232。</td><td>string</td><td>String</td><td>str/unicode</td><td>string</td><td>String (UTF-8)</td><td>string</td><td>string</td><td>String</td></tr><tr><td>bytes</td><td>可以包含不超过232的任意字节序列。</td><td>string</td><td>ByteString</td><td>str</td><td>[]byte</td><td>String (ASCII-8BIT)</td><td>ByteString</td><td>string</td><td>List<int></td></tr></tbody></table><h3 id="字段名称"><a href="#字段名称" class="headerlink" title="字段名称"></a>字段名称</h3><p>字段名称的命名与C、Java等语言的变量命名方式几乎是相同的<br>protobuf 建议字段的命名采用以下划线分隔的驼峰式</p><h3 id="字段编码值"><a href="#字段编码值" class="headerlink" title="字段编码值"></a>字段编码值</h3><p>有了该值，通信双方才能互相识别对方的字段，相同的编码值，其限定修饰符和数据类型必须相同，编码值的取值范围为：1 ~ 2^32 (4294967296)<br>其中 1 ~ 15的编码时间和空间效率都是最高的，编码值越大，其编码的时间和空间效率就越低<br>1900 ~ 2000 编码值为 Google protobuf 系统内部保留值，建议不要在项目中使用</p><h3 id="字段默认值"><a href="#字段默认值" class="headerlink" title="字段默认值"></a>字段默认值</h3><p>当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端</p><h2 id="定义service"><a href="#定义service" class="headerlink" title="定义service"></a>定义service</h2><ul><li>如果想要将消息类型用在 RPC 系统中，可以在 <code>.proto</code>文件中定义一个 RPC 服务接口，protocol buffer 编译器会根据所选择的不同语言生成服务接口代码</li><li>生成的接口代码作为客户端与服务端的约定，服务端必须实现定义的所有接口方法，客户端直接调用同名方法向服务端发起请求（即便业务上不需要参数也必须指定一个请求消息，一般会定义一个空message）</li></ul><p>比如，想要定义一个 RPC 服务并具有一个方法，该方法接收 SearchRequest 并返回一个 SearchResponse，此时可以在<code>.proto</code>文件中进行如下定义：</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">service</span> <span class="hljs-title">SearchService</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">rpc</span> Search(SearchRequest) <span class="hljs-keyword">returns</span> (SearchResponse) </span>&#123;&#125;&#125;</code></pre></div><h2 id="定义Message"><a href="#定义Message" class="headerlink" title="定义Message"></a>定义Message</h2><ul><li>一个 message 类型定义描述了一个请求或响应的消息格式，可以包含多种类型字段</li><li>字段名用小写，转为 go 文件后自动变为大写，message 就相当于结构体</li></ul><h3 id="添加更多-Message-类型"><a href="#添加更多-Message-类型" class="headerlink" title="添加更多 Message 类型"></a>添加更多 Message 类型</h3><p>一个 .proto 文件中可以定义多个消息类型，一般用于同时定义多个相关的消息，例如在同一个 .proto 文件中同时定义搜索请求和响应消息：</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-comment">// 声明使用的 protobuf 版本</span>syntax = <span class="hljs-string">&quot;proto3&quot;</span><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">SearchRequest</span> </span>&#123;<span class="hljs-built_in">string</span> query = <span class="hljs-number">1</span>;<span class="hljs-built_in">int32</span> page_number = <span class="hljs-number">2</span>;<span class="hljs-built_in">int32</span> result_per_page = ;&#125;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">SearchResponse</span> </span>&#123;&#125;</code></pre></div><h3 id="使用其他-Message"><a href="#使用其他-Message" class="headerlink" title="使用其他 Message"></a>使用其他 Message</h3><p>message 支持嵌套使用，作为另一个 message 中的字段类型</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">SearchResponse</span> </span>&#123;<span class="hljs-keyword">repeated</span> Result results = <span class="hljs-number">1</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Result</span> </span>&#123;<span class="hljs-built_in">string</span> url = <span class="hljs-number">1</span>;<span class="hljs-built_in">string</span> title = <span class="hljs-number">2</span>;<span class="hljs-keyword">repeated</span> <span class="hljs-built_in">string</span> snippets = ;&#125;</code></pre></div><h3 id="Message-嵌套的使用"><a href="#Message-嵌套的使用" class="headerlink" title="Message 嵌套的使用"></a>Message 嵌套的使用</h3><p>支持嵌套消息，消息可以包含另一个消息作为字段。也可以在消息内定义一个新的消息。</p><p>内部声明的 message 类型名称只可在内部直接使用：</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">SearchResponse</span> </span>&#123;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Result</span> </span>&#123;<span class="hljs-built_in">string</span> url = <span class="hljs-number">1</span>;<span class="hljs-built_in">string</span> title = <span class="hljs-number">2</span>;<span class="hljs-keyword">repeated</span> <span class="hljs-built_in">string</span> snippets = ;&#125;<span class="hljs-keyword">repeated</span> Result results = <span class="hljs-number">1</span>;&#125;</code></pre></div><p>多层嵌套：</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Outer</span> </span>&#123;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">A</span> </span>&#123;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Inner</span> </span>&#123;<span class="hljs-built_in">int64</span> ival = <span class="hljs-number">1</span>;<span class="hljs-built_in">bool</span> booly = <span class="hljs-number">2</span>;&#125;&#125;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">B</span> </span>&#123;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Inner</span> </span>&#123;<span class="hljs-built_in">int64</span> ival = <span class="hljs-number">1</span>;<span class="hljs-built_in">bool</span> booly = <span class="hljs-number">2</span>;&#125;&#125;&#125;</code></pre></div><h3 id="映射字段"><a href="#映射字段" class="headerlink" title="映射字段"></a>映射字段</h3><p>每个映射字段会在Go的结构体中生成一个<code>map[TKey]TValue</code>类型的字段，其中<code>TKey</code>是字段的键类型<code>TValue</code>是字段的值类型。对于下面这个消息定义：</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Bar</span> </span>&#123;&#125;<span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">Baz</span> </span>&#123;  map&lt;<span class="hljs-built_in">string</span>, Bar&gt; foo = <span class="hljs-number">1</span>;&#125;</code></pre></div><p>编译器生成Go结构体</p><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Baz</span> struct &#123;        <span class="hljs-type">Foo</span> map[string]*<span class="hljs-type">Bar</span>&#125;</code></pre></div><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>给出如下枚举</p><div class="code-wrapper"><pre><code class="hljs protobuf"><span class="hljs-class"><span class="hljs-keyword">message</span> <span class="hljs-title">SearchRequest</span> </span>&#123;  <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Corpus</span> </span>&#123;    UNIVERSAL = <span class="hljs-number">0</span>;    WEB = <span class="hljs-number">1</span>;    IMAGES = <span class="hljs-number">2</span>;    LOCAL = <span class="hljs-number">3</span>;    NEWS = <span class="hljs-number">4</span>;    PRODUCTS = <span class="hljs-number">5</span>;    VIDEO = <span class="hljs-number">6</span>;  &#125;  Corpus corpus = <span class="hljs-number">1</span>;  ...&#125;</code></pre></div><p>编译器将会生成一个枚举类型和一系列该类型的常量。</p><h2 id="proto-文件编译代码"><a href="#proto-文件编译代码" class="headerlink" title=".proto 文件编译代码"></a>.proto 文件编译代码</h2><ul><li>通过定义好的 .proto 文件生成 Go、PHP、Java、Python等代码，需要安装编译器 protoc。</li><li>使用 protobuf 编译器不同的语言生成的代码格式不同，比如Go：生成一个 .pb.go 文件，每个消息类型对应一个结构体。</li></ul><p>具体protoc安装和代码生成可见：<br><a href="https://github.13sai.com/2019/12/20/215/">gRPC初体验</a></p><p>也有看到部分项目使用protobuf去替代json去进行前后端数据交换。</p><hr><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844904101835358221">Protobuf 语法</a></li><li><a href="https://segmentfault.com/a/1190000020386857">Protobuf语言指南</a></li><li><a href="https://juejin.cn/post/6844903944511029262">Protobuf生成Go代码指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Protobuf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang的单引号双引号反引号</title>
    <link href="/2021/04/29/335/"/>
    <url>/2021/04/29/335/</url>
    
    <content type="html"><![CDATA[<blockquote><p>单引号Single quote，表示byte类型或rune类型，对应 uint8和int32类型，默认是 rune 类型。byte用来强调数据是raw data，而不是数字；而rune用来表示Unicode的code point。</p></blockquote><blockquote><p>双引号Double quote，表示字符串，实际上是字符数组。可以用索引号访问某字节，也可以用len()函数来获取字符串所占的字节长度。</p></blockquote><blockquote><p>反引号Back quote，表示字符串字面量，与双引号不同，它不支持任何转义序列，但支持换行书写。字面量 raw literal string 的意思是，你定义时写的啥样，它就啥样，你有换行，它就换行。你写转义字符，它也就展示转义字符。</p></blockquote><div class="code-wrapper"><pre><code class="hljs go">a := <span class="hljs-string">&#x27;a&#x27;</span>b := <span class="hljs-string">&quot;b\naa&quot;</span>c := <span class="hljs-string">`c</span><span class="hljs-string">3ww`</span><span class="hljs-keyword">var</span> d <span class="hljs-keyword">byte</span> = <span class="hljs-string">&#x27;d&#x27;</span>fmt.Println(b)fmt.Println(c)fmt.Printf(<span class="hljs-string">&quot;Single quote type:%T\n&quot;</span>, a)fmt.Printf(<span class="hljs-string">&quot;Double quote type:%T\n&quot;</span>, b)fmt.Printf(<span class="hljs-string">&quot;Back quote type:%T\n&quot;</span>, c)fmt.Printf(<span class="hljs-string">&quot;Single quote type:%T\n&quot;</span>, d)output:------baac        <span class="hljs-number">3</span>wwSingle quote <span class="hljs-keyword">type</span>:<span class="hljs-keyword">int32</span>Double quote <span class="hljs-keyword">type</span>:<span class="hljs-keyword">string</span>Back quote <span class="hljs-keyword">type</span>:<span class="hljs-keyword">string</span>Single quote <span class="hljs-keyword">type</span>:<span class="hljs-keyword">uint8</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC安装rabbitmq扩展</title>
    <link href="/2021/04/29/333/"/>
    <url>/2021/04/29/333/</url>
    
    <content type="html"><![CDATA[<p>PHP结合rabbitMQ需要安装amqp扩展，之前又在windows安装，今天尝试mac安装一下。</p><ol><li>下载</li></ol><p>前去<a href="https://pecl.php.net/package/amqp">amqp</a>，下载需要的版本。</p><ol start="2"><li>安装</li></ol><div class="code-wrapper"><pre><code class="hljs awk">phpize<span class="hljs-regexp">//</span> --with-php-config 路径自己修改.<span class="hljs-regexp">/configure --with-php-config=xxx/</span>php-configmake &amp;&amp; make install</code></pre></div><p>如果没装rabbitmq-c，应该会报错。</p><div class="code-wrapper"><pre><code class="hljs livecodeserver">configure: error: Please reinstall <span class="hljs-keyword">the</span> librabbitmq distribution itself <span class="hljs-keyword">or</span> (re)install librabbitmq development package <span class="hljs-keyword">if</span> <span class="hljs-keyword">it</span> available <span class="hljs-keyword">in</span> your <span class="hljs-keyword">system</span></code></pre></div><p><a href="https://github.com/alanxz/rabbitmq-c/releases">下载rabbitmq-c</a></p><div class="code-wrapper"><pre><code class="hljs awk">cd rabbitmq-c-<span class="hljs-number">0.8</span>.<span class="hljs-number">0</span>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>rabbitmq-cmake &amp;&amp; make install</code></pre></div><p>重新编译amqp</p><div class="code-wrapper"><pre><code class="hljs awk">.<span class="hljs-regexp">/configure --with-php-config=xxx/</span>php-config --with-amqp --with-librabbitmq-dir=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c/</span>make &amp;&amp; make install</code></pre></div><p>make时提示缺少amqp_ssl_socket.h<br>fatal error: ‘amqp_ssl_socket.h’ file not found<br>#include &lt;amqp_ssl_socket.h&gt;</p><p>这里可以看一下 <a href="https://github.com/alanxz/rabbitmq-c/issues/463">https://github.com/alanxz/rabbitmq-c/issues/463</a></p><p>然后可以把rabbitmq-c的librabbitmq下amqp_ssl_socket.h文件copy到amqp扩展目录，重新编译即可。</p><p>安装成功记得在ini加入extension=”amqp.so”，最后可以使用<strong>php -m</strong></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Paxos和Raft协议介绍</title>
    <link href="/2021/04/03/326/"/>
    <url>/2021/04/03/326/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章来源: <a href="https://mp.weixin.qq.com/s/xNf8SBbxxMYGYoq8k0rXUA">陶老师运维笔记- 微信公众号</a></p></blockquote><h1 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1. 背景介绍"></a>1. 背景介绍</h1><h2 id="1-1-分布式事务"><a href="#1-1-分布式事务" class="headerlink" title="1.1 分布式事务"></a>1.1 分布式事务</h2><p>分布式事务指事务的操作位于不同的分布式系统节点上，需要保证事务的 AICD 特性。 分布式事务处理的难点是必须有一种方法可以知道事务在任何地方所做的所有动作，<strong>提交或回滚事务的决定必须产生统一的结果（全部提交或全部回滚）</strong></p><p>解决这种分布式一致性问题：其中比较著名的有二阶提交协议（Two Phase Commitment Protocol）、三阶提交协议（Tree Phase Commitment Protocol）和Paxos算法。</p><h2 id="1-2-二阶段提交"><a href="#1-2-二阶段提交" class="headerlink" title="1.2 二阶段提交"></a>1.2 二阶段提交</h2><p>在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。</p><p>因此，二阶段提交的算法思路可以概括为： <strong>参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</strong> 2PC顾名思义分为两个阶段，其实施思路可概括为：</p><ul><li>投票阶段（voting phase）：参与者将操作结果通知协调者；</li><li>提交阶段（commit phase）：收到参与者的通知后，协调者再向参与者发出通知，根据反馈情况决定各参与者是否要提交还是回滚；</li></ul><h1 id="2-Paxos协议"><a href="#2-Paxos协议" class="headerlink" title="2. Paxos协议"></a>2. Paxos协议</h1><p>PAXOS可以用来解决<strong>分布式环境下，设置某一个值的问题。</strong> 分布式系统中有多个节点就会存在节点间通信的问题，Paxos是基于消息传递的通讯模型的。它的<strong>假设前提</strong>是，在分布式系统中进程之间的通信会出现丢失、延迟、重复等现象，但不会出现传错的现象。<strong>Paxos算法就是为了保证在这样的系统中进程间基于消息传递就某个值达成一致。</strong></p><h2 id="2-1-角色"><a href="#2-1-角色" class="headerlink" title="2.1 角色"></a>2.1 角色</h2><p>Paxos是第一个被证明的共识算法，原理基于两阶段提交并进行扩展。算法中将节点分为三种类型：</p><ul><li>倡议者proposer：提交一个提案，等待大家批准为结案，往往是客户端担任。提案信息包括提案编号和提议的value。</li><li>接受者acceptor：负责对提案进行投票，往往服务器担任。若提案获得多数Acceptors的接受，则称该提案被批准（chosen）。</li><li>学习者learner：被告知提案结果，只能“学习”被批准的提案。不参与投票过程。客户端和服务端都可担任。</li></ul><p>每个节点在协议中可以担任多个角色。</p><h2 id="2-2-Paxos算法"><a href="#2-2-Paxos算法" class="headerlink" title="2.2  Paxos算法"></a>2.2  Paxos算法</h2><blockquote><ul><li><a href="https://segmentfault.com/a/1190000005717258">segmentfault.com/a/119000000…</a></li><li><a href="https://www.cnblogs.com/hzmark/p/paxos.html">www.cnblogs.com/hzmark/p/pa…</a></li></ul></blockquote><p><strong>Paxos的特点：</strong></p><ul><li>一个或多个节点可以提出提议</li><li>系统针对所有提案中的某个提案必须达成一致</li><li>最多只能对一个确定的提案达成一致</li><li>只要超过半数的节点存活且可互相通信，整个系统一定能达成一致状态</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f07e67520" alt="Paxos基本算法"></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f07853ddc" alt="Paxos表决过程"></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f08b5906d" alt="Paxos表决过程"></p><h3 id="2-2-1-Paxos表决"><a href="#2-2-1-Paxos表决" class="headerlink" title="2.2.1 Paxos表决"></a>2.2.1 Paxos表决</h3><ul><li>首先proposers将value发送给Acceptors。</li><li>Acceptors对value进行接受（accept）。acceptor可以回应接受或拒绝。</li><li>一旦节点中的大多数回应接受，共识就能达成，接受的value成为正式的决议（称为“批准”决议）。</li></ul><p>整个过程（一个事务或一个Round）<strong>分为两个阶段：</strong></p><ul><li><strong>phase1（准备阶段）</strong> a) Proposer向超过半数（n/2+1）Acceptor发起prepare消息(发送编号) b)如果prepare符合协议规则Acceptor回复promise消息，否则拒绝</li><li><strong>phase2（决议阶段或投票阶段）</strong> a) 如果超过半数Acceptor回复promise，Proposer向Acceptor发送accept消息(此时包含真实的值) b)Acceptor检查accept消息是否符合规则，消息符合则批准accept请求</li></ul><p>根据上述过程当一个proposer发现存在编号更大的提案时将终止提案。这意味着提出一个编号更大的提案会终止之前的提案过程。有可能陷入活锁，违背了Progress的要求。这种情况下的解决方案是选举出一个leader，仅允许leader提出提案。注意一个learner可能兼任proposer。</p><h3 id="2-2-2-决议的发布"><a href="#2-2-2-决议的发布" class="headerlink" title="2.2.2 决议的发布"></a>2.2.2 决议的发布</h3><p>一个显而易见的方法是当acceptors批准一个value时，将这个消息发送给所有learner。但是这个方法会导致消息量过大。可将accept消息发送给learners的一个子集，然后由这些learners去通知所有learners。</p><p>但是由于消息传递的不确定性，可能会没有任何learner获得了决议批准的消息。当learners需要了解决议通过情况时，可以让一个proposer重新进行一次提案。</p><h2 id="2-3-Paxos与2PC"><a href="#2-3-Paxos与2PC" class="headerlink" title="2.3 Paxos与2PC"></a>2.3 Paxos与2PC</h2><p>在Paxos算法中，如果我们指定集群中同一时间只能有一个leader，并且要求所有节点都要投票呢？是的，我们就得到了2PC。<a href="http://research.microsoft.com/pubs/64636/tr-2003-96.pdf">2PC是Paxos的一个特例</a></p><p>两个阶段分别是准备（prepare）和提交（commit）。准备阶段解决大家对哪个提案进行投票的问题，提交阶段解决确认最终值的问题。</p><h1 id="3-Raft协议"><a href="#3-Raft协议" class="headerlink" title="3. Raft协议"></a>3. Raft协议</h1><blockquote><ul><li><a href="https://raft.github.io/raft.pdf">raft.github.io/raft.pdf</a></li><li><a href="http://thesecretlivesofdata.com/raft/">thesecretlivesofdata.com/raft/</a></li><li><a href="https://www.cnblogs.com/MaggieLXC/p/7512399.html">www.cnblogs.com/MaggieLXC/p…</a></li></ul></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/17159191555bd9d5" alt="raft"></p><h2 id="3-1-Raft角色"><a href="#3-1-Raft角色" class="headerlink" title="3.1 Raft角色"></a>3.1 Raft角色</h2><p>Raft算法是Paxos算法的一种简化实现。<strong>包括三种角色：leader，candidate和follower。</strong></p><ul><li>follower: 所有节点都以follower的状态开始，如果没有收到leader消息则会变成candidate状态。</li><li>candidate: 会向其他节点拉选票，如果得到大部分的票则成为leader，这个过程是Leader选举。</li><li>leader: 所有对系统的修改都会先经过leader。</li></ul><h2 id="3-2-Raft算法"><a href="#3-2-Raft算法" class="headerlink" title="3.2 Raft算法"></a>3.2 Raft算法</h2><p>Raft有两个基本过程：</p><ul><li><strong>Leader选举：</strong> 每个candidate随机经过一定时间都会提出选举方案，最近阶段中的票最多者被选为leader。</li><li><strong>同步log：</strong> leader会找到系统中log（各种事件的发生记录）最新的记录，并强制所有的follow来刷新到这个记录。</li></ul><blockquote><p><strong>Raft算法过程:</strong> 有三种状态：leader，candidate和follower。</p><ol><li>最开始都是follower状态.</li><li>followers没有听到leader就变成candidate</li><li>candidate then requests votes from other nodes</li><li>nodes will reply with their vote</li><li>Candidate becomes the leader if it gets votes from a majority of nodes</li><li>This process is called Leader Election.</li><li>All changes to the system now go through the leader.</li><li>Each change is added as an entry in the node’s log.</li><li>This log entry is currently uncommitted so it won’t update the node’s value.</li><li>To commit the entry the node first replicates it to the follower nodes…</li><li>then the leader waits until a majority of nodes have written the entry.</li><li>The entry is now committed on the leader node and the node state is “5”.</li><li>The leader then notifies the followers that the entry is committed.</li><li>The cluster has now come to consensus about the system state.</li><li>This process is called Log Replication.</li></ol></blockquote><h3 id="3-2-1-Leader-Election"><a href="#3-2-1-Leader-Election" class="headerlink" title="3.2.1 Leader Election"></a>3.2.1 Leader Election</h3><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f08fb7e30" alt="All our nodes start in the follower state."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f09576e35" alt="If followers don&#39;t hear from a leader then they can become a candidate."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f339c17cf" alt="The candidate then requests votes from other nodes."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f491ce29c" alt="The candidate becomes the leader if it gets votes from a majority of nodes."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f4d8fce8c" alt="Leader Election"></p><h3 id="3-2-2-Log-Replication"><a href="#3-2-2-Log-Replication" class="headerlink" title="3.2.2 Log Replication"></a>3.2.2 Log Replication</h3><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f407d2c48" alt="All changes to the system now go through the leader"></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f4e7ced18" alt="All changes to the system now go through the leader"></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f6cdd97b9" alt="Each change is added as an entry in the node&#39;s log."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906f989ec3c1" alt="This log entry is currently uncommitted so it won&#39;t update the node&#39;s value."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fa6c22aad" alt="To commit the entry the node first replicates it to the follower nodes..."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fb6b11fa3" alt="then the leader waits until a majority of nodes have written the entry."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fba987040" alt="The entry is now committed on the leader node and the node state is"></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fc66b6b9b" alt="The leader then notifies the followers that the entry is committed."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fd0bb1914" alt="The cluster has now come to consensus about the system state."></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/8/1715906fcaa6a40e" alt="This process is called Log Replication."></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis对象底层数据结构</title>
    <link href="/2021/03/23/source/"/>
    <url>/2021/03/23/source/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis对象底层数据结构"><a href="#Redis对象底层数据结构" class="headerlink" title="Redis对象底层数据结构"></a>Redis对象底层数据结构</h2><table><thead><tr><th>编码常量</th><th>编码所对应的底层数据结构</th></tr></thead><tbody><tr><td>REDIS_ENCODING_INT</td><td>long 类型的整数</td></tr><tr><td>REDIS_ENCODING_EMBSTR</td><td>embstr 编码的简单动态字符串</td></tr><tr><td>REDIS_ENCODING_RAW</td><td>简单动态字符串</td></tr><tr><td>REDIS_ENCODING_HT</td><td>字典</td></tr><tr><td>REDIS_ENCODING_LINKEDLIST</td><td>双端链表</td></tr><tr><td>REDIS_ENCODING_ZIPLIST</td><td>压缩列表</td></tr><tr><td>REDIS_ENCODING_INTSET</td><td>整数集合</td></tr><tr><td>REDIS_ENCODING_SKIPLIST</td><td>跳跃表</td></tr></tbody></table><h2 id="redis-string类型转换"><a href="#redis-string类型转换" class="headerlink" title="redis string类型转换"></a>redis string类型转换</h2><p> 我们可能以为redis在内部存储string都是用sds的数据结构实现的，其实在整个redis的数据存储过程中为了提高性能，内部做了很多优化。整体选择顺序应该是：</p><ul><li><p>整数，存储字符串长度小于21且能够转化为整数的字符串。</p></li><li><p>EmbeddedString，存储字符串长度小于39的字符串（REDIS_ENCODING_EMBSTR_SIZE_LIMIT）。</p></li><li><p>SDS，剩余情况使用sds进行存储。</p></li></ul><p> <strong>embstr和sds的区别在于内存的申请和回收</strong></p><ul><li>embstr的创建只需分配一次内存，而raw为两次（一次为sds分配对象，另一次为redisObject分配对象，embstr省去了第一次）。相对地，释放内存的次数也由两次变为一次。</li><li>embstr的redisObject和sds放在一起，更好地利用缓存带来的优势</li><li>缺点：redis并未提供任何修改embstr的方式，即embstr是只读的形式。对embstr的修改实际上是先转换为raw再进行修改。</li></ul><h2 id="redis-list数据结构"><a href="#redis-list数据结构" class="headerlink" title="redis list数据结构"></a>redis list数据结构</h2><p> redis list数据结构底层采用压缩列表ziplist或linkedlist两种数据结构进行存储，首先以ziplist进行存储，在不满足ziplist的存储要求后转换为linkedlist列表。</p><p>当列表对象同时满足以下两个条件时，列表对象使用ziplist进行存储，否则用linkedlist存储。</p><ul><li>列表对象保存的所有字符串元素的长度小于64字节</li><li>列表对象保存的元素数量小于512个。</li></ul><h2 id="redis-hash底层存储结构"><a href="#redis-hash底层存储结构" class="headerlink" title="redis hash底层存储结构"></a>redis hash底层存储结构</h2><p>redis的哈希对象的底层存储可以使用ziplist（压缩列表）和hashtable。当hash对象可以同时满足一下两个条件时，哈希对象使用ziplist编码。</p><ul><li>哈希对象保存的所有键值对的键和值的字符串长度都小于64字节</li><li>哈希对象保存的键值对数量小于512个</li></ul><blockquote><p>redis的hash架构就是标准的hashtab的结构，通过挂链解决冲突问题。</p></blockquote><h2 id="redis-set底层存储"><a href="#redis-set底层存储" class="headerlink" title="redis set底层存储"></a>redis set底层存储</h2><p>redis的集合对象set的底层存储结构特别神奇，底层使用了intset和hashtable两种数据结构存储的，intset我们可以理解为数组，hashtable就是普通的哈希表（key为set的值，value为null）。是不是觉得用hashtable存储set是一件很神奇的事情。</p><p> set的底层存储intset和hashtable是存在编码转换的，使用<strong>intset</strong>存储必须满足下面两个条件，否则使用hashtable，条件如下：</p><ul><li>结合对象保存的所有元素都是整数值</li><li>集合对象保存的元素数量不超过512个</li></ul><h2 id="zset底层存储结构"><a href="#zset底层存储结构" class="headerlink" title="zset底层存储结构"></a>zset底层存储结构</h2><p> zset底层的存储结构包括ziplist或skiplist，在同时满足以下两个条件的时候使用ziplist，其他时候使用skiplist，两个条件如下：</p><ul><li>有序集合保存的元素数量小于128个</li><li>有序集合保存的所有元素的长度小于64字节</li></ul><p>当ziplist作为zset的底层存储结构时候，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个元素保存元素的分值。</p><p>当skiplist作为zset的底层存储结构的时候，使用skiplist按序保存元素及分值，使用dict来保存元素和分值的映射关系。</p><ul><li><a href="https://www.jianshu.com/p/160fb0f73841">redis string底层数据结构</a></li><li><a href="https://www.jianshu.com/p/c2ede9707e26">redis list底层数据结构</a></li><li><a href="https://www.jianshu.com/p/8299aea62ab8">redis hash底层数据结构</a></li><li><a href="https://www.jianshu.com/p/28138a5371d0">redis set底层数据结构</a></li><li><a href="https://www.jianshu.com/p/fb7547369655">redis zset底层数据结构</a></li></ul><h2 id="Redis为何要定义字符串为SDS"><a href="#Redis为何要定义字符串为SDS" class="headerlink" title="Redis为何要定义字符串为SDS"></a>Redis为何要定义字符串为SDS</h2><p>Redis是底层使用的是C语言，在C语言中没有字符串这种数据类型，字符串大都是通过字符数组实现的，但是使用字符数组有以下不足：</p><ol><li>字符数组的长度都是固定，容易发生空指针异常</li><li>获取字符数组的长度的时候需要遍历数组，时间复杂度高</li><li>字符数组长度发生改变之后需要重新分配内存</li><li>使用\0表示结尾，在存储二进制会出现问题。</li></ol><div class="code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//动态字符串，数组的长度是可变的。</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sdshdr</span> &#123;</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//记录当前串的长度。</span>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-built_in">free</span>;<span class="hljs-comment">//记录剩余的有效长度。</span>    <span class="hljs-keyword">char</span> buf[];<span class="hljs-comment">//真正的字符串位置。</span>&#125;;</code></pre></div><p>Redis就自己实现了SDS来解决上面的问题，SDS相对C字符串数组的优点：</p><ul><li>长度达到一定标准会有相应的扩容（小于1M，free增加len，大于1M，每次增加1M），从而解决内存溢出的问题。</li><li>在SDS的内部定义了字符串的长度，使用时可以直接获取，复杂度O(1)，解决获取长度时间复杂度高的问题。</li><li>SDS是空间预分配，惰性释放内存的，从而减少分配内存的次数</li><li>SDS根据长度判断结束的位置，从而解决二进制不安全的问题。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goroutine</title>
    <link href="/2021/03/19/323/"/>
    <url>/2021/03/19/323/</url>
    
    <content type="html"><![CDATA[<p>From:</p><ul><li><a href="https://www.cnblogs.com/FireworksEasyCool/p/11508806.html">弄懂goroutine调度原理</a></li><li><a href="https://www.cnblogs.com/FireworksEasyCool/p/11508342.html">线程实现模型</a></li></ul><h3 id="goroutine简介"><a href="#goroutine简介" class="headerlink" title="goroutine简介"></a>goroutine简介</h3><blockquote><p>golang语言作者Rob Pike说，<strong>“Goroutine是一个与其他goroutines 并发运行在同一地址空间的Go函数或方法。一个运行的程序由一个或更多个goroutine组成。它与线程、协程、进程等不同。它是一个goroutine“</strong>。</p></blockquote><ul><li>goroutine通过通道来通信，而协程通过让出和恢复操作来通信；</li><li>goroutine 通过Golang 的调度器进行调度，而协程通过程序本身调度；</li></ul><p>简单的说就是Golang自己实现了协程并叫做goruntine（本文称Go协程），且比协程更强大。</p><h3 id="goroutine调度原理"><a href="#goroutine调度原理" class="headerlink" title="goroutine调度原理"></a>goroutine调度原理</h3><p>上面说到Go协程是通过Golang的调度器进行调度的，其中调度器的线程模型为两级线程模型。</p><blockquote><p>有关两级线程模型的介绍，可以看文章最后。</p></blockquote><p>我们来看下Golang实现的两级线程模型是怎样的。首先要知道这三个字母代表的含义</p><ul><li><strong>M</strong>：代表内核级的线程</li><li><strong>P</strong>：全程Processor，代表运行Go协程所需要的资源（上下文环境）</li><li><strong>G</strong>：代表Go协程<br><img src="https://img2020.cnblogs.com/blog/1508611/202005/1508611-20200512094747494-1290849608.png" alt="图一"><br>我们先看下为实现调度Golang定义了这些数据结构存M，P，G</li></ul><table><thead><tr><th align="left">名称</th><th align="left">作用范围</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">全局M列表</td><td align="left">Go的运行时</td><td align="left">存放所有M的单向链表</td></tr><tr><td align="left">全局P列表</td><td align="left">Go的运行时</td><td align="left">存放所有P的数组</td></tr><tr><td align="left">全局G列表</td><td align="left">Go的运行时</td><td align="left">存放所有G的切片</td></tr><tr><td align="left">调度器的空闲M列表</td><td align="left">调度器</td><td align="left">存放空闲M的单向链表</td></tr><tr><td align="left">调度器的空闲P列表</td><td align="left">调度器</td><td align="left">存放空闲P的单向链表</td></tr><tr><td align="left">调度器的自由G列表</td><td align="left">调度器</td><td align="left">存放自由G的单向链表（有两个）</td></tr><tr><td align="left">调度器的可运行G队列</td><td align="left">调度器</td><td align="left">存放可运行G的队列</td></tr><tr><td align="left">P的自由G列表</td><td align="left">本地P</td><td align="left">存放当前P中自由G的单向链表</td></tr><tr><td align="left">P的可运行G队列</td><td align="left">本地P</td><td align="left">存放当前P中可运行G的队列</td></tr></tbody></table><p>然后从上往下解析Go的两级线程模型图</p><ol><li>M和内核线程之间是一对一的关系，一个M在其生命周期中，只会和一个内核线程关联，所以不会出现对内核线程的频繁切换；</li></ol><blockquote><p>Golang的运行时执行系统监控和垃圾回收等任务时候会导致创建M，M空闲时不会被销毁，而是放到一个<code>调度器的空闲M列表</code>中，等待与P关联，M默认数量为10000</p></blockquote><ol start="2"><li>P和M之间是多对多的关系，P和G之间是一对多的关系，他们的关联是易变的，由Golang的调度器完成调度；</li></ol><blockquote><p>Golang的运行时按规则调度，让P和不同的M建立或断开关联，使得P中的G能够及时获得运行时机</p></blockquote><ol start="3"><li>P的数量默认为CPU总核心数，最大为256，当P没有可运行的G时候（P的可运行G队列为空），P会被放到<code>调度器的空闲P列表</code>中，等待M与它关联；</li></ol><blockquote><p>P有可能会被销毁，如运行时用runtime.GOMAXPROCS把P的数量从32降到16时，剩余16个会被销毁，它们原来的G会先转到调度器<code>可运行的G队列</code>和<code>自由G列表</code></p></blockquote><ol start="4"><li>每个P中有<code>可运行的G队列</code>（如图中最下面的那行G）和<code>自由G列表</code>（图中未画出来），当G的代码执行完后，该G不会被销毁，而是被放到<code>P的自由G列表</code>或<code>调度器的自由G列表</code>。如果程序新建了Go协程，调度器会在自由G列表中取一个G，然后把Go协程的函数赋值到G中（如果自由G列表为空，就创建一个G）；</li></ol><blockquote><p>可见Golang调度器在调度时很大程度复用了M，P，G</p></blockquote><ol start="5"><li>在Go程序初始化后，调度器首先进行一轮调度，此时用M去搜索可运行的G。其中我们的main函数也是一个G，找到可运行的G后就执行它；</li></ol><blockquote><p>至于怎么找可运行的G呢？答案是到处找，想尽办法找（这里只列出一部分地方）。</p><ul><li>从<code>本地P的可运行的G队列</code>找</li><li>从<code>调度器的可运行的G队列</code>找</li><li>从<code>其他P的可运行的G队列</code>找</li></ul></blockquote><ol start="6"><li><code>P的可运行G队列</code>最大只能存放长度为256的G，当队列满后，调度器会把一半的G转到<code>调度器的可运行G队列</code>。</li></ol><h3 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h3><p>上面大概描述了关于goroutine调度的流程。现在还存在一个问题，那就是当Go协程很多（并发量大）时候，显然G是不能一直执行下去的，因为也需要把执行机会留给其他的G。此时Golang运行时的系统监控就起作用了。<br>一般情况，当G运行时间超过10ms后，该G就会被系统告知需要停止了，让其他G运行。（这里情况比较复杂，并不能确保每个G都能被公平执行）</p><blockquote><p>以下特殊情况该G不需要停止</p><ul><li>P的可运行G队列为空（没有其他G可运行）</li><li>有空闲的M在寻找可运行的G（没有其他G可运行）</li><li>空闲的P（还有P闲着）</li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Golang以两级线程实现模型，自己实现goruntine和调度器，优势在于并行和非常低的资源使用。</p><blockquote><p><strong>主要体现</strong></p><ul><li>内存消耗方面（每个Go协程占的内存远小于线程占的内存）</li><li>切换(调度)开销方面</li><li>线程切换涉及模式切换(从用户态切换到内核态)</li></ul></blockquote><p>此外，Go协程执行任务完成的顺序并不都是按我们预期的那样（程序不加以控制的情况下），特别在一些耗时较长的任务中。且每个Go协程执行的时间也不是绝对公平的。</p><hr><h3 id="线程实现模型"><a href="#线程实现模型" class="headerlink" title="线程实现模型"></a>线程实现模型</h3><p>线程实现模型主要分为：<code>用户级线程模型</code>，<code>内核级线程模型</code>和<code>两级线程模型</code>。他们的区别在于线程与内核线程之间的对应关系。</p><p>以下我们将分析这三种线程实现模型的特点：</p><h4 id="用户级线程模型"><a href="#用户级线程模型" class="headerlink" title="用户级线程模型"></a>用户级线程模型</h4><ul><li>多对一关系<br>用户级线程模型为多对一关系。即，一个进程中的所有线程对应一个内核线程；</li><li>处理速度快、移植性强；<br>线程的创建、调度、同步等操作由应用程序来处理，不需要让CPU从用户态切换到内核态。所以用户级线程模型在速度快，且移植性强；</li><li>并非真正的并发运行<br>如果线程IO操作过程中被阻塞，那么用户空间的其他线程都会被阻塞，因为这些线程无法被内核调度。<br><img src="https://img2020.cnblogs.com/blog/1508611/202005/1508611-20200512094624436-1426857745.png" alt="用户级线程模"></li></ul><h4 id="内核级线程模型"><a href="#内核级线程模型" class="headerlink" title="内核级线程模型"></a>内核级线程模型</h4><p>（1）一对一关系<br>内核级线程模型为一对一关系，一个用户线程对应一个内核线程；<br>（2）资源消耗较大，速度较慢<br>进程对线程的创建、终止、切换和同步都必须通过内核提供的系统调用来完成，对内核的调度的调度器造成很大的负担；<br>（3）是真正的并发运行<br>用户线程和内核线程是一对一的关系，线程由内核来管理和调度。当某一线程阻塞时候，不会影响到其他线程。<br><img src="https://img2020.cnblogs.com/blog/1508611/202005/1508611-20200512094646292-107659118.png" alt="模型"></p><h4 id="两级线程模型"><a href="#两级线程模型" class="headerlink" title="两级线程模型"></a>两级线程模型</h4><ol><li>多对多的关系<br>两级线程模型是集前面两种模型的优点而设计的，是多对多的关系；</li><li>资源消耗较小，速度较快，是真正的并发运行<br>两级线程模型中，一个进程对应多个内核线程，进程中的线程由程序管理和调度并通过映射关系映射到内核线程上。这样即便有线程阻塞后，也不会影响到其他线程；</li><li>实现的复杂度大<br>用户线程与内核线程的映射关系需要程序来实现，实现的复杂度大。幸运的是，Golang为我们实现了两级线程模型，这使得它在处理并发问题上更有优势。<br><img src="https://img2020.cnblogs.com/blog/1508611/202005/1508611-20200512094624436-1426857745.png" alt="线程模型"></li></ol>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的过期策略以及内存淘汰机制</title>
    <link href="/2021/03/14/volatile/"/>
    <url>/2021/03/14/volatile/</url>
    
    <content type="html"><![CDATA[<p>redis采用的是定期删除+惰性删除策略。</p><p><strong>为什么不用定时删除策略?</strong></p><p>定时删除,用一个定时器来负责监视key,过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除key，因此没有采用这一策略.</p><p><strong>定期删除+惰性删除是如何工作的呢?</strong></p><p>定期删除，redis默认每个100ms检查，是否有过期的key，有过期key则删除。需要说明的是，redis不是每个100ms将所有的key检查一次，而是随机抽取进行检查(如果每隔100ms,全部key进行检查，redis岂不是卡死)。因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</p><p>于是，惰性删除派上用场。也就是说在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</p><p><strong>采用定期删除+惰性删除就没其他问题了么?</strong></p><p>不是的，如果定期删除没删除key。然后你也没即时去请求key，也就是说惰性删除也没生效。这样，redis的内存会越来越高。那么就应该采用内存淘汰机制。</p><p>在redis.conf中有一行配置</p><div class="code-wrapper"><pre><code class="hljs pgsql">maxmemory-<span class="hljs-keyword">policy</span> <span class="hljs-keyword">volatile</span>-lru</code></pre></div><p>该配置就是配内存淘汰策略的</p><ul><li>noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键</li><li>allkeys-lru：加入键的时候，如果过限，首先通过LRU算法驱逐最久没有使用的键</li><li>volatile-lru：加入键的时候如果过限，首先从设置了过期时间的键集合中驱逐最久没有使用的键</li><li>allkeys-random：加入键的时候如果过限，从所有key随机删除</li><li>volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐</li><li>volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键</li><li>volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键</li><li>allkeys-lfu：从所有键中驱逐使用频率最少的键</li></ul><p>一般的经验规则:</p><ul><li>使用<code>allkeys-lru</code>策略：当预期请求符合一个幂次分布(二八法则等)，比如一部分的子集元素比其它其它元素被访问的更多时，可以选择这个策略。</li><li>使用<code>allkeys-random</code>：循环连续的访问所有的键时，或者预期请求分布平均（所有元素被访问的概率都差不多）</li><li>使用<code>volatile-ttl</code>：要采取这个策略，缓存对象的<code>TTL</code>值最好有差异</li></ul><p><code>volatile-lru</code> 和 <code>volatile-random</code>策略，当你想要使用单一的<code>Redis</code>实例来同时实现缓存淘汰和持久化一些经常使用的键集合时很有用。未设置过期时间的键进行持久化保存，设置了过期时间的键参与缓存淘汰。不过一般运行两个实例是解决这个问题的更好方法。</p><p>为键设置过期时间也是需要消耗内存的，所以使用<code>allkeys-lru</code>这种策略更加节省空间，因为这种策略下可以不为键设置过期时间。</p><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><p><code>Redis</code>配置中和<code>LRU</code>有关的有三个：</p><ul><li><code>maxmemory</code>: 配置<code>Redis</code>存储数据时指定限制的内存大小，比如<code>100m</code>。当缓存消耗的内存超过这个数值时, 将触发数据淘汰。该数据配置为0时，表示缓存的数据量没有限制, 即LRU功能不生效。64位的系统默认值为0，32位的系统默认内存限制为3GB</li><li><code>maxmemory_policy</code>: 触发数据淘汰后的淘汰策略</li><li><code>maxmemory_samples</code>: 随机采样的精度，也就是随即取出key的数目。该数值配置越大, 越接近于真实的LRU算法，但是数值越大，相应消耗也变高，对性能有一定影响，样本值默认为5。</li></ul><p>我们知道，<code>LRU</code>算法需要一个双向链表来记录数据的最近被访问顺序，但是出于节省内存的考虑，<code>Redis</code>的<code>LRU</code>算法并非完整的实现。<code>Redis</code>并不会选择最久未被访问的键进行回收，相反它会尝试运行一个近似<code>LRU</code>的算法，通过对少量键进行取样，然后回收其中的最久未被访问的键。通过调整每次回收时的采样数量<code>maxmemory-samples</code>，可以实现调整算法的精度。</p><p>根据<code>Redis</code>作者的说法，每个<code>Redis Object</code>可以挤出24 bits的空间，但24 bits是不够存储两个指针的，而存储一个低位时间戳是足够的，<code>Redis Object</code>以秒为单位存储了对象新建或者更新时的<code>unix time</code>，也就是<code>LRU clock</code>，24 bits数据要溢出的话需要194天，而缓存的数据更新非常频繁，已经足够了。</p><p><code>Redis</code>的键空间是放在一个哈希表中的，要从所有的键中选出一个最久未被访问的键，需要另外一个数据结构存储这些源信息，这显然不划算。最初，<code>Redis</code>只是随机的选3个key，然后从中淘汰，后来算法改进到了<code>N个key</code>的策略，默认是5个。</p><p><code>Redis</code>3.0之后又改善了算法的性能，会提供一个待淘汰候选key的<code>pool</code>，里面默认有16个key，按照空闲时间排好序。更新时从<code>Redis</code>键空间随机选择N个key，分别计算它们的空闲时间<code>idle</code>，key只会在<code>pool</code>不满或者空闲时间大于<code>pool</code>里最小的时，才会进入<code>pool</code>，然后从<code>pool</code>中选择空闲时间最大的key淘汰掉。</p><p>真实<code>LRU</code>算法与近似<code>LRU</code>的算法可以通过下面的图像对比： <img src="https://upload-images.jianshu.io/upload_images/12062369-7fae1afe70569623.png" alt="img"></p><p>浅灰色带是已经被淘汰的对象，灰色带是没有被淘汰的对象，绿色带是新添加的对象。可以看出，<code>maxmemory-samples</code>值为5时<code>Redis 3.0</code>效果比<code>Redis 2.8</code>要好。使用10个采样大小的<code>Redis 3.0</code>的近似<code>LRU</code>算法已经非常接近理论的性能了。</p><p>数据访问模式非常接近幂次分布时，也就是大部分的访问集中于部分键时，<code>LRU</code>近似算法会处理得很好。</p><p><strong>Redis为什么不使用原生LRU算法？</strong></p><ul><li>原生LRU算法需要 双向链表 来管理数据，需要<strong>额外内存</strong></li><li>数据访问时涉及<strong>数据移动，有性能损耗</strong></li><li>Redis现有<strong>数据结构需要改造</strong></li></ul><h3 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h3><p>在<code>LFU</code>算法中，可以为每个key维护一个计数器。每次key被访问的时候，计数器增大。计数器越大，可以约等于访问越频繁。</p><p>上述简单算法存在两个问题：</p><ul><li>在<code>LRU</code>算法中可以维护一个双向链表，然后简单的把被访问的节点移至链表开头，但在<code>LFU</code>中是不可行的，节点要严格按照计数器进行排序，新增节点或者更新节点位置时，时间复杂度可能达到O(N)。</li><li>只是简单的增加计数器的方法并不完美。访问模式是会频繁变化的，一段时间内频繁访问的key一段时间之后可能会很少被访问到，只增加计数器并不能体现这种趋势。</li></ul><p>第一个问题很好解决，可以借鉴<code>LRU</code>实现的经验，维护一个待淘汰key的pool。第二个问题的解决办法是，记录key最后一个被访问的时间，然后随着时间推移，降低计数器。</p><p><code>Redis</code>对象的结构如下：</p><div class="code-wrapper"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> redisObject &#123;    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">type</span>:<span class="hljs-number">4</span>;    <span class="hljs-keyword">unsigned</span> encoding:<span class="hljs-number">4</span>;    <span class="hljs-keyword">unsigned</span> lru:LRU_BITS; <span class="hljs-comment">/* LRU time (relative to global lru_clock) or</span><span class="hljs-comment">                            * LFU data (least significant 8 bits frequency</span><span class="hljs-comment">                            * and most significant 16 bits access time). */</span>    <span class="hljs-keyword">int</span> refcount;    <span class="hljs-keyword">void</span> *ptr;&#125; robj;</code></pre></div><p>在<code>LRU</code>算法中，24 bits的<code>lru</code>是用来记录<code>LRU time</code>的，在<code>LFU</code>中也可以使用这个字段，不过是分成16 bits与8 bits使用：</p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-section">     16 bits      8 bits</span><span class="hljs-section">+----------------+--------+</span><span class="hljs-section">+ Last decr time | LOG_C  |</span><span class="hljs-section">+----------------+--------+</span></code></pre></div><p>高16 bits用来记录最近一次计数器降低的时间<code>ldt</code>，单位是分钟，低8 bits记录计数器数值<code>counter</code>。</p><h3 id="LFU配置"><a href="#LFU配置" class="headerlink" title="LFU配置"></a>LFU配置</h3><p><code>Redis</code>4.0之后为<code>maxmemory_policy</code>淘汰策略添加了两个<code>LFU</code>模式：</p><ul><li><code>volatile-lfu</code>：对有过期时间的key采用<code>LFU</code>淘汰算法</li><li><code>allkeys-lfu</code>：对全部key采用<code>LFU</code>淘汰算法</li></ul><p>还有2个配置可以调整<code>LFU</code>算法：</p><div class="code-wrapper"><pre><code class="hljs maxima">lfu-<span class="hljs-built_in">log</span>-<span class="hljs-built_in">factor</span> <span class="hljs-number">10</span>lfu-decay-<span class="hljs-built_in">time</span> <span class="hljs-number">1</span></code></pre></div><p><code>lfu-log-factor</code>可以调整计数器<code>counter</code>的增长速度，<code>lfu-log-factor</code>越大，<code>counter</code>增长的越慢。</p><p><code>lfu-decay-time</code>是一个以分钟为单位的数值，可以调整<code>counter</code>的减少速度</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/linxiyue/p/10945216.html">Redis中的LRU淘汰策略分析</a></li><li><a href="https://www.cnblogs.com/linxiyue/p/10955533.html">Redis中的LFU算法</a></li><li><a href="https://www.cnblogs.com/phyger/p/14068656.html">玩转Redis-8种数据淘汰策略及近似LRU、LFU原理</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s的安装（Mac）</title>
    <link href="/2021/03/13/320/"/>
    <url>/2021/03/13/320/</url>
    
    <content type="html"><![CDATA[<p>印象中之前mac装k8s挺麻烦，之前装的版本较低v1.14.7。最近总提示我更新，刚好更新一下，顺便记录下过程。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ol><li>下载安装[docker-desktop]<a href="https://www.docker.com/products/docker-desktop">https://www.docker.com/products/docker-desktop</a></li><li>修改Docker Engine配置，修改镜像源<div class="code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: [    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span>,    <span class="hljs-string">&quot;http://f1361db2.m.daocloud.io&quot;</span>  ],  <span class="hljs-attr">&quot;experimental&quot;</span>: <span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;features&quot;</span>: &#123;    <span class="hljs-attr">&quot;buildkit&quot;</span>: <span class="hljs-literal">true</span>  &#125;&#125;</code></pre></div></li><li>安装k8s.gcr.io等组件<div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AliyunContainerService/</span>k8s-<span class="hljs-keyword">for</span>-docker-desktop.git<span class="hljs-regexp">//</span>切换到你的k8s版本，我的是v1.<span class="hljs-number">19.7</span>git checkout v1.<span class="hljs-number">19.7</span></code></pre></div></li></ol><p>执行</p><div class="code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./load_images.sh</span></code></pre></div><p>安装k8s依赖。<br>4. Enable Kubernetes，重启，Kubernetes启动比Docker慢多了，稍微等一会就好。</p><h2 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes/dashboard"></a>安装kubernetes/dashboard</h2><p>项目地址：<a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p><div class="code-wrapper"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v2.2.0/</span>aio<span class="hljs-regexp">/deploy/</span>recommended.yaml</code></pre></div><p>如果执行超时，可以把yaml文件下载到本地运行。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> get pod --namespace=kubernetes-dashboard<span class="hljs-attribute">output</span>:<span class="hljs-attribute">NAME</span>                                         READY   STATUS    RESTARTS   AGE<span class="hljs-attribute">dashboard</span>-metrics-scraper-<span class="hljs-number">79</span>c<span class="hljs-number">5968</span>bdc-xvrzd   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m<span class="hljs-number">13</span>s<span class="hljs-attribute">kubernetes</span>-dashboard-<span class="hljs-number">9</span>f<span class="hljs-number">9799597</span>-<span class="hljs-number">9</span>kmbk         <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>m<span class="hljs-number">13</span>s</code></pre></div><p>可以看到成功安装ubernetes-dashboard。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl proxy</span></code></pre></div><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>打开浏览器：<a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</a></p><p>选择Token登录，用下方命令获取token，登录成功，可以看到界面。<br><img src="https://github.com/kubernetes/dashboard/raw/master/docs/images/dashboard-ui.png" alt="kubernetes-dashboard"></p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><div class="code-wrapper"><pre><code class="hljs reasonml">kubectl -n kube-system describe <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> -<span class="hljs-params">n</span> <span class="hljs-params">kube</span>-<span class="hljs-params">system</span> <span class="hljs-params">get</span> <span class="hljs-params">secret</span> -<span class="hljs-params">n</span> <span class="hljs-params">kube</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">name</span> | <span class="hljs-params">grep</span> <span class="hljs-params">namespace</span>)</span> <span class="hljs-pattern-match">| grep token</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>devops</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础类型、常用知识</title>
    <link href="/2021/03/08/base/"/>
    <url>/2021/03/08/base/</url>
    
    <content type="html"><![CDATA[<h2 id="主要类型"><a href="#主要类型" class="headerlink" title="主要类型"></a>主要类型</h2><ul><li>字符串（strings，bitmaps）</li><li>散列（hashes）</li><li>列表（lists）</li><li>集合（sets）</li><li>有序集合（sorted sets）</li><li>hyperloglogs</li><li>发布订阅（pub/sub）</li><li>地理空间（geospatial）</li><li>Stream（5.0版本新增）</li></ul><p>关于命令我推荐看这两个：</p><ul><li><a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></li><li><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><ul><li>缓存</li><li>分布式锁（setnx）</li><li>签到统计（setbit）</li><li>计数（incr）</li></ul><h3 id="hashes"><a href="#hashes" class="headerlink" title="hashes"></a>hashes</h3><ul><li>缓存</li><li>用户标签</li></ul><h3 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h3><ul><li>队列</li></ul><h3 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h3><ul><li>交集并集</li><li>数据去重</li></ul><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><ul><li>排行榜</li><li>延时任务</li><li>限流</li></ul><h3 id="hyperloglogs"><a href="#hyperloglogs" class="headerlink" title="hyperloglogs"></a>hyperloglogs</h3><ul><li>uv统计（ip统计）</li></ul><h3 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h3><ul><li>发布订阅（不是特别可靠）</li></ul><h3 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h3><ul><li>附近的人</li></ul><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>队列</li><li>发布订阅</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="利用事务实现秒杀"><a href="#利用事务实现秒杀" class="headerlink" title="利用事务实现秒杀"></a>利用事务实现秒杀</h4><p>以php代码为例：</p><blockquote><p>WATCH命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）</p></blockquote><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 库存为<span class="hljs-number">5</span><span class="hljs-regexp">//</span>实例化redis<span class="hljs-variable">$redis</span> = new Redis();<span class="hljs-regexp">//</span>连接<span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;sale&#x27;</span>;<span class="hljs-variable">$redis</span>-&gt;setnx(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>); <span class="hljs-regexp">//</span> 此项不预定义亦可，保证key唯一就行<span class="hljs-variable">$redis</span>-&gt;watch(<span class="hljs-variable">$key</span>); <span class="hljs-regexp">//</span>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。<span class="hljs-variable">$sale_num</span> = <span class="hljs-variable">$redis</span>-&gt;get(<span class="hljs-variable">$key</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$sale_num</span> &gt; <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">exit</span>();&#125;<span class="hljs-variable">$redis</span>-&gt;multi(); <span class="hljs-regexp">//</span>标记事务<span class="hljs-variable">$redis</span>-&gt;incr(<span class="hljs-variable">$key</span>);  <span class="hljs-regexp">//</span>销量+<span class="hljs-number">1</span>sleep(<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span>模拟真实环境<span class="hljs-variable">$ret</span> = <span class="hljs-variable">$redis</span>-&gt;exec(); <span class="hljs-regexp">//</span> 事务块内所有命令的返回值，按命令执行的先后顺序排列。<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ret</span>) &#123;    <span class="hljs-regexp">//</span> 自定义的一个基于medoo的dbclassinclude <span class="hljs-string">&#x27;db.php&#x27;</span>;<span class="hljs-variable">$db</span> = new db([    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>,    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;13sai&#x27;</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;13sai&#x27;</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;*&#x27;</span>,    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>]);<span class="hljs-variable">$db</span>-&gt;update(<span class="hljs-string">&#x27;goods&#x27;</span>, [<span class="hljs-string">&quot;stock_num[-]&quot;</span> =&gt; <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">1</span>]);&#125;</code></pre></div><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><blockquote><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/201910/30/41489/7MfaHZCwKT.png!large" alt="bloom"></p><p>php实现推荐看看这篇文章：</p><ul><li><a href="https://github.13sai.com/2019/05/21/188/">https://github.13sai.com/2019/05/21/188/</a></li></ul><p>当然，Redis自己也有第三方模块：</p><ul><li><a href="https://github.com/RedisBloom/RedisBloom">https://github.com/RedisBloom/RedisBloom</a></li></ul><div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/RedisBloom/</span>RedisBloom.gitcd redisbloommake<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/redis-server --loadmodule ./</span>redisbloom.so</code></pre></div><p>Bloom：向过滤器添加新项,如果尚不存在，则会为您创建一个新的过滤器</p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.ADD newFilter foo(integer) <span class="hljs-number">1</span></code></pre></div><p>Bloom：检查过滤器中是否存在项</p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.EXISTS newFilter foo(integer) <span class="hljs-number">1</span><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.EXISTS newFilter notpresent(integer) <span class="hljs-number">0</span></code></pre></div><h3 id="限流Redis-cell"><a href="#限流Redis-cell" class="headerlink" title="限流Redis-cell"></a>限流Redis-cell</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 提前安装rust哟git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/brandur/</span>redis-cell.gitcd redis-cellcargo build --releasecp target<span class="hljs-regexp">/release/</span>libredis_cell.dylib <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/modules/</span>redis-server --loadmodule <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/modules/</span>libredis_cell.so</code></pre></div><p>该模块只有1条指令cl.throttle，它的参数和返回值都略显复杂，接下来让我们来看看这个指令具体该如何使用。</p><div class="code-wrapper"><pre><code class="hljs gherkin">&gt; cl.throttle limitThrot  15  30  60  1                    ▲     ▲  ▲  ▲  ▲                    |<span class="hljs-string">     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └───── need 1 quota (可选参数，默认值也是1)</span><span class="hljs-string">                    </span>|<span class="hljs-string">     </span>|<span class="hljs-string">  └──┴─────── 30 operations / 60 seconds 这是漏水速率</span><span class="hljs-string">                    </span>|<span class="hljs-string">     └───────────── 15 capacity 这是漏斗容量</span><span class="hljs-string">&gt;                   └─────────────────── key</span></code></pre></div><p>上面这个指令的意思是允许频率为每 60s 最多 30 次(漏水速率)，漏斗的初始容量为 15，也就是说一开始可以取 15 个，然后才开始受漏水速率的影响。我们看到这个指令中漏水速率变成了 2 个参数，替代了之前的单个浮点数。用两个参数相除的结果来表达漏水速率相对单个浮点数要更加直观一些。</p><div class="code-wrapper"><pre><code class="hljs tap">&gt; cl.throttle limitThrot<span class="hljs-number"> 15 </span>30<span class="hljs-number"> 60 </span>11) (integer)<span class="hljs-number"> 0 </span>  <span class="hljs-comment"># 0 表示允许，1表示拒绝</span>2) (integer)<span class="hljs-number"> 15 </span> <span class="hljs-comment"># 漏斗容量capacity</span>3) (integer)<span class="hljs-number"> 14 </span> <span class="hljs-comment"># 漏斗剩余空间left_quota</span>4) (integer) -1  <span class="hljs-comment"># 如果拒绝了，需要多长时间后再试(漏斗有空间了，单位秒)</span>5) (integer)<span class="hljs-number"> 2 </span>  <span class="hljs-comment"># 多长时间后，漏斗完全空出来(left_quota==capacity，单位秒)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis使用单线程为什么这么快</title>
    <link href="/2021/02/28/quick/"/>
    <url>/2021/02/28/quick/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Redis6.0引入了多线程。实际上多线程只是用来处理网络数据的读写和协议解析，执行命令仍然是单一工作线程。</p></blockquote><p>Redis 采用的是基于内存的采用的是单进程单线程模型的 KV 数据库，由 C 语言编写。官方提供的数据是可以达到100k+的qps。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差。</p><p>Redis 快的主要原因有：</p><ol><li>完全基于内存</li><li>数据结构简单，对数据操作也简单</li><li>使用多路 I/O 复用模型,非阻塞IO</li><li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li><li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li></ol><h3 id="多路-I-O-复用模型"><a href="#多路-I-O-复用模型" class="headerlink" title="多路 I/O 复用模型"></a>多路 I/O 复用模型</h3><p>多路 I/O 复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗），且 Redis 在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了 Redis 具有很高的吞吐量。</p><p>和 Memcached 不同，Redis 并没有直接使用 Libevent，而是自己完成了一个非常轻量级的对 select、epoll、evport、kqueue 这些通用的接口的实现。在不同的系统调用选用适合的接口，linux 下默认是 epoll。因为 Libevent 比较重，更通用，代码量也就很庞大，拥有很多 Redis 用不上的功能，Redis 为了追求“轻巧”并且去除依赖，就选择自己去封装了一套。</p><h3 id="单进程单线程好处"><a href="#单进程单线程好处" class="headerlink" title="单进程单线程好处"></a>单进程单线程好处</h3><ol><li>代码更清晰，处理逻辑更简单</li><li>不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li><li>不存在多进程或者多线程导致的切换而消耗 CPU</li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go的GC机制</title>
    <link href="/2021/02/27/319/"/>
    <url>/2021/02/27/319/</url>
    
    <content type="html"><![CDATA[<h2 id="Golang的标记清除"><a href="#Golang的标记清除" class="headerlink" title="Golang的标记清除"></a>Golang的标记清除</h2><p>如下图所示，通过gcmarkBits位图标记span的块是否被引用。对应内存分配中的bitmap区。</p><h3 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h3><ul><li><p>白色：对象未被标记，gcmarkBits对应的位为0（该对象将会在本次GC中被清理）</p></li><li><p>灰色：对象已被标记，但这个对象包含的子对象未标记</p></li><li><p>黑色：对象已被标记，且这个对象包含的子对象也已标记，gcmarkBits对应的位为1（该对象不会在本次GC中被清理）</p></li></ul><p>例如，当前内存中有A~F一共6个对象，根对象a,b本身为栈上分配的局部变量，根对象a、b分别引用了对象A、B, 而B对象又引用了对象D，则GC开始前各对象的状态如下图所示:</p><ol><li>初始状态下所有对象都是白色的。</li><li>接着开始扫描根对象a、b; 由于根对象引用了对象A、B,那么A、B变为灰色对象，接下来就开始分析灰色对象，分析A时，A没有引用其他对象很快就转入黑色，B引用了D，则B转入黑色的同时还需要将D转为灰色，进行接下来的分析。</li><li>灰色对象只有D，由于D没有引用其他对象，所以D转入黑色。标记过程结束</li><li>最终，黑色的对象会被保留下来，白色对象会被回收掉。</li></ol><p><img src="/images/post/9905654-922225af024f386c.png" alt="gc"></p><h3 id="GC的触发"><a href="#GC的触发" class="headerlink" title="GC的触发"></a>GC的触发</h3><ul><li>阈值：默认内存扩大一倍，启动gc</li><li>定期：默认2min触发一次gc，src/runtime/proc.go:forcegcperiod</li><li>手动：runtime.gc()</li></ul><h3 id="STW"><a href="#STW" class="headerlink" title="STW"></a>STW</h3><p>stop the world是gc的最大性能问题，对于gc而言，需要停止所有的内存变化，即停止所有的goroutine，等待gc结束之后才恢复。</p><p>标记-清除(mark and sweep)算法的STW(stop the world)操作，就是runtime把所有的线程全部冻结掉，所有的线程全部冻结意味着用户逻辑是暂停的。这样所有的对象都不会被修改了，这时候去扫描是绝对安全的。</p><p>Go如何减短这个过程呢？标记-清除(mark and sweep)算法包含两部分逻辑：标记和清除。</p><p>我们知道Golang三色标记法中最后只剩下的黑白两种对象，黑色对象是程序恢复后接着使用的对象，如果不碰触黑色对象，只清除白色的对象，肯定不会影响程序逻辑。所以： <code>清除操作和用户逻辑可以并发。</code></p><p>标记操作和用户逻辑也是并发的，用户逻辑会时常生成对象或者改变对象的引用，那么标记和用户逻辑如何并发呢？这里就让说到golang的写屏障了。</p><h3 id="GC流程"><a href="#GC流程" class="headerlink" title="GC流程"></a>GC流程</h3><ol><li>Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC</li><li>Mark: 扫描所有根对象, 和根对象可以到达的所有对象, 标记它们不被回收</li><li>Mark Termination: 完成标记工作, 重新扫描部分根对象(要求STW)</li><li>Sweep: 按标记结果清扫span</li></ol><p>目前整个GC流程会进行两次STW(Stop The World), 第一次是Mark阶段的开始, 第二次是Mark Termination阶段.</p><ul><li>第一次STW会准备根对象的扫描, 启动写屏障(Write Barrier)和辅助GC(mutator assist).</li><li>第二次STW会重新扫描部分根对象, 禁用写屏障(Write Barrier)和辅助GC(mutator assist).</li></ul><p>需要注意的是, 不是所有根对象的扫描都需要STW, 例如扫描栈上的对象只需要停止拥有该栈的G.<br>从go 1.9开始, 写屏障的实现使用了Hybrid Write Barrier, 大幅减少了第二次STW的时间.</p><h3 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h3><p>因为go支持<strong>并行GC</strong>， GC的扫描和go代码可以同时运行，这样带来的问题是GC扫描的过程中go代码有可能改变了对象的依赖树。</p><p>例如开始扫描时发现根对象A和B，B拥有C的指针。</p><ol><li>GC先扫描A，A放入黑色</li><li>B把C的指针交给A</li><li>GC再扫描B，B放入黑色</li><li>C在白色，会回收；但是A其实引用了C。</li></ol><p>为了避免这个问题, go在GC的标记阶段会启用写屏障(Write Barrier).</p><p>启用了写屏障(Write Barrier)后，</p><ol><li>GC先扫描A，A放入黑色</li><li>B把C的指针交给A</li><li>由于A在黑色，所以C放入灰色</li><li>C没有子对象，放入黑色</li><li>扫描B，B没有子对象，放入黑色</li></ol><p>即使A可能会在稍后丢掉C, 那么C就在下一轮回收。</p><p>开启写屏障之后，当指针发生改变, GC会认为在这一轮的扫描中这个指针是<strong>存活</strong>的, 所以放入<strong>灰色</strong>。</p><h2 id="其他常见gc机制"><a href="#其他常见gc机制" class="headerlink" title="其他常见gc机制"></a>其他常见gc机制</h2><ul><li>引用计数</li><li>复制收集</li><li>分代收集</li></ul><h2 id="GC-的触发时机的两种形式"><a href="#GC-的触发时机的两种形式" class="headerlink" title="GC 的触发时机的两种形式"></a>GC 的触发时机的两种形式</h2><ol><li><strong>主动触发</strong>，通过调用 runtime.GC 来触发 GC，此调用阻塞式地等待当前 GC 运行完毕。</li><li><strong>被动触发</strong>，分为两种方式：<ul><li>使用系统监控，当超过两分钟没有产生任何 GC 时，强制触发 GC。</li><li>使用步调（Pacing）算法，其核心思想是控制内存增长的比例。</li></ul></li></ol><hr><p>参考：</p><ul><li><a href="https://www.cnblogs.com/zj420255586/p/14261834.html">Golang GC(垃圾回收机制)</a></li><li>[11. 触发 GC 的时机是什么？](<a href="https://www.bookstack.cn/read/qcrao-Go-Questions/spilt.11.GC-GC.md#11">https://www.bookstack.cn/read/qcrao-Go-Questions/spilt.11.GC-GC.md#11</a>. 触发 GC 的时机是什么？)</li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI七层协议</title>
    <link href="/2021/02/20/314/"/>
    <url>/2021/02/20/314/</url>
    
    <content type="html"><![CDATA[<p>From:<a href="https://www.cnblogs.com/kevingrace/p/5909719.html">网络知识梳理–OSI七层网络与TCP/IP五层网络架构及二层/三层网络</a></p><h2 id="OSI七层网络协议"><a href="#OSI七层网络协议" class="headerlink" title="OSI七层网络协议"></a>OSI七层网络协议</h2><p>OSI是Open System Interconnect的缩写，意为开放式系统互联。</p><p>OSI参考模型各个层次的划分遵循下列原则：</p><ul><li>根据不同层次的抽象分层</li><li>每层应当有一个定义明确的功能</li><li>每层功能的选择应该有助于制定网络协议的国际标准。</li><li>各层边界的选择应尽量节省跨过接口的通信量。</li><li>层数应足够多，以避免不同的功能混杂在同一层中，但也不能太多，否则体系结构会过于庞大</li><li>同一层中的各网络节点都有相同的层次结构，具有同样的功能。</li><li>同一节点内相邻层之间通过接口(可以是逻辑接口)进行通信。</li><li>七层结构中的每一层使用下一层提供的服务，并且向其上层提供服务。</li><li>不同节点的同等层按照协议实现对等层之间的通信。</li></ul><p>根据以上标准，OSI参考模型分为(从上到下):</p><blockquote><p>物理层-&gt;数据链路层-&gt;网络层-&gt;传输层-&gt;会话层-&gt;表示层-&gt;应用层。</p></blockquote><p>1)物理层涉及在信道上传输的原始比特流。<br>2)数据链路层的主要任务是加强物理层传输原始比特流的功能，使之对应的网络层显现为一条无错线路。发送包把输入数据封装在数据帧，按顺序传送出去并处理接收方回送的确认帧。<br>3)网络层关系到子网的运行控制，其中一个关键问题是确认从源端到目的端如何选择路由。<br>4)传输层的基本功能是从会话层接收数据而且把其分成较小的单元传递给网络层。<br>5)会话层允许不同机器上的用户建立会话关系。<br>6)表示层用来完成某些特定的功能。<br>7)应用层包含着大量人们普遍需要的协议。</p><p>各层功能见下表：</p><p><img src="https://images2015.cnblogs.com/blog/907596/201609/907596-20160926163530797-1486268033.png" alt="img"></p><p>七层模型的每一层都具有清晰的特征。基本来说:<br>1)第七至第四层(应用层-&gt;表示层-&gt;会话层-&gt;传输层)处理数据源和数据目的地之间的端到端通信，<br>2)第三至第一层（网络层-&gt;数据链路层-&gt;物理层）处理网络设备间的通信。</p><p>另外：<br>OSI模型的七层也可以划分为两组：<br>1）上层（层7、层6和层5，即应用层-&gt;表示层-&gt;会话层）。上层处理应用程序问题，并且通常只应用在软件上。最高层，即应用层是与终端用户最接近的。<br>2）下层（层4、层3、层2和层1，即传输层-&gt;网络层-&gt;数据链路层-&gt;物理层）。下层是处理数据传输的。物理层和数据链路层应用在硬件和软件上。最底层，即物理层是与物理网络媒介（比如说，电线）最接近的，并且负责在媒介上发送</p><h3 id="第7层-应用层"><a href="#第7层-应用层" class="headerlink" title="第7层-应用层"></a>第7层-应用层</h3><p>定义了用于在网络中进行通信和数据传输的接口 - 用户程式；<br>提供标准服务，比如虚拟终端、文件以及任务的传输和处 理；<br>应用层为操作系统或网络应用程序提供访问网络服务的接口。应用层协议的代表包括：Telnet、FTP、HTTP、SNMP等。</p><h3 id="第6层-表示层"><a href="#第6层-表示层" class="headerlink" title="第6层-表示层"></a>第6层-表示层</h3><p>掩盖不同系统间的数据格式的不同性；<br>指定独立结构的数据传输格式；<br>数据的编码和解码；加密和解密； 压缩和解压缩<br>这一层主要解决用户信息的语法表示问题。它将预交换的数据从适合于某一用户的抽象语法，转换为适合于OSI系统内部使用的传送语法。即提供格式化的表示和转换数据服务。数据的压缩和解压缩， 加密和解密等工作都由表示层负责。</p><h3 id="第5层-会话层"><a href="#第5层-会话层" class="headerlink" title="第5层-会话层"></a>第5层-会话层</h3><p>管理用户会话和对话；<br>控制用户间逻辑连接的建立和挂断；<br>报告上一层发生的错误<br>这一层也可以称为会晤层或对话层，在会话层及以上的高层次中，数据传送的单位不再另外命名，而是统称为报文。会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。如服务器验证用户登录便是由会话层完成的。</p><h3 id="第4层-处理信息的传输层"><a href="#第4层-处理信息的传输层" class="headerlink" title="第4层-处理信息的传输层"></a>第4层-处理信息的传输层</h3><p>管理网络中端到端的信息传送；<br>通过错误纠正和流控制机制提供可靠且有序的数据包传送；<br>提供面向无连 接的数据包的传送；<br>第4层的数据单元也称作数据包(packets)。但是，当你谈论TCP等具体的协议时又有特殊的叫法，TCP的数据单元称为段 (segments)而UDP协议的数据单元称为“数据报(datagrams)”。这个层负责获取全部信息，因此，它必须跟踪数据单元碎片、乱序到达的 数据包和其它在传输过程中可能发生的危险。第4层为上层提供端到端(最终用户到最终用户)的透明的、可靠的数据传输服务。所为透明的传输是指在通信过程中 传输层对上层屏蔽了通信传输系统的具体细节。传输层协议的代表包括：TCP、UDP、SPX等。</p><h3 id="第3层-网络层"><a href="#第3层-网络层" class="headerlink" title="第3层-网络层"></a>第3层-网络层</h3><p>定义网络设备间如何传输数据；<br>根据唯一的网络设备地址路由数据包；<br>提供流和拥塞控制以防止网络资源 的损耗<br>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。网络层将数据链路层提供的帧组成数据包，包中封装有网络层包头，其中含有逻辑地址信息- -源站点和目的站点地址的网络地址。如 果你在谈论一个IP地址，那么你是在处理第3层的问题，这是“数据包”问题，而不是第2层的“帧”。IP是第3层问题的一部分，此外还有一些路由协议和地 址解析协议(ARP)。有关路由的一切事情都在这第3层处理。地址解析和路由是3层的重要目的。网络层还可以实现拥塞控制、网际互连等功能。在这一层，数据的单位称为数据包(packet)。网络层协议的代表包括：IP、IPX、RIP、OSPF等。</p><h3 id="第2层-数据链路层-DataLinkLayer"><a href="#第2层-数据链路层-DataLinkLayer" class="headerlink" title="第2层-数据链路层(DataLinkLayer)"></a>第2层-数据链路层(DataLinkLayer)</h3><p>定义操作通信连接的程序；<br>封装数据包为数据帧；<br>监测和纠正数据包传输错误<br>在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路，通过差错控制提供数据帧(Frame)在信道上无差错的传输，并进行各电路上的动作系列。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。在这一层，数据的单位称为帧(frame)。数据链路层协议的代表包括：SDLC、HDLC、PPP、STP、帧中继等。</p><h3 id="第1层-物理层-PhysicalLayer"><a href="#第1层-物理层-PhysicalLayer" class="headerlink" title="第1层-物理层(PhysicalLayer)"></a>第1层-物理层(PhysicalLayer)</h3><p>定义通过网络设备发送数据的物理方式；<br>作为网络媒介和设备间的接口；<br>定义光学、电气以及机械特性。<br>规定通信设备的机械的、电气的、功能的和过程的特性，用以建立、维护和拆除物理链路连接。具体地讲，机械 特性规定了网络连接时所需接插件的规格尺寸、引脚数量和排列情况等;电气特性规定了在物理连接上传输bit流时线路上信号电平的大小、阻抗匹配、传输速率 距离限制等;功能特性是指对各个信号先分配确切的信号含义，即定义了DTE和DCE之间各个线路的功能;规程特性定义了利用信号线进行bit流传输的一组 操作规程，是指在物理连接的建立、维护、交换信息是，DTE和DCE双放在各电路上的动作系列。在这一层，数据的单位称为比特(bit)。属于物理层定义的典型规范代表包括：EIA/TIA RS-232、EIA/TIA RS-449、V.35、RJ-45等。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>成为会带团队的技术人</title>
    <link href="/2021/02/14/318/"/>
    <url>/2021/02/14/318/</url>
    
    <content type="html"><![CDATA[<p>本文是拉勾专栏《成为会带团队的技术人》的笔记，图基本也来源于专栏，自己以前也有带团队经验，但自我感觉做得不够好，这个专栏给我很多启发。</p><h1 id="技术人三要素"><a href="#技术人三要素" class="headerlink" title="技术人三要素"></a>技术人三要素</h1><p class="note note-success">  技术人三要素：稳定性、债务、架构</p><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><h3 id="怎么衡量系统稳定性？"><a href="#怎么衡量系统稳定性？" class="headerlink" title="怎么衡量系统稳定性？"></a>怎么衡量系统稳定性？</h3><p>一般来讲，通过统计系统不可用的时长或次数就可以对稳定性进行量化，比如业内常说 4 个 9 的可用性（即 1 年内 99.99% 的时间系统是可用的，不可用时长仅为 52.6 分钟）。</p><p>针对稳定性的提高也可以看作围绕事故的治理，可以从事故发生的前、中、后分阶段来看对应的关键点。</p><ul><li>事故的类型：可用性事故、资损类事故。</li><li>事故前预防：主动治理减少系统的风险隐患，重点在变更管控、可用性设计、应急预案与演练。</li><li>事故中应急：“止血、恢复”。</li><li>事故后复盘：目的不是追责，不是甩锅，而是查根因、改进架构、完善应急、总结经验。</li></ul><h3 id="事故的类型"><a href="#事故的类型" class="headerlink" title="事故的类型"></a>事故的类型</h3><p>从事故特性上看，我们可以分为可用性事故和资损类事故。</p><ol><li><p>可用性事故：技术原因导致系统部分或者全部功能不可用，业务没办法正常完成对应流程或者提供对应服务。比如因为网络、接口 Bug 等原因，用户没办法登录、商品列表不显示等。</p></li><li><p>资损类事故：系统的功能都能正常使用，但因为逻辑、计算等原因让业务的某一方产生了资金损失。比如某电商部门错发无门槛优惠券、某公司商户清结算少打款给商户等等。</p></li></ol><h3 id="故障处理的生命周期"><a href="#故障处理的生命周期" class="headerlink" title="故障处理的生命周期"></a>故障处理的生命周期</h3><blockquote><p>故障处理的生命周期，可以分为 4 个阶段：发现异常、排查问题、判断决策、恢复处理。<br>这 4 个阶段对应的行动并不是完全串行的，虽然有一定的依赖关系，但在实际的处理过程中应该并行展开。类似 fork/join 的模式，不断完成小任务、不断汇总信息，不断做出判断与决策，形成循环直到故障恢复。</p></blockquote><ol><li>故障发现</li></ol><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgqCHmAJMdeAc_F6AAJTrBjwTWE310-20210527163509208.png" alt="故障发现"></p><p>总的来说，人工的被动反馈在时间和速度上有较强的不确定性，很容易出现“小故障 * 长时间 = 大事故”的情形。而纯粹的技术指标监控又会忽略掉接口正常响应，但是业务异常的场景，只有两者结合，通过监控告警，最大程度上缩短故障感知的时间，才能早发现早解决，减少业务影响。</p><ol start="2"><li>故障排查</li></ol><ul><li><p>直接锁定：最近的代码更新与异常现象间有直接的逻辑关联，进而可以直接锁定到故障点。比如，刚对下单接口进行了发布变更，客户反馈大量失败，可以基本断定是刚才的发布导致。</p></li><li><p>排除法：当干扰因素过多（用户、订单等几个系统同时发生变更，引起订单异常），很难直接锁定到故障点，就要结合业务场景，在整条下单链路上及关联代码进行自查自证，通过排除法锁定故障。</p></li></ul><ol start="3"><li>故障决策</li></ol><p>业务决策非常复杂，能否第一时间止损很大程度上取决于技术 Leader 的现场反应和操作， 要注意故障决策的两个关键点 ：</p><p>一定要有明确的决策人、主导者和有效的沟通方式（钉钉群、多人电话会议等），让信息可以通畅地交流出来，并且决策人可以根据情况做判断与取舍，形成所有人明确的处理结论，最好还能落成文档，可追溯。 比如，第一时间停止错误红包的发放，确保故障没有增量，并把决策第一时间同步给团队成员，并同步相关负责人后续的动作，对已发放的红包，明确要求负责人汇总各类关键信息（红包数量、涉及金额、涉及用户数、有效时长、可能资损等）。</p><p>所有的信息一定要数据化，不同的数据量级会导致决策不同，比如红包错发 5W 可能只是暂停发放，但是存量红包依然可以核销，损失公司可以承担。但是如果错发 5000W，大概就要涉及一系列的调整，这是非常影响决策的。</p><ol start="4"><li>故障恢复</li></ol><blockquote><p>应急“三板斧”：回滚、重启大法、降级限流。</p></blockquote><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Cip5yGAJMf2AFDdiAAJOfl-EHu8036.png" alt="故障恢复"></p><h3 id="如何有价值地做事后复盘？"><a href="#如何有价值地做事后复盘？" class="headerlink" title="如何有价值地做事后复盘？"></a>如何有价值地做事后复盘？</h3><p>你可以从时长、现象、处理时间轴、根因、改进计划这几个维度进行复盘， 在以下几个方面进行深究：</p><p>事故时长：1-5-10(即 1 分钟发现、5 分钟响应、10 分钟恢复) 是否达成，如果没有是为什么？哪个环节用时最多，如何提高和改善？</p><p>事故根因：根因不等于直接原因，一个事故的直接原因往往并不复杂，但是根因可能是多个维度的缺失，需要像剥洋葱一样一层层找下去。拿库存接口变更这个Case来说，直接原因就是某段代码逻辑变更导致，但是应该在测试、发布、监控、应急影响、预案设计等多个环节展开去看，根因的挖掘并不忌讳“吹毛求疵”。</p><p>事故改进措施：由点推到面、明确到人、明确时间。与根因类似，要结合多个维度形成组合拳的改进点，避免一次性动作，要将重点放在对未来、对同类问题的预防上。核心就是如果再一次发生类似的问题，这些改进措施是不是能起到作用。</p><p>关于事后复盘，我们就是要深挖事故如何发生的、如何处理的、未来怎么预防。但要避免情绪化，在复盘会上的反思、感悟、懊恼没有任何意义，如何带领团队把精力放在改进措施的落实以及事故前的治理上更有价值。另外，你需要留出时间让团队伙伴进行内部 Review，避免为了开会而复盘。</p><blockquote><p>没有质量的交付，再多再快都毫无意义。</p></blockquote><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgqCHmAJMo-Ae8JIAAI6Da3tjL0715.png" alt="稳定性"></p><h3 id="变更会引起90-以上的故障"><a href="#变更会引起90-以上的故障" class="headerlink" title="变更会引起90%以上的故障"></a>变更会引起90%以上的故障</h3><ol><li>变更需要监控</li></ol><p>有效的监控要回答三个问题：</p><ul><li>是否有问题发生？</li><li>哪里发生了问题？</li><li>发生了什么问题？</li></ul><ol start="2"><li>有效灰度必须有耐心</li></ol><blockquote><p>灰度从来不是为了测试，也不等于 A/B Test。它本身是为了对抗“未知的不确定性”。</p></blockquote><p>要想实现灰度的有效性，关键点在于时间和流量。</p><p>时间：每个灰度阶段至少有 5 ~ 10 min 的观察，在监控、日志和各方反馈没有异常后再扩大灰度范围，确保一些运行时异常或量变积累质变的问题可以暴露出来。</p><p>流量：有时一些业务场景需要特定的触发条件，比如满足某些条件的用户或满足某些条件的订单，那么在灰度时就不能仅通过单位时间内有没有异常来判断，还要确保有足够的有效流量。</p><ol start="3"><li>回滚就是变更的“后悔药”</li></ol><p>要知道，系统并不是天然可以无缝回滚的，想要系统具备回滚的能力，在设计与实现阶段需要付出额外的精力。可回滚的本质是系统的兼容性设计与实现，比如常见的“只增不改”，一个 API 内要调整很多实现逻辑才能满足新业务的需求，此时不妨直接新增一个 API ，两个 API 保持参数一致，那么一旦新 API 有异常直接切换回旧的 API 即可。</p><p>所以，不论是灰度计划还是回滚策略都应该在架构设计阶段就去考虑，结合排期、风险程度、成本投入这些方面，要做好评估与平衡。</p><h3 id="坚守-Design-For-Failure-的架构理念"><a href="#坚守-Design-For-Failure-的架构理念" class="headerlink" title="坚守 Design For Failure 的架构理念"></a>坚守 Design For Failure 的架构理念</h3><p>“Design for failure and nothing will fail”，最早是 AWS 的一条最佳实践，即<code>面向失败进行系统设计</code>。可以理解为：考虑系统所有可能发生故障或不可用的情形，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。</p><ol><li>将经验教训沉淀下来</li></ol><p>历史是最好的老师，我建议你总结并分析过去发生过的事故，并结合常规分布式系统的可用性风险，以此梳理出一个围绕事故隐患的风险点 Checklist，在需求迭代或者架构设计时，通过它高效地找到系统实现的薄弱环节。</p><p>除了完善 Checklist，在团队普及这种设计理念之外，更关键的是将这些解决方案沉淀成设计原则，让研发人员可以在实际中落地。</p><ol start="2"><li>通过演练验证预案设计</li></ol><p>设计并实现了自己的故障演练系统，日常主动制造事故上下文来验证我们的设计与系统是否可靠。</p><h3 id="把稳定性当作机制与文化去建设"><a href="#把稳定性当作机制与文化去建设" class="headerlink" title="把稳定性当作机制与文化去建设"></a>把稳定性当作机制与文化去建设</h3><p>系统稳定性结果好坏很大程度上取决于技术 Leader 的重视程度，如果一个团队的管理者都不能身体力行的去重视它，而仅仅只是喊喊口号，那就不要指望团队成员能认真地对待这件事。</p><ol><li>新人 Landing 从稳定性学习开始</li><li>每人不低于 35% 的稳定性 KPI</li><li>好的坏的都要在阳光之下晒一晒</li></ol><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Cip5yGAOnceAK51TAAEbIVsowNo778.png" alt="可用性治理与预防"></p><h3 id="建立资损概念的宏观认知"><a href="#建立资损概念的宏观认知" class="headerlink" title="建立资损概念的宏观认知"></a>建立资损概念的宏观认知</h3><p>从广义上来看，存在理论损失也应该算资损， 比如因为搜索推荐系统出问题（不论什么原因）导致这一阶段广告的收入减少，或者因系统 Bug 导致用户取消订单的申请被默认同意（虽然原本商户可能也会做同意处理，但是申诉的话平台依然要赔付），类似预计收益减少或者因系统问题产生赔付的场景都应算为资损。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgpVE2ASYyyAAp99AAHQPeoXQkg893.png" alt="资损定义和分类"></p><h3 id="资损防控的三个关键"><a href="#资损防控的三个关键" class="headerlink" title="资损防控的三个关键"></a>资损防控的三个关键</h3><ol><li>防：资金视角做风险点识别</li></ol><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgpVE2ASY0OAILA7AAE89CbKGfA505.png" alt="资损风险点识别"></p><ol start="2"><li>监：一致性与正确性双核对</li></ol><p>针对资损感知的核心思想是：基于线上业务结果收拢进行监控，基于线下业务场景扩散进行核对。</p><p>与可用性监控围绕接口的技术指标不同，资损更关注的是数据核对，监控的并不是运行状态而是运行结果，并且资损监控的粒度要求非常高，精细到每一笔交易、每一次金额计算、每一个红包发放。所以资损监控的有效性很依赖于场景的覆盖率，仅覆盖几个关键场景是不足以规避资损风险的，除了要定期梳理外，每次系统有变更或者新功能时，都需检查是否有新的核对点，以及旧有核对公式是否需要调整。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgpVE2ASY1aARH-TAAHJrR1s-W0317.png" alt="资损监控核对"></p><ol start="3"><li>控：资金拦截 + 资产控制</li></ol><p>除了防和监，资损防控的关键主要在“控”字上，我们希望在问题发生后第一时间止损，这就需要技术在系统层面对资金和资产有很强的控制能力。这种能力的表现就是： 不仅可以通过预案将某些场景与链路降级，还可以拦截资金的流出和资产的使用，同时具备快速订正错误数据的能力。</p><p>在我们开始处理资损事故时，会有三个共性的需求。</p><ul><li>问题止血不新增：核心是关闭问题产生源头，往往通过业务场景降级来实现，比如对错误红包或者满减活动进行下线。</li><li>控制资金流出：核心是对资金和资产进行拦截与冻结，避免外流后损失无法修正，比如禁止用户下单时勾选使用有问题的红包。</li><li>存量数据订正：核心是捞取问题数据后可以快速地批量处理，比如批量更改红包的金额、甚至直接将红包无效。</li></ul><p>虽然其中一些操作对用户体验是有损的，但有而不用是一回事儿，无能为力则是另外一回事儿，其中：</p><p>资金拦截的能力主要从资金的流入和流出这两端进行把控。以红包而言就是管控其创建与核销。在红包创建时，有预算系统进行管控，避免无限制地生成红包进而超发。在红包核销时，由交易和营销系统进行验证，确保订单上下文以及红包合法，避免问题红包被核销进而造成无法挽回的资损。</p><p>资产管控的能力则是资产的快速锁定和数据订正展开，以红包而言，如果不同模版不同活动的红包都有一个统一的批次号，就可以通过这个标记快速捞取某一批有问题的数据。同时如果提前准备批量订正的脚本，或者有订正数据的平台，就可以快速修改红包金额、使用时间、使用门槛等关键信息，甚至批量无效所有问题红包。</p><p>你需要注意，这些能力的实现更多依赖于技术 Leader 在日常需求迭代和架构设计时，是否有意识引导团队加强这方面的建设。大部分的预案思路来源于过去已经发生的问题，或者对未来可能发生问题的假设，将预案常态化是你重点关注并推进落地的。</p><p>除了建设预案，还要有预案演练，以此保证预案的有效性。技术 Leader 更应该鼓励测试和开发的同学主动做攻防演练，寻找漏洞、验证止损方案、及时发现并修复问题。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Cip5yGASY2aAan_KAAHwX7CkMbQ394.png" alt="资源预案止损"></p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgpVE2ASY3WAF33QAAE50Zm97VM138.png"></p><h2 id="技术债务"><a href="#技术债务" class="headerlink" title="技术债务"></a>技术债务</h2><p>技术债务在研发领域类似于“金融债务”的概念，大部分情况下是说因为人为妥协，系统的设计和实现没有遵循最佳实践，所以虽然短期做到了快速交付，但也制约了系统未来的可扩展性，并且埋下了稳定性的风险隐患。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgqCHmAXyHeAZE15AAF3VXvSekM464.png" alt="技术债务"></p><h3 id="重视技术债务的原因"><a href="#重视技术债务的原因" class="headerlink" title="重视技术债务的原因"></a>重视技术债务的原因</h3><ul><li>影响系统扩展和需求交付</li><li>恶性循环导致人员流失</li></ul><p>技术债务的恶性循环会影响开发团队的生产力，并降低团队的士气和成员的驱动力，而低生产率导致团队只能优先交付功能，这就推迟了技术债务的解决，从而进一步增加技术债务。</p><h3 id="如何从循环的债务困境中突围而出？"><a href="#如何从循环的债务困境中突围而出？" class="headerlink" title="如何从循环的债务困境中突围而出？"></a>如何从循环的债务困境中突围而出？</h3><p>1.债务的 Owner 是技术 Leader</p><p>要想解决技术债务，你需要找到技术与业务的平衡点，我的经验是“内外双修”：</p><p>内：加强团队的战斗力，减少债务产生的机会，增强债务处理的能力。</p><p>外：深刻地理解业务，并且做好与其他协作方（尤其是产品、业务）的沟通。这样你才能理解协作方想解决什么问题，他们以为要么A、要么B才能解决的问题，既懂技术又懂业务的你能否找到方案C？</p><p>建议：面对选择题时不要只看到可选项，要永远寻找第三条路。如果实在没有其他选择，在技术妥协的同时，做好沟通，让协作方明白方案的临时性以及对未来的影响，争取到承诺在未来给你足够时间解决这些问题。</p><ol start="2"><li>通过 CheckList 识别债务</li></ol><p>建立一个债务 Review 的 CheckList ，并且不断完善。技术债务从表象上可以做一些细分：</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Ciqc1GAXyKCAQhAeAAIzRmP_aiA027.png" alt="技术债务划分"></p><p>通过现象我们就可以反推出一些导致现象的原因，将这些原因结合系统的架构进行分类，就会形成一个个具体的关注点。这些关注点往往是结合我们之前踩过的坑、发生过的问题，以及编码、架构上广为遵守的一些最佳实践所形成的，这样你就可以制定出一个较为详细的 CheckList 用以具体的债务识别（下图供参考）。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgqCHmAXyKmAL5F9AAGrGtOqSM0087.png" alt="债务细分"></p><ol start="3"><li>有计划地分级偿债</li></ol><ul><li><p>关键链路优先： 并非所有糟糕的设计与实现都能产生严重后果，即使能，它们发生的概率也不一样，而关键链路意味着业务影响最大，同时日常的改动频率和事故风险也较高，优先解决它的收益是最大的。</p></li><li><p>历史事故命中优先： 一些设计与实现在过往导致过线上真实问题的发生，不管是否发生在本系统还是当前团队，都相当于已经被证实过的这类债务的严重性，所以应该尽早修复它们，避免类似问题反复发生。</p></li><li><p>可扩展性优先： 在 CheckList 以及债务现象中我们可以发现，有些问题影响了系统未来的演进，增加了迭代成本，有些问题影响系统的维护，比如代码风格没有统一、缺少文档，在处理时应该优先处理影响可扩展性的问题，后续逐步处理影响可维护性的问题。</p></li><li><p>权责清晰优先： 一些问题在处理时受到历史架构、组织分工（康威定律）的影响，会导致系统的权责不清晰，这类系统的推进和改造往往需要花费更多的时间精力，并且从顶层设计出发去重新考量，所以权责清晰的部分可以优先处理。</p></li></ul><p>总的来说，通过对技术债务进行分级，实质上也是一个问题分治的过程，将大问题切分成一个个小问题，这样就可以将它们加入日常的迭代中，形成一个分期偿还技术债务的计划，逐步减少技术债务，减轻负担让团队与系统可以轻装上阵。</p><ol start="4"><li>正视债务做好预防</li></ol><p>除此之外，预防永远胜于治疗，技术债务汇总预防的关键点在于那些“原本未知”的技术债务要逐渐减少，大家对于实现质量的追求不能止步于“测试没有明显 Bug”，写出能运行的代码是不够的，还要易维护易扩展。</p><p>可以从几个方面着手：</p><ul><li>提升团队认识，通过项目复盘、系统重构、事故 Review 等各种机会，通过实际的案例让研发同学清楚技术债务对团队产生的负担，以及对个人能力提升的影响。</li><li>建立机制流程，比如在方案设计阶段向下深挖一下实现的要点，更多资深的开发参与到架构评审，或者促进团队形成 code review 的习惯并且达成一个共识标准以提升系统质量。</li><li>确保资源投入，在通过债务识别和分级后，将还债的投入提前计算到每次迭代中，确保有一定的资源投入其中。</li></ul><ol start="5"><li>一些常见的误区</li></ol><p>通过 CheckList 做债务识别，然后定期诊断、水平扫描、债务定级、分期偿还来做技术债务的处理，最终在团队认识、机制氛围、资源保障上下功夫做预防，这就是技术债务管理的核心思路。</p><p>而这个过程中，有一些问题是日常你很容易走入误区的，我简单总结了一下几个注意点：</p><ul><li><p>存在即合理，动态变化才是王道。 不要总想着毕其功于一役，也几乎不太可能有完美的实现或系统，接受技术债务一定会存在的事实，重点在于控制债务积压的程度，欠债本身不可怕，欠债不知且不还才可怕。</p></li><li><p>不积跬步无以至千里。我们往往过度轻视日常积累，又过度重视“大事件”产生的影响。日常这里凑合一下，那里妥协一点，没人关注小问题发生的原因。而一旦发生重大的影响，则恨不得把之前的系统全盘推翻重做一遍。</p></li><li><p>机制流程外还要讲策略和方法。很多技术 Leader 觉得这件事很重要，讲的同时设计了很多流程和机制，不遵守就要承担怎样怎样的后果，这样往往事半功倍。机制流程不是越多越好，也不能光有惩罚而没有激励，同时最重要的是你不能只追杀要结果，要给帮助、给方法、给支持。</p></li></ul><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CgpVE2AXyMeAKHX_AAGCjDqqNX4257.png" alt="债务总结"></p><h2 id="大项目：把握关键点，谋定而后动"><a href="#大项目：把握关键点，谋定而后动" class="headerlink" title="大项目：把握关键点，谋定而后动"></a>大项目：把握关键点，谋定而后动</h2><h3 id="认清异同，做到心中有数"><a href="#认清异同，做到心中有数" class="headerlink" title="认清异同，做到心中有数"></a>认清异同，做到心中有数</h3><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CioPOWAcw7WAEx7QAAE0B9ewvBc719.png" alt="项目迭代周期"></p><p>在这个常规流程中，技术团队的重心是把执行做到位，你要更关注过程管控，确保系统交付。</p><p>大项目与常规项目的核心差异点，我认为主要在于这个“大”字上，你可以从三个方面去理解。</p><ul><li>出发点不同，业务期望更大</li><li>规模不同，复杂度更高</li><li>结果评判标准不同，影响更大</li></ul><h3 id="把握关键点，谋定而后动"><a href="#把握关键点，谋定而后动" class="headerlink" title="把握关键点，谋定而后动"></a>把握关键点，谋定而后动</h3><blockquote><p>关注效果更重于关注交付，这是大项目的核心特征。</p></blockquote><p>不要为了重构而重构，要知道你要的结果是什么。</p><p>大项目的失败存在一个共性的问题：围绕业务结果的思考、计划不足，目标的定义不清晰或没有充分同步给所有相关人，项目同学知其然而不知其所以然。连目标都没有共识，何谈执行到位，项目成功？</p><p>所以我认为越是重大的项目，在计划、设计、准备上投入的精力就应该越多，谋定而后动。</p><ul><li><p>WHY（项目为什么做）</p></li><li><p>WHAT（项目做成什么样）</p></li></ul><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CioPOWAcxamAVdqbAACyNLxS9YE927.png" alt="what"></p><ul><li><p>WHO（哪些人来一起做项目）</p></li><li><p>HOW（启动项目后如何做）</p><ul><li><p>合理拆分任务（模块）是项目成功的一半</p></li><li><p>保持风险意识，敬畏墨菲定律</p></li></ul></li></ul><p>做好充分的准备之后，可以召开立项会，将 WHY、WHAT、WHO、HOW 的信息与思考同步给项目相关人员。通过 Kick Off 会议确定项目的基调、同步必要信息，为项目推进扫清障碍。</p><h4 id="如何处理棘手问题"><a href="#如何处理棘手问题" class="headerlink" title="如何处理棘手问题"></a>如何处理棘手问题</h4><h5 id="问题一：缺兵少将怎么办？"><a href="#问题一：缺兵少将怎么办？" class="headerlink" title="问题一：缺兵少将怎么办？"></a>问题一：缺兵少将怎么办？</h5><p>项目组人时你要注意以下几点。</p><ul><li>当项目开始时，从更大的范围内寻找合适的同学，而不是看你团队有哪些人。</li><li>将参与项目的同学在一定时间内的汇报关系和绩效考核汇总到项目组中，由项目负责人根据实际情况重新安排每个人的权责，并确定绩效的绑定关系与比例。</li><li>项目交付并不等于结束，所有人的绩效结果都应和项目目标的达成情况紧密且长期关联。</li></ul><p>最后，有时不仅要解决“缺兵”的问题，还要认真考虑是否“少将”？要充分考虑当前的人员是否适合做项目的 Owner，以我的经验来看，项目 Owner 几乎决定了项目成败的 80%，如果 Owner 能力不足，你要给予帮助和支持，或者另找他人，乃至上级的帮助，不要在 Owner 的人选上妥协，毕竟项目成败才是关键。</p><h5 id="问题二：推不动的到底是人还是事？"><a href="#问题二：推不动的到底是人还是事？" class="headerlink" title="问题二：推不动的到底是人还是事？"></a>问题二：推不动的到底是人还是事？</h5><ul><li>搞明白冲突现象下的利益诉求： 不同关联方产生观点冲突的现象背后其实是利益冲突，你要搞清楚彼此的顾虑。比如我不愿想让某个系统字段落到订单中，主要是考虑到订单系统的可维护以及稳定性，如果你能解决我的顾虑，会容易说服我。</li><li>为项目结果适当妥协： 在很多情况下，我们无法做出完美的方案，可能就是要在系统内通过很糟糕的实现去实现需求。项目没有 100% 完美，抓住核心原则不放弃，可控部分适当妥协换取项目前进是很好的策略。</li><li>通过项目地位和决策机制推动项目： 大项目往往是公司重大战略下的产物，一般情况下，不会有人去反对公司的某项既定战略，而你可以通过大项目的重要性在体系内争取更多的资源和帮助。如果你面临一些冲突，要学会利用决策机制，通过更高级别成员的沟通决策拿到解决方案。</li></ul><h5 id="问题三：一定会有项目变更吗？"><a href="#问题三：一定会有项目变更吗？" class="headerlink" title="问题三：一定会有项目变更吗？"></a>问题三：一定会有项目变更吗？</h5><p>常见的变化往往有两种：</p><ul><li>项目演进过程中识别出之前未能识别或考虑缺失的点，导致方案需要调整。</li><li>出自老板的需求变更，很多情况下都是要新增内容。</li></ul><h4 id="3个重点"><a href="#3个重点" class="headerlink" title="3个重点"></a>3个重点</h4><ol><li><p>驾驭大项目是你的试金石和分水岭，对自己职业规划有一定要求的同学一定不要放过打磨修炼的机会。</p></li><li><p>在大项目中，往往人的问题会比技术与系统的问题难解决，因为与人相关的问题未必完全理性和逻辑，那么此时你也不妨看看感性的沟通与交流是不是有更好的效果。</p></li><li><p>时刻牢记你将项目按时上线没有故障只是做到了60分，更关键的是业务效果，所以除了盯紧开发过程外，还要在最开始的业务与产品设计阶段就投身其中。</p></li></ol><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Cgp9HWAeZGqARfAHAAohBfqxiaQ465.png" alt="项目"></p><h2 id="业务理解：深入业务是做好架构的前提"><a href="#业务理解：深入业务是做好架构的前提" class="headerlink" title="业务理解：深入业务是做好架构的前提"></a>业务理解：深入业务是做好架构的前提</h2><h3 id="为什么技术要理解业务？"><a href="#为什么技术要理解业务？" class="headerlink" title="为什么技术要理解业务？"></a>为什么技术要理解业务？</h3><h4 id="产品需求不等于业务诉求"><a href="#产品需求不等于业务诉求" class="headerlink" title="产品需求不等于业务诉求"></a>产品需求不等于业务诉求</h4><p>同样的，技术 Leader 可能会花时间参加各种会议，尤其是产品需求的会，在会上如果仅仅是听“自己团队应该做什么”，而没有思考和探究业务的根本诉求，那么就我的经验来说，技术团队不可避免的会成为工具人。Leader 缺乏独立思考，人云亦云，最后整个团队都会被拖累，这也是为什么大多数研发团队被产品以及业务按在地上摩擦的原因！</p><h4 id="领域建模的前提是理解业务"><a href="#领域建模的前提是理解业务" class="headerlink" title="领域建模的前提是理解业务"></a>领域建模的前提是理解业务</h4><p>正因为没有仔细看业务的现状、推测业务的发展、去思考业务上对交易的诉求，我们认识的只是一个个需求，而非整体的从业务维度思考系统的设计，导致系统复杂度越来越高。所以要想设计可靠、简单、真正可持续迭代的系统，深度理解业务就是前提，你对业务的理解程度影响了你对系统未来发展的预判程度。</p><h4 id="提升技术团队的使命感"><a href="#提升技术团队的使命感" class="headerlink" title="提升技术团队的使命感"></a>提升技术团队的使命感</h4><p>你写的每一行代码，线上的每一次发布，都会改变用户的体验，解决实际的问题，你就会发现这份工作的意义。</p><h3 id="如何理解业务？"><a href="#如何理解业务？" class="headerlink" title="如何理解业务？"></a>如何理解业务？</h3><ol><li>不要盲信产品（不要盲信产品与 PRD，在讨论 PRD 和执行开发任务之前学会独立思考，深入理解业务想要解决什么问题，需要什么效果或作用，严格把控那些伪需求和无价值需求，防止它们侵占团队的技术资源。）</li><li>建立走进业务的机制</li><li>业务上多参会多画图（参加评审会，梳理流程图等等）</li></ol><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/Cgp9HWAfsGSAa_gIAAKhlQeDXYs745.png" alt="理解业务"></p><h2 id="架构设计：治理好系统复杂度才最务实"><a href="#架构设计：治理好系统复杂度才最务实" class="headerlink" title="架构设计：治理好系统复杂度才最务实"></a>架构设计：治理好系统复杂度才最务实</h2><h3 id="治理好系统复杂度才最务实"><a href="#治理好系统复杂度才最务实" class="headerlink" title="治理好系统复杂度才最务实"></a>治理好系统复杂度才最务实</h3><p>C.A.R. Hoare曾说过：“软件设计有两种风格，一种是将软件设计得很复杂，以使其缺陷没那么明显；一种是把软件设计得很简单，以使其没有明显的缺陷”。</p><p>系统的结构清晰、即使整体繁杂但是每个局部都相对简单、链路干脆直接，没有不必要的冗余。</p><h3 id="衡量复杂度"><a href="#衡量复杂度" class="headerlink" title="衡量复杂度"></a>衡量复杂度</h3><ul><li><p>理解成本高：需要很长时间才能理解系统模块的组成及运作，比如新同学加入或系统交接时，老同学很难讲完整、新同学不容易听明白，要几周甚至1~2个月才能完全了解系统的实现和运作机理。</p></li><li><p>变更牵连多：哪怕是实现一个小的需求都要改造系统的多个部分、甚至多个系统（上下游等），有的还需要协调其他团队或部门，结果导致迭代成本高，并可能引入更高的风险。</p></li><li><p>一张图装不下：即你无法在一块白板上清晰且完整地画出系统主要功能场景的架构图，可能是牵连的系统、服务、组件过多或者链路设计不合理导致的。</p></li><li><p>加人无法解决问题：即便你增加人员也难提高系统的交付速度和产出质量，比如原本3个人负责系统，增加到 6 个人的交付产出可能和 3 个人时所差无几，原因在于复杂度过高并且系统结构模糊，很难通过清晰的分工让生产力最大化。</p></li></ul><p>而你可以结合这 4 点表现特征以及自己的主观感受进一步判断系统的复杂度是否过高，如果系统复杂度过高，可能带来一系列问题：迭代压力大、经常延期、稳定性问题频发等。这时，你要着手治理复杂度，尽力不让问题扩大到难以解决只能重做系统的程度。</p><h3 id="复杂度治理的思路"><a href="#复杂度治理的思路" class="headerlink" title="复杂度治理的思路"></a>复杂度治理的思路</h3><p>“高内聚、低耦合”，系统简化和分治。</p><p>简化就是去掉不必要的复杂，让设计与实现保持简单。</p><p>分治则是将原本难解决的问题，拆分到可解决的粒度，然后再逐一击破。</p><p>常见的拆分方式是垂直拆分和水平分层： 垂直拆分把差异明确可以独立迭代的业务拆分开；水平分层把共性的能力下沉隔离。比如电商场景中，购物车和订单可以分成两个服务，它们虽然在业务流程上前后关联，但是各自具备独立完整的业务场景和生命周期，商品加入购物车未必会交易生成订单，可以各自独立存在；而库存和商品则是强依赖的关系，库存无法独立于商品存在。</p><p>拆分与合并不绝对，过度地拆分会导致系统无法高内聚，零散分离的系统，会增加稳定性风险和治理与迭代的代价，并且造成大量的协作成本。Linus也曾说过：把复杂系统拆分成模块，似乎没有降低整个系统的复杂度，它降低的只是子系统的复杂度。而整个系统的复杂度，反而会由于拆分后的模块之间，不得不进行交互，变得更加复杂。</p><h3 id="复杂度治理实践"><a href="#复杂度治理实践" class="headerlink" title="复杂度治理实践"></a>复杂度治理实践</h3><ol><li>相比 coding 更重视设计</li><li>永远做 2 套以上的方案</li><li>从 MVP 的视角考虑设计：从 MVP （最小完整业务的角度）去考虑系统要如何设计与实现，先做减法再做加法</li><li>关注上下游的实现</li><li>坚持“日拱一卒</li></ol><h3 id="没必要一定把系统做成中台"><a href="#没必要一定把系统做成中台" class="headerlink" title="没必要一定把系统做成中台"></a>没必要一定把系统做成中台</h3><p>没必要一定把系统做成中台，不做中台就会落后更是无稽之谈，不过，你可以借鉴中台的思路作为系统设计与演进上的形态参考。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%B8%89%E8%A6%81%E7%B4%A0/CioPOWAlYm-AU3RIAAIkbegMocs361.png" alt="复杂度"></p><hr><p class="note note-success"> 管理三板斧：拿结果、建团队、招聘与解聘</p><h1 id="定目标：让你的方向与公司的方向保持一致"><a href="#定目标：让你的方向与公司的方向保持一致" class="headerlink" title="定目标：让你的方向与公司的方向保持一致"></a>定目标：让你的方向与公司的方向保持一致</h1><h2 id="怎么解读目标？"><a href="#怎么解读目标？" class="headerlink" title="怎么解读目标？"></a>怎么解读目标？</h2><p>解读目标就是要确保自己做的事儿和公司的方向一致，顺势而为，没有走偏（这里的“势”就是公司的战略和目标），正因为有了目标才有根据目标制定的 KPI，才会有围绕目标的执行动作和最终取得的结果。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWAqh56AQalmAAE6asGZIRs826.png"></p><p>目标不是一句口号，它是一个个层层拆解、递进的过程。说白了，解读目标是把公司的方向变成你的方向，把上一层的问题转变成你可以改变的问题。</p><p>确保目标解读正确有很多技巧和方法。根据目标逐层分解的特性，可以考虑四个方面。</p><ul><li><p>你的主管，确定你老板的目标是什么；</p></li><li><p>你自身所在的团队、团队的成员们，根据团队情况确定现状；</p></li><li><p>与你紧密合作的上下游（研发），比如你是做订单系统的，那么支持属性很重，商户、导购、用户很多研发团队都是你的上下游关联方；</p></li><li><p>直接对口的业务与产品，这是业务目标拆解、业务痛点、客户诉求的直接来源方。</p></li></ul><h2 id="怎么制定目标？"><a href="#怎么制定目标？" class="headerlink" title="怎么制定目标？"></a>怎么制定目标？</h2><p>结合 4 个关键点来考虑：</p><ol><li>“短长”结合：事情分轻重缓急，你一直盯着“急”和“重”，“轻”和“缓”的事情就会转变成“重”和“急”，进入死循环。</li><li>要足够聚焦：建议关键目标不要超过 3 个，最多控制在 5 个以内，要找最有客户价值、对公司战略最有帮助的点，目标越少、方向越清晰，当问题发生或者需要判断时越容易做决策，在有限的时间内做出更好的结果。</li><li>要有足够的挑战：系统可用性假如去年是 3 个 9，今年考虑业务会发展保守起见还是力保 3 个 9，这样的目标挑战性就不足，也无法体现技术的价值。这个度量是很考验你的。</li><li>要让组织有沉淀、个人有成长：通过一个个目标的完成，让参与的同学得到个人能力的提升，未来可以承担更大的职责，组织也在这个过程做能力的积累与沉淀。</li></ol><p>结合以上四点，围绕目标和团队一起讨论策略与打法，将目标拆解成几个关键任务，明确到责任人，总结一下就是：定策略、拆任务、细到人。</p><h2 id="怎么传递目标？"><a href="#怎么传递目标？" class="headerlink" title="怎么传递目标？"></a>怎么传递目标？</h2><p>大部分情况下，你会发现信息不对等、传递过程中的损失、个人理解的差异，直接导致不是所有人都清楚“我们要往哪去”。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWAqh9iAfN3jAAE8QXqq33w549.png"></p><p>最后，目标的传递是一个连贯的动作，要落到日常的管理动作、重点项目与任务、KPI 的过程管理这些平日的点滴中。目标要反复讲，要经常对焦，重要的事儿，3 遍是不够的，要说“300 遍！”。</p><p>所谓的方向与目标就是：你要往哪去，你要走多远，你要走到哪。清晰的目标就好比沙漠中的指南针，让你能比其他人更快找到水源并生存下去，今天这节课，我提醒你注意这样几点：</p><ul><li>解读目标非常重要，切勿陷入极端，要么不解读，要么领导说什么就是什么。</li><li>制定目标一定要够聚焦，但切勿只考虑眼前，注意“长短结合”。</li><li>注意目标传递，要充分考虑团队成员的感受，选取合适的方式。</li></ul><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/Cgp9HWAqh-mAAqQvAAHkRyUTqL0533.png" alt="定目标"></p><h2 id="追过程：如何用-PDCA-做过程管理？"><a href="#追过程：如何用-PDCA-做过程管理？" class="headerlink" title="追过程：如何用 PDCA 做过程管理？"></a>追过程：如何用 PDCA 做过程管理？</h2><p>只有掌握过程管理的方法，才会尽可能减少事务往不好方向发展的波动，从而更轻松、更低风险、更稳妥地去拿到结果，让一切尽在掌控。</p><h3 id="什么是过程管理？"><a href="#什么是过程管理？" class="headerlink" title="什么是过程管理？"></a>什么是过程管理？</h3><p>管理就是追求事务的可持续发展，而想要达成这个目标有两个基本点：</p><ul><li><p>管理动作要形成可持续迭代的闭环；</p></li><li><p>管理动作足够简单到可以复制和个性化升级。</p></li></ul><p>过程管理是为了让你的想法、灵感、不稳定的发挥逐渐规律化，可以持续迭代被你应用，它的本质就是希望结果越来越好，让你原本靠运气或者模糊经验得来的成功可以被复制，让你在项目中灵光一闪的 Idea 变成你的常规能力。</p><h3 id="PDCA-模型"><a href="#PDCA-模型" class="headerlink" title="PDCA 模型"></a>PDCA 模型</h3><ul><li>Plan（定计划）：围绕着目标明确里程碑，确定关键节点，与执行的员工达成共识。</li><li>Do（做执行）：多给员工空间、多走动、多观察、少干预，放手而非放任，你也不能置身事外。</li><li>Check（勤检查）：狠抓关键节点做检查、问进展、问困难、给建议、做辅导、协调资源。</li><li>Action（复盘调优）：小事尽快复盘、大事分阶段复盘、事后全面复盘，抓住每一次提升和优化的机会。</li></ul><h3 id="如何用-PDCA-做过程管理？"><a href="#如何用-PDCA-做过程管理？" class="headerlink" title="如何用 PDCA 做过程管理？"></a>如何用 PDCA 做过程管理？</h3><p>很多能力和经验是历练出来的，只要过程可控，过程中走一些弯路也未必是坏事，要允许犯错。但是你要注意，放手不等于放任，更不等于不闻不问，你依然要对最终的结果负责。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWAuOIWATM3RAAKl9h_7RCo041.png" alt="会议"></p><ul><li>复盘前：复盘前的核心在于思考复盘的目的和产出是什么。借此，你才可以明确复盘会议主要会聊些什么，哪些人会参加。</li><li>复盘中：自省是复盘会的基调，复盘就一个目的“找到团队的不足加以改进，以便在未来取得更好的结果”。所以每个人没必要甩锅，也没必要全盘否定。在复盘的过程中，一定要把问题找准，内部对齐，达成所有人的共识。</li><li>复盘后：会议有结论，结论有计划，计划有责任人，责任人有行动，要建立机制保证在复盘会上讨论出的结论能够落地。</li></ul><p>总的来说，小事儿尽快复盘，借此向团队成员传授自己的经验；大事儿分阶段复盘，抓住重点矛盾，推动事情的顺利发展而非追求完美；事后全面复盘，不管对个人还是团队，找自己的问题都是 ROI 最高的方式，找到问题的一方才有改善提升的可能。</p><h3 id="三个重点："><a href="#三个重点：" class="headerlink" title="三个重点："></a>三个重点：</h3><ol><li>目标不会自己长腿走向终点，你一定要做好过程管理以取得可靠的结果。</li><li>追过程不意味着事无巨细都要做，追哪些、什么时候追、追到什么程度才是你更应该关心的。</li><li>复盘是 PDCA 管理动作中的闭环，如果每次都能提高一点点，长期积累的变化就很大了。</li></ol><hr><h2 id="奖优罚劣：怎样传递我们”要什么”与“不要什么”？"><a href="#奖优罚劣：怎样传递我们”要什么”与“不要什么”？" class="headerlink" title="奖优罚劣：怎样传递我们”要什么”与“不要什么”？"></a>奖优罚劣：怎样传递我们”要什么”与“不要什么”？</h2><p>“奖优罚劣”之所以重要，是因为它能让团队形成可持续发展的氛围，是拿结果的闭环。而我们在这个过程中要注意的就是：引导人性而非对抗人性。</p><h3 id="什么是奖优、罚劣"><a href="#什么是奖优、罚劣" class="headerlink" title="什么是奖优、罚劣"></a>什么是奖优、罚劣</h3><p>奖优最终会落到物质和精神上：</p><ul><li><p>物质上的奖优作用大，但是频次较低，比如以半年/年为单位的晋升、调薪，它能够打开成员的天花板，比如拿了A绩效的同学，第二年他依然希望是A而不是B，从而提高对自己的要求与期望，更容易取得好的成绩。</p></li><li><p>精神上的奖优体现在日常行为上，频次较高，比如你关注和肯定某位成员的行为，在团队内通过邮件、钉钉等方式简单鼓励推广他的行为。</p></li></ul><p>罚劣也会落到物质和精神上，但它是动作而非目的，你要通过罚劣来传递团队不能容忍什么样的行为，以此提醒、鞭策大家。奖优和罚劣是相互依赖的。</p><p>“奖优罚劣”的误区：</p><ul><li><p>没有意识到奖优罚劣的示范作用。 你要把“奖优罚劣”当作宣传动作，把结果辐散出去，引导团队风向。</p></li><li><p>注重罚劣，忽略奖优。</p></li><li><p>奖惩动作过于儿戏，容易被滥用：“奖惩动作”要建立在尊重的基础上，让成员有收获和反思。</p></li></ul><h3 id="奖优罚劣的关键动作"><a href="#奖优罚劣的关键动作" class="headerlink" title="奖优罚劣的关键动作"></a>奖优罚劣的关键动作</h3><h4 id="绩效考核"><a href="#绩效考核" class="headerlink" title="绩效考核"></a>绩效考核</h4><p>我们要从一开始被主观因素影响，逐渐认识到客观的环境与现实，最终在理性与人性中寻找一个平衡，让大家看到付出和能做出好成绩的同学，回报是远远高于其他人的，对于拖整体后退、持续不能改善的同学，团队是不欢迎的。</p><h4 id="绩效面谈"><a href="#绩效面谈" class="headerlink" title="绩效面谈"></a>绩效面谈</h4><p>绩效面谈的核心出发点是通过这次绩效的结果改变某些行为与认识，让团队在未来取得更好的成绩，并不是单纯地通知结果。</p><p>面谈流程：</p><ol><li>开场定基调</li><li>员工自评</li><li>主管评价</li><li>对焦共识</li><li>面谈总结</li><li>后续跟进</li></ol><h4 id="薪酬激励"><a href="#薪酬激励" class="headerlink" title="薪酬激励"></a>薪酬激励</h4><p>三个基本原则：</p><ol><li>问自己是否敢将资源分配的逻辑与规则在阳光之下讲出来。</li><li>不要撒胡椒面，也别做大锅饭，让好的结果超出预期。</li><li>面向未来而非现在去做考虑</li></ol><p>牢记资源总是有限的，资源分配本身是博弈，有人多就要有人少。这种情况下，平均分配的结果不是普天同庆，而是所有人都不满意，每个人都觉得少。与其如此，不如把资源倾斜到那些你团队最优秀、绩效最好的同学身上，让他们得到预期的收益甚至超出预期。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWAzaOuAOmbSAADrwmhxbqc219.png" alt="奖优罚劣"></p><hr><h2 id="勤沟通：在信任的基础上，让沟通简单且纯粹"><a href="#勤沟通：在信任的基础上，让沟通简单且纯粹" class="headerlink" title="勤沟通：在信任的基础上，让沟通简单且纯粹"></a>勤沟通：在信任的基础上，让沟通简单且纯粹</h2><p>要知道，沟通是有目的的，既然沟通的对象是人，我们还希望通过沟通去达到一定的结果（效果），那么就要懂得一定的道理与技巧。</p><h3 id="沟通的核心原则"><a href="#沟通的核心原则" class="headerlink" title="沟通的核心原则"></a>沟通的核心原则</h3><p>沟通是内心想法和思考逻辑的外延，如果你有良好的沟通能力，可以在整个团队中营造公开透明的信任氛围，让信息透明的同时，也让团队成员愿意发出自己的声音。</p><p>沟通核心原则的定义是：在相信对方的基础上，让沟通氛围变得“简单且纯粹”。</p><h3 id="不同维度的沟通"><a href="#不同维度的沟通" class="headerlink" title="不同维度的沟通"></a>不同维度的沟通</h3><p>向上沟通有胆量、平行沟通有肺腑、向下沟通有心肝。</p><ul><li>向上沟通要有技巧、有原则，认清沟通的目标与目的，不轻易妥协导致更严重的后果。</li><li>关于平行沟通有肺腑是指你要真诚沟通，不要油滑套路。</li><li>向下沟通有心肝是指有同理心，有尊重的同时要感同身受。</li></ul><h3 id="两个具体的沟通场景"><a href="#两个具体的沟通场景" class="headerlink" title="两个具体的沟通场景"></a>两个具体的沟通场景</h3><h4 id="One-One-沟通"><a href="#One-One-沟通" class="headerlink" title="One One 沟通"></a>One One 沟通</h4><ol><li>接地气，说人话</li><li>视人为人</li><li>沟通要“勤”</li></ol><h4 id="团队沟通"><a href="#团队沟通" class="headerlink" title="团队沟通"></a>团队沟通</h4><p>与One One沟通不同的是，团队沟通受人数的限制，是一对多的沟通，所以除了参考OneOne沟通的核心点外，你最关键的应该是搭场子，发起团队沟通。</p><p>团队沟通目的性更强，频次不高，考验你的控场能力。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/Cgp9HWA2GNuATPfwAAG2oUoqhik144.png" alt="勤沟通"></p><hr><h2 id="建机制：规则流程越建越多，为何效果却越来越差？"><a href="#建机制：规则流程越建越多，为何效果却越来越差？" class="headerlink" title="建机制：规则流程越建越多，为何效果却越来越差？"></a>建机制：规则流程越建越多，为何效果却越来越差？</h2><h3 id="机制发挥什么作用？"><a href="#机制发挥什么作用？" class="headerlink" title="机制发挥什么作用？"></a>机制发挥什么作用？</h3><p>两类机制：</p><ul><li><p>与管理相关： 比如为了信息互通，约定每周固定时间通过邮件、会议、IM 等方式，将提前定义好的信息做一个汇总交互（表现为周报、周会等），这就是机制的一种具现。</p></li><li><p>与技术相关： 比如为了多人协同，制定开发流程、Bug 处理、发布上线流程，甚至在日常实际开发的工作中，往往也先定义 API 契约，然后在联调测试时再真正实现验证，这些约定、契约、流程都是对应机制在落地时的具体表现。</p></li></ul><p>站在团队的角度，建机制尤为重要，你要通过机制让团队有统一的行为与规则，让组织像人一样，言行举止有规律可循。</p><h3 id="如何设计一个好的机制？"><a href="#如何设计一个好的机制？" class="headerlink" title="如何设计一个好的机制？"></a>如何设计一个好的机制？</h3><ul><li>规则统一，不自相矛盾</li><li>简单有效，便于增删</li><li>紧盯整体结果，机制的 ROI 要足够高</li></ul><h3 id="机制要怎么落地？"><a href="#机制要怎么落地？" class="headerlink" title="机制要怎么落地？"></a>机制要怎么落地？</h3><ul><li><p>先说 why： 即机制的内容是什么？为了解决什么问题？你在设计机制时是如何思考的？</p></li><li><p>共识的要与不要： 和大家讨论我们要不要这样做？看看大家是怎么想的，通过对话和引导形成一定的结论，有些内容需要保留，有些不合理需要剔除，促成结论最为重要。</p></li><li><p>承诺行为举止： 确认机制之后，需要让结论形成对各自行为的约束。比如不同的成员认领不同的角色和任务，或者在 IM 中一起公告规则，总之每个成员要与机制的参与感。</p></li></ul><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWA9Dj-AbXWgAAQfSFZSZ1Y787.png" alt="会议设计"></p><p>先考虑目的， CodeReview 主要是解决两方面的问题：提高代码质量；帮助开发同学认识到如何写出更好的代码。</p><p>不同的侧重点设计出来的机制也有所不同，按照我的理解，CodeReview 的主要作用还是帮助大家成长，打造团队内的技术提升氛围，次要才是促进产品质量的提升。</p><p>确定了核心想要达成的效果，接下来就可以着手确定机制的内容，这里面要考虑几个方面的内容：可能会遇到的问题（阻力）、机制实施的成本、机制运行的时机和周期、站在一个机制参与者的角度考虑他要做什么。</p><p>具体 CodeReview 的机制方案可以参考下图：</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/Cgp9HWA9DlSAQbjfAAGeT66ULls027.png" alt="code review"></p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWA9DlyAYnBoAADCktnlzHk931.png" alt="建立机制"></p><hr><h2 id="知人善用：借事修人，借人成事"><a href="#知人善用：借事修人，借人成事" class="headerlink" title="知人善用：借事修人，借人成事"></a>知人善用：借事修人，借人成事</h2><h3 id="知人善用的三个关键点"><a href="#知人善用的三个关键点" class="headerlink" title="知人善用的三个关键点"></a>知人善用的三个关键点</h3><ol><li>找对人</li><li>培养人</li><li>养成人</li></ol><h3 id="怎么落地执行？"><a href="#怎么落地执行？" class="headerlink" title="怎么落地执行？"></a>怎么落地执行？</h3><ul><li>团队盘点</li><li>激发意愿</li><li>改善计划</li></ul><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>不怕没缺点，就怕没特点： 你借人成事，不能一味地关注他的缺点，而是要寻找其特点，发挥他的擅长点，有缺点不可怕，就怕没特点。</li><li>新人做老事，老人做新事： 如果在团队中老人一直做老事，新人做新事，那么会出现老人没有新的提高，新人也要克服很多未知的困难；反之，可以重新激发老人的活力，也让新人有借鉴之处。</li><li>不要越俎代庖，什么都自己上： 用人的过程中会出现“事情做错”的情况，一旦你发现这样的情况，千万不要直接去帮他纠正，这样无法帮助团队成员成长，团队成员只会当犯错误时，等着你来帮他解决。好的 Leader一定是要在明知前方有坑（这个坑一定是你能控制的）的情况下，也要让团队成员去踩一回，让其有试错的机会，让每个错误都物有所值。</li><li>给机会的同时，给压力和帮助： 很多时候压力是成长的催化剂，有了压力也就有了 120% 的动力，所以把某个任务或职责给到一个同学的时候，也要把适当的压力传递过去，让他感受到事情的重要性。与此同时，时刻关注，该给的帮助一定要给到，不能不闻不问。</li><li>既敢于承认错误，也允许别人犯错： 让一个人成长不可能完全不让他犯错，有时一些可控的错误反而可能是事后看最大的收获。同时，也不要认定自己之前的做法都是对的，要意识到，哪怕你之前做成功过，也不意味着你就一定是100%正确的。好的 Leader 在培养团队成员时，既要让团队不怕犯错（敢干事），也要敢于承认自己不足，去改善去提高。</li></ul><h2 id="找到人：招聘是-Leader-的责任，不是-HR-的"><a href="#找到人：招聘是-Leader-的责任，不是-HR-的" class="headerlink" title="找到人：招聘是 Leader 的责任，不是 HR 的"></a>找到人：招聘是 Leader 的责任，不是 HR 的</h2><h3 id="招人不等于盲目加人"><a href="#招人不等于盲目加人" class="headerlink" title="招人不等于盲目加人"></a>招人不等于盲目加人</h3><p>明确业务目标；盘点团队需求；做出岗位设计；提炼岗位要求。</p><h3 id="闻味道、问事实、看能力"><a href="#闻味道、问事实、看能力" class="headerlink" title="闻味道、问事实、看能力"></a>闻味道、问事实、看能力</h3><p>面试前看简历，面试中更多倾听，面试后速写评价。</p><ul><li>问事实（STAR法则，看候选人所说的内容是否真正做过，以及思考过程）</li><li>看能力</li><li>闻味道（是否和团队匹配）</li></ul><h3 id="宁缺毋滥，守住底线"><a href="#宁缺毋滥，守住底线" class="headerlink" title="宁缺毋滥，守住底线"></a>宁缺毋滥，守住底线</h3><h4 id="关注未来"><a href="#关注未来" class="headerlink" title="关注未来"></a>关注未来</h4><ol><li>他是否有能力的同时还有潜力？比如很强的发展欲望或学习能力？</li><li>他身上是否有特质足够吸引你？比如让你觉得当他未来会比你更优秀？</li><li>你是希望与他这样的人一起共事的？</li><li>当他加入团队后，能否将团队氛围激活，形成鲶鱼效应？</li></ol><h4 id="宁缺毋滥"><a href="#宁缺毋滥" class="headerlink" title="宁缺毋滥"></a>宁缺毋滥</h4><ul><li><p>能力水平超过团队 50% 的人以上：确保团队越来越强，而不是越来越弱，有的 Leader会觉得候选人比团队最差的两个人好就可以了，但这样一来，随着时间拉长，你的团队会越来越差。</p></li><li><p>内心是否非常犹豫？犹豫往往意味着“不想要 &gt; 想要”，如果是迫于业务压力不得不加人，我建议你还是不要勉强，因为有可能本来解决业务压力就可以的问题演变成还要额外解决不适合的新员工的问题。</p></li></ul><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/Cgp9HWBF1_6AMv9fAAFMMGSqBd0745.png" alt="找到对的人"></p><h2 id="能落地：90-天试用期，转正时我们要考察什么？"><a href="#能落地：90-天试用期，转正时我们要考察什么？" class="headerlink" title="能落地：90 天试用期，转正时我们要考察什么？"></a>能落地：90 天试用期，转正时我们要考察什么？</h2><ol><li>明确新同学落地的整体节奏</li><li>重点抓试用期考核以及工作习惯的养成</li><li>转正结束后依然保持跟进</li></ol><h3 id="既要帮，也要严"><a href="#既要帮，也要严" class="headerlink" title="既要帮，也要严"></a>既要帮，也要严</h3><p>“既要帮，也要严”是我定义的“能落地”的核心原则，“帮”与“严”是双向要求：帮是指帮助新同学融入团队（针对的是师兄和 Leader）；严是要让新同学在团队中提升自己，遵守团队的做事原则，发挥自己的能力与价值（针对新同学自己）。</p><p>招聘只是开始，让新同学能落地、发挥价值才是最终目标。</p><h3 id="明确新同学落地的整体节奏"><a href="#明确新同学落地的整体节奏" class="headerlink" title="明确新同学落地的整体节奏"></a>明确新同学落地的整体节奏</h3><ol><li>用迎新打破大家在情感上的壁垒；</li><li>给新同学安排“师兄”；</li><li>明确新同学的作业与目标（做出一些成绩达到转正）；</li><li>明确告知转正应该怎么做（把转正做重、做实）。</li></ol><h3 id="转正述职要考核什么"><a href="#转正述职要考核什么" class="headerlink" title="转正述职要考核什么"></a>转正述职要考核什么</h3><p>转正述职才是真正意义上的招聘结束！</p><ul><li><p>把控转正时间： 提前半个月跟 HR 或者“师兄”确定转正述职时间点。</p></li><li><p>建立评委会： 由 Leader 主导，与其合作的伙伴（技术同学、产品或者运营）组成小的评委会（如果团队成员较少，也可以只有 Leader 和 HR）这里要注意，合作伙伴的反馈也许会比较主观，你在参考时要尽量保持客观。</p></li><li><p>明确考核内容： 硬性要求+软性要求。</p></li></ul><h3 id="成长期的跟进"><a href="#成长期的跟进" class="headerlink" title="成长期的跟进"></a>成长期的跟进</h3><p>慢慢叠加、主动跟进、树立信心</p><h2 id="升级汰换：“心要慈，刀要快”"><a href="#升级汰换：“心要慈，刀要快”" class="headerlink" title="升级汰换：“心要慈，刀要快”"></a>升级汰换：“心要慈，刀要快”</h2><h3 id="开除人“心要慈，刀要快”"><a href="#开除人“心要慈，刀要快”" class="headerlink" title="开除人“心要慈，刀要快”"></a>开除人“心要慈，刀要快”</h3><ul><li><p>No Surprise： 不要突然Fire一个人（离职一定不是一个突发行为），没有任何征兆告诉员工 A“你被开除了”，这是典型的管理失职。如果A存在问题，你应该先告知，然后一边和他一起制定改善计划，一边督促其改正。离职往往是一个可预期的结果，无法满足工作需要或者对团队有其他伤害而 A 依旧无法改变时，为了避免对团队产生持久不利的影响，就需要让他离开。</p></li><li><p>心要慈、刀要快： 杰克·韦尔奇（Jack Welch）曾经说过这样一句话“如果一个人到了中年之后，还没有被告知自己的弱点，反而在某一天因为节约成本的原因被裁掉了，这是最不公平、最不应该发生的事情。就是因为这个公司太仁慈了，他连出去找工作、提升自我的可能性和机会都没有。”你可能觉得，在情感上解聘一个人非常糟糕，但是换一个角度想，如果你对一个人很不满意，却又不找他谈话，不要求他改进，又不开除他，那么从最终结果看不仅对他很残酷，这种“拉锯战”对团队也是不负责任的。</p></li><li><p>Happy stay、Happy go： 很多时候，送走一个同学对彼此来说并不是一件糟糕的事，换个角度看，如果他在当前环境下一直无法适配团队，对他来说也是很难受的，这时分开对他对团队都是解脱。尤其是当公司出现变化时，如果一些同学不再合适，换环境来讲对他是新的机会，所以你不要存在太多的情绪，而是要往“好聚好散”的方向上推动。</p></li></ul><h3 id="不要给“白兔”生存机会"><a href="#不要给“白兔”生存机会" class="headerlink" title="不要给“白兔”生存机会"></a>不要给“白兔”生存机会</h3><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/Cgp9HWBLFaeAA8v9AAA6D5TpRtM361.png"></p><p>白兔看起来人畜无害，繁殖能力极强，大公司里最容易存在的就是“白兔”（不干活的好人）。他们目标和价值观认同度较高，但是业绩长期拖后腿。每一家公司都有这样的人，看着勤勤恳恳，但却拿不到任何结果，如果你纵容白兔的存在，那么长久下去，很容易滋生一群白兔磨洋工，针对这类员工，你前期可以给予改正的机会，如果依旧没有改善，应该毫不犹豫将其送走。</p><h3 id="离职面谈“TRF”"><a href="#离职面谈“TRF”" class="headerlink" title="离职面谈“TRF”"></a>离职面谈“TRF”</h3><p> Train him、Remove him、Fire him</p><p>Train him 是指如果他能力跟不上，你可以给予其帮助；Remove him 是指如果他的能力和岗位匹配有问题，你要更多地采用转岗的方式，为他的发展打开空间；如果在你给予他机会之后，他还是无法改善，那你就应该 Fire him。</p><p>需要避免的：</p><p>“谈不了”：辞退的事实依据不充分，对离职原因讲不清楚。</p><p>“无重点”：对有关问题避重就轻，只说无关痛痒的祝福。</p><p>“没技巧”：对员工工作横加指责，面谈完反而加深了矛盾。</p><p>“从不谈”：是对员工存在很大偏见，不面谈直接一拍两散。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E4%B8%89%E6%9D%BF%E6%96%A7/CioPOWBLFeGAX6HuAADUCQlA8L8413.png" alt="升级汰换"></p><hr><h1 id="技术管理的常见痛点"><a href="#技术管理的常见痛点" class="headerlink" title="技术管理的常见痛点"></a>技术管理的常见痛点</h1><h2 id="晋升：是不是技术到位、项目做好就够了？"><a href="#晋升：是不是技术到位、项目做好就够了？" class="headerlink" title="晋升：是不是技术到位、项目做好就够了？"></a>晋升：是不是技术到位、项目做好就够了？</h2><h3 id="经过多少“关”才能晋升？"><a href="#经过多少“关”才能晋升？" class="headerlink" title="经过多少“关”才能晋升？"></a>经过多少“关”才能晋升？</h3><p>晋升步骤：</p><p>晋升启动——主管提名——部门提报——述职答辩——结果表决——公司复审——结果公布</p><h4 id="提名沟通"><a href="#提名沟通" class="headerlink" title="提名沟通"></a>提名沟通</h4><p>可以在薪资、年终奖等激励上体现自己对苦劳同学的关注，而对于想要晋升的同学，应该更多给他能力培养的机会，因为对技术同学而言，技术是晋升的基础，战功与业绩也缺一不可，后者是为了证明自己的能力和担当足以承载更多职责。</p><p>大部分情况下苦劳不等于功劳，是否具备下一个角色所需要的条件才是晋升考核的侧重点。</p><h4 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h4><p>4 个关键词：资料素材来源、证明实力、PPT编写、赛前演练与心理辅导</p><p>素材来源于“过去财年总结 + 新财年的规划 + 汇报材料 + 分享材料 + 项目总结”，因为经过沉淀的资料才最有价值。有了一些素材资料后，就要把控准备阶段的核心：通过素材去证明你具备下一职级所需要的能力。</p><p>围绕 5 个维度（架构能力、细节把控的能力、工程的能力、团队的能力、技术视野）去梳理和提炼关键信息，准备相关资料。</p><p>编写 PPT 将证明你能力的框架可视化，突出重点、内容翔实、数据说话、功劳大于苦劳、突出自我。</p><p>在团队内部让有提名的同学预演一遍自己准备的内容，其余同学从中指出存在的问题（是否紧张、是否突出亮点……）争取让他脱稿，逻辑严谨，减少紧张感；一些同学会格外在意晋升这件事，患得患失，所以 Leader 要帮他平缓心态，帮助其建立正确的认知：把晋升当作一次分享和总结，就当是对过去一段时间的回顾，不管结果如何，总有所收获。</p><h4 id="晋升答辩"><a href="#晋升答辩" class="headerlink" title="晋升答辩"></a>晋升答辩</h4><ul><li>拿结果的能力： 清晰的客户价值产出，有思考沉淀和可复制的方法论；</li><li>业务理解能力： 客户视角、前瞻性思考与判断、可以持续提升客户价值。</li></ul><h4 id="结果安排"><a href="#结果安排" class="headerlink" title="结果安排"></a>结果安排</h4><p>晋升答辩之后，无外乎两个结果：晋升成功、失败。作为 Leader，你需要让候选人认识到这两种结果，并告知尽最大的努力，考虑最坏的结果，避免形成落差，候选人离职；如果候选人晋升成功，简单庆祝过后，还需要为其新角色明确新的要求和职责，让他有更明确的努力方向，在团队内发挥更大的作用，不要把晋升当作终点，而是后面工作的起点。</p><blockquote><p>晋升不是奖励，是责任与担当，是为未来做的事。</p></blockquote><p><img src="/images/%E5%B8%B8%E8%A7%81%E7%97%9B%E7%82%B9/CioPOWBS8c-AJOCiAAO-OZ0qSJg929.png" alt="晋升"></p><h2 id="跨团队：没有汇报线的人和事就是推不动？"><a href="#跨团队：没有汇报线的人和事就是推不动？" class="headerlink" title="跨团队：没有汇报线的人和事就是推不动？"></a>跨团队：没有汇报线的人和事就是推不动？</h2><h3 id="跨团队事务推进的难点"><a href="#跨团队事务推进的难点" class="headerlink" title="跨团队事务推进的难点"></a>跨团队事务推进的难点</h3><ul><li>方案无法达成一致： 你提出的 A 方案与运营团队提出的 B 方案，在实现成本、方式、资源等方面存在很明显差异，陷入僵局。</li><li>时间无法达成一致： 协作方赞同 A 方案，但对“一周上线项目”的时间节点有意见，认为至少需要 20 天，这会从“时间无法达成一致”回滚到“方案无法达成一致”，陷入新一轮僵局。</li><li>优先级无法达成一致： 协作方赞同 A 方案，对项目用时一周也无异议，但该项目优先级在他那儿没有提到很高，一直有优先级更高的项目插队，导致交付时间一变再变、一拖再拖。</li><li>阶段性交付结果不一致： 因为某些原因（线上突发状况、同学请假、人员能力较差……），与你协作团队在配合时交付你的结果质量无法满足你的需求，比如运营给的方案有很大漏洞、技术给的接口 Bug 比功能点还多，你又无法直接管理对方团队的成员，最终即使更正了也可能浪费了额外的时间。</li></ul><p>难点产生的原因：</p><ul><li><p>协作方不清楚项目原因和意义，会优先考虑自身利益，根据利益高低推进难度由易到难</p></li><li><p>协作方有自己当前的工作内容和优先级，突然配合进行其他事务，引入的风险往往较高</p></li><li><p>各部门对彼此之间的工作方式、团队经验以及当前现状往往不了解</p></li><li><p>任务细化，跨团队合作受时间、空间等因素影响沟通成本较高，有些问题不知道该找谁</p></li></ul><h3 id="跨团队事务推进的基本态度"><a href="#跨团队事务推进的基本态度" class="headerlink" title="跨团队事务推进的基本态度"></a>跨团队事务推进的基本态度</h3><ol><li>不要做情绪的奴隶，先找自己的问题</li><li>快刀斩乱麻，避免因复杂的问题陷入沼泽</li><li>慢思考，快执行</li></ol><p>借力前行，摆事实讲道理，凭职级，行进办法，达成目标。</p><h3 id="跨团队事务推进的原则方法"><a href="#跨团队事务推进的原则方法" class="headerlink" title="跨团队事务推进的原则方法"></a>跨团队事务推进的原则方法</h3><ul><li>合作前（明确目标，确保信息完整）</li><li>合作中（定位问题，借势而为）</li><li>合作后（承担责任，公开肯定）</li></ul><p>换位思考、摆事实、讲道理、凭职级、借势而行、想尽办法达成目标。</p><h2 id="做规划：除了交付和稳定性，还要规划什么？"><a href="#做规划：除了交付和稳定性，还要规划什么？" class="headerlink" title="做规划：除了交付和稳定性，还要规划什么？"></a>做规划：除了交付和稳定性，还要规划什么？</h2><p>团队规划解决的核心问题是：让你在有限的时间和资源内，明确怎么去创造最大的技术价值（ROI）。而且在做团队规划的过程中，其实是一个深入思考、梳理的过程，你可以复盘过去、梳理当下、展望未来，少走弯路。</p><h3 id="做规划要考虑团队现状"><a href="#做规划要考虑团队现状" class="headerlink" title="做规划要考虑团队现状"></a>做规划要考虑团队现状</h3><ol><li>明确定位与职责</li><li>人员情况</li><li>业务情况</li></ol><p>一个可以参考的思路是： 盯着业务目标去延展人员和业务，从而判断哪些是依赖项，哪些是前置项？在大部分公司中，技术很难直接创造商业价值，往往还是要依赖于业务，所以把业务作为第一目标，为了达成某个业务结果，需要调整人员结构，招聘一些更厉害的人汰换一些不行的人，研究并实现一些新技术，这是比较自然的。</p><h3 id="你的规划中包含了什么？"><a href="#你的规划中包含了什么？" class="headerlink" title="你的规划中包含了什么？"></a>你的规划中包含了什么？</h3><p>不同的技术团队，在规划时所拟定的内容都是不同的，但你其实都可以提炼成共性的3 部分。</p><ul><li><p>业务结果： 直白说就是业务层面的战绩，你团队打造了一个公司 GMV 占比超过 50%的商城，或者支撑了某个快速发展业务，这些都是业务结果，用业务数字来说话。</p></li><li><p>技术创新： 由技术人员发起或完成的所有降本提效的动作，但是同样要看优先级和投入产出比。</p></li><li><p>团队建设： 让团队可以长期健康发展下去，要在 Backup、人员组成、机制建设等多个方面下功夫。</p></li></ul><p>自问：</p><ul><li><p>WHY：为什么做业务目标/技术创新/团队建设的规划？</p></li><li><p>WHAT：是否能说明业务目标/技术创新/团队建设规划解决的问题、价值与作用？</p></li><li><p>WHO：由谁承担？负责人的优势与跌势是什么？</p></li><li><p>WHEN：所做的规划着眼于现在还是未来？能否保证长期有价值？</p></li><li><p>HOW：针对不同的部分，具体的落地细则如何？</p></li><li><p>HOW MUCH：规划要做到什么程度？是否可以形成可衡量的KPI？</p></li></ul><h3 id="业务结果"><a href="#业务结果" class="headerlink" title="业务结果"></a>业务结果</h3><p>你要明确现阶段上级领导关注的重点是什么？是转化、流量、留存、还是产品的用户体验？作为技术Leader ，你和团队成员的到达路径是什么？这是线索来源之一。</p><h3 id="技术创新"><a href="#技术创新" class="headerlink" title="技术创新"></a>技术创新</h3><p>稳定性、效能优化、驱动业务、视野展望</p><h3 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h3><p>团队建设的关键不只是知人善用，而是：</p><ol><li><p>团队未来需要什么样的人？</p></li><li><p>目前团队成员需要什么样的状态和能力？</p></li><li><p>团队成员需要承担什么样的责任？</p></li></ol><p>总的来说，你希望未来自己的团队成为怎样的团队？以此推导离理想状态多远？怎么缩小差距？</p><h3 id="规划落地时的问题与思路"><a href="#规划落地时的问题与思路" class="headerlink" title="规划落地时的问题与思路"></a>规划落地时的问题与思路</h3><p>容易出现的问题：</p><ol><li>规划不等于计划</li><li>规划内容想得太多，做成的少</li><li>业务压力大，盲盯痛点，忽视目标</li><li>规划最终成了技术Leader的规划</li></ol><p>做团队规划是一件比较综合宏观的事情，有时哪怕只是几个人的团队，想做好一份规划而非执行计划也很考验 Leader 的思考深度，某种程度来说，规划是你定义一群人在未来一段时间内做什么、怎么做、最终变成什么样。这个过程中需要考量的点非常多，这些深入的思考也会促进你日常的一些行为和结果，对于团队的季度乃至半年规划我是非常推荐你要定期梳理并落地的，有目标和没目标的团队，还是有很大的差别的。</p><p><img src="/images/%E5%B8%B8%E8%A7%81%E7%97%9B%E7%82%B9/Cgp9HWBcUYKAHXrjAAHoV4ZOizs520.png" alt="做规划"></p><h2 id="接手新团队：士气低、交付迟、事故多发，如何下手解决？"><a href="#接手新团队：士气低、交付迟、事故多发，如何下手解决？" class="headerlink" title="接手新团队：士气低、交付迟、事故多发，如何下手解决？"></a>接手新团队：士气低、交付迟、事故多发，如何下手解决？</h2><p>虽然接手一个问题团队很难，要处理很多问题并且非常辛苦，但是对一个 Leader 的锻炼也是无与伦比的，我见过几乎所有优秀的技术 Leader 都是一次次这样磨炼出来的。毕竟技术管理能力很重要的一个落地场景就是这种情况，也是最能发挥技术 Leader 管理能力价值的场景之一。</p><p><img src="/images/%E5%B8%B8%E8%A7%81%E7%97%9B%E7%82%B9/Cgp9HWBhhzyAIeYyAAGwGD_IRZw948.png" alt="新团队"></p>]]></content>
    
    
    <categories>
      
      <category>reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git知识汇总</title>
    <link href="/2021/02/13/310/"/>
    <url>/2021/02/13/310/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="4个区"><a href="#4个区" class="headerlink" title="4个区"></a>4个区</h2><p>git之所以令人费解，主要是它相比于svn等等传统的版本管理工具，多引入了一个暂存区(Stage)的概念，就因为多了这一个概念，而使很多人疑惑。其实，在初学者来说，每个区具体怎么工作的，我们完全不需要关心，而只要知道有这么4个区就够了：</p><ul><li>工作区(Working Area)</li><li>暂存区(Stage)</li><li>本地仓库(Local Repository)</li><li>远程仓库(Remote Repository)</li></ul><h2 id="5种状态"><a href="#5种状态" class="headerlink" title="5种状态"></a>5种状态</h2><p>以上4个区，进入每一个区成功之后会产生一个状态，再加上最初始的一个状态，一共是5种状态。以下我们把这5种状态分别命名为：</p><ul><li>未修改(Origin)</li><li>已修改(Modified)</li><li>已暂存(Staged)</li><li>已提交(Committed)</li><li>已推送(Pushed)</li></ul><h2 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h2><h3 id="已修改，未暂存"><a href="#已修改，未暂存" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h3><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff</span></code></pre></div><h3 id="已暂存，未提交"><a href="#已暂存，未提交" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h3><div class="code-wrapper"><pre><code class="hljs ada">git diff <span class="hljs-comment">--cached</span></code></pre></div><h3 id="已提交，未推送"><a href="#已提交，未推送" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h3><div class="code-wrapper"><pre><code class="hljs crmsh">git diff <span class="hljs-keyword">master</span> <span class="hljs-title">origin</span>/<span class="hljs-literal">master</span></code></pre></div><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>了解清楚如何检查各种修改之后，我们开始尝试各种撤销操作。</p><h3 id="恢复已修改，未暂存"><a href="#恢复已修改，未暂存" class="headerlink" title="恢复已修改，未暂存"></a>恢复已修改，未暂存</h3><p>如果我们只是在编辑器里修改了文件，但还没有执行<code>git add .</code>，这时候我们的文件还在<code>工作区</code>，并没有进入<code>暂存区</code>，我们可以用撤销操作</p><div class="code-wrapper"><pre><code class="hljs erlang">git checkout .</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span></code></pre></div><h3 id="恢复已暂存，未提交"><a href="#恢复已暂存，未提交" class="headerlink" title="恢复已暂存，未提交"></a>恢复已暂存，未提交</h3><p>你已经执行了<code>git add .</code>，但还没有执行<code>git commit -m &quot;comment&quot;</code>。这时候你意识到了错误，想要撤销，你可以执行：</p><div class="code-wrapper"><pre><code class="hljs erlang">git resetgit checkout .</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span></code></pre></div><p><code>git reset</code>只是把修改退回到了<code>git add .</code>之前的状态，也就是说文件本身还处于<code>已修改未暂存</code>状态，你如果想退回<code>未修改</code>状态，还需要执行<code>git checkout .</code>。</p><p>或许你已经注意到了，以上两个步骤都可以用同一个命令<code>git reset --hard</code>来完成。是的，就是这个强大的命令，可以一步到位地把你的修改完全恢复到<code>未修改</code>的状态。</p><h3 id="恢复已提交，未推送"><a href="#恢复已提交，未推送" class="headerlink" title="恢复已提交，未推送"></a>恢复已提交，未推送</h3><p>你的手太快，你既执行了<code>git add .</code>，又执行了<code>git commit</code>，这时候你的代码已经进入了你的<code>本地仓库</code>，然而你后悔了，怎么办？不要着急，还有办法。</p><div class="code-wrapper"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard <span class="hljs-built_in">origin</span>/master</code></pre></div><p>还是这个<code>git reset --hard</code>命令，只不过这次多了一个参数<code>origin/master</code>，正如我们上面讲过的，<code>origin/master</code>代表<code>远程仓库</code>，既然你已经污染了你的<code>本地仓库</code>，那么就从<code>远程仓库</code>把代码取回来吧。</p><h3 id="已推送"><a href="#已推送" class="headerlink" title="已推送"></a>已推送</h3><p>很不幸，你的手实在是太快了，你既<code>git add</code>了，又<code>git commit</code>了，并且还<code>git push</code>了，这时你的代码已经进入<code>远程仓库</code>。如果你想恢复的话，还好，由于你的<code>本地仓库</code>和<code>远程仓库</code>是等价的，你只需要先恢复<code>本地仓库</code>，再强制<code>push</code>到<code>远程仓库</code>就好了：</p><div class="code-wrapper"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard HEAD^git <span class="hljs-built_in">push</span> -f</code></pre></div><p>部分远程仓库设置了禁止强制push，我们可以使用以下方法。</p><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p>git revert用于反转提交。执行revert命令时要求工作树必须是干净的，git revert用一个新提交来消除一个历史提交所做的任何修改。revert 之后你的本地代码会回滚到指定的历史版本，这时你再 git push 就可以把线上的代码更新。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git clone</td><td>克隆</td></tr><tr><td>git branch (分支名)</td><td>创建分支 -D删除分支</td></tr><tr><td>git checkout (分支名)</td><td>切换分支 -b创建并切换</td></tr><tr><td>git checkout (文件名)</td><td>撤销此文件修改</td></tr><tr><td>git add</td><td>将该文件添加到缓存</td></tr><tr><td>git status</td><td>查看在你上次提交之后是否有修改</td></tr><tr><td>git commit</td><td>将缓存区内容添加到仓库中</td></tr><tr><td>git diff</td><td>来查看执行 git status 的结果的详细信息</td></tr><tr><td>git reset HEAD</td><td>命令用于取消已缓存的内容</td></tr><tr><td>git rm 文件</td><td>删除文件-f强制删除</td></tr><tr><td>git mv</td><td>移动文件</td></tr><tr><td>git merge</td><td>合并分支</td></tr><tr><td>git fetch</td><td>从远程获取最新版本到本地</td></tr><tr><td>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</td><td>将本地分支的更新，推送到远程主机</td></tr><tr><td>git push origin –delete test</td><td>删除远程分支test</td></tr><tr><td>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</td><td>将远程存储库中的更改合并到本地分支中</td></tr><tr><td>git rebase</td><td>命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。</td></tr><tr><td>git log</td><td>命令用于显示提交日志信息。</td></tr><tr><td>git reflog</td><td>显示每一次命令</td></tr><tr><td>git revert</td><td>生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留</td></tr><tr><td>git reset HEAD <file></td><td>如果发现错误的将不想暂存的文件被git add进入索引之后，想回退取消，则可以使用</td></tr></tbody></table><p>设置用户名邮箱：</p><blockquote><p>git config –global <a href="http://user.name/">user.name</a> “13sai”</p></blockquote><blockquote><p>git config –global user.email <a href="http://mailto:%22957042781@qq.com/">“957042781@qq.com</a>“</p></blockquote><h3 id="几个常见问题与解决方案"><a href="#几个常见问题与解决方案" class="headerlink" title="几个常见问题与解决方案"></a>几个常见问题与解决方案</h3><div class="code-wrapper"><pre><code class="hljs gams">fatal: <span class="hljs-keyword">No</span> configured push destination.解决：<span class="hljs-symbol">$</span> git remote add -f -t master -m master origin git:<span class="hljs-comment">//example.com/git.git/</span>fatal: The current branch test has <span class="hljs-keyword">no</span> upstream branch.解决：git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin test</span>模仿 git <span class="hljs-comment">clone</span>，但只跟踪选定的分支$ mkdir <span class="hljs-comment">project.git</span>$ cd <span class="hljs-comment">project.git</span>$ git <span class="hljs-comment">init</span>$ git <span class="hljs-comment">remote add -f -t master -m master origin git:</span>//<span class="hljs-comment">example.com</span>/git.git/$ git <span class="hljs-comment">merge origin</span>fatal：Unable <span class="hljs-comment">to create</span> <span class="hljs-comment">&#x27;E:/project/scrm/.git/index.lock&#x27;</span><span class="hljs-comment">: File exists.</span>rm <span class="hljs-comment">-f .</span>/.git/<span class="hljs-comment">index.lock</span>git <span class="hljs-comment">log</span>-p 查看差异-n(n为正整数) 查看最近n次的提交--pretty        按指定格式显示日志信息<span class="hljs-comment">,</span>可选项有：<span class="hljs-comment">oneline,short,medium,full,fuller,email,raw</span>以及<span class="hljs-comment">format:&lt;string&gt;,</span>默认为<span class="hljs-comment">medium</span>，可以通过修改配置文件来指定默认的方式。e.g. git <span class="hljs-comment">log (--pretty=)oneline</span>--stat  列出文件的修改行数--sortstat      只显示<span class="hljs-comment">--stat</span>中最后行数修改添加移除的统计--graph 以简单的图形方式列出提交记录--abbrev-commit 仅显示 <span class="hljs-comment">SHA-1</span> 的前几个字符，而非所有的 <span class="hljs-comment">40</span> 个字符。--relative-date 使用较短的相对时间显示（比如，“<span class="hljs-comment">2 weeks ago</span>”）。--name-only 仅在提交信息后显示已修改的文件清单。--name-status 显示新增、修改、删除的文件清单。</code></pre></div><h4 id="列出tag"><a href="#列出tag" class="headerlink" title="列出tag"></a>列出tag</h4><blockquote><p>git tag # 在控制台打印出当前仓库的所有tag</p></blockquote><blockquote><p>git tag -l ‘v0.1.*’ # 搜索符合模式的Tag 打tag</p></blockquote><p>git tag分为两种类型：轻量tag和附注tag。轻量tag是指向提交对象的引用，附注Tag则是仓库中的一个独立对象。建议使用附注Tag。</p><h4 id="创建轻量Tag"><a href="#创建轻量Tag" class="headerlink" title="创建轻量Tag"></a>创建轻量Tag</h4><blockquote><p>git tag v0.1.2-light</p></blockquote><h4 id="创建附注Tag"><a href="#创建附注Tag" class="headerlink" title="创建附注Tag"></a>创建附注Tag</h4><blockquote><p>git tag -a v0.1.2 -m “0.1.2版本”</p></blockquote><p>创建轻量Tag不需要传递参数，直接指定Tag名称即可。</p><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h4 id="切换到Tag"><a href="#切换到Tag" class="headerlink" title="切换到Tag"></a>切换到Tag</h4><p>与切换分支命令相同，用</p><blockquote><p>git checkout [tagname]</p></blockquote><h4 id="查看Tag信息"><a href="#查看Tag信息" class="headerlink" title="查看Tag信息"></a>查看Tag信息</h4><p>用git show命令可以查看Tag的版本信息：</p><blockquote><p>git show v0.1.2</p></blockquote><h4 id="删除Tag"><a href="#删除Tag" class="headerlink" title="删除Tag"></a>删除Tag</h4><p>误打或需要修改Tag时，需要先将Tag删除，再打新Tag。</p><blockquote><p>git tag -d v0.1.2 # 删除Tag</p></blockquote><p>参数d即delete的缩写，意为删除其后指定的Tag。</p><p>给指定的commit打Tag 打Tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。</p><h4 id="补打Tag"><a href="#补打Tag" class="headerlink" title="补打Tag"></a>补打Tag</h4><blockquote><p>git tag -a v0.1.1 9fbc3d0</p></blockquote><p>Tag推送到服务器 通常的git push不会将Tag对象提交到git服务器，我们需要进行显式的操作：</p><blockquote><p>git push origin v0.1.2 # 将v0.1.2 Tag提交到git服务器</p></blockquote><blockquote><p>git push origin –-tags # 将本地所有Tag一次性提交到git服务器</p></blockquote><p>注意：如果想看之前某个Tag状态下的文件，可以这样操作</p><ol><li>git tag 查看当前分支下的Tag</li><li>git checkout v0.21 此时会指向打v0.21 Tag时的代码状态，（但现在处于一个空的分支上）</li></ol><h4 id="删除远程分支和tag"><a href="#删除远程分支和tag" class="headerlink" title="删除远程分支和tag"></a>删除远程分支和tag</h4><p>在Git v1.7.0 之后，可以使用这种语法删除远程分支：</p><blockquote><p>git push origin –delete <branchName></p></blockquote><p>删除tag这么用：</p><blockquote><p>git push origin –delete tag <tagname></p></blockquote><p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p><blockquote><p>git push origin :<branchName></p></blockquote><p>这是删除tag的方法，推送一个空tag到远程tag：</p><blockquote><p>git tag -d <tagname></p></blockquote><blockquote><p>git push origin :refs/tags/<tagname></p></blockquote><h4 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h4><p>删除远程分支：</p><blockquote><p>git push –delete origin devel</p></blockquote><p>重命名本地分支：</p><blockquote><p>git branch -m devel develop</p></blockquote><p>推送本地分支：</p><blockquote><p>git push origin develop</p></blockquote><h4 id="把本地tag推送到远程"><a href="#把本地tag推送到远程" class="headerlink" title="把本地tag推送到远程"></a>把本地tag推送到远程</h4><blockquote><p>git push –tags # 推送所有tag</p></blockquote><blockquote><p>git push origin :tag # 推送tag</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>atomic</title>
    <link href="/2021/02/13/atomic/"/>
    <url>/2021/02/13/atomic/</url>
    
    <content type="html"><![CDATA[<p>在之前的源码分析中，我们有多次看到atomic的出现，今天不妨我们看一下atomic的源码。</p><hr><p>我们看一下atomic的源码文件：</p><p><img src="/images/post/v2-acedfd18eadcd42f1c1662b66e860580_1440w.png" alt="img"></p><p>这里说明一下，以.s为后缀的是汇编语言源代码文件，你可以并不懂汇编，没有关系。</p><p>主要看下asm.s，看一看到里面有调用runtime ∕ internal ∕ atomic，我们前去看一下这个文件夹，其中有个文件atomic_wasm.go。</p><p>atomic提供的是原子操作，atomic包中支持六种类型</p><ul><li>int32</li><li>uint32</li><li>int64</li><li>uint64</li><li>uintptr</li><li>unsafe.Pointer</li></ul><p>对于每一个类型，支持5种操作，我们以int32分别说明下这些操作：</p><h3 id="SwapX"><a href="#SwapX" class="headerlink" title="SwapX"></a>SwapX</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 原子性的将新值保存到*addr并返回旧值。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SwapInt32</span><span class="hljs-params">(addr *<span class="hljs-keyword">int32</span>, <span class="hljs-built_in">new</span> <span class="hljs-keyword">int32</span>)</span> <span class="hljs-params">(old <span class="hljs-keyword">int32</span>)</span></span>源码：<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Xchg</span><span class="hljs-params">(ptr *<span class="hljs-keyword">uint32</span>, <span class="hljs-built_in">new</span> <span class="hljs-keyword">uint32</span>)</span> <span class="hljs-title">uint32</span></span> &#123;old := *ptr*ptr = <span class="hljs-built_in">new</span><span class="hljs-keyword">return</span> old&#125;</code></pre></div><h3 id="CompareAndSwapX"><a href="#CompareAndSwapX" class="headerlink" title="CompareAndSwapX"></a>CompareAndSwapX</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 原子性的比较*addr和old，如果相同则将new赋值给*addr并返回真。</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CompareAndSwapInt32</span><span class="hljs-params">(addr *<span class="hljs-keyword">int32</span>, old, <span class="hljs-built_in">new</span> <span class="hljs-keyword">int32</span>)</span> <span class="hljs-params">(swapped <span class="hljs-keyword">bool</span>)</span></span>源码：<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Cas</span><span class="hljs-params">(ptr *<span class="hljs-keyword">uint32</span>, old, <span class="hljs-built_in">new</span> <span class="hljs-keyword">uint32</span>)</span> <span class="hljs-title">bool</span></span> &#123;<span class="hljs-keyword">if</span> *ptr == old &#123;*ptr = <span class="hljs-built_in">new</span><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;</code></pre></div><h3 id="AddX"><a href="#AddX" class="headerlink" title="AddX"></a>AddX</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 原子性的将val的值添加到*addr并返回新值</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AddInt64</span><span class="hljs-params">(addr *<span class="hljs-keyword">int64</span>, delta <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(<span class="hljs-built_in">new</span> <span class="hljs-keyword">int64</span>)</span></span>源码：<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Xadd</span><span class="hljs-params">(ptr *<span class="hljs-keyword">uint32</span>, delta <span class="hljs-keyword">int32</span>)</span> <span class="hljs-title">uint32</span></span> &#123;<span class="hljs-built_in">new</span> := *ptr + <span class="hljs-keyword">uint32</span>(delta)*ptr = <span class="hljs-built_in">new</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>&#125;</code></pre></div><h3 id="LoadX"><a href="#LoadX" class="headerlink" title="LoadX"></a>LoadX</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 原子性的获取*addr的值</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadInt32</span><span class="hljs-params">(addr *<span class="hljs-keyword">int32</span>)</span> <span class="hljs-params">(val <span class="hljs-keyword">int32</span>)</span></span>源码：<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Load</span><span class="hljs-params">(ptr *<span class="hljs-keyword">uint32</span>)</span> <span class="hljs-title">uint32</span></span> &#123;<span class="hljs-keyword">return</span> *ptr&#125;</code></pre></div><h3 id="StoreX"><a href="#StoreX" class="headerlink" title="StoreX"></a>StoreX</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 原子性的将val的值保存到*addr</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StoreInt32</span><span class="hljs-params">(addr *<span class="hljs-keyword">int32</span>, val <span class="hljs-keyword">int32</span>)</span></span>源码：<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Store</span><span class="hljs-params">(ptr *<span class="hljs-keyword">uint32</span>, val <span class="hljs-keyword">uint32</span>)</span></span> &#123;*ptr = val&#125;</code></pre></div><p>源码其实比较简单了，我就不过多说明了。</p><h3 id="atomic-Value"><a href="#atomic-Value" class="headerlink" title="atomic.Value"></a>atomic.Value</h3><p>另外，atomic对支持的类型做了扩展，atomic.Value被设计用来存储任意类型的数据。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Value <span class="hljs-keyword">struct</span> &#123;v <span class="hljs-keyword">interface</span>&#123;&#125;&#125;</code></pre></div><p>为了方便，定义了一个ifaceWords类型，它的作用是将<code>interface&#123;&#125;</code>类型分解，得到其中的两个字段，作为interface的内部表示格式，typ代表原始类型，data代表真正的值。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ifaceWords <span class="hljs-keyword">struct</span> &#123;typ  unsafe.Pointerdata unsafe.Pointer&#125;</code></pre></div><p>提供了Store和Load两个方法。</p><p><strong>Store</strong></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Value)</span> <span class="hljs-title">Store</span><span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;        <span class="hljs-comment">// x为nil，直接panic</span><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;sync/atomic: store of nil value into Value&quot;</span>)&#125;<span class="hljs-comment">// 将现有的值和要写入的值转换为ifaceWords类型，这样下一步就能获取到它们的原始类型和真正的值</span>vp := (*ifaceWords)(unsafe.Pointer(v))xp := (*ifaceWords)(unsafe.Pointer(&amp;x))<span class="hljs-keyword">for</span> &#123;<span class="hljs-comment">// 获取现有的值的type</span>typ := LoadPointer(&amp;vp.typ)<span class="hljs-comment">// 如果typ为nil说明这是第一次调用Store</span><span class="hljs-keyword">if</span> typ == <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">// 如果是第一次调用，就占住当前的processor，不允许其他goroutine再抢，runtime_procPin方法会先获取当前goroutine</span>runtime_procPin()<span class="hljs-comment">// 使用CAS操作，先尝试将typ设置为^uintptr(0)这个中间状态</span><span class="hljs-comment">// 如果失败，则证明已经有别的goroutine抢先完成了赋值操作</span><span class="hljs-comment">// 那它就解除抢占锁，继续循环等待</span><span class="hljs-keyword">if</span> !CompareAndSwapPointer(&amp;vp.typ, <span class="hljs-literal">nil</span>, unsafe.Pointer(^<span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>))) &#123;runtime_procUnpin()<span class="hljs-keyword">continue</span>&#125;<span class="hljs-comment">// 如果设置成功，就原子性的更新对应的指针，最后解除抢占锁</span>StorePointer(&amp;vp.data, xp.data)StorePointer(&amp;vp.typ, xp.typ)runtime_procUnpin()<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 如果typ为^uintptr(0)说明第一次写入还没有完成，继续循环等待</span><span class="hljs-keyword">if</span> <span class="hljs-keyword">uintptr</span>(typ) == ^<span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">continue</span>&#125;<span class="hljs-comment">// 如果要写入的类型和现有的类型不一致，则panic</span><span class="hljs-keyword">if</span> typ != xp.typ &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;sync/atomic: store of inconsistently typed value into Value&quot;</span>)&#125;<span class="hljs-comment">// 更新data，跳出循环</span>StorePointer(&amp;vp.data, xp.data)<span class="hljs-keyword">return</span>&#125;&#125;</code></pre></div><p><strong>Load</strong></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Value)</span> <span class="hljs-title">Load</span><span class="hljs-params">()</span> <span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;        <span class="hljs-comment">// 将*Value指针类型转换为*ifaceWords指针类型</span>vp := (*ifaceWords)(unsafe.Pointer(v))<span class="hljs-comment">// 原子性的获取到v的类型typ的指针</span>typ := LoadPointer(&amp;vp.typ)<span class="hljs-comment">// 如果没有写入或者正在写入，先返回，^uintptr(0)代表过渡状态，这和Store是对应的</span><span class="hljs-keyword">if</span> typ == <span class="hljs-literal">nil</span> || <span class="hljs-keyword">uintptr</span>(typ) == ^<span class="hljs-keyword">uintptr</span>(<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-comment">// 原子性的获取到v的真正的值data的指针，然后返回</span>data := LoadPointer(&amp;vp.data)xp := (*ifaceWords)(unsafe.Pointer(&amp;x))xp.typ = typxp.data = data<span class="hljs-keyword">return</span>&#125;</code></pre></div><p>PS:解读的源码，如无特别说明，版本为1.15.6</p><hr><p>参考：</p><ul><li><a href="https://studygolang.com/pkgdoc">go标准库</a></li><li><a href="https://juejin.cn/post/6844904053042839560">Go - atomic包使用及atomic.Value源码分析</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>gosourcecode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gosourcecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建http server</title>
    <link href="/2021/02/12/goexample1/"/>
    <url>/2021/02/12/goexample1/</url>
    
    <content type="html"><![CDATA[<p>round one，我们来点简单的，搭建一个简单的http server。</p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><ul><li>路由hello接收参数并获取到输出json数据</li><li>自定义404</li><li>处理超时页面</li></ul><h2 id="使用到的库"><a href="#使用到的库" class="headerlink" title="使用到的库:"></a>使用到的库:</h2><ul><li>net/http</li><li>time</li><li>encoding/json</li></ul><hr><p>我们先搭建起来server：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;net/http&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;srv := http.Server&#123;Addr: <span class="hljs-string">&quot;:8080&quot;</span>,Handler: http.HandlerFunc(defaultHttp),&#125;srv.ListenAndServe()&#125;<span class="hljs-comment">// 默认http处理</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">defaultHttp</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;wow&quot;</span>))&#125;</code></pre></div><p>运行就可以跑起来了。</p><p>我们再来定义下json输出格式。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 自定义返回</span><span class="hljs-keyword">type</span> JsonRes <span class="hljs-keyword">struct</span> &#123;Code <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;code&quot;`</span>Data <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-string">`json:&quot;data&quot;`</span>Msg <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;msg&quot;`</span>TimeStamp <span class="hljs-keyword">int64</span> <span class="hljs-string">`json:&quot;timestmap&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">apiResult</span><span class="hljs-params">(w http.ResponseWriter, code <span class="hljs-keyword">int</span>, data <span class="hljs-keyword">interface</span>&#123;&#125;, msg <span class="hljs-keyword">string</span>)</span></span> &#123;body, _ := json.Marshal(JsonRes&#123;Code: code, Data: data, Msg: msg, <span class="hljs-comment">// 获取时间戳</span>TimeStamp: time.Now().Unix(),&#125;)    w.Write(body)&#125;</code></pre></div><p>再来看一下接收参数与输出：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 处理hello，并接收参数输出json</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayHello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;    query := r.URL.Query()    <span class="hljs-comment">// 第一种方式，但是没有name参数会报错</span>    <span class="hljs-comment">// name := query[&quot;name&quot;][0]</span>    <span class="hljs-comment">// 第二种方式</span>    name := query.Get(<span class="hljs-string">&quot;name&quot;</span>)    apiResult(w, <span class="hljs-number">0</span>, name+<span class="hljs-string">&quot; say &quot;</span>+r.PostFormValue(<span class="hljs-string">&quot;some&quot;</span>), <span class="hljs-string">&quot;success&quot;</span>)&#125;</code></pre></div><p>超时处理：</p><div class="code-wrapper"><pre><code class="hljs go">Handler: http.TimeoutHandler(http.HandlerFunc(defaultHttp), <span class="hljs-number">2</span>*time.Second, <span class="hljs-string">&quot;Timeout!!!&quot;</span>)</code></pre></div><p>404:</p><div class="code-wrapper"><pre><code class="hljs go">http.Error(w, <span class="hljs-string">&quot;you lost???&quot;</span>, http.StatusNotFound)</code></pre></div><p>最后加入路由处理：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">defaultHttp</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;path, httpMethod := r.URL.Path, r.Method<span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/&quot;</span> &#123;w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;index&quot;</span>))<span class="hljs-keyword">return</span> &#125;<span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/hello&quot;</span> &amp;&amp; httpMethod == <span class="hljs-string">&quot;POST&quot;</span> &#123;sayHello(w, r)<span class="hljs-keyword">return</span> &#125;<span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/sleep&quot;</span> &#123;<span class="hljs-comment">// 模拟一下业务处理超时</span>time.Sleep(<span class="hljs-number">4</span>*time.Second)<span class="hljs-keyword">return</span> &#125;<span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/path&quot;</span> &#123;w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;path:&quot;</span>+path+<span class="hljs-string">&quot;, method:&quot;</span>+httpMethod))<span class="hljs-keyword">return</span> &#125;<span class="hljs-comment">// 自定义404</span>http.Error(w, <span class="hljs-string">&quot;you lost???&quot;</span>, http.StatusNotFound)&#125;</code></pre></div><p>我们运行起来看下效果：</p><p><img src="/images/post/v2-1e879cbadf7b04db53a74f55409d5bb2_1440w.png" alt="img">404效果</p><p><img src="/images/post/v2-1a6d77d41a0a4939758120e835976b3e_1440w.png" alt="img">hello</p><p><img src="/images/post/v2-d6b363290dced2fe7b12195bc0f36c81_1440w.png" alt="img">首页</p><p><img src="/images/post/v2-711a296a73dcd4d6b4b864777f6a3d30_1440w.png" alt="img">超时</p><p>这样就完成了一个简单的http server，是不是很简单呢？</p><ul><li><a href="https://github.com/13sai/go-example/blob/main/demo1-http/main.go">完整代码github</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go+MongoDB实现附近的人</title>
    <link href="/2021/02/12/goexample10/"/>
    <url>/2021/02/12/goexample10/</url>
    
    <content type="html"><![CDATA[<p>在O2O与社交场景中，搜索附近的人、附近的商家是很常见的场景。那么我们如何实现呢？</p><p>接触的方法有：</p><ul><li>坐标+球体距离计算公式</li><li>基于Redis的geo</li><li>基于MongoDB的geohash</li></ul><p>前面的demo已经有接触Redis，这里我们就用mongoDB来实现一下。</p><p>我们就直接使用官方的实现好了：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">go</span>.mongodb.org/mongo-driver/mongo</code></pre></div><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><div class="code-wrapper"><pre><code class="hljs go">opt := options.Client().ApplyURI(<span class="hljs-string">&quot;mongodb://root:211111@localhost:27017&quot;</span>)<span class="hljs-comment">// Connect to MongoDB</span>client, err := mongo.Connect(context.TODO(), opt)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;<span class="hljs-comment">// Check the connection</span>err = client.Ping(context.TODO(), <span class="hljs-literal">nil</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;fmt.Println(<span class="hljs-string">&quot;Connected to MongoDB!&quot;</span>)</code></pre></div><p>我们可以设置更多：</p><div class="code-wrapper"><pre><code class="hljs go">opt.SetLocalThreshold(<span class="hljs-number">3</span> * time.Second)     <span class="hljs-comment">//只使用与mongo操作耗时小于3秒的</span>opt.SetMaxConnIdleTime(<span class="hljs-number">5</span> * time.Second)    <span class="hljs-comment">//指定连接可以保持空闲的最大毫秒数</span>opt.SetMaxPoolSize(<span class="hljs-number">200</span>)                    <span class="hljs-comment">//使用最大的连接数</span>opt.SetReadConcern(readconcern.Majority()) <span class="hljs-comment">//指定查询应返回实例的最新数据确认为，已写入副本集中的大多数成员</span></code></pre></div><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 坐标</span><span class="hljs-keyword">type</span> Location <span class="hljs-keyword">struct</span> &#123;Type        <span class="hljs-keyword">string</span>    <span class="hljs-string">`json:&quot;type&quot; bson:&quot;type&quot;`</span>Coordinates []<span class="hljs-keyword">float64</span> <span class="hljs-string">`json:&quot;coordinates&quot; bson:&quot;coordinates&quot;`</span>&#125;<span class="hljs-comment">// 每个点</span><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;Name     <span class="hljs-keyword">string</span>             <span class="hljs-string">`json:&quot;name&quot;`</span>Age     <span class="hljs-keyword">int</span>             <span class="hljs-string">`json:&quot;age&quot;`</span>City     <span class="hljs-keyword">string</span>             <span class="hljs-string">`json:&quot;city&quot;`</span>Location Location           <span class="hljs-string">`json:&quot;location&quot;`</span>&#125;</code></pre></div><h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><p>我们可以先插入数据</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mgo *mgo)</span> <span class="hljs-title">Start</span><span class="hljs-params">()</span></span> &#123;collection := mgo.client.Database(DBName).Collection(CollectionName)<span class="hljs-comment">// 设置索引 2dsphere， 很重要</span>collection.Indexes().CreateOne(context.TODO(), mongo.IndexModel&#123;Keys: bson.M&#123;Key: <span class="hljs-string">&quot;2dsphere&quot;</span>&#125;,&#125;)a := Point&#123;<span class="hljs-string">&quot;王二&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.185614</span>,<span class="hljs-number">30.300738</span>&#125;&#125;&#125;b := Point&#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.094778</span>,<span class="hljs-number">30.310217</span>&#125;&#125;&#125;c := Point&#123;<span class="hljs-string">&quot;小晴&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&quot;绍兴&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.603847</span>,<span class="hljs-number">30.054237</span>&#125;&#125;&#125;d := Point&#123;<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.110893</span>,<span class="hljs-number">30.207849</span>&#125;&#125;&#125;e := Point&#123;<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&quot;北京&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">116.435721</span>,<span class="hljs-number">39.914031</span>&#125;&#125;&#125;f := Point&#123;<span class="hljs-string">&quot;吴六&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.126443</span>,<span class="hljs-number">30.33084</span>&#125;&#125;&#125;h := Point&#123;<span class="hljs-string">&quot;于一&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.28132</span>,<span class="hljs-number">30.184083</span>&#125;&#125;&#125;j := Point&#123;<span class="hljs-string">&quot;小七&quot;</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&quot;杭州&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>, []<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">119.73926</span>,<span class="hljs-number">30.247639</span>&#125;&#125;&#125;<span class="hljs-comment">// 单条插入</span>insertResult, err := collection.InsertOne(context.TODO(), a)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;fmt.Println(<span class="hljs-string">&quot;Inserted a single document: &quot;</span>, insertResult.InsertedID)ps := []<span class="hljs-keyword">interface</span>&#123;&#125;&#123;b, c, d, e, f, h, j&#125;<span class="hljs-comment">// 批量插入</span>insertManyResult, err := collection.InsertMany(context.TODO(), ps)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatal(err)&#125;fmt.Println(<span class="hljs-string">&quot;Inserted multiple documents: &quot;</span>, insertManyResult.InsertedIDs)&#125;</code></pre></div><p>注意，设置索引 2dsphere， 很重要！！！</p><p><img src="/images/post/v2-4c04d12bc9bbc5b787d926532ed8954f_1440w.png" alt="img">存储的数据格式</p><p>我们查找：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mgo *mgo)</span> <span class="hljs-title">Near</span><span class="hljs-params">()</span></span> &#123;collection := mgo.client.Database(DBName).Collection(CollectionName)        <span class="hljs-comment">// 查找120.110893,30.2078490坐标附近15000米的人</span>cur, err := collection.Find(context.TODO(), bson.D&#123;&#123;Key, bson.D&#123;&#123;<span class="hljs-string">&quot;$near&quot;</span>, bson.D&#123;&#123;<span class="hljs-string">&quot;$geometry&quot;</span>, Location&#123;<span class="hljs-string">&quot;Point&quot;</span>,[]<span class="hljs-keyword">float64</span>&#123;<span class="hljs-number">120.110893</span>,<span class="hljs-number">30.2078490</span>&#125;,&#125;,&#125;,&#123;<span class="hljs-string">&quot;$maxDistance&quot;</span>, <span class="hljs-number">15000</span>&#125;, <span class="hljs-comment">// 单位米</span>&#125;&#125;,&#125;&#125;,&#125;)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">var</span> results []Point<span class="hljs-keyword">for</span> cur.Next(context.TODO()) &#123;<span class="hljs-keyword">var</span> elem Pointerr := cur.Decode(&amp;elem)fmt.Println(elem)fmt.Println(cur)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(<span class="hljs-string">&quot;Could not decode Point&quot;</span>)<span class="hljs-keyword">return</span>&#125;results = <span class="hljs-built_in">append</span>(results, elem)&#125;fmt.Println(<span class="hljs-string">&quot;查找到&quot;</span>, <span class="hljs-built_in">len</span>(results))&#125;</code></pre></div><p>我们不妨运行一下：</p><p><img src="/images/post/v2-c62ee9c350d9d3b569501ae217fbd06b_1440w.png" alt="img"></p><p>能成功查找出了附近的人。</p><p>那么，如何计算距离呢？</p><p>可以经纬度计算，也可以直接mongoDB聚合查询，可以自行思索，<a href="https://github.com/13sai/go-example/tree/main/demo10-mongo">参考代码点击见github</a>。</p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用gin搭建一个api框架</title>
    <link href="/2021/02/12/goexample2/"/>
    <url>/2021/02/12/goexample2/</url>
    
    <content type="html"><![CDATA[<p>在demo1中，我们简单使用了net/http搭建了一个server，其实在日常开发中，比较少去使用标准库去直接写api，更多的是使用前人搭建好的轮子（我呢，是个不太喜欢重复造轮子的开发者，有开源的靠谱的，直接用就好，自己调整成自己需要的即可），那么说的go的框架，不得不说gin了。</p><p>对于gin的介绍，是github上star最多的go框架了，其他不多说，我们上手写起来吧！</p><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><ul><li>自定义配置</li><li>整合mysql和redis</li><li>独立路由管理</li><li>日志</li><li>平滑重启</li><li>脚本打包</li></ul><h2 id="使用到的库："><a href="#使用到的库：" class="headerlink" title="使用到的库："></a>使用到的库：</h2><ul><li><a href="http://github.com/fsnotify/fsnotify">github.com/fsnotify/fsnotify</a></li><li><a href="http://github.com/gin-gonic/gin">github.com/gin-gonic/gin</a></li><li><a href="http://github.com/go-redis/redis">github.com/go-redis/redis</a></li><li><a href="http://github.com/jinzhu/gorm">github.com/jinzhu/gorm</a></li><li><a href="http://github.com/lestrrat-go/file-rotatelogs">http://github.com/lestrrat-go/file-rotatelogs</a></li><li><a href="http://go.uber.org/zap">http://go.uber.org/zap</a></li><li><a href="http://github.com/spf13/pflag">github.com/spf13/pflag</a></li><li><a href="http://github.com/spf13/viper">github.com/spf13/viper</a></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>modules的引入之后，我们就可以不必使用gopath去管理项目目录了，对于modules的基本使用，建议看文章：</p><p><a href="https://github.13sai.com/2019/12/27/219/#modules">gomodules</a></p><p>我们开始：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">go</span> mod init sai0556/demo2-gin-frame</code></pre></div><p>因为我们暂时本地开发：</p><p><em>PS：当时理解有误，其实无需做local.com替换，import直接使用sai0556/demo2-gin-frame即可，这里有点多余</em></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 使用本地module</span><span class="hljs-keyword">go</span> mod edit -require=local.com/sai0556/demo2-gin-frame@v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-keyword">go</span> mod edit -replace=local.com/sai0556/demo2-gin-frame@v1<span class="hljs-number">.0</span><span class="hljs-number">.0</span>=$PWD</code></pre></div><p>可以看到go.mod已生成：</p><div class="code-wrapper"><pre><code class="hljs text">module sai0556/demo2-gin-framego 1.13require local.com/sai0556/demo2-gin-frame v1.0.0replace local.com/sai0556/demo2-gin-frame v1.0.0 =&gt; /Users/@/Work/golang/go-example/demo2-gin-frame</code></pre></div><blockquote><p>/Users/@/Work/golang/go-example/demo2-gin-frame 此目录就是项目目录，视具体情况不一</p></blockquote><h2 id="自定义配置与读取："><a href="#自定义配置与读取：" class="headerlink" title="自定义配置与读取："></a>自定义配置与读取：</h2><p>在我们使用redis和mysql之前，我们先来读取一下配置，配置呢我们使用常见的yaml，当然你也可以使用其他，比如env等。</p><p>新建config目录，用来读取与监听配置文件(config.yaml)：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;github.com/fsnotify/fsnotify&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;    Name <span class="hljs-keyword">string</span>&#125;<span class="hljs-comment">// 对外的初始化配置方法</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Run</span><span class="hljs-params">(cfg <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;    c := Config&#123;        Name: cfg,    &#125;    <span class="hljs-keyword">if</span> err := c.init(); err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span> err    &#125;    c.watchConfig()    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Config)</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;    <span class="hljs-keyword">if</span> c.Name != <span class="hljs-string">&quot;&quot;</span> &#123;        viper.SetConfigFile(c.Name)    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 默认配置文件是./config.yaml</span>        viper.AddConfigPath(<span class="hljs-string">&quot;.&quot;</span>)        viper.SetConfigName(<span class="hljs-string">&quot;config&quot;</span>)    &#125;    viper.SetConfigType(<span class="hljs-string">&quot;yaml&quot;</span>)    <span class="hljs-comment">// viper解析配置文件</span>    err := viper.ReadInConfig()     <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;Fatal error config file: %s \n&quot;</span>, err))    &#125;<span class="hljs-comment">// 简单打印下配置</span>    fmt.Println(viper.GetString(<span class="hljs-string">&quot;name&quot;</span>))    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Config)</span> <span class="hljs-title">watchConfig</span><span class="hljs-params">()</span></span> &#123;    viper.WatchConfig()    viper.OnConfigChange(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e fsnotify.Event)</span></span> &#123;        fmt.Println(<span class="hljs-string">&quot;Config file changed:&quot;</span>, e.Name)    &#125;)&#125;</code></pre></div><p>main:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;github.com/spf13/pflag&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/config&quot;</span>)<span class="hljs-keyword">var</span> (    conf = pflag.StringP(<span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config filepath&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    pflag.Parse()    <span class="hljs-comment">// 初始化配置</span>    <span class="hljs-keyword">if</span> err := config.Run(*conf); err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-built_in">panic</span>(err)    &#125;&#125;</code></pre></div><p>这里有用到大牛spf13的两个包，pflag和viper，命令行参数解析包pflag可以看作flag的进阶版本，在我们这里可以用来指定配置文件，viper是读取配置文件的包，配合fsnotify可以实现配置的热更新。（spf13大神还有其他有用的包，相信在你的go编码生涯会用到的）</p><p>写完我们可以运行一下：</p><blockquote><p>go run main.go -c ./config.yaml</p></blockquote><p>可以看到有打印出我们配置的name。</p><h2 id="整合mysql与redis"><a href="#整合mysql与redis" class="headerlink" title="整合mysql与redis"></a>整合mysql与redis</h2><p>mysql包我们就选用gorm，redis的使用比较多的是redigo和go-redis，redigo曾在我使用中出现过问题，因而我们选择后者，后者也支持连接池。</p><p>mysql：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> db<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;sync&quot;</span>    <span class="hljs-string">&quot;errors&quot;</span>    orm <span class="hljs-string">&quot;github.com/jinzhu/gorm&quot;</span>    _ <span class="hljs-string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-keyword">type</span> MySqlPool <span class="hljs-keyword">struct</span> &#123;&#125;<span class="hljs-keyword">var</span> instance *MySqlPool<span class="hljs-keyword">var</span> once sync.Once<span class="hljs-keyword">var</span> db *orm.DB<span class="hljs-keyword">var</span> err error <span class="hljs-comment">// 单例模式</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span> *<span class="hljs-title">MySqlPool</span></span> &#123;    once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;        instance = &amp;MySqlPool&#123;&#125;    &#125;)    <span class="hljs-keyword">return</span> instance&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pool *MySqlPool)</span> <span class="hljs-title">InitPool</span><span class="hljs-params">()</span> <span class="hljs-params">(isSuc <span class="hljs-keyword">bool</span>)</span></span> &#123;<span class="hljs-comment">// 这里有一种常见的拼接字符串的方式</span>    dsn := fmt.Sprintf(<span class="hljs-string">&quot;%s:%s@tcp(%s)/%s?charset=%s&quot;</span>, viper.GetString(<span class="hljs-string">&quot;db.username&quot;</span>), viper.GetString(<span class="hljs-string">&quot;db.password&quot;</span>), viper.GetString(<span class="hljs-string">&quot;db.host&quot;</span>), viper.GetString(<span class="hljs-string">&quot;db.name&quot;</span>), viper.GetString(<span class="hljs-string">&quot;db.charset&quot;</span>))    db, err = orm.Open(<span class="hljs-string">&quot;mysql&quot;</span>, dsn)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-built_in">panic</span>(errors.New(<span class="hljs-string">&quot;mysql连接失败&quot;</span>))        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;    <span class="hljs-comment">// 连接数配置也可以写入配置，在此读取</span>    db.DB().SetMaxIdleConns(viper.GetInt(<span class="hljs-string">&quot;db.MaxIdleConns&quot;</span>))    db.DB().SetMaxOpenConns(viper.GetInt(<span class="hljs-string">&quot;db.MaxOpenConns&quot;</span>))    <span class="hljs-comment">// db.LogMode(true)</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;</code></pre></div><blockquote><p>后面获取连接池就可以直接使用 db.GetInstance()</p></blockquote><p>redis：</p><div class="code-wrapper"><pre><code class="hljs text">package dbimport (    &quot;fmt&quot;    &quot;github.com/spf13/viper&quot;    &quot;github.com/go-redis/redis&quot;)var RedisClient *redis.Clientfunc InitRedis() &#123;    RedisClient = redis.NewClient(&amp;redis.Options&#123;        Addr:     fmt.Sprintf(&quot;%s:%s&quot;, viper.GetString(&quot;redis.host&quot;), viper.GetString(&quot;redis.port&quot;)),        Password: viper.GetString(&quot;redis.auth&quot;),        DB:       0,    &#125;)    _, err := RedisClient.Ping().Result()    if err != nil &#123;        panic(&quot;redis ping error&quot;)    &#125;&#125;</code></pre></div><p>RedisClient就是我们后面可以用的redis连接池。</p><p>在main中加入初始化连接池的代码即可：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 连接mysql数据库</span>btn := db.GetInstance().InitPool()<span class="hljs-keyword">if</span> !btn &#123;    log.Println(<span class="hljs-string">&quot;init database pool failure...&quot;</span>)    <span class="hljs-built_in">panic</span>(errors.New(<span class="hljs-string">&quot;init database pool failure&quot;</span>))&#125;<span class="hljs-comment">// redis</span>db.InitRedis()</code></pre></div><h2 id="路由与控制器"><a href="#路由与控制器" class="headerlink" title="路由与控制器"></a>路由与控制器</h2><p>为了方便路由，我们把路由管理单独到router。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> router<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;net/http&quot;</span>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/controller&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Load</span><span class="hljs-params">(g *gin.Engine)</span> *<span class="hljs-title">gin</span>.<span class="hljs-title">Engine</span></span> &#123;    g.Use(gin.Recovery())    <span class="hljs-comment">// 404</span>    g.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *gin.Context)</span></span>  &#123;        c.String(http.StatusNotFound, <span class="hljs-string">&quot;404 not found&quot;</span>);    &#125;)    g.GET(<span class="hljs-string">&quot;/&quot;</span>, controller.Index)    <span class="hljs-keyword">return</span> g&#125;</code></pre></div><p>controller:</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> controller<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;net/http&quot;</span>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>)<span class="hljs-comment">// 返回</span><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;    Code <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;code&quot;`</span>    Message <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;message&quot;`</span>    Data <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-string">`json:&quot;data&quot;`</span>&#125;<span class="hljs-comment">// api返回结构</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ApiResponse</span><span class="hljs-params">(c *gin.Context, code <span class="hljs-keyword">int</span>, message <span class="hljs-keyword">string</span>, data <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;    c.JSON(http.StatusOK, Response&#123;        Code: code,        Message: message,        Data: data,    &#125;)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;    ApiResponse(c, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">nil</span>)&#125;</code></pre></div><p>到这呢，基本也就差不多了。</p><p>我们来看下完整的main：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-comment">// import 这里我习惯把官方库，开源库，本地module依次分开列出</span><span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;log&quot;</span>    <span class="hljs-string">&quot;errors&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/pflag&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/config&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/db&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/router&quot;</span>)<span class="hljs-keyword">var</span> (    conf = pflag.StringP(<span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config filepath&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    pflag.Parse()    <span class="hljs-comment">// 初始化配置</span>    <span class="hljs-keyword">if</span> err := config.Run(*conf); err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">// 连接mysql数据库</span>    btn := db.GetInstance().InitPool()    <span class="hljs-keyword">if</span> !btn &#123;        log.Println(<span class="hljs-string">&quot;init database pool failure...&quot;</span>)        <span class="hljs-built_in">panic</span>(errors.New(<span class="hljs-string">&quot;init database pool failure&quot;</span>))    &#125;    <span class="hljs-comment">// redis</span>    db.InitRedis()    gin.SetMode(viper.GetString(<span class="hljs-string">&quot;mode&quot;</span>))    g := gin.New()    g = router.Load(g)    g.Run(viper.GetString(<span class="hljs-string">&quot;addr&quot;</span>))&#125;</code></pre></div><h2 id="整合日志"><a href="#整合日志" class="headerlink" title="整合日志"></a>整合日志</h2><p>这里我们先定义下log：</p><div class="code-wrapper"><pre><code class="hljs text">log:  level: debug # 日志级别，info，debug，error  file_format: &quot;%Y%m%d&quot; # 文件格式  max_save_days: 30 # 保存天数  file_type: one # one, level 单文件存储还是以level级别存储</code></pre></div><p>整合logger：</p><div class="code-wrapper"><pre><code class="hljs text">package loggerimport (&quot;io&quot;&quot;log&quot;&quot;time&quot;&quot;github.com/lestrrat-go/file-rotatelogs&quot;&quot;go.uber.org/zap&quot;&quot;go.uber.org/zap/zapcore&quot;        &quot;github.com/spf13/viper&quot;)var Logger *zap.Logger var LogLevel stringvar FileFormat string// 初始化日志 loggerfunc init() &#123;// 设置一些基本日志格式config := zapcore.EncoderConfig&#123;MessageKey:  &quot;msg&quot;,LevelKey:    &quot;level&quot;,EncodeLevel: zapcore.CapitalLevelEncoder,TimeKey:     &quot;ts&quot;,EncodeTime: func(t time.Time, enc zapcore.PrimitiveArrayEncoder) &#123;enc.AppendString(t.Format(&quot;2006-01-02 15:04:05&quot;))&#125;,CallerKey:    &quot;file&quot;,EncodeCaller: zapcore.ShortCallerEncoder,EncodeDuration: func(d time.Duration, enc zapcore.PrimitiveArrayEncoder) &#123;enc.AppendInt64(int64(d) / 1000000)&#125;,&#125;encoder := zapcore.NewConsoleEncoder(config)FileFormat, saveType, LogLevel := &quot;%Y%m%d&quot;, &quot;one&quot;, &quot;info&quot;if viper.IsSet(&quot;log.file_format&quot;) &#123;FileFormat = viper.GetString(&quot;log.file_format&quot;)&#125;if viper.IsSet(&quot;log.level&quot;) &#123;LogLevel = viper.GetString(&quot;log.level&quot;)&#125;if viper.IsSet(&quot;log.save_type&quot;) &#123;saveType = viper.GetString(&quot;log.save_type&quot;)&#125;logLevel := zap.DebugLevelswitch LogLevel &#123;case &quot;debug&quot;:logLevel = zap.DebugLevelcase &quot;info&quot;:logLevel = zap.InfoLevelcase &quot;error&quot;:logLevel = zap.ErrorLeveldefault:logLevel = zap.InfoLevel&#125;switch saveType &#123;case &quot;level&quot;:Logger = getLevelLogger(encoder, logLevel, FileFormat)default:Logger = getOneLogger(encoder, logLevel, FileFormat)&#125;&#125;func getLevelLogger(encoder zapcore.Encoder, logLevel zapcore.Level, fileFormat string) *zap.Logger &#123;infoLevel := zap.LevelEnablerFunc(func(lvl zapcore.Level) bool &#123;return lvl == zapcore.InfoLevel &amp;&amp; lvl &gt;= logLevel&#125;)debugLevel := zap.LevelEnablerFunc(func(lvl zapcore.Level) bool &#123;return lvl == zapcore.DebugLevel &amp;&amp; lvl &gt;= logLevel&#125;)errorLevel := zap.LevelEnablerFunc(func(lvl zapcore.Level) bool &#123;return lvl &gt;= zapcore.ErrorLevel &amp;&amp; lvl &gt;= logLevel&#125;)// 获取 info、warn日志文件的io.Writer 抽象 getLoggerWriter() 在下方实现infoWriter := getLoggerWriter(&quot;./log/info&quot;, fileFormat)errorWriter := getLoggerWriter(&quot;./log/error&quot;, fileFormat)debugWriter := getLoggerWriter(&quot;./log/debug&quot;, fileFormat)// 最后创建具体的Loggercore := zapcore.NewTee(zapcore.NewCore(encoder, zapcore.AddSync(debugWriter), debugLevel),zapcore.NewCore(encoder, zapcore.AddSync(infoWriter), infoLevel),zapcore.NewCore(encoder, zapcore.AddSync(errorWriter), errorLevel),)return zap.New(core, zap.AddCaller(), zap.AddStacktrace(zap.WarnLevel))&#125;func getOneLogger(encoder zapcore.Encoder, logLevel zapcore.Level, fileFormat string) *zap.Logger &#123;infoWriter := getLoggerWriter(&quot;./log/info&quot;, fileFormat)infoLevel := zap.LevelEnablerFunc(func(lvl zapcore.Level) bool &#123;return lvl == zapcore.InfoLevel &amp;&amp; lvl &gt;= logLevel&#125;)core := zapcore.NewTee(zapcore.NewCore(encoder, zapcore.AddSync(infoWriter), infoLevel),)return zap.New(core, zap.AddCaller(), zap.AddStacktrace(zap.WarnLevel))&#125;func getLoggerWriter(filename, fileFormat string) io.Writer &#123;// 生成rotatelogs的Logger 实际生成的文件名 file_YYmmddHH.loghook, err := rotatelogs.New(filename+fileFormat+&quot;.log&quot;,rotatelogs.WithLinkName(filename),// 保存天数rotatelogs.WithMaxAge(time.Hour*24*30),// 切割频率24小时rotatelogs.WithRotationTime(time.Hour*24),)if err != nil &#123;log.Println(&quot;日志启动异常&quot;)panic(err)&#125;return hook&#125;func Debug(format string, v ...interface&#123;&#125;) &#123;Logger.Sugar().Debugf(format, v...)&#125;func Info(format string, v ...interface&#123;&#125;) &#123;Logger.Sugar().Infof(format, v...)&#125;func Error(format string, v ...interface&#123;&#125;) &#123;Logger.Sugar().Errorf(format, v...)&#125;</code></pre></div><p>这里注意init函数，我们直接调用logger其中函数即可，程序加载包的过程中会自动执行init函数。关于init有以下说明：</p><ol><li>init函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等</li><li>每个包可以拥有多个init函数</li><li>包的每个源文件也可以拥有多个init函数</li><li>同一个包中多个init函数的执行顺序go语言没有明确的定义(说明)</li><li>不同包的init函数按照包导入的依赖关系决定该初始化函数的执行顺序</li><li>init函数不能被其他函数调用，而是在main函数执行之前，自动被调用</li></ol><p>我们直接使用：</p><div class="code-wrapper"><pre><code class="hljs go">logger.Info(<span class="hljs-string">&quot;i&#x27;m log123-----Info&quot;</span>)logger.Error(<span class="hljs-string">&quot;i&#x27;m log123-----Error&quot;</span>)</code></pre></div><p><img src="/images/post/v2-9a3fa5680e78075596feedcc5f9669c6_1440w.png" alt="img"></p><h2 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h2><p>当程序在线上稳定运行后，我们可能会去更新一些功能，但发布代码的同时，假如有用户正在使用，盲目发布代码可能会造成用户短暂失真，这时候平滑重启就来了。</p><p>对于平滑重启，其实有很多方案，这里我们只从自身代码级别来完成，而即便是代码级别，目前也有多种实现方案，比如第三方库endless这种，我这里主要参考了</p><p><a href="https://github.com/kuangchanglang/graceful">https://github.com/kuangchanglang/gracefulgithub.com/kuangchanglang/graceful</a></p><p>简单说明下处理步骤：</p><ol><li>监听信号（USR2，可自定义其他信号）</li><li>收到信号时fork子进程（使用相同的启动命令），将服务监听的socket文件描述符传递给子进程</li><li>子进程监听父进程的socket，这个时候父进程和子进程都可以接收请求</li><li>子进程启动成功之后，父进程停止接收新的连接，等待旧连接处理完成（或超时）</li><li>父进程退出，重启完成</li></ol><p>详细分析可看底部参考-Golang服务器热重启、热升级、热更新。</p><h2 id="启动检查"><a href="#启动检查" class="headerlink" title="启动检查"></a>启动检查</h2><p>结合上面的优雅重启，我们在启动时配置上启动健康检查：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-comment">// import 这里我习惯把官方库，开源库，本地module依次分开列出</span><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;errors&quot;</span><span class="hljs-string">&quot;net/http&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/pflag&quot;</span>    <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/config&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/db&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/router&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/logger&quot;</span>    <span class="hljs-string">&quot;local.com/sai0556/demo2-gin-frame/graceful&quot;</span>)<span class="hljs-keyword">var</span> (    conf = pflag.StringP(<span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;config filepath&quot;</span>))<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    pflag.Parse()    <span class="hljs-comment">// 初始化配置</span>    <span class="hljs-keyword">if</span> err := config.Run(*conf); err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-built_in">panic</span>(err)&#125;<span class="hljs-comment">// logger.Info(&quot;i&#x27;m log123-----Info&quot;)</span><span class="hljs-comment">// logger.Error(&quot;i&#x27;m log123-----Error&quot;)</span><span class="hljs-comment">// 连接mysql数据库</span>DB := db.GetDB()<span class="hljs-keyword">defer</span> db.CloseDB(DB)<span class="hljs-comment">// redis</span>db.InitRedis()gin.SetMode(viper.GetString(<span class="hljs-string">&quot;mode&quot;</span>))g := gin.New()g = router.Load(g)<span class="hljs-comment">// g.Run(viper.GetString(&quot;addr&quot;))</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">if</span> err := pingServer(); err != <span class="hljs-literal">nil</span> &#123;fmt.Println(<span class="hljs-string">&quot;fail:健康检测失败&quot;</span>, err)&#125;fmt.Println(<span class="hljs-string">&quot;success:健康检测成功&quot;</span>)&#125;()logger.Info(<span class="hljs-string">&quot;启动http服务端口%s\n&quot;</span>, viper.GetString(<span class="hljs-string">&quot;addr&quot;</span>))<span class="hljs-keyword">if</span> err := graceful.ListenAndServe(viper.GetString(<span class="hljs-string">&quot;addr&quot;</span>), g); err != <span class="hljs-literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;logger.Error(<span class="hljs-string">&quot;fail:http服务启动失败: %s\n&quot;</span>, err)&#125;&#125;<span class="hljs-comment">// 健康检查</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pingServer</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; viper.GetInt(<span class="hljs-string">&quot;max_ping_count&quot;</span>); i++ &#123;url := fmt.Sprintf(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1&quot;</span>, viper.GetString(<span class="hljs-string">&quot;addr&quot;</span>), viper.GetString(<span class="hljs-string">&quot;healthCheck&quot;</span>))fmt.Println(url)resp, err := http.Get(url)<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &amp;&amp; resp.StatusCode == <span class="hljs-number">200</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;time.Sleep(time.Second)&#125;<span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;健康检测404&quot;</span>)&#125;</code></pre></div><p>这里就比较简单，另外启动一个协程，去ping健康检测的url即可。</p><h2 id="打包脚本"><a href="#打包脚本" class="headerlink" title="打包脚本"></a>打包脚本</h2><p>shell</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>SERVER=<span class="hljs-string">&quot;demo2-gin-frame&quot;</span><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">status</span></span>() &#123;<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;`pgrep <span class="hljs-variable">$SERVER</span> -u <span class="hljs-variable">$UID</span>`&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ];<span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SERVER</span> is running<span class="hljs-keyword">else</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SERVER</span> is not running<span class="hljs-keyword">fi</span>&#125;<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">build</span></span>() &#123;<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;build...&quot;</span>    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./<span class="hljs-variable">$SERVER</span> main.go    <span class="hljs-keyword">if</span> [ $? -ne <span class="hljs-string">&quot;0&quot;</span> ];<span class="hljs-keyword">then</span>          <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;built error!!!&quot;</span>        <span class="hljs-built_in">return</span>     <span class="hljs-keyword">fi</span>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;built success!&quot;</span>&#125;<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><span class="hljs-string">&#x27;status&#x27;</span>)status;;     <span class="hljs-string">&#x27;build&#x27;</span>)build;;  *)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;unknown, please: <span class="hljs-variable">$0</span> &#123;status or build&#125;&quot;</span><span class="hljs-built_in">exit</span> 1;;  <span class="hljs-keyword">esac</span></code></pre></div><p>bat</p><div class="code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;build...&quot;</span><span class="hljs-built_in">SET</span> CGO_ENABLED=<span class="hljs-number">0</span><span class="hljs-built_in">SET</span> GOOS=linuxgo build <span class="hljs-literal">-o</span> demo2<span class="hljs-literal">-gin</span><span class="hljs-literal">-frame</span><span class="hljs-keyword">if</span> %errorlevel% == <span class="hljs-number">0</span> (    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;built successfully&quot;</span>) <span class="hljs-keyword">else</span> (    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;built fail!!!&quot;</span>)</code></pre></div><p>对于程序的重启和保活，建议配合supervisor使用。</p><p>好，到这里我们的round 2就结束了。下一轮我们来玩玩钉钉智能机器人。</p><p><a href="https://github.com/13sai/go-example/tree/main/demo2-gin-frame">点击直达完整代码</a></p><hr><p>参考：</p><ul><li><a href="https://studygolang.com/articles/26642">golang zap 日志库使用（含文件切割、分级别存储和全局使用等）</a></li><li><a href="https://juejin.im/book/6844733730678898702">基于Go语言构建企业级的 RESTful API 服务</a></li><li><a href="https://studygolang.com/articles/16671">golang init函数 - Go语言中文网 - Golang中文社区</a></li><li><a href="https://www.cnblogs.com/sunsky303/p/9778466.html">Golang服务器热重启、热升级、热更新(safe and graceful hot-restart/reload http server)详解</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防止漏打卡，利用gin和cron来做一个智能提醒</title>
    <link href="/2021/02/12/goexample3/"/>
    <url>/2021/02/12/goexample3/</url>
    
    <content type="html"><![CDATA[<p>目标：</p><ul><li>每天10点提醒我打卡</li><li>查询杭州天气</li></ul><p>使用的库：</p><ul><li><a href="https://github.com/robfig/cron">github.com/robfig/cron</a></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>round2里面我们做了个框架，我们不妨以此为基础，来完成这个demo。我们通过解析不同时段的提醒任务，规律地存储到redis的有序集合，10s去查询一次有没有需要提醒的任务，如有发送到钉钉。</p><blockquote><p>(代码额外说明：redis我更新成了v8版本，命令前需要加上下文，注意一下)</p></blockquote><h2 id="接入钉钉机器人"><a href="#接入钉钉机器人" class="headerlink" title="接入钉钉机器人"></a>接入钉钉机器人</h2><p><a href="https://ding-doc.dingtalk.com/doc%23/serverapi2/qf2nxq">钉钉机器人文档</a></p><p>按照文档在群里新建机器人即可。我开启的是webhook自定义机器人，outgoing提送地址就是项目接收信息地址，比如：<a href="https://cron.13sai.com/dingdingPost">http://cron.13sai.com/dingdingPost</a></p><blockquote><p>建议设置成加签或ip限制，以防被恶意攻击</p></blockquote><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><div class="code-wrapper"><pre><code class="hljs text">// util/common.go// 就列了一些常见的，可自行扩展func UpdateKeywords() &#123;redis := model.RedisClient.Pipeline()key := KeyWordsredis.HSet(model.Ctx, key, &quot;分钟后&quot;, &quot;1|60&quot;)redis.HSet(model.Ctx, key, &quot;时后&quot;, &quot;1|3600&quot;)redis.HSet(model.Ctx, key, &quot;天后&quot;, &quot;1|86400&quot;)redis.HSet(model.Ctx, key, &quot;每天&quot;, &quot;-1|1&quot;)redis.HSet(model.Ctx, key, &quot;每周一&quot;, &quot;2|0&quot;)redis.HSet(model.Ctx, key, &quot;每周二&quot;, &quot;2|1&quot;)redis.HSet(model.Ctx, key, &quot;每周三&quot;, &quot;2|2&quot;)redis.HSet(model.Ctx, key, &quot;每周四&quot;, &quot;2|3&quot;)redis.HSet(model.Ctx, key, &quot;每周五&quot;, &quot;2|4&quot;)redis.HSet(model.Ctx, key, &quot;每周六&quot;, &quot;2|5&quot;)redis.HSet(model.Ctx, key, &quot;每周日&quot;, &quot;2|6&quot;)redis.HSet(model.Ctx, key, &quot;周一&quot;, &quot;3|0&quot;)redis.HSet(model.Ctx, key, &quot;周二&quot;, &quot;3|1&quot;)redis.HSet(model.Ctx, key, &quot;周三&quot;, &quot;3|2&quot;)redis.HSet(model.Ctx, key, &quot;周四&quot;, &quot;3|3&quot;)redis.HSet(model.Ctx, key, &quot;周五&quot;, &quot;3|4&quot;)redis.HSet(model.Ctx, key, &quot;周六&quot;, &quot;3|5&quot;)...redis.HSet(model.Ctx, key, &quot;今天&quot;, &quot;4|0&quot;)redis.HSet(model.Ctx, key, &quot;明天&quot;, &quot;4|1&quot;)redis.HSet(model.Ctx, key, &quot;后天&quot;, &quot;4|2&quot;)redis.HSet(model.Ctx, key, &quot;取消&quot;, &quot;0|0&quot;)redis.Exec(model.Ctx)&#125;</code></pre></div><p>关键字，可以自行扩展，可能会有覆盖的情况，这里需要抉择，是匹配第一个还是匹配字数最多的，我此处选择后者的。</p><h3 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a><strong>解析内容</strong></h3><p>钉钉文档的outgoing说明不全，或者是藏在哪里我没找到，可以使用@机器人接收信息打印看一下。</p><div class="code-wrapper"><pre><code class="hljs text">//关注senderId发送人id，text发送内容，senderNick发送人昵称即可&#123;    &quot;conversationId&quot;:&quot;xxx&quot;,    &quot;atUsers&quot;:[        &#123;            &quot;dingtalkId&quot;:&quot;xxx&quot;        &#125;],    &quot;chatbotUserId&quot;:&quot;xxx&quot;,    &quot;msgId&quot;:&quot;xxx&quot;,    &quot;senderNick&quot;:&quot;sai0556&quot;,    &quot;isAdmin&quot;:false,    &quot;sessionWebhookExpiredTime&quot;:1594978626787,    &quot;createAt&quot;:1594973226742,    &quot;conversationType&quot;:&quot;2&quot;,    &quot;senderId&quot;:&quot;xxx&quot;,    &quot;conversationTitle&quot;:&quot;智能备忘录&quot;,    &quot;isInAtList&quot;:true,    &quot;sessionWebhook&quot;:&quot;xxx&quot;,    &quot;text&quot;:&#123;        &quot;content&quot;:&quot; hello gin-frame&quot;    &#125;,    &quot;msgtype&quot;:&quot;text&quot;&#125;</code></pre></div><p>定义一个struct，接收消息</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> DingDingMsgContent <span class="hljs-keyword">struct</span> &#123;SenderNick <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;senderNick&quot;`</span>SenderId <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;senderId&quot;`</span>Text <span class="hljs-keyword">struct</span> &#123;Content <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;content&quot;`</span>&#125; <span class="hljs-string">`json:&quot;text&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DingDing</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;data, _ := ioutil.ReadAll(c.Request.Body)form := DingDingMsgContent&#123;&#125;err := json.Unmarshal([]<span class="hljs-keyword">byte</span>(data), &amp;form)<span class="hljs-comment">// err := c.ShouldBindJSON(&amp;form)</span><span class="hljs-keyword">if</span>  err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)<span class="hljs-keyword">return</span>&#125;....&#125;</code></pre></div><p>解析，注意定义了一些特殊情况，比如绑定手机，取消任务等，做对应的特殊处理，绑定手机是为了@ 某人，否则消息容易被忽略。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseContent</span><span class="hljs-params">(form DingDingMsgContent)</span> <span class="hljs-params">(err error)</span></span> &#123;str := form.Text.Contentredis := db.RedisClientfmt.Println(str)<span class="hljs-comment">// 要先绑定哟，不然无法@到对应的人</span>index := strings.Index(str, <span class="hljs-string">&quot;绑定手机&quot;</span>)<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &#123;reg := regexp.MustCompile(<span class="hljs-string">&quot;1[0-9]&#123;10&#125;&quot;</span>)res := reg.FindAllString(str, <span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &lt; <span class="hljs-number">1</span> || res[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;err = errors.New(<span class="hljs-string">&quot;手机格式不正确&quot;</span>)<span class="hljs-keyword">return</span>&#125;redis.HSet(db.Ctx, util.KeyDingDingID, form.SenderId, res[<span class="hljs-number">0</span>])util.SendDD(<span class="hljs-string">&quot;绑定成功&quot;</span>)<span class="hljs-keyword">return</span>&#125;hExist := redis.HExists(db.Ctx, util.KeyDingDingID, form.SenderId)<span class="hljs-keyword">if</span> !hExist.Val() &#123;err = errors.New(<span class="hljs-string">&quot;绑定手机号才能精确提醒哦，发送--绑定手机 13456567878--@我即可&quot;</span>)<span class="hljs-keyword">return</span> &#125;index = strings.Index(util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>), <span class="hljs-string">&quot;我的提醒&quot;</span>)fmt.Println(index, <span class="hljs-string">&quot;---&quot;</span>, util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>))<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &#123;www := util.QueryAllQueue(form.SenderId);<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(www) &lt; <span class="hljs-number">1</span> &#123;err = errors.New(<span class="hljs-string">&quot;暂无任务&quot;</span>)<span class="hljs-keyword">return</span>&#125; msg := <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> key,value := <span class="hljs-keyword">range</span> www &#123;fmt.Println(strings.Index(value, <span class="hljs-string">&quot;@&quot;</span>))value := value[<span class="hljs-number">0</span>:strings.Index(value, <span class="hljs-string">&quot;@&quot;</span>)]fmt.Println(value)msg = util.StrCombine(msg, <span class="hljs-string">&quot;任务id：&quot;</span>, key, <span class="hljs-string">&quot;，任务内容：&quot;</span>, value, <span class="hljs-string">&quot;&#123;br&#125;&quot;</span>)&#125;err = errors.New(msg)<span class="hljs-keyword">return</span>&#125;index = strings.Index(util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>), <span class="hljs-string">&quot;查看任务&quot;</span>)fmt.Println(index, <span class="hljs-string">&quot;---&quot;</span>, util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>))<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &#123;www := util.QueryAllQueue(form.SenderId);<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(www) &lt; <span class="hljs-number">1</span> &#123;err = errors.New(<span class="hljs-string">&quot;暂无任务&quot;</span>)<span class="hljs-keyword">return</span>&#125; msg := <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> key,value := <span class="hljs-keyword">range</span> www &#123;fmt.Println(strings.Index(value, <span class="hljs-string">&quot;@&quot;</span>))value := value[<span class="hljs-number">0</span>:strings.Index(value, <span class="hljs-string">&quot;@&quot;</span>)]fmt.Println(value)msg = util.StrCombine(msg, <span class="hljs-string">&quot;任务id：&quot;</span>, key, <span class="hljs-string">&quot;，任务内容：&quot;</span>, value, <span class="hljs-string">&quot;&#123;br&#125;&quot;</span>)&#125;err = errors.New(msg)<span class="hljs-keyword">return</span>&#125;index = strings.Index(util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>), <span class="hljs-string">&quot;取消所有任务&quot;</span>)fmt.Println(index, <span class="hljs-string">&quot;---&quot;</span>, util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>))<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &#123;<span class="hljs-keyword">if</span> er := util.CancelAllQueue(form.SenderId); er != <span class="hljs-literal">nil</span> &#123;err = er<span class="hljs-keyword">return</span>&#125;err = errors.New(<span class="hljs-string">&quot;取消成功&quot;</span>)<span class="hljs-keyword">return</span>&#125;index = strings.Index(util.StrSub(str, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>), <span class="hljs-string">&quot;取消&quot;</span>)<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &#123;reg := regexp.MustCompile(<span class="hljs-string">&quot;[a-z0-9]&#123;32&#125;&quot;</span>)res := reg.FindAllString(str, <span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &lt; <span class="hljs-number">1</span> &#123;err = errors.New(<span class="hljs-string">&quot;任务id不正确&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> er := util.CancelQueue(res[<span class="hljs-number">0</span>], form.SenderId); er != <span class="hljs-literal">nil</span> &#123;err = er<span class="hljs-keyword">return</span>&#125;err = errors.New(<span class="hljs-string">&quot;取消成功&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 提醒内容</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">tips</span><span class="hljs-params">(form DingDingMsgContent)</span> <span class="hljs-params">(err error)</span></span>  &#123;rd := db.RedisClientstr := form.Text.Contentmobile := rd.HGet(db.Ctx, util.KeyDingDingID, form.SenderId).Val()key := util.KeyWordslist, _ := rd.HGetAll(db.Ctx, key).Result()now := time.Now().Unix()tipsType := <span class="hljs-number">1</span>k := <span class="hljs-string">&quot;&quot;</span>v := <span class="hljs-string">&quot;&quot;</span>fmt.Println(<span class="hljs-string">&quot;str&quot;</span>, str)index := <span class="hljs-number">0</span><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> list &#123;index = util.UnicodeIndex(str, key)<span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">-1</span> &amp;&amp; util.StrLen(key) &gt; util.StrLen(k) &#123;fmt.Println(<span class="hljs-string">&quot;index&quot;</span>, index, str, key, value)k = keyv = value&#125;&#125;msg := <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">var</span> score <span class="hljs-keyword">int64</span><span class="hljs-keyword">if</span> k != <span class="hljs-string">&quot;&quot;</span> &#123;kLen := util.StrLen(k)msg = util.StrSub(str, index+kLen)val := strings.Split(v, <span class="hljs-string">&quot;|&quot;</span>)unit := val[<span class="hljs-number">1</span>]units,_ := strconv.Atoi(unit)<span class="hljs-keyword">switch</span> val[<span class="hljs-number">0</span>] &#123;<span class="hljs-comment">// 多少时间后</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:reg := regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,2&#125;&quot;</span>)res := reg.FindAllString(str, <span class="hljs-number">1</span>)minute, _ := strconv.Atoi(res[<span class="hljs-number">0</span>])score = now + <span class="hljs-keyword">int64</span>(units*minute)<span class="hljs-comment">// 每周</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:reg := regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,2&#125;&quot;</span>)res := reg.FindAllString(util.StrSub(msg, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), <span class="hljs-number">-1</span>)hour := <span class="hljs-number">9</span>minute := <span class="hljs-number">0</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">0</span> &#123;hour, _ = strconv.Atoi(res[<span class="hljs-number">0</span>])&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">1</span> &#123;minute, _ = strconv.Atoi(res[<span class="hljs-number">1</span>])&#125;now = util.GetWeekTS(<span class="hljs-keyword">int64</span>(units))score = now + <span class="hljs-keyword">int64</span>(<span class="hljs-number">60</span>*minute + <span class="hljs-number">3600</span>*hour)tipsType = <span class="hljs-number">2</span><span class="hljs-comment">// 下周</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:reg := regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,2&#125;&quot;</span>)res := reg.FindAllString(util.StrSub(msg, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), <span class="hljs-number">-1</span>)hour := <span class="hljs-number">9</span>minute := <span class="hljs-number">0</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">0</span> &#123;hour, _ = strconv.Atoi(res[<span class="hljs-number">0</span>])&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">1</span> &#123;minute, _ = strconv.Atoi(res[<span class="hljs-number">1</span>])&#125;now = util.TodayTS()score = now + <span class="hljs-keyword">int64</span>(<span class="hljs-number">60</span>*minute + <span class="hljs-number">3600</span>*hour + units*<span class="hljs-number">86400</span>)<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:reg := regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,2&#125;&quot;</span>)res := reg.FindAllString(util.StrSub(msg, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), <span class="hljs-number">-1</span>)hour := <span class="hljs-number">9</span>minute := <span class="hljs-number">0</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">0</span> &#123;hour, _ = strconv.Atoi(res[<span class="hljs-number">0</span>])&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">1</span> &#123;minute, _ = strconv.Atoi(res[<span class="hljs-number">1</span>])&#125;now = util.TodayTS() + <span class="hljs-number">86400</span>*<span class="hljs-keyword">int64</span>(units)score = now + <span class="hljs-keyword">int64</span>(<span class="hljs-number">60</span>*minute + <span class="hljs-number">3600</span>*hour)<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-1&quot;</span>: reg := regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,10&#125;&quot;</span>)res := reg.FindAllString(util.StrSub(msg, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), <span class="hljs-number">-1</span>)fmt.Println(<span class="hljs-string">&quot;res&quot;</span>, res)hour := <span class="hljs-number">9</span>minute := <span class="hljs-number">0</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">0</span> &#123;hour, _ = strconv.Atoi(res[<span class="hljs-number">0</span>])&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">1</span> &#123;minute, _ = strconv.Atoi(res[<span class="hljs-number">1</span>])&#125;now = util.TodayTS() + <span class="hljs-number">86400</span>score = now + <span class="hljs-keyword">int64</span>(<span class="hljs-number">60</span>*minute + <span class="hljs-number">3600</span>*hour)fmt.Println(now, score, minute, hour)tipsType = <span class="hljs-number">3</span><span class="hljs-keyword">default</span>:&#125;&#125; <span class="hljs-keyword">else</span> &#123;reg := regexp.MustCompile(<span class="hljs-string">&quot;(([0-9]&#123;4&#125;)[-|/|年])?([0-9]&#123;1,2&#125;)[-|/|月]([0-9]&#123;1,2&#125;)日?&quot;</span>)pi := reg.FindAllStringSubmatch(str, <span class="hljs-number">-1</span>)<span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(pi) &gt; <span class="hljs-number">0</span> ) &#123;date := pi[<span class="hljs-number">0</span>]<span class="hljs-keyword">if</span> date[<span class="hljs-number">2</span>] == <span class="hljs-string">&quot;&quot;</span> &#123;date[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;2020&quot;</span>&#125;location, _ := time.LoadLocation(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>)tm2, _ := time.ParseInLocation(<span class="hljs-string">&quot;2006/01/02&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s/%s/%s&quot;</span>, date[<span class="hljs-number">2</span>], date[<span class="hljs-number">3</span>], date[<span class="hljs-number">4</span>]), location)score = util.GetZeroTime(tm2).Unix()msg = reg.ReplaceAllString(str, <span class="hljs-string">&quot;&quot;</span>)fmt.Println(msg)&#125; <span class="hljs-keyword">else</span> &#123;msg = strscore = util.TodayTS()&#125;reg = regexp.MustCompile(<span class="hljs-string">&quot;[0-9]&#123;1,10&#125;&quot;</span>)res := reg.FindAllString(util.StrSub(msg, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>), <span class="hljs-number">-1</span>)fmt.Println(<span class="hljs-string">&quot;res&quot;</span>, res)hour := <span class="hljs-number">9</span>minute := <span class="hljs-number">0</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt;= <span class="hljs-number">1</span> &#123;hour, _ = strconv.Atoi(res[<span class="hljs-number">0</span>])fmt.Println(<span class="hljs-string">&quot;hour&quot;</span>, hour, minute)&#125;<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) &gt; <span class="hljs-number">1</span> &#123;minute, _ = strconv.Atoi(res[<span class="hljs-number">1</span>])&#125;score += <span class="hljs-keyword">int64</span>(<span class="hljs-number">60</span>*minute + <span class="hljs-number">3600</span>*hour)&#125;<span class="hljs-keyword">if</span> msg == <span class="hljs-string">&quot;&quot;</span> &#123;err = errors.New(<span class="hljs-string">&quot;你说啥&quot;</span>)<span class="hljs-keyword">return</span>&#125;index = util.UnicodeIndex(msg, <span class="hljs-string">&quot;提醒我&quot;</span>)index2 := util.UnicodeIndex(msg, <span class="hljs-string">&quot;提醒&quot;</span>)<span class="hljs-keyword">if</span> index2 &lt; <span class="hljs-number">0</span> &#123;err = errors.New(<span class="hljs-string">&quot;大哥，要我提醒你干啥呢？请发送--下周一13点提醒我写作业&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> &amp;&amp; index2 &gt; <span class="hljs-number">-1</span> &#123;msg = util.StrSub(msg, index2+<span class="hljs-number">2</span>)&#125; <span class="hljs-keyword">else</span> &#123;msg = util.StrSub(msg, index+<span class="hljs-number">3</span>)&#125; fmt.Println(msg, mobile)msg = util.StrCombine(msg, <span class="hljs-string">&quot;@&quot;</span>, mobile)fmt.Println(score, msg, tipsType, err)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;util.SendDD(err.Error())<span class="hljs-keyword">return</span>&#125;member := util.StrCombine(strconv.Itoa(tipsType), msg)rd.ZAdd(db.Ctx, util.KeyCrontab, &amp;redis.Z&#123;Score: <span class="hljs-keyword">float64</span>(score),Member: member,&#125;)uniqueKey := util.Md5(member)rd.HSet(db.Ctx, util.StrCombine(util.KeyUserCron, form.SenderId), uniqueKey, member)util.SendDD(fmt.Sprintf(<span class="hljs-string">&quot;设置成功(取消请回复：取消任务%s)--%s提醒您%s&quot;</span>, uniqueKey, time.Unix(score, <span class="hljs-number">0</span>).Format(<span class="hljs-string">&quot;2006/01/02 15:04:05&quot;</span>), msg))<span class="hljs-keyword">return</span> &#125;</code></pre></div><h3 id="发送钉钉消息"><a href="#发送钉钉消息" class="headerlink" title="发送钉钉消息"></a><strong>发送钉钉消息</strong></h3><p>这里就是对接钉钉接口，解析给需要提醒的人就行，就不做过多说明了。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SendDD</span><span class="hljs-params">(msg <span class="hljs-keyword">string</span>)</span></span> &#123;        <span class="hljs-comment">// 打印出来看看是个啥</span>fmt.Println(<span class="hljs-string">&quot;dingding-----------&quot;</span>)fmt.Println(msg)tips := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)content := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)tips[<span class="hljs-string">&quot;msgtype&quot;</span>] = <span class="hljs-string">&quot;markdown&quot;</span>    <span class="hljs-comment">// @ 是用来提醒群里对应的人</span>arr := strings.Split(msg, <span class="hljs-string">&quot;@&quot;</span>)    <span class="hljs-comment">// [提醒]是机器人关键字，个人建议设置机器人限制ip或使用token，比较靠谱</span>content[<span class="hljs-string">&quot;text&quot;</span>] = fmt.Sprintf(<span class="hljs-string">&quot;%s&quot;</span>, strings.Replace(arr[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&#123;br&#125;&quot;</span>, <span class="hljs-string">&quot; \n\n&quot;</span>, <span class="hljs-number">-1</span>))content[<span class="hljs-string">&quot;title&quot;</span>] = <span class="hljs-string">&quot;鹅鹅鹅&quot;</span><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &gt; <span class="hljs-number">1</span> &#123;mobile := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">0</span>)at := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)mobile = <span class="hljs-built_in">append</span>(mobile, arr[<span class="hljs-number">1</span>])at[<span class="hljs-string">&quot;atMobiles&quot;</span>] = mobiletips[<span class="hljs-string">&quot;at&quot;</span>] = atcontent[<span class="hljs-string">&quot;text&quot;</span>] = fmt.Sprintf(<span class="hljs-string">&quot;%s @%s&quot;</span>, content[<span class="hljs-string">&quot;text&quot;</span>], arr[<span class="hljs-number">1</span>])&#125;    tips[<span class="hljs-string">&quot;markdown&quot;</span>] = content    bytesData, err := json.Marshal(tips)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        fmt.Println(err.Error() )        <span class="hljs-keyword">return</span>    &#125;    reader := bytes.NewReader(bytesData)    url := viper.GetString(<span class="hljs-string">&quot;dingding_url&quot;</span>)    request, err := http.NewRequest(<span class="hljs-string">&quot;POST&quot;</span>, url, reader)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        <span class="hljs-keyword">return</span>    &#125;    request.Header.Set(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>)    client := http.Client&#123;&#125;    _, err = client.Do(request)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        fmt.Println(err.Error())        <span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 偷懒不重试了</span>    <span class="hljs-comment">// respBytes, err := ioutil.ReadAll(resp.Body)</span>    <span class="hljs-comment">// if err != nil &#123;</span>    <span class="hljs-comment">//     fmt.Println(err.Error())</span>    <span class="hljs-comment">//     return</span>    <span class="hljs-comment">// &#125;</span>    <span class="hljs-comment">// //byte数组直接转成string，优化内存</span>    <span class="hljs-comment">// str := (*string)(unsafe.Pointer(&amp;respBytes))</span>    <span class="hljs-comment">// fmt.Println(*str)</span>&#125;</code></pre></div><h2 id="定时发送与任务取消"><a href="#定时发送与任务取消" class="headerlink" title="定时发送与任务取消"></a><strong>定时发送与任务取消</strong></h2><p>这就是发送提醒的核心代码了，详细使用说明可以看下：</p><p><a href="https://www.cnblogs.com/liuzhongchao/p/9521897.html">Golang cron 定时任务使用</a></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Cron</span><span class="hljs-params">()</span></span> &#123;    c := cron.New()    spec := <span class="hljs-string">&quot;*/10 * * * * ?&quot;</span>    c.AddJob(spec, Queue&#123;&#125;)    c.Start()&#125;<span class="hljs-keyword">type</span> Queue <span class="hljs-keyword">struct</span> &#123;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q Queue)</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span> &#123;now := time.Now().Unix()rd := model.RedisClientop := &amp;redis.ZRangeBy&#123;        Min: <span class="hljs-string">&quot;0&quot;</span>,        Max: strconv.FormatInt(now, <span class="hljs-number">10</span>),    &#125;    ret, err := rd.ZRangeByScoreWithScores(model.Ctx, KeyCrontab, op).Result()    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;        fmt.Printf(<span class="hljs-string">&quot;zrangebyscore failed, err:%v\n&quot;</span>, err)        <span class="hljs-keyword">return</span>&#125;    <span class="hljs-keyword">for</span> _, z := <span class="hljs-keyword">range</span> ret &#123;fmt.Println(z.Member.(<span class="hljs-keyword">string</span>), z.Score)QueueDo(z.Member.(<span class="hljs-keyword">string</span>), z.Score)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QueueDo</span><span class="hljs-params">(msg <span class="hljs-keyword">string</span>, score <span class="hljs-keyword">float64</span>)</span></span> &#123;msgType := msg[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]SendDD(msg[<span class="hljs-number">1</span>:])rd := model.RedisClientrd.ZRem(model.Ctx, KeyCrontab, msg)<span class="hljs-keyword">switch</span> msgType &#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:rd.ZAdd(model.Ctx, KeyCrontab, &amp;redis.Z&#123;Score: score + <span class="hljs-number">7</span>*<span class="hljs-number">86400</span>,Member: msg,&#125;)<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:rd.ZAdd(model.Ctx, KeyCrontab, &amp;redis.Z&#123;Score: score + <span class="hljs-number">86400</span>,Member: msg,&#125;)<span class="hljs-keyword">default</span>:rd.ZRem(model.Ctx, KeyCrontab, msg)&#125;&#125;<span class="hljs-comment">// 取消提醒</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CancelQueue</span><span class="hljs-params">(uniqueKey <span class="hljs-keyword">string</span>, SenderId <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(err error)</span></span> &#123;rd := model.RedisClientmember := rd.HGet(model.Ctx, StrCombine(KeyUserCron, SenderId), uniqueKey).Val()<span class="hljs-keyword">if</span> member == <span class="hljs-string">&quot;&quot;</span> &#123;fmt.Println(StrCombine(KeyUserCron, SenderId), uniqueKey)err = errors.New(<span class="hljs-string">&quot;没有此任务&quot;</span>)<span class="hljs-keyword">return</span>&#125;fmt.Println(member, <span class="hljs-string">&quot;member&quot;</span>)rd.ZRem(model.Ctx, KeyCrontab, member)rd.HDel(model.Ctx, StrCombine(KeyUserCron, SenderId), uniqueKey)err = errors.New(<span class="hljs-string">&quot;取消成功&quot;</span>)<span class="hljs-keyword">return</span> &#125;<span class="hljs-comment">// 取消所有</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CancelAllQueue</span><span class="hljs-params">(SenderId <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(err error)</span></span> &#123;rd := model.RedisClientlist, _ := rd.HGetAll(model.Ctx, StrCombine(KeyUserCron, SenderId)).Result()<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> list &#123;rd.ZRem(model.Ctx, KeyCrontab, value)&#125;rd.Del(model.Ctx, StrCombine(KeyUserCron, SenderId))err = errors.New(<span class="hljs-string">&quot;已经取消所有提醒任务&quot;</span>)<span class="hljs-keyword">return</span> &#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">QueryAllQueue</span><span class="hljs-params">(SenderId <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)</span></span> &#123;rd := model.RedisClientlist, _ := rd.HGetAll(model.Ctx, StrCombine(KeyUserCron, SenderId)).Result()<span class="hljs-comment">// fmt.Println(list)</span><span class="hljs-keyword">return</span> list&#125;</code></pre></div><p>天气与聊天给你是接了一个免费智能接口，有兴趣可查看github配置文件。</p><p>来看看效果</p><p><img src="/images/post/v2-3106536c4925af8f77af71698f568a84_1440w.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个demo其实主要点就是解析钉钉推送内容做对应的处理，因关键字过多，代码其实有点啰嗦，你可以自行优化，对接智能接口和钉钉接口，还是定时任务其实都是相对简单的，当然，这只是很基础的功能，你可以自行扩展。另外，这次之列出了主要代码，没有做十分详尽的说明，有兴趣可以查看源码。</p><p><a href="https://github.com/13sai/go-example/tree/main/demo3-dingding">查看github源码</a></p><h2 id="啰嗦"><a href="#啰嗦" class="headerlink" title="啰嗦"></a>啰嗦</h2><p>这个demo的起初也是我们几个同事老忘记打卡，有了这个demo，起初只能提醒打卡，后面陆续加入了取消、查看、查询天气等功能，大家学习技术的时候也可以考虑应用到生活场景当中，这样学习起来也比较有有趣，实践中也会发现很多想不到的问题，最后，祝大家工作愉快，不忘打卡。</p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gRPC</title>
    <link href="/2021/02/12/goexample4/"/>
    <url>/2021/02/12/goexample4/</url>
    
    <content type="html"><![CDATA[<p>在进行round 4之前呢，说一下go的modules，之前的3个demo中，其实我就直接用到了，没做说明，个人觉得modules的引进算是一个大改进了，让我们可以脱离gopath的束缚，具体说明与配置，可以看我的这一篇文章：</p><p><a href="https://github.13sai.com/2019/12/27/219/">go modules</a></p><p>务必设置GOPROXY，会大大提高go get的速度。</p><hr><blockquote><p>gRPC 是可以在任何环境中运行的现代开源高性能 RPC 框架。它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。</p></blockquote><h2 id="安装protocol-buffer-编译器"><a href="#安装protocol-buffer-编译器" class="headerlink" title="安装protocol buffer 编译器"></a>安装protocol buffer 编译器</h2><p>mac：</p><div class="code-wrapper"><pre><code class="hljs text">brew install protobuf</code></pre></div><p>其他系统可以尝试编译安装</p><ul><li><a href="https://github.com/protocolbuffers/protobuf">protocolbuffers/protobuf</a></li></ul><h2 id="安装gprc"><a href="#安装gprc" class="headerlink" title="安装gprc"></a>安装gprc</h2><div class="code-wrapper"><pre><code class="hljs text">go get -u google.golang.org/grpc</code></pre></div><h2 id="安装protoc-gen-go插件"><a href="#安装protoc-gen-go插件" class="headerlink" title="安装protoc-gen-go插件"></a>安装protoc-gen-go插件</h2><div class="code-wrapper"><pre><code class="hljs text">go get -u github.com/golang/protobuf/protoc-gen-go</code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>新建hello目录，进入后执行：</p><div class="code-wrapper"><pre><code class="hljs text">protoc --proto_path hello/ --go_out=plugins=grpc:hello hello.proto</code></pre></div><p>会看到hello目录下生成了hello.pb.go文件。</p><p>当然，其中的 <code>hello.proto</code> 是预先自定义在hello文件夹下的，如：</p><div class="code-wrapper"><pre><code class="hljs text">syntax = &quot;proto3&quot;;  //语法声明package hello; //包名// 定义服务service Greeter &#123;  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;&#125;// 请求数据格式message HelloRequest &#123;  string name = 1;&#125;// 响应数据格式message HelloReply &#123;  string message = 1;&#125;</code></pre></div><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>新建server目录，<br>golang例子代码来自：<a href="https://github.com/grpc/grpc-go/tree/master/examples/helloworld">https://github.com/grpc/grpc-go/tree/master/examples/helloworld</a></p><div class="code-wrapper"><pre><code class="hljs text">// main.gopackage mainimport (    &quot;context&quot;    &quot;log&quot;    &quot;net&quot;    &quot;google.golang.org/grpc&quot;    pb &quot;local.com/sai/game/grpc/hello&quot;)const (    port = &quot;:50051&quot;)// server is used to implement helloworld.GreeterServer.type server struct &#123;    pb.UnimplementedGreeterServer&#125;// SayHello implements helloworld.GreeterServerfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) &#123;    log.Printf(&quot;Received: %v&quot;, in.GetName())    return &amp;pb.HelloReply&#123;Message: &quot;Hello &quot; + in.GetName()&#125;, nil&#125;func main() &#123;    lis, err := net.Listen(&quot;tcp&quot;, port)    if err != nil &#123;        log.Fatalf(&quot;failed to listen: %v&quot;, err)    &#125;    s := grpc.NewServer()    pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)    if err := s.Serve(lis); err != nil &#123;        log.Fatalf(&quot;failed to serve: %v&quot;, err)    &#125;&#125;</code></pre></div><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><h3 id="go-client"><a href="#go-client" class="headerlink" title="go client"></a>go client</h3><div class="code-wrapper"><pre><code class="hljs text">// client.gopackage mainimport (    &quot;context&quot;    &quot;log&quot;    &quot;os&quot;    &quot;time&quot;    &quot;google.golang.org/grpc&quot;    pb &quot;local.com/sai/game/grpc/hello&quot;)const (    address     = &quot;127.0.0.1:50051&quot;    defaultName = &quot;13sai&quot;)func main() &#123;    // Set up a connection to the server.    conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())    if err != nil &#123;        log.Fatalf(&quot;did not connect: %v&quot;, err)    &#125;    defer conn.Close()    c := pb.NewGreeterClient(conn)    // Contact the server and print out its response.    name := defaultName    if len(os.Args) &gt; 1 &#123;        name = os.Args[1]    &#125;    ctx, cancel := context.WithTimeout(context.Background(), time.Second)    defer cancel()    r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;)    if err != nil &#123;        log.Fatalf(&quot;could not greet: %v&quot;, err)    &#125;    log.Printf(&quot;Greeting: %s&quot;, r.GetMessage())&#125;`</code></pre></div><h3 id="php-client"><a href="#php-client" class="headerlink" title="php client"></a>php client</h3><h3 id="扩展安装"><a href="#扩展安装" class="headerlink" title="扩展安装"></a>扩展安装</h3><ul><li><a href="http://pecl.php.net/package/gRPC">grpc扩展下载</a></li><li><a href="http://pecl.php.net/package/protobuf">profo</a></li></ul><p>下载安装合适版本的扩展即可，记得别忘记在php.ini中加入：</p><div class="code-wrapper"><pre><code class="hljs text">extension=grpc.soextension=protobuf.so</code></pre></div><h3 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h3><div class="code-wrapper"><pre><code class="hljs text">protoc --php_out=client hello/hello.proto</code></pre></div><p>会看到client目录下生成了GPBMetadata和Hello两个目录。</p><p>如果你对grpc相对叫熟练，可以直接进行代码编写：</p><div class="code-wrapper"><pre><code class="hljs text">&lt;?phprequire __DIR__ . &#x27;/vendor/autoload.php&#x27;;class Client extends \Grpc\BaseStub&#123;    public function __construct($hostname, $opts, $channel = null) &#123;        parent::__construct($hostname, $opts, $channel);    &#125;    /**     * rpc SayHello(HelloRequest) returns (HelloReply) &#123;&#125;     * 方法名尽量和 (gprc 定义 Greeter 服务)的方法一样     * 用于请求和响应该服务     */    public function SayHello(\Hello\HelloRequest $argument)&#123;        // (/hello.Greeter/SayHello) 是请求服务端那个服务和方法，基本和 proto 文件定义一样        return $this-&gt;_simpleRequest(&#x27;/hello.Greeter/SayHello&#x27;,            $argument,            [&#x27;\Hello\HelloReply&#x27;, &#x27;decode&#x27;]            );    &#125;&#125;//用于连接 服务端$client = new \Client(&#x27;127.0.0.1:50051&#x27;, [    &#x27;credentials&#x27; =&gt; Grpc\ChannelCredentials::createInsecure()]);//实例化 TestRequest 请求类$request = new \Hello\HelloRequest();$request-&gt;setName(&quot;fairy&quot;);//调用远程服务$get = $client-&gt;SayHello($request)-&gt;wait();//返回数组//$reply 是 TestReply 对象//$status 是数组list($reply, $status) = $get;echo $reply-&gt;getMessage().PHP_EOL;// print_r($client-&gt;SayHello($request));</code></pre></div><p>当然，也可以使用grpc_php_plugin插件生成。</p><ul><li><a href="https://github.com/grpc/grpc/tree/master/src/php">grpc-php</a></li></ul><h3 id="grpc-php-plugin插件"><a href="#grpc-php-plugin插件" class="headerlink" title="grpc_php_plugin插件"></a>grpc_php_plugin插件</h3><p><a href="https://gitee.com/mirrors/grpc.git">clone太慢可以使用码云</a></p><div class="code-wrapper"><pre><code class="hljs text">git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpccd grpc#这一步很慢，暂未找到什么好方法git submodule update --initmake grpc_php_plugin</code></pre></div><p>新建php-client，再来自动生成：</p><div class="code-wrapper"><pre><code class="hljs text">protoc -I=./hello hello.proto --php_out=./php-client/ --grpc_out=php-client/ --plugin=protoc-gen-grpc=/Users/wangzetao/www/grpc1/bins/opt/grpc_php_plugin</code></pre></div><p>会发现比上面自动生成多了一个GreeterClient.php</p><div class="code-wrapper"><pre><code class="hljs text">&lt;?php// client.phprequire __DIR__ . &#x27;/vendor/autoload.php&#x27;;//用于连接 服务端$client = new \Hello\GreeterClient(&#x27;127.0.0.1:50051&#x27;, [    &#x27;credentials&#x27; =&gt; Grpc\ChannelCredentials::createInsecure()]);//实例化 TestRequest 请求类$request = new \Hello\HelloRequest();$request-&gt;setName(&quot;world&quot;);//调用远程服务$get = $client-&gt;SayHello($request)-&gt;wait();//返回数组//$status 是数组list($reply, $status) = $get;echo $reply-&gt;getMessage().PHP_EOL;// print_r($client-&gt;SayHello($request));</code></pre></div><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><blockquote><p>go run grpc/server/main.go</p></blockquote><p><img src="/images/post/v2-9c586c0ea6eb30d83df0a334b0886e45_1440w.png" alt="img"></p><blockquote><p>go run grpc/client/main.go<br>go run grpc/client/client.php<br>go run grpc/client/php-client.php</p></blockquote><p><img src="/images/post/v2-9e6a85bc1719bcb7e96c0b09686f006f_1440w.png" alt="img"></p><p>grpc初体验完成了，本次只是小小的使用了一下子，后续感兴趣的话可以深入学习一下。文中如有错误，欢迎指出交流。</p><p>这篇是之前的文章，代码简单，就不再写一遍了。</p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go面向对象</title>
    <link href="/2021/02/12/goexample5/"/>
    <url>/2021/02/12/goexample5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>面向对象 (Object Oriented,OO) 的思想对软件开发相当重要，它的概念和应用甚至已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD 技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。</p></blockquote><p>严格来说，go不属于面向对象的语言（暂不支持继承），但go允许面向对象的编程风格。今天我们就来实现一个面向对象的demo。</p><hr><p>实在没想到好一点的例子，不知道大伙有没有对象，不如以girl friend为例来弄个demo 吧，女同学请new一个boyfrind。当然了，new什么都行，随你喜欢…….</p><p>我们定义一个女朋友对象：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GirlFriend <span class="hljs-keyword">struct</span> &#123;height    <span class="hljs-keyword">int</span> <span class="hljs-comment">// 身高</span>weight    <span class="hljs-keyword">int</span> <span class="hljs-comment">// 体重</span>age       <span class="hljs-keyword">int</span> <span class="hljs-comment">// 年龄</span>name      <span class="hljs-keyword">string</span> <span class="hljs-comment">// 姓名</span>content   <span class="hljs-keyword">string</span> <span class="hljs-comment">// 结束语</span>greetings <span class="hljs-keyword">string</span> <span class="hljs-comment">// 问候语</span>&#125;</code></pre></div><p>我们可以自定义身高，体重，年龄，姓名：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetHeight</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span></span> &#123;gf.height = v&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetWeight</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span></span> &#123;gf.weight = v&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetAge</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span></span> &#123;gf.age = v&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetName</span><span class="hljs-params">(v <span class="hljs-keyword">string</span>)</span></span> &#123;gf.name = v&#125;</code></pre></div><p>喜欢使用链式操作的可以这么来，把女朋友return回去即可：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetContent</span><span class="hljs-params">(v <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">GirlFriend</span></span> &#123;gf.content = v<span class="hljs-keyword">return</span> gf&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">SetGreeting</span><span class="hljs-params">(v <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">GirlFriend</span></span> &#123;gf.greetings = v<span class="hljs-keyword">return</span> gf&#125;</code></pre></div><p>我们当然还有实现一下，没有女朋友，new一个：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewOne</span><span class="hljs-params">()</span> *<span class="hljs-title">GirlFriend</span></span> &#123;<span class="hljs-keyword">return</span> &amp;GirlFriend&#123;&#125;&#125;</code></pre></div><p>new出来了，当然要秀一下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(gf *GirlFriend)</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span> &#123;fmt.Println(gf.greetings + <span class="hljs-string">&quot;我是&quot;</span> + gf.name + <span class="hljs-string">&quot;,今年&quot;</span> + strconv.Itoa(gf.age) + <span class="hljs-string">&quot;岁，身高&quot;</span> + strconv.Itoa(gf.height) + <span class="hljs-string">&quot;cm,体重&quot;</span> + strconv.Itoa(gf.weight) + <span class="hljs-string">&quot;kg。&quot;</span> + gf.content)&#125;</code></pre></div><p>我们来运行一个：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;demo5-OOP/oop&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;gf := oop.NewOne()gf.SetName(<span class="hljs-string">&quot;Lily&quot;</span>)gf.SetHeight(<span class="hljs-number">170</span>)gf.SetWeight(<span class="hljs-number">50</span>)gf.SetGreeting(<span class="hljs-string">&quot;hello,&quot;</span>).SetContent(<span class="hljs-string">&quot;thanks for your great creavity!&quot;</span>).SetAge(<span class="hljs-number">24</span>)gf.Show()&#125;</code></pre></div><p>这一篇比较简单，例子呢，仅仅是玩笑，不可当真，女朋友new是不可行的，还是要主动去追的。这里主要是展示一下go的面向对象实现，在使用其他库的过程中应该有注意到一些模块使用了面向对象的实现，希望大家去做一些抽象，在自己的项目合适的地方去实现一下，让自己的代码更优雅、更健壮，也希望大家都能找到对的人，一起new一个baby。</p><p><a href="https://github.com/13sai/go-example/tree/main/demo5-OOP">完整代码点击进github</a></p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go-kit</title>
    <link href="/2021/02/12/goexample6/"/>
    <url>/2021/02/12/goexample6/</url>
    
    <content type="html"><![CDATA[<h2 id="何为go-kit"><a href="#何为go-kit" class="headerlink" title="何为go-kit"></a>何为go-kit</h2><blockquote><p><strong>Go kit</strong> is a <strong>programming toolkit</strong> for building microservices (or elegant monoliths) in Go. We solve common problems in distributed systems and application architecture so you can focus on delivering business value.</p></blockquote><p>go kit是一个用于在Go中构建微服务（或优雅的整体）的编程工具包，解决了分布式系统和应用程序体系结构中的常见问题，以便开发者能够专注于业务交付。</p><hr><p>go-kit主要分为三层结构：Transport层，Endpoint层，Service层。</p><ul><li>Transport 负责与传输协议HTTP、GRPC等相关的逻辑</li><li>Endpoint 负责request/response格式的转换，以及公用拦截器相关的逻辑</li><li>Service 业务逻辑。</li></ul><p>另外，go-kit提供log日志，metric计数器，tracing请求跟踪，circuitbreaker服务熔断，rate-limiter限流器等模块。简单说，go-kit提供了微服务架构常见的基础模块，可以让开发者省去很多时间。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>了解还不够，show code。</p><p>我们先定义下service，不如就做个简单的计算器，仅仅做演示，有加减功能即可，不整太复杂了。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> service<span class="hljs-comment">// 接口定义</span><span class="hljs-keyword">type</span> CalculateService <span class="hljs-keyword">interface</span> &#123;Add(a, b <span class="hljs-keyword">int</span>) <span class="hljs-keyword">int</span>Reduce(a, b <span class="hljs-keyword">int</span>) <span class="hljs-keyword">int</span>Multi(a, b <span class="hljs-keyword">int</span>) <span class="hljs-keyword">int</span>&#125;<span class="hljs-keyword">type</span> calculateService <span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewService</span><span class="hljs-params">()</span> *<span class="hljs-title">calculateService</span></span> &#123;<span class="hljs-keyword">return</span> &amp;calculateService&#123;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *calculateService)</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> a + b&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *calculateService)</span> <span class="hljs-title">Reduce</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> a - b&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *calculateService)</span> <span class="hljs-title">Multi</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-keyword">return</span> a * b&#125;</code></pre></div><blockquote><p>注意：Go 接口是一组方法的集合，可以理解为抽象的类型。它提供了一种非侵入式的接口。任何类型，只要实现了该接口中方法集，那么就属于这个类型。（这是go中非常常用的特性，切记)</p></blockquote><p>endpoint格式化请求，调用service服务，并格式化输出</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> endpoint<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;demo6/service&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;github.com/go-kit/kit/endpoint&quot;</span>)<span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;A <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;a&quot; form:&quot;a&quot;`</span>B <span class="hljs-keyword">int</span> <span class="hljs-string">`json:&quot;b&quot; form:&quot;b&quot;`</span>&#125;<span class="hljs-keyword">type</span> Res <span class="hljs-keyword">struct</span> &#123;Res <span class="hljs-keyword">int</span>   <span class="hljs-string">`json:&quot;res&quot;`</span>Err error <span class="hljs-string">`json:&quot;err&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MakeAddEndpoint</span><span class="hljs-params">(s service.CalculateService)</span> <span class="hljs-title">endpoint</span>.<span class="hljs-title">Endpoint</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_ context.Context, request <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;req := request.(Request)<span class="hljs-keyword">return</span> Res&#123;Res: s.Add(req.A, req.B)&#125;, <span class="hljs-literal">nil</span>&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MakeReduceEndpoint</span><span class="hljs-params">(s service.CalculateService)</span> <span class="hljs-title">endpoint</span>.<span class="hljs-title">Endpoint</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_ context.Context, request <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;req := request.(Request)<span class="hljs-keyword">return</span> Res&#123;Res: s.Reduce(req.A, req.B)&#125;, <span class="hljs-literal">nil</span>&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MakeMultiEndpoint</span><span class="hljs-params">(s service.CalculateService)</span> <span class="hljs-title">endpoint</span>.<span class="hljs-title">Endpoint</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_ context.Context, request <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;req := request.(Request)<span class="hljs-keyword">return</span> Res&#123;Res: s.Multi(req.A, req.B)&#125;, <span class="hljs-literal">nil</span>&#125;&#125;</code></pre></div><p>接下来，定义transport定义请求方式（这里我们使用json）：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> transport<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;demo6/endpoint&quot;</span><span class="hljs-string">&quot;encoding/json&quot;</span><span class="hljs-string">&quot;errors&quot;</span><span class="hljs-string">&quot;net/http&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DecodeRequest</span><span class="hljs-params">(_ context.Context, r *http.Request)</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;<span class="hljs-keyword">var</span> req endpoint.Request<span class="hljs-keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;req); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;params error&quot;</span>)&#125;<span class="hljs-keyword">return</span> req, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">EncodeResponse</span><span class="hljs-params">(_ context.Context, w http.ResponseWriter, res <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">return</span> json.NewEncoder(w).Encode(res)&#125;</code></pre></div><p>最后我们将它们endpoint和transport粘合起来，跑起来go～</p><div class="code-wrapper"><pre><code class="hljs text">package mainimport (&quot;demo6/endpoint&quot;&quot;demo6/service&quot;&quot;demo6/transport&quot;&quot;net/http&quot;httpTransport &quot;github.com/go-kit/kit/transport/http&quot;)func main() &#123;s := service.NewService()add := httpTransport.NewServer(endpoint.MakeAddEndpoint(s),transport.DecodeRequest,transport.EncodeResponse,)reduce := httpTransport.NewServer(endpoint.MakeReduceEndpoint(s),transport.DecodeRequest,transport.EncodeResponse,)multi := httpTransport.NewServer(endpoint.MakeMultiEndpoint(s),transport.DecodeRequest,transport.EncodeResponse,)http.Handle(&quot;/add&quot;, add)http.Handle(&quot;/reduce&quot;, reduce)http.Handle(&quot;/multi&quot;, multi)http.ListenAndServe(&quot;:9009&quot;, nil)&#125;</code></pre></div><p>运行起来：</p><p><img src="/images/post/v2-10d97a842067a8ca6ef5f4878161bfd7_1440w.png" alt="img"></p><p>成功运行！</p><p><a href="https://github.com/13sai/go-example/tree/main/demo6-go-kit">详细代码进githubgithub.com/13sai/go-example/tree/main/demo6-go-kit</a></p><hr><p>留一个问题，对于json格式错误的请求，返回的不是json，如何改造，让接口返回json呢？</p><p>最近自己在研究go微服务这块的知识，后续几篇文字应该都会以go-kit为基础展开，有兴趣可继续关注。</p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose整合go-kit和mysql、redis</title>
    <link href="/2021/02/12/goexample7/"/>
    <url>/2021/02/12/goexample7/</url>
    
    <content type="html"><![CDATA[<p>专栏之前有使用go-kit、gorm、go-redis，所以部分内容就忽略。</p><h2 id="定义model"><a href="#定义model" class="headerlink" title="定义model"></a>定义model</h2><p>主要实现SelectByEmail（查找）和Save（新建）两个方法：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> model<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;time&quot;</span><span class="hljs-keyword">type</span> UserEntity <span class="hljs-keyword">struct</span> &#123;ID        <span class="hljs-keyword">int64</span>Username  <span class="hljs-keyword">string</span>Password  <span class="hljs-keyword">string</span>Email     <span class="hljs-keyword">string</span>CreatedAt time.Time&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(UserEntity)</span> <span class="hljs-title">TableName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>&#125;<span class="hljs-keyword">type</span> UserDao <span class="hljs-keyword">interface</span> &#123;SelectByEmail(email <span class="hljs-keyword">string</span>) (*UserEntity, error)Save(user *UserEntity) error&#125;<span class="hljs-keyword">type</span> UserDaoImpl <span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserDaoImpl)</span> <span class="hljs-title">SelectByEmail</span><span class="hljs-params">(email <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(*UserEntity, error)</span></span> &#123;user := &amp;UserEntity&#123;&#125;err := db.Where(<span class="hljs-string">&quot;email = ?&quot;</span>, email).First(user).Error<span class="hljs-keyword">return</span> user, err&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *UserDaoImpl)</span> <span class="hljs-title">Save</span><span class="hljs-params">(user *UserEntity)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">return</span> db.Create(user).Error&#125;</code></pre></div><h2 id="业务service"><a href="#业务service" class="headerlink" title="业务service"></a>业务service</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> service<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;demo7-docker-compose/model&quot;</span><span class="hljs-string">&quot;errors&quot;</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;github.com/jinzhu/gorm&quot;</span>)<span class="hljs-keyword">type</span> UserInfoDTO <span class="hljs-keyword">struct</span> &#123;ID       <span class="hljs-keyword">int64</span>  <span class="hljs-string">`json:&quot;id&quot;`</span>Username <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span>Email    <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;email&quot;`</span>&#125;<span class="hljs-keyword">var</span> (ErrUserExisted = errors.New(<span class="hljs-string">&quot;user is existed&quot;</span>)ErrPassword    = errors.New(<span class="hljs-string">&quot;email and password are not match&quot;</span>)ErrRegistering = errors.New(<span class="hljs-string">&quot;email is registering&quot;</span>))<span class="hljs-keyword">type</span> RegisterUser <span class="hljs-keyword">struct</span> &#123;Username <span class="hljs-keyword">string</span>Password <span class="hljs-keyword">string</span>Email    <span class="hljs-keyword">string</span>&#125;<span class="hljs-keyword">type</span> UserService <span class="hljs-keyword">interface</span> &#123;Login(ctx context.Context, email, pass <span class="hljs-keyword">string</span>) (*UserInfoDTO, error)Register(ctx context.Context, user *RegisterUser) (*UserInfoDTO, error)&#125;<span class="hljs-keyword">type</span> UserServiceImpl <span class="hljs-keyword">struct</span> &#123;userDao model.UserDao&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MakeUserServiceImpl</span><span class="hljs-params">(userDao model.UserDao)</span> <span class="hljs-title">UserService</span></span> &#123;<span class="hljs-keyword">return</span> &amp;UserServiceImpl&#123;userDao,&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(userService *UserServiceImpl)</span> <span class="hljs-title">Login</span><span class="hljs-params">(ctx context.Context, email, password <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(*UserInfoDTO, error)</span></span> &#123;user, err := userService.userDao.SelectByEmail(email)<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">if</span> user.Password == password &#123;<span class="hljs-keyword">return</span> &amp;UserInfoDTO&#123;ID:       user.ID,Username: user.Username,Email:    user.Email,&#125;, <span class="hljs-literal">nil</span>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ErrPassword&#125;&#125; <span class="hljs-keyword">else</span> &#123;log.Printf(<span class="hljs-string">&quot;err : %s&quot;</span>, err)&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(userService UserServiceImpl)</span> <span class="hljs-title">Register</span><span class="hljs-params">(ctx context.Context, user *RegisterUser)</span> <span class="hljs-params">(*UserInfoDTO, error)</span></span> &#123;ret := model.RedisClient.SetNX(user.Email, <span class="hljs-number">1</span>, time.Duration(<span class="hljs-number">5</span>)*time.Second)<span class="hljs-keyword">if</span> ret.Val() == <span class="hljs-literal">false</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ErrRegistering&#125;<span class="hljs-keyword">defer</span> model.RedisClient.Del(user.Email)existUser, err := userService.userDao.SelectByEmail(user.Email)<span class="hljs-keyword">if</span> (err == <span class="hljs-literal">nil</span> &amp;&amp; existUser == <span class="hljs-literal">nil</span>) || err == gorm.ErrRecordNotFound &#123;newUser := &amp;model.UserEntity&#123;Username: user.Username,Password: user.Password,Email:    user.Email,&#125;err = userService.userDao.Save(newUser)<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> &amp;UserInfoDTO&#123;ID:       newUser.ID,Username: newUser.Username,Email:    newUser.Email,&#125;, <span class="hljs-literal">nil</span>&#125;&#125;<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;err = ErrUserExisted&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err&#125;</code></pre></div><p>此处注意分布式锁的实现，利用了redis的setnx方法，并可以设置过期时间，对应redis中的</p><blockquote><p><strong>SET key value [EX seconds] [PX milliseconds] [NX|XX]</strong></p></blockquote><div class="code-wrapper"><pre><code class="hljs text">       ret := model.RedisClient.SetNX(user.Email, 1, time.Duration(5)*time.Second)if ret.Val() == false &#123;return nil, ErrRegistering&#125;defer model.RedisClient.Del(user.Email)</code></pre></div><p>对于endpoint和transport，就与之前的没有太大差别了，我们这里就暂时略去，有兴趣可点击文章最后的源码查看。</p><h2 id="mysql和redis容器"><a href="#mysql和redis容器" class="headerlink" title="mysql和redis容器"></a>mysql和redis容器</h2><p>mysql的Dockerfile：</p><div class="code-wrapper"><pre><code class="hljs docker"><span class="hljs-keyword">FROM</span> mysql:<span class="hljs-number">5.7</span> <span class="hljs-keyword">WORKDIR</span><span class="bash"> /docker-entrypoint-initdb.d </span><span class="hljs-keyword">ENV</span> LANG=C.UTF-<span class="hljs-number">8</span><span class="hljs-keyword">COPY</span><span class="bash"> user.sql .</span></code></pre></div><p>运行mysql-for-user容器</p><div class="code-wrapper"><pre><code class="hljs text">docker run  -itd --name mysql-for-user -p 3316:3306 -e MYSQL_ROOT_PASSWORD=111111 mysql-for-user</code></pre></div><p>这里容器启动的时候是可以执行user.sql的。（可通过docker logs mysql-for-user查看容器启动信息）</p><blockquote><p>/usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/user.sql</p></blockquote><p>redis容器的启动简单</p><div class="code-wrapper"><pre><code class="hljs docker">docker pull redis:<span class="hljs-number">5.0</span>docker <span class="hljs-keyword">run</span><span class="bash"> -itd --name redis5 -p 6389:6379 redis:5.0</span></code></pre></div><p>然后我们可以运行主程序，智能到8089端口：</p><div class="code-wrapper"><pre><code class="hljs text">go run main.go -service.port 8089</code></pre></div><p>测试一下。</p><p><img src="/images/post/v2-94d150a73c8e24ba9519c5433edab2ee_1440w.png" alt="img"></p><p>可以实现登录与注册功能。</p><h2 id="打包会员镜像"><a href="#打包会员镜像" class="headerlink" title="打包会员镜像"></a>打包会员镜像</h2><p>先编译：</p><blockquote><p>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o user .</p></blockquote><p>user的dockerfile</p><div class="code-wrapper"><pre><code class="hljs docker"><span class="hljs-keyword">FROM</span> alpine:<span class="hljs-number">3.12</span> <span class="hljs-keyword">WORKDIR</span><span class="bash"> /</span><span class="hljs-keyword">COPY</span><span class="bash"> ./user /</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;./user&quot;</span>]</span></code></pre></div><p>构建镜像:</p><blockquote><p>docker build -t user-alpine .</p></blockquote><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><div class="code-wrapper"><pre><code class="hljs docker">version: <span class="hljs-string">&#x27;2.1&#x27;</span>services:  user13:    image: <span class="hljs-keyword">user</span>-alpine    depends_on:       - redis      - mysql    ports:      - <span class="hljs-string">&quot;8088:8088&quot;</span>    links:       - redis      - mysql    networks:      - <span class="hljs-keyword">user</span>  mysql:    image: mysql-for-<span class="hljs-keyword">user</span>    ports:      - <span class="hljs-string">&quot;3306:3306&quot;</span>    <span class="hljs-keyword">expose</span>:      - <span class="hljs-string">&quot;3306&quot;</span>    environment:      - MYSQL_ROOT_PASSWORD=<span class="hljs-number">111111</span>    networks:      - <span class="hljs-keyword">user</span>    restart: always  redis:    image: redis:<span class="hljs-number">5.0</span>    ports:      - <span class="hljs-string">&quot;6379:6379&quot;</span>    <span class="hljs-keyword">expose</span>:      - <span class="hljs-string">&quot;6379&quot;</span>    networks:      - <span class="hljs-keyword">user</span>networks:  <span class="hljs-keyword">user</span>:    driver: bridge</code></pre></div><p>说明：</p><ul><li>depends_on 依赖，此处表示user13依赖redis、mysql，被依赖者会优先构建，但是是可能脚本为运行成功的，所以user13是有可能刚开始连接不上mysql的，docker start即可</li><li>links 连接，此处user13连接到redis、mysql，可以用它们替代连接数据库的host</li><li>environment 环境变量</li><li>expose 对links暴露的端口</li></ul><hr><blockquote><p>运行docker-compose up即可。</p></blockquote><p><img src="/images/post/v2-0fe2c4793b45c041c13b10d690266649_1440w.png" alt="img"></p><p>可以看见服务运行成功了。wow～</p><ul><li><a href="https://github.com/13sai/go-example/tree/main/demo7-docker-compose">详细代码点击进github</a></li></ul><p>dcoker composer语法可看菜鸟教程：</p><p><a href="https://www.runoob.com/docker/docker-compose.html">Docker Compose | 菜鸟教程</a></p><p>文中部分知识来自《Go微服务实战38讲》，有兴趣可前往查看：</p><p><img src="/images/post/v2-3680541c44e6b0e0526a3d407487e7f3_1440w.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goruntine和channel</title>
    <link href="/2021/02/12/goexample8/"/>
    <url>/2021/02/12/goexample8/</url>
    
    <content type="html"><![CDATA[<p>前面几个回合，我们都是实例，但在go中有个很常用的东东，我们代码使用的不多，这一次我们单独拿来讲讲。</p><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><blockquote><p>goroutine是go语言特有的并发体，是一种轻量级的线程，由go关键字启动。</p></blockquote><p>goroutine采用的是半抢占市的协作调度，<strong>只有当前goroutine发生阻塞时才会导致调度（也就是goroutine的切换）</strong>。</p><p>那么项目中使用了多个goroutine，如何在不同的goroutine之间通信呢？</p><p>学习go的过程中，想必你应该知道有这么一个经典的句子：</p><blockquote><p>Do not communicate by sharing memory; instead, share memory by communicating.</p></blockquote><p><strong>goroutine的通信用通道</strong></p><p><img src="https://pic1.zhimg.com/80/v2-dc5d88a2c439580386b95362f7c0bad8_1440w.jpg" alt="img"></p><p>通道是个啥？</p><blockquote><p>一个通道相当于一个先进先出（FIFO）的队列，通道中的各个元素是严格地按照发送的顺序排列的，先被发送通道的一定会先被接收。元素的发送和接收都需要用到操作符<code>&lt;-</code>。</p></blockquote><p>这里有一个FIFO简单的例子</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">5</span>)ch &lt;- <span class="hljs-number">1</span>ch &lt;- <span class="hljs-number">2</span>ch &lt;- <span class="hljs-number">3</span>ch &lt;- <span class="hljs-number">4</span>ch &lt;- <span class="hljs-number">5</span>fmt.Println(<span class="hljs-string">&quot;1-&quot;</span>, &lt;-ch)fmt.Println(<span class="hljs-string">&quot;2-&quot;</span>, &lt;-ch)ch &lt;- <span class="hljs-number">6</span>fmt.Println(<span class="hljs-string">&quot;3-&quot;</span>, &lt;-ch)fmt.Println(<span class="hljs-string">&quot;4-&quot;</span>, &lt;-ch)fmt.Println(<span class="hljs-string">&quot;5-&quot;</span>, &lt;-ch)fmt.Println(<span class="hljs-string">&quot;6-&quot;</span>, &lt;-ch)<span class="hljs-built_in">close</span>(ch)&#125;<span class="hljs-comment">/*</span><span class="hljs-comment">打印的内容如下：</span><span class="hljs-comment">1- 1</span><span class="hljs-comment">2- 2</span><span class="hljs-comment">3- 3</span><span class="hljs-comment">4- 4</span><span class="hljs-comment">5- 5</span><span class="hljs-comment">6- 6</span><span class="hljs-comment">*/</span></code></pre></div><p>我们再来看一下通道的常规操作：</p><h3 id="创建通道"><a href="#创建通道" class="headerlink" title="创建通道"></a>创建通道</h3><p>通道（channel）分两种（容量是否为0）：</p><ul><li>缓冲通道</li><li>非缓冲通道</li></ul><div class="code-wrapper"><pre><code class="hljs text">// 缓冲通道ch1 := make(chan int, 10)ch2 := make(chan bool, 2)// 非缓冲通道ch3 := make(chan int)ch4 := make(chan bool, 0)</code></pre></div><h3 id="发送通道数据"><a href="#发送通道数据" class="headerlink" title="发送通道数据"></a>发送通道数据</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 创建一个空接口通道，注意定义的通道类型有</span>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)<span class="hljs-comment">// 将0放入通道中</span>ch &lt;- <span class="hljs-number">0</span><span class="hljs-comment">// 将hello字符串放入通道中</span>ch &lt;- <span class="hljs-string">&quot;hello&quot;</span></code></pre></div><h3 id="接收通道数据"><a href="#接收通道数据" class="headerlink" title="接收通道数据"></a>接收通道数据</h3><h3 id="1-阻塞接收数据"><a href="#1-阻塞接收数据" class="headerlink" title="1. 阻塞接收数据"></a>1. 阻塞接收数据</h3><p>阻塞模式接收数据时，将接收变量作为<code>&lt;-</code>操作符的左值，格式如下：</p><div class="code-wrapper"><pre><code class="hljs text">data := &lt;-ch</code></pre></div><p>执行该语句时将会阻塞，直到接收到数据并赋值给 data 变量。</p><h3 id="2-非阻塞接收数据"><a href="#2-非阻塞接收数据" class="headerlink" title="2. 非阻塞接收数据"></a>2. 非阻塞接收数据</h3><p>使用非阻塞方式从通道接收数据时，语句不会发生阻塞，格式如下：</p><div class="code-wrapper"><pre><code class="hljs text">data, ok := &lt;-ch// data：表示接收到的数据。未接收到数据时，data 为通道类型的零值// ok：表示是否接收到数据。</code></pre></div><p>非阻塞的通道接收方法可能造成高的 CPU 占用，因此使用非常少。如果需要实现接收超时检测，可以配合 select 和计时器 channel 进行，可以参见后面的内容。</p><h3 id="3-接收任意数据，忽略接收的数据"><a href="#3-接收任意数据，忽略接收的数据" class="headerlink" title="3. 接收任意数据，忽略接收的数据"></a>3. 接收任意数据，忽略接收的数据</h3><p>阻塞接收数据后，忽略从通道返回的数据，格式如下：</p><div class="code-wrapper"><pre><code class="hljs text">&lt;-ch</code></pre></div><h3 id="4-循环接收"><a href="#4-循环接收" class="headerlink" title="4. 循环接收"></a>4. 循环接收</h3><p>通道的数据接收可以借用 for range 语句进行多个元素的接收操作，格式如下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-comment">// 构建一个通道</span>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)    <span class="hljs-comment">// 开启一个并发匿名函数</span>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">// 从3循环到0</span>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;            <span class="hljs-comment">// 发送3到0之间的数值</span>            ch &lt;- i            <span class="hljs-comment">// 每次发送完时等待</span>            time.Sleep(time.Second)        &#125;    &#125;()    <span class="hljs-comment">// 遍历接收通道数据</span>    <span class="hljs-keyword">for</span> data := <span class="hljs-keyword">range</span> ch &#123;        <span class="hljs-comment">// 打印通道数据</span>        fmt.Println(data)        <span class="hljs-comment">// 当遇到数据0时, 退出接收循环</span>        <span class="hljs-keyword">if</span> data == <span class="hljs-number">0</span> &#123;                <span class="hljs-keyword">break</span>        &#125;    &#125;&#125;</code></pre></div><h3 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h3><div class="code-wrapper"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)...<span class="hljs-built_in">close</span>(ch)</code></pre></div><hr><h2 id="通道特性"><a href="#通道特性" class="headerlink" title="通道特性"></a>通道特性</h2><ul><li>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的（并发安全）</li><li>发送操作和接收操作中对元素值的处理都是不可分割的。</li><li>发送操作在完全完成之前会被阻塞，接收操作也是一样。</li><li>对于缓冲通道：如果通道已满，那么对它的所有发送操作都会被阻塞，直到通道中有元素值被接收走；如果通道已空，那么对它的所有接收操作都会被阻塞，直到通道中有新的元素值出现。</li><li>对于非缓冲通道：无论是发送操作还是接收操作，一开始执行就会被阻塞，直到配对的操作也开始执行，才会继续传递。</li></ul><p>注意点：</p><ul><li>关闭通道要在发送方关闭，关闭后如果channel内还有元素，并不会对接下来的接收产生影响</li><li>单向通道最主要的用途就是约束其他代码的行为</li><li>通过函数的参数类型或者返回值类型来限制（Go的语法糖）。</li></ul><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span>)</span>；传入双向通道，在函数里面调用<span class="hljs-title">ch</span>只能发送</span><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span>；返回双向通道，在函数外面里面调用<span class="hljs-title">ch</span>只能接收</span></code></pre></div><p>说到这里，我们提一下channel独有的关键字——select。</p><blockquote><p>A “select” statement chooses which of a set of possible send or receive operations will proceed. It looks similar to a “switch” statement but with the cases all referring to communication operations.</p><p>一个select语句用来选择哪个case中的发送或接收操作可以被立即执行。它类似于switch语句，但是它的case涉及到channel有关的I/O操作。</p></blockquote><p>说完这些概念性的玩意儿，我们还是来几个实例，感受一下goroutine配合channel使用的快感。</p><hr><h3 id="chan配合select实现超时处理"><a href="#chan配合select实现超时处理" class="headerlink" title="chan配合select实现超时处理"></a>chan配合select实现超时处理</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;timeout := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;time.Sleep(<span class="hljs-number">3e9</span>)timeout &lt;- <span class="hljs-literal">true</span>&#125;()ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ch:<span class="hljs-keyword">case</span> &lt;-timeout:fmt.Println(<span class="hljs-string">&quot;timeout!&quot;</span>)&#125;&#125;</code></pre></div><h3 id="非缓冲通道，监听信号量"><a href="#非缓冲通道，监听信号量" class="headerlink" title="非缓冲通道，监听信号量"></a>非缓冲通道，监听信号量</h3><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 来自gin文档的例子</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;router := gin.Default()router.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;time.Sleep(<span class="hljs-number">5</span> * time.Second)c.String(http.StatusOK, <span class="hljs-string">&quot;Welcome Gin Server&quot;</span>)&#125;)srv := &amp;http.Server&#123;Addr:    <span class="hljs-string">&quot;:8080&quot;</span>,Handler: router,&#125;<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">// 服务连接</span><span class="hljs-keyword">if</span> err := srv.ListenAndServe(); err != <span class="hljs-literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;log.Fatalf(<span class="hljs-string">&quot;listen: %s\n&quot;</span>, err)&#125;&#125;()<span class="hljs-comment">// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span>quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)signal.Notify(quit, os.Interrupt)&lt;-quitlog.Println(<span class="hljs-string">&quot;Shutdown Server ...&quot;</span>)ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<span class="hljs-keyword">defer</span> cancel()<span class="hljs-keyword">if</span> err := srv.Shutdown(ctx); err != <span class="hljs-literal">nil</span> &#123;log.Fatal(<span class="hljs-string">&quot;Server Shutdown:&quot;</span>, err)&#125;log.Println(<span class="hljs-string">&quot;Server exiting&quot;</span>)&#125;</code></pre></div><p>当然还有其他应用场景，如消息传递、消息过滤，事件订阅与广播，请求、响应转发，并发控制，同步与异步等，可参考下面的文章：</p><p><a href="https://lessisbetter.site/2019/01/20/golang-channel-all-usage/">总结了才知道，原来channel有这么多用法！</a></p><hr><p><a href="https://github.com/13sai/go-example/tree/main/demo8-goroutine-channel">实例代码点击见githubgithub.com/13sai/go-example/tree/main/demo8-goroutine-channel</a></p><p>参考：</p><ul><li><a href="http://c.biancheng.net/view/97.html">Go语言通道（chan）——goroutine之间通信的管道</a></li><li><a href="https://time.geekbang.org/column/intro/112">Go语言核心36讲_Golang_Go语言-极客时间</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang限流器</title>
    <link href="/2021/02/12/goexample9/"/>
    <url>/2021/02/12/goexample9/</url>
    
    <content type="html"><![CDATA[<p>限流应该是我们开发中经常遇到的了，限流器能保证我们不至于在流量过大的时候服务超过负载，能有效地保证服务的可用和稳定。</p><p>go自带有限流器rate，它的本质其实就是令牌桶。用起来也十分简单。我们修改下之前的http服务做一些修改：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">// ServeMux类型是HTTP请求的多路转接器。它会将每一个接收的请求的URL与一个注册模式的列表进行匹配，并调用和URL最匹配的模式的处理器。</span>mux := http.NewServeMux()mux.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, defaultHttp)http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, middlewareLimit(mux))&#125;<span class="hljs-comment">// 限流桶</span><span class="hljs-keyword">var</span> limiter = rate.NewLimiter(rate.Every(time.Second), <span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">middlewareLimit</span><span class="hljs-params">(next http.Handler)</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;<span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<span class="hljs-keyword">if</span> limiter.Allow() == <span class="hljs-literal">false</span> &#123;fmt.Println(<span class="hljs-string">&quot;limit&quot;</span>)<span class="hljs-keyword">return</span>&#125;next.ServeHTTP(w, r)&#125;)&#125;<span class="hljs-comment">// 默认http处理</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">defaultHttp</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;path := r.URL.Path<span class="hljs-keyword">if</span> path == <span class="hljs-string">&quot;/&quot;</span> &#123;w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;index&quot;</span>))fmt.Println(<span class="hljs-string">&quot;index&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-comment">// 自定义404</span>http.Error(w, <span class="hljs-string">&quot;you lost???&quot;</span>, http.StatusNotFound)&#125;</code></pre></div><p>这里的</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> limiter = rate.NewLimiter(rate.Every(<span class="hljs-number">2</span>*time.Second), <span class="hljs-number">1</span>)</code></pre></div><p>就是定义了一个限流器，生成速率是1 个/s，令牌桶的容量是1。也就是每秒最多能通过2个请求。</p><p>我们可以用ab或者快速刷新浏览器来看一下效果</p><p>是不是有点类似nginx的限流模块：</p><div class="code-wrapper"><pre><code class="hljs text">limit_req_zone  $binary_remote_addr  zone=one:10m  rate=1r/s;server &#123;    ...    location / &#123;        #缓存区队列burst=5个,nodelay表示不延期(超过的请求失败)，即每秒最多可处理rate+burst个,同时处理rate个。        limit_req zone=one burst=1 nodelay;     &#125;&#125;</code></pre></div><hr><p>上面的代码有两处注意点：</p><ul><li>middlewareLimit 可看作一个http server的前置中间件，你可以类比去自己处理复杂的http中间件业务。</li><li>限流器的初始化务必在中间件前生成，可以尝试修改代码再测试:</li></ul><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">middlewareLimit</span><span class="hljs-params">(next http.Handler)</span> <span class="hljs-title">http</span>.<span class="hljs-title">Handler</span></span> &#123;<span class="hljs-keyword">return</span> http.HandlerFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;limiter := rate.NewLimiter(rate.Every(<span class="hljs-number">2</span>*time.Second), <span class="hljs-number">10</span>)<span class="hljs-keyword">if</span> limiter.Allow() == <span class="hljs-literal">false</span> &#123;fmt.Println(<span class="hljs-string">&quot;limit&quot;</span>)<span class="hljs-keyword">return</span>&#125;next.ServeHTTP(w, r)&#125;)&#125;</code></pre></div><p>此外，Limiter 也有其他的方法：</p><ul><li>SetLimit(Limit) 动态修改放入令牌的速率</li><li>SetBurst(int) 动态修改桶大小</li><li>Wait/WaitN 当没有可用事件时，将阻塞等待</li><li>Reserve/ReserveN 当没有可用事件时，返回 Reservation，和要等待多久才能获得足够的事件</li></ul><p><a href="https://github.com/13sai/go-example/tree/main/demo9-rate">代码点击见githubgithub.com/13sai/go-example/tree/main/demo9-rate</a></p>]]></content>
    
    
    <categories>
      
      <category>goexample</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goexample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础与常用命令</title>
    <link href="/2021/02/10/312/"/>
    <url>/2021/02/10/312/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h2><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h2 id="Docker的三个概念"><a href="#Docker的三个概念" class="headerlink" title="Docker的三个概念"></a>Docker的三个概念</h2><ol><li>镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像。</li><li>容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。</li><li>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像。</li></ol><h2 id="Docker-的用途"><a href="#Docker-的用途" class="headerlink" title="Docker 的用途"></a>Docker 的用途</h2><p>Docker 的主要用途，目前有三大类。</p><p><strong>（1）提供一次性的环境。</strong>比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p><strong>（2）提供弹性的云服务。</strong>因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p><strong>（3）组建微服务架构。</strong>通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h2 id="Docker的优缺点"><a href="#Docker的优缺点" class="headerlink" title="Docker的优缺点"></a>Docker的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p><strong>1. 更高效的利用系统资源</strong></p><p>docker对系统资源的利用率更高，无论是应用执行速度，内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机往往可以运行更多数量的应用。</p><p><strong>2. 更快速的启动时间</strong></p><p>传统的虚拟机技术启动应用服务往往需要数分钟，而docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级，甚至毫秒级的启动时间，大大的节约了开发测试，部署的时间。</p><p><strong>3. 一致的运行环境</strong></p><p>开发过程中常见的一个问题是环境一致问题，由于开发环境，测试环境，生产环境不一致，导致有些bug并未在开发过程中发现。而docker的镜像提供了除内核外完整的运行时环境，确保环境一致性，从而不会在出现“这段代码在我机器上没问题”这类问题。</p><p><strong>4. 持续支付和部署</strong></p><p>对开发和运维人员来说，最希望就是一次创建和部署，可以在任意的地方运行。（定制应用镜像来实现集成、持续支付、部署。开发人员可以通过<strong>dockerfile</strong>来进行镜像构建，并结合持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合持续部署系统进行自动部署）。而且使用<strong>dockerfile</strong>使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><p><strong>5. 更轻松的迁移</strong></p><p>由于docker确保了执行环境的一致性，使得应用的迁移更加的容易。docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云、甚至是笔记本、其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><p><strong>6. 更轻松的维护和拓展</strong></p><p>docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得十分简单。此外，docker团队同各个开源项目团队一起维护了一大批高质量的官网镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><strong>1.隔离性</strong></p><p>基于hypervisor的虚拟技术，在隔离性上比容器技术要好，它们的系统硬件资源完全上虚拟化的，当一台虚拟机出现系统级别的问题，往往不会蔓延到同一宿主机上的其它虚拟机上，但是容器就不一样了，容器之间共享同一个操作系统内核及其它组件，所以在受到诸如黑客攻击这种情况的时候，很容易通过底层操作系统影响的其它容器，甚至逐个击破，产生连锁反应，当然，这个问题可以通过部署容器来解决，但随之又会产生新的问题，比如成本增加以及性能问题。</p><p><strong>2.性能</strong></p><p>不管是虚拟机还是容器，都是运用不同的技术对应用本身进行了一定程度的封装与隔离，在降低应用和应用之间以及应用和环境之间的耦合性上做了很多努力，但是随之而来的，就会产生更过的网络连接转发和数据交互，这在低并发系统上虽然不会很明显，但是当同一虚拟机或者服务器下面的容器需要更高并发量支撑的时候，也就是并发问题成为系统瓶颈的时候，容器会将这个问题放大，所以，并不是所有的场景都适合容器技术。</p><p><strong>3.存储方案</strong></p><p>容器的诞生并不是为OS抽象服务的，这是它和虚拟机最大的区别，这样的基因意味着容器天生是为应用环境做更多的努力，容器的伸缩也是基于容器的这一特性，而与之相对的，需要持久化存储方案恰恰相反，在数据存储这一点上Docker容器提供的解决方案是利用volume接口(存储卷)形成数据的映射和转移，以实现数据持久化的目的。但是这样同样也会造成一部分资源的浪费和更多的交互，不管是映射到宿主机上还是网络磁盘，都是退而求其次的解决方案。</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li>启动</li></ul><blockquote><p>docker start 容器名</p></blockquote><ul><li>删除</li></ul><blockquote><p>docker rm 容器名</p></blockquote><ul><li>停止所有容器</li></ul><blockquote><p>docker stop $(docker ps -a -q)</p></blockquote><ul><li>删除所有容器</li></ul><blockquote><p>docker rm $(docker ps -a -q)</p></blockquote><ul><li>容器构建镜像</li></ul><div class="code-wrapper"><pre><code class="hljs n1ql">Usage:docker <span class="hljs-keyword">build</span> [OPTIONS] <span class="hljs-keyword">PATH</span> | URL | -OPTIONS:-t ，--tag list  #构建后的镜像名称-f， --file <span class="hljs-keyword">string</span> #指定Dockerfiile文件位置示例:- <span class="hljs-number">1</span>，docker <span class="hljs-keyword">build</span> .- <span class="hljs-number">2</span>，docker <span class="hljs-keyword">build</span> -t redis:v1 .- <span class="hljs-number">3</span>，docker <span class="hljs-keyword">build</span> -t redis:v2 -f /<span class="hljs-keyword">path</span>/Dockerfile /<span class="hljs-keyword">path</span>一般常用第<span class="hljs-number">2</span>种方式构建，我们在构建时都会切换到Dockerfile文件的目录下进行构建，所以不需要指定-f参数</code></pre></div><ul><li>进入容器（未必一定是bash命令）</li></ul><blockquote><p>docker exec -it 容器名 bash</p></blockquote><ul><li>查看容器详细信息</li></ul><blockquote><p>docker inspect 容器名</p></blockquote><ul><li>查看容器的日志 </li></ul><blockquote><p>docker logs 容器名</p></blockquote><ul><li>查看本地镜像</li></ul><blockquote><p>docker images</p></blockquote><ul><li>docker 网络</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker network connect</td><td>将容器连接到网络。</td></tr><tr><td>docker network create</td><td>创建新的 Docker 网络。默认情况下，在 Windows 上会采用 NAT 驱动，在 Linux 上会采用 Bridge 驱动。可以使用 -d 参数指定驱动（网络类型）。</td></tr><tr><td>docker network disconnect</td><td>断开容器的网络。</td></tr><tr><td>docker network inspect</td><td>提供 Docker 网络的详细配置信息。</td></tr><tr><td>docker network ls</td><td>用于列出运行在本地 Docker 主机上的全部网络。</td></tr><tr><td>docker network prune</td><td>删除 Docker 主机上全部未使用的网络。</td></tr><tr><td>docker network rm</td><td>删除 Docker 主机上指定网络。</td></tr></tbody></table><ul><li>镜像的保存</li></ul><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save ae<span class="hljs-number">513</span>a<span class="hljs-number">47849</span>c &gt; nginx-save.tar<span class="hljs-attribute">or</span><span class="hljs-attribute">docker</span> save -o nginx-save.tar ae<span class="hljs-number">513</span>a<span class="hljs-number">47849</span>c</code></pre></div><ul><li>镜像的导入</li></ul><div class="code-wrapper"><pre><code class="hljs maxima">docker <span class="hljs-built_in">load</span> &lt; nginx-<span class="hljs-built_in">save</span>.tar<span class="hljs-keyword">or</span>docker <span class="hljs-built_in">load</span> -i nginx-<span class="hljs-built_in">save</span>.tar</code></pre></div><ul><li>容器的导出</li></ul><div class="code-wrapper"><pre><code class="hljs autohotkey">docker export -o mysql-`date +<span class="hljs-variable">%Y%</span>m%d`.tar <span class="hljs-number">220</span>aee82cfea</code></pre></div><ul><li>容器的导入</li></ul><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> import  my_ubuntu_v<span class="hljs-number">3</span>.tar runoob/ubuntu:v<span class="hljs-number">4</span></code></pre></div><p>镜像和容器导出和导入的区别:</p><p>1.镜像导入是复制的过程<br>2.容器导入是将当前容器变成一个新的镜像</p><p>save 和 export区别：</p><ol><li>save 保存镜像所有的信息-包含历史</li><li>export 只导出当前的信息</li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sync.Map</title>
    <link href="/2021/02/06/syncMap/"/>
    <url>/2021/02/06/syncMap/</url>
    
    <content type="html"><![CDATA[<p>sync.Map 是1.9版本才加入的，是线程并发安全的map，类型可以看做map[interface{}]interface{}。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Map</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;    mu Mutex    <span class="hljs-comment">//互斥锁，用于锁定dirty map</span>    read atomic.Value <span class="hljs-comment">//优先读map,支持原子操作，源码注释写了readOnly不是说read是只读，而是它的结构体是readOnly</span>    dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry <span class="hljs-comment">// dirty是一个当前最新的map，允许读写</span>    misses <span class="hljs-keyword">int</span> <span class="hljs-comment">// 主要记录read读取不到数据加锁读取read map以及dirty map的次数，当misses等于dirty的长度时，会将dirty复制到read</span>&#125;</code></pre></div><p>readOnly</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> readOnly <span class="hljs-keyword">struct</span> &#123;    m       <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry    amended <span class="hljs-keyword">bool</span> <span class="hljs-comment">// 如果数据在dirty中但没有在read中，该值为true,作为修改标识</span>&#125;</code></pre></div><p>entry</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;    <span class="hljs-comment">// nil: 表示为被删除，调用Delete()可以将read map中的元素置为nil</span>    <span class="hljs-comment">// expunged: 也是表示被删除，但是该键只在read而没有在dirty中，这种情况出现在将read复制到dirty中，即复制的过程会先将nil标记为expunged，然后不将其复制到dirty</span>    <span class="hljs-comment">// 其他: 表示存着真正的数据</span>    p unsafe.Pointer <span class="hljs-comment">// *interface&#123;&#125;</span>&#125;</code></pre></div><h2 id="Load-查找"><a href="#Load-查找" class="headerlink" title="Load 查找"></a>Load 查找</h2><p>根据key来查找 value， 函数为 Load()，源码如下：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Load</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;    <span class="hljs-comment">// 首先从只读ready的map中查找，这时不需要加锁</span>    read, _ := m.read.Load().(readOnly)    e, ok := read.m[key]        <span class="hljs-comment">// 如果没有找到，并且read.amended为true，说明dirty中有新数据，从dirty中查找，开始加锁了</span>    <span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;        m.mu.Lock() <span class="hljs-comment">// 加锁</span>               <span class="hljs-comment">// 又在 readonly 中检查一遍，因为在加锁的时候 dirty 的数据可能已经迁移到了read中</span>        read, _ = m.read.Load().(readOnly)        e, ok = read.m[key]                <span class="hljs-comment">// read 还没有找到，并且dirty中有数据</span>        <span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123;            e, ok = m.dirty[key] <span class="hljs-comment">//从 dirty 中查找数据</span>                        <span class="hljs-comment">// 不管m.dirty中存不存在，都将misses + 1</span>            <span class="hljs-comment">// missLocked() 中满足条件后就会把m.dirty中数据迁移到m.read中</span>            m.missLocked()        &#125;        m.mu.Unlock()    &#125;    <span class="hljs-keyword">if</span> !ok &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span>    &#125;    <span class="hljs-keyword">return</span> e.load()&#125;</code></pre></div><p>从函数可以看出，如果查询的键值正好在m.read中，不需要加锁，直接返回结果，优化了性能。</p><p>即使不在read中，经过几次miss后， m.dirty中的数据也会迁移到m.read中，这时又可以从read中查找。所以对于更新／增加较少，加载存在的key很多的case，性能基本和无锁的map类似。</p><p><strong>missLockerd 迁移数据</strong></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">missLocked</span><span class="hljs-params">()</span></span> &#123;    m.misses++    <span class="hljs-keyword">if</span> m.misses &lt; <span class="hljs-built_in">len</span>(m.dirty) &#123;<span class="hljs-comment">//misses次数小于 dirty的长度，就不迁移数据，直接返回</span>        <span class="hljs-keyword">return</span>    &#125;    m.read.Store(readOnly&#123;m: m.dirty&#125;) <span class="hljs-comment">//开始迁移数据</span>    m.dirty = <span class="hljs-literal">nil</span>   <span class="hljs-comment">//迁移完dirty就赋值为nil</span>    m.misses = <span class="hljs-number">0</span>  <span class="hljs-comment">//迁移完 misses归0</span>&#125;</code></pre></div><h2 id="Store-存储"><a href="#Store-存储" class="headerlink" title="Store 存储"></a><strong>Store 存储</strong></h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Store</span><span class="hljs-params">(key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;   <span class="hljs-comment">// 直接在read中查找值，找到了，就尝试 tryStore() 更新值</span>    read, _ := m.read.Load().(readOnly)    <span class="hljs-keyword">if</span> e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) &#123;        <span class="hljs-keyword">return</span>    &#125;        <span class="hljs-comment">// m.read 中不存在</span>    m.mu.Lock()    read, _ = m.read.Load().(readOnly)    <span class="hljs-keyword">if</span> e, ok := read.m[key]; ok &#123;        <span class="hljs-keyword">if</span> e.unexpungeLocked() &#123; <span class="hljs-comment">// 未被标记成删除，前面讲到entry数据结构时，里面的p值有3种。1.nil 2.expunged，这个值含义有点复杂，可以看看前面entry数据结构 3.正常值</span>                        m.dirty[key] = e <span class="hljs-comment">// 加入到dirty里</span>        &#125;        e.storeLocked(&amp;value) <span class="hljs-comment">// 更新值</span>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> e, ok := m.dirty[key]; ok &#123; <span class="hljs-comment">// 存在于 dirty 中，直接更新</span>        e.storeLocked(&amp;value)    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 新的值</span>        <span class="hljs-keyword">if</span> !read.amended &#123; <span class="hljs-comment">// m.dirty 中没有新数据，增加到 m.dirty 中</span>            <span class="hljs-comment">// We&#x27;re adding the first new key to the dirty map.</span>            <span class="hljs-comment">// Make sure it is allocated and mark the read-only map as incomplete.</span>            m.dirtyLocked() <span class="hljs-comment">// 从 m.read中复制未删除的数据</span>            m.read.Store(readOnly&#123;m: read.m, amended: <span class="hljs-literal">true</span>&#125;)         &#125;        m.dirty[key] = newEntry(value) <span class="hljs-comment">//将这个entry加入到m.dirty中</span>    &#125;    m.mu.Unlock()&#125;</code></pre></div><p>操作都是先从m.read开始，不满足条件再加锁，然后操作m.dirty。</p><h2 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete 删除"></a><strong>Delete 删除</strong></h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Map)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;    <span class="hljs-comment">// 从 m.read 中开始查找</span>    read, _ := m.read.Load().(readOnly)    e, ok := read.m[key]        <span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123; <span class="hljs-comment">// m.read中没有找到，并且可能存在于m.dirty中，加锁查找</span>        m.mu.Lock() <span class="hljs-comment">// 加锁</span>        read, _ = m.read.Load().(readOnly) <span class="hljs-comment">// 再在m.read中查找一次</span>        e, ok = read.m[key]        <span class="hljs-keyword">if</span> !ok &amp;&amp; read.amended &#123; <span class="hljs-comment">//m.read中又没找到，amended标志位true，说明在m.dirty中</span>            <span class="hljs-built_in">delete</span>(m.dirty, key) <span class="hljs-comment">// 删除</span>        &#125;        m.mu.Unlock()    &#125;    <span class="hljs-keyword">if</span> ok &#123; <span class="hljs-comment">// 在 m.ready 中就直接删除</span>        e.<span class="hljs-built_in">delete</span>()    &#125;&#125;</code></pre></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;sync&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> sm sync.Mapsm.Store(<span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;2343125&quot;</span>)sm.Store(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">111</span>)<span class="hljs-keyword">var</span> v <span class="hljs-keyword">interface</span>&#123;&#125;v, _ = sm.Load(<span class="hljs-string">&quot;www&quot;</span>)fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, v)sm.Delete(<span class="hljs-string">&quot;test&quot;</span>)v, _ = sm.Load(<span class="hljs-string">&quot;test&quot;</span>)fmt.Printf(<span class="hljs-string">&quot;%T&quot;</span>, v)&#125;<span class="hljs-comment">// string&lt;nil&gt;</span></code></pre></div><hr><p>参考：</p><ul><li><a href="https://github.com/golang/go/blob/dev.boringcrypto.go1.15/src/sync/map.go">sync.Map源码</a></li><li><a href="https://developer.aliyun.com/article/741441">sync.Map源码分析</a></li><li><a href="https://www.cnblogs.com/jiujuan/p/13365901.html">深入理解Go语言(05)：sync.map原理分析</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>gosourcecode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gosourcecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sync.Once</title>
    <link href="/2021/02/06/syncOnce/"/>
    <url>/2021/02/06/syncOnce/</url>
    
    <content type="html"><![CDATA[<p>sync.Once的源码十分简单，而且注释十分清楚，直接来看一下。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>定义了一个结构体Once</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Once <span class="hljs-keyword">struct</span> &#123;done <span class="hljs-keyword">uint32</span> <span class="hljs-comment">// 是否执行过，初始值为0</span>m    Mutex  <span class="hljs-comment">// 锁</span>&#125;</code></pre></div><p>对外提供了一个方法Do，Once.Do可以理解成资源初始化，只会执行一次。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span> <span class="hljs-title">Do</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span>)</span> &#123;        <span class="hljs-comment">// 这里保证原子性的读取o.done，如果未执行0，调用doSlow</span><span class="hljs-keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="hljs-number">0</span> &#123;<span class="hljs-comment">// Outlined slow-path to allow inlining of the fast-path.</span>o.doSlow(f)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *Once)</span> <span class="hljs-title">doSlow</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span>)</span> &#123;o.m.Lock()  <span class="hljs-comment">// 锁住</span><span class="hljs-keyword">defer</span> o.m.Unlock() <span class="hljs-comment">// 最后释放锁</span>        <span class="hljs-comment">// 如果未执行过f，就执行f，并修改o.done为1</span>        <span class="hljs-comment">// 这里已经加锁了，保证了原子性，不需要使用atomic.LoadUint32</span><span class="hljs-keyword">if</span> o.done == <span class="hljs-number">0</span> &#123; <span class="hljs-keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="hljs-number">1</span>)f()&#125;&#125;</code></pre></div><p>如果你熟悉atomic，这里你可能会有个疑问，Do方法里面为何不直接使用cas原子操作呢，那多简洁？</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">if</span> atomic.CompareAndSwapUint32(&amp;o.done, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) &#123;f()&#125;</code></pre></div><p>其实源码注释里已经有了说明，这样的实现并不合理。</p><p>当你有2个并发请求调用Do，这样的实现确实能保证只会调用一次f。但是，假如f的执行需要一段时间，比如初始化数据库连接池，当f执行尚未完成，并发中另一个请求因为没有执行原子操作直接返回了，使用f中初始化的连接池就必然会失败，那么这样的实现显然是不可取的。</p><p>所以必须确保f执行完成之后，才能将done置为1。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> one sync.Oncefun1 := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;fmt.Println(<span class="hljs-string">&quot;do one&quot;</span>)&#125;fun2 := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;fmt.Println(<span class="hljs-string">&quot;do two&quot;</span>)&#125;one.Do(fun1)one.Do(fun2)output:do one</code></pre></div><p>可以看到只执行了一次，也就是fun1。</p><p>其实once很适合应用到单例模式，比如连接数据库，</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> db<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;github.com/jinzhu/gorm&quot;</span>_ <span class="hljs-string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-keyword">var</span> once sync.Once<span class="hljs-keyword">var</span> db *gorm.DB<span class="hljs-comment">// 单例模式获取*gorm.DB</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDB</span><span class="hljs-params">()</span> *<span class="hljs-title">gorm</span>.<span class="hljs-title">DB</span></span> &#123;once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;db = openPool()&#125;)<span class="hljs-keyword">return</span> db&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">openPool</span><span class="hljs-params">()</span> *<span class="hljs-title">gorm</span>.<span class="hljs-title">DB</span></span> &#123;...&#125;</code></pre></div><p>好了，Once是很常用的，也很适合单例模式使用，源码简单明了，以后在项目中多多使用吧！</p>]]></content>
    
    
    <categories>
      
      <category>gosourcecode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gosourcecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue子组件</title>
    <link href="/2021/01/26/305/"/>
    <url>/2021/01/26/305/</url>
    
    <content type="html"><![CDATA[<p>先来看demo:</p><p>父组件：</p><div class="code-wrapper"><pre><code class="hljs vue">&lt;template&gt;  &lt;div class=&quot;app-container calendar-list-container&quot;&gt;    &lt;el-tabs v-model=&quot;activeName&quot; type=&quot;card&quot;&gt;      &lt;el-tab-pane label=&quot;待审核&quot; name=&quot;first&quot;&gt;        &lt;test-page status=&quot;1&quot; @toP=&quot;funct&quot;&gt;&lt;/test-page&gt;      &lt;/el-tab-pane&gt;      &lt;el-tab-pane label=&quot;全部&quot; name=&quot;second&quot;&gt;        &lt;test-page status=&quot;0&quot;&gt;&lt;/test-page&gt;      &lt;/el-tab-pane&gt;    &lt;/el-tabs&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TestPage from &#x27;@/views/components/TestPage&#x27;export default &#123;  components: &#123; TestPage &#125;,  name: &quot;test&quot;,  data() &#123;    return &#123;      activeName: &#x27;first&#x27;,    &#125;;  &#125;,  methods: &#123;    funct(v) &#123;        console.warn(v)    &#125;  &#125;&#125;;&lt;/script&gt;</code></pre></div><p>子组件</p><div class="code-wrapper"><pre><code class="hljs vue">&lt;template&gt;  &lt;div&gt;    &lt;el-table      key=&quot;tableList&quot;      v-loading=&quot;listLoading&quot;      :data=&quot;list&quot;      element-loading-text=&quot;给我一点时间&quot;      border      fit      highlight-current-row      style=&quot;width: 100%&quot;    &gt;      &lt;el-table-column        align=&quot;center&quot;        label=&quot;id&quot;      &gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; scope.row.id &#125;&#125;&lt;/span&gt;        &lt;/template&gt;      &lt;/el-table-column&gt;      &lt;el-table-column        align=&quot;center&quot;        label=&quot;地点&quot;      &gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; scope.row.address &#125;&#125;&lt;/span&gt;        &lt;/template&gt;      &lt;/el-table-column&gt;      &lt;el-table-column        align=&quot;center&quot;        label=&quot;状态&quot;      &gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          &lt;el-tag type=&quot;info&quot; v-if=&quot;scope.row.status == 0&quot;&gt;已拒绝&lt;/el-tag&gt;          &lt;el-tag v-if=&quot;scope.row.status == 1&quot;&gt;审核中&lt;/el-tag&gt;          &lt;el-tag type=&quot;success&quot; v-if=&quot;scope.row.status == 2&quot;&gt;已通过&lt;/el-tag&gt;        &lt;/template&gt;      &lt;/el-table-column&gt;      &lt;el-table-column        align=&quot;center&quot;        label=&quot;活动时间&quot;      &gt;        &lt;template slot-scope=&quot;scope&quot;&gt;          &lt;span&gt;&#123;&#123; scope.row.start_date &#125;&#125;&lt;/span&gt;&lt;br&gt;至          &lt;span&gt;&#123;&#123; scope.row.end_date &#125;&#125;&lt;/span&gt;        &lt;/template&gt;      &lt;/el-table-column&gt;    &lt;/el-table&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;...export default &#123;  name: &quot;TestPage&quot;,  props: [&#x27;status&#x27;],  data() &#123;    return &#123;      list: [],      pagination: &quot;&quot;,      listQuery: &#123;        page: 1,        limit: 20,        status: 1,        type:&#x27;&#x27;,      &#125;,      typeList: [],      dialogFormVisible: false,      temp: &#123;          image : &#x27;&#x27;,          user: &#123;            nickname: &#x27;&#x27;,          &#125;,          college: &#123;            name: &quot;&quot;,          &#125;,          materials: [],      &#125;,    &#125;;  &#125;,  created() &#123;    this.listQuery.status = this.$props.status;    this.getList();    this.$emit(&#x27;toP&#x27;, this.listQuery)  &#125;,  methods: &#123;    ...  &#125;&#125;;&lt;/script&gt;&lt;style&gt;.row-container .el-row &#123;    margin-bottom: 20px;    &amp;:last-child &#123;      margin-bottom: 0;    &#125;  &#125;&lt;/style&gt;</code></pre></div><p>这个demo简单使用了组件引入，及子组件于父组件通信。</p><h2 id="引入子组件"><a href="#引入子组件" class="headerlink" title="引入子组件"></a>引入子组件</h2><div class="code-wrapper"><pre><code class="hljs vue">import TestPage from &#x27;@/views/components/TestPage&#x27;export default &#123;  components: &#123; TestPage &#125;,</code></pre></div><p>使用:</p><div class="code-wrapper"><pre><code class="hljs vue">&lt;test-page&gt;&lt;/test-page&gt;</code></pre></div><h2 id="父组件传递数据到子组件"><a href="#父组件传递数据到子组件" class="headerlink" title="父组件传递数据到子组件"></a>父组件传递数据到子组件</h2><p>父组件的status就是传递的数据</p><div class="code-wrapper"><pre><code class="hljs vue">&lt;test-page status=&quot;0&quot;&gt;&lt;/test-page&gt;</code></pre></div><p>子组件接收：</p><div class="code-wrapper"><pre><code class="hljs vue">this.$props.status</code></pre></div><h2 id="子组件传递数据到父组件"><a href="#子组件传递数据到父组件" class="headerlink" title="子组件传递数据到父组件"></a>子组件传递数据到父组件</h2><p>子组件，其实是传递了一个toP事件</p><div class="code-wrapper"><pre><code class="hljs vue">this.$emit(&#x27;toP&#x27;, this.listQuery)</code></pre></div><p>父组件</p><div class="code-wrapper"><pre><code class="hljs vue">&lt;test-page @toP=&quot;funct&quot;&gt;&lt;/test-page&gt;...methods: &#123;    funct(v) &#123;        console.warn(v)    &#125;&#125;</code></pre></div><p>这里需要稍微注意的就是驼峰命名转**-**，使用相对简单。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站不能访问的问题集合</title>
    <link href="/2021/01/13/302/"/>
    <url>/2021/01/13/302/</url>
    
    <content type="html"><![CDATA[<h2 id="https访问不了"><a href="#https访问不了" class="headerlink" title="https访问不了"></a>https访问不了</h2><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>https访问不了，绑定host可访问，网站无报错</p><h4 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h4><p>ping域名对于ip也正常，telnet 443端口失败</p><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><p>开启443端口</p><hr><h2 id="加了CDN的部分页面突然打不开"><a href="#加了CDN的部分页面突然打不开" class="headerlink" title="加了CDN的部分页面突然打不开"></a>加了CDN的部分页面突然打不开</h2><h4 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h4><p>加了cdn的部分页面打不开，http页面访问正常，绑定host访问也正常</p><p>打不开的情况nginx有报错如： pwritev() “/usr/local/webserver/nginx_new/fastcgi_temp/1/96/0001214961” failed (28: No space left on device) while reading upstream, client: 61.241.120.188, server:<a href="http://www.13sai.com/">www.13sai.com</a>, request: “GET / HTTP/1.1”, upstream: “fastcgi://127.0.0.1:9000”, host: “<a href="http://www.13sai.com&quot;,后又反馈后台文件上传失败/">www.13sai.com&quot;，后又反馈后台文件上传失败</a></p><h4 id="排查-1"><a href="#排查-1" class="headerlink" title="排查"></a>排查</h4><p>去掉cdn能正常访问，挂载磁盘未满，系统盘满，乍一看是cdn和waf问题</p><h4 id="处理-1"><a href="#处理-1" class="headerlink" title="处理"></a>处理</h4><p>系统盘100%，注意No space left on device，挪动大文件到挂载的磁盘，cdn页面也恢复正常</p><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p>上传大文件，下载大文件尽量别放在系统盘</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go源码之context</title>
    <link href="/2021/01/06/context/"/>
    <url>/2021/01/06/context/</url>
    
    <content type="html"><![CDATA[<h1 id="定义说明"><a href="#定义说明" class="headerlink" title="定义说明"></a>定义说明</h1><blockquote><p>Package context defines the Context type, which carries deadlines, cancelation signals, and other request-scoped values across API boundaries and between processes.<br>Incoming requests to a server should create a Context, and outgoing calls to servers should accept a Context. The chain of function calls between them must propagate the Context, optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. When a Context is canceled, all Contexts derived from it are also canceled.</p></blockquote><p>粗略翻译一下就是：</p><p>context定义了上下文类型，它携带跨越API边界和进程之间的deadlines、取消信号和其他请求范围的值。对服务器的传入请求应该创建上下文，对服务器的传出调用应该接受上下文。它们之间的函数调用链必须传播上下文，可以选择用使用WithCancel、WithDeadline、WithTimeout或WithValue创建的派生上下文替换它。当一个上下文被取消时，所有从它派生的上下文也被取消。</p><h1 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h1><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Context</td><td>interface</td><td>定义了 Context 接口的四个方法Deadline、Done、Err、Value</td></tr><tr><td>emptyCtx</td><td>int</td><td>注意：emptyCtx永远不会取消，没有值，也没有截止日期。这里使用的是类型等价定义，emptyCtx等价于int类型。并且定义上面的四个方法和String方法。</td></tr><tr><td>Background</td><td>func</td><td>返回new(emptyCtx)</td></tr><tr><td>TODO</td><td>func</td><td>返回new(emptyCtx)</td></tr><tr><td>CancelFunc</td><td>func</td><td>CancelFunc告诉操作放弃其工作，不等待工作停止。多个goroutine可以同时调用CancelFunc。在第一个调用之后，对CancelFunc的后续调用将不执行任何操作。</td></tr><tr><td>WithCancel</td><td>func</td><td>WithCancel返回一个带有新的Done通道的parent副本。当返回的cancel函数被调用时，上下文的Done通道被关闭或者当父上下文的Done通道关闭时，无论哪个先发生。取消此上下文将释放与之相关的资源，代码也应该如此在此上下文中运行的操作一完成，就调用cancel。</td></tr><tr><td>newCancelCtx</td><td>func</td><td>返回一个初始化的cancelCtx</td></tr><tr><td>propagateCancel</td><td>func</td><td>propagateCancel在父元素被取消时取消子元素，这里有用到原子锁</td></tr><tr><td>parentCancelCtx</td><td>func</td><td>找到第一个可取消的父节点</td></tr><tr><td>removeChild</td><td>func</td><td>移除父节点的子节点</td></tr><tr><td>canceler</td><td>interface</td><td>取消者，定义了cancel和Done两个方法</td></tr><tr><td>init</td><td>func</td><td>初始化方法</td></tr><tr><td>cancelCtx</td><td>struct</td><td>一个可以取消的 Context</td></tr><tr><td>contextName</td><td>func</td><td>返回上下文名称</td></tr><tr><td>WithDeadline</td><td>func</td><td>创建一个有 deadline 的 context</td></tr><tr><td>timerCtx</td><td>struct</td><td>timerCtx带有timeout 和deadline 。它将cancelCtx嵌入到实现Done和Err。它通过停止计时器来实现取消，然后委托给cancelCtx.cancel。</td></tr><tr><td>WithTimeout</td><td>func</td><td>创建一个有 timeout 的 context</td></tr><tr><td>WithValue</td><td>func</td><td>创建一个存储 k-v 对的 context</td></tr><tr><td>valueCtx</td><td>struct</td><td>存储k-v，配合WithValue使用</td></tr><tr><td>stringify</td><td>func</td><td>接口类型返回字符串</td></tr></tbody></table><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">type</span> Context interface &#123;<span class="hljs-comment">// 获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消</span><span class="hljs-constructor">Deadline()</span> (deadline time.Time, ok <span class="hljs-built_in">bool</span>)<span class="hljs-comment">// 返回一个只读的chan，类型为struct&#123;&#125;，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。</span><span class="hljs-constructor">Done()</span> &lt;-chan <span class="hljs-keyword">struct</span>&#123;&#125;<span class="hljs-comment">// 在 channel Done 关闭后，返回 context 取消原因</span><span class="hljs-constructor">Err()</span> error<span class="hljs-comment">// 获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是并发安全的</span><span class="hljs-constructor">Value(<span class="hljs-params">key</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> interface&#123;&#125;&#125;</code></pre></div><h2 id="canceler"><a href="#canceler" class="headerlink" title="canceler"></a>canceler</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> canceler <span class="hljs-keyword">interface</span> &#123;cancel(removeFromParent <span class="hljs-keyword">bool</span>, err error)Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;&#125;</code></pre></div><p>实现了上面定义的两个方法的 Context，就表明该 Context 是可取消的。源码中有两个类型实现了 canceler 接口：*cancelCtx 和 *timerCtx。注意是加了 * 号的，是这两个结构体的指针实现了 canceler 接口。</p><p>接口设计成这个样子的原因：</p><ul><li>“取消”操作应该是建议性，而非强制性</li><li>“取消”操作应该可传递</li></ul><h2 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> emptyCtx <span class="hljs-keyword">int</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Deadline</span><span class="hljs-params">()</span> <span class="hljs-params">(deadline time.Time, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;<span class="hljs-keyword">return</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Done</span><span class="hljs-params">()</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">struct</span></span>&#123;&#125; &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Err</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Value</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *emptyCtx)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">switch</span> e &#123;<span class="hljs-keyword">case</span> background:<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;context.Background&quot;</span><span class="hljs-keyword">case</span> todo:<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;context.TODO&quot;</span>&#125;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;unknown empty Context&quot;</span>&#125;cancelCtx<span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;Contextmu       sync.Mutex            <span class="hljs-comment">// 互斥锁</span>done     <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;        children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; err      error &#125;</code></pre></div><p>我们重点看一下这个方法</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cancelCtx)</span> <span class="hljs-title">cancel</span><span class="hljs-params">(removeFromParent <span class="hljs-keyword">bool</span>, err error)</span></span> &#123;<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;context: internal error: missing cancel error&quot;</span>)&#125;c.mu.Lock()<span class="hljs-keyword">if</span> c.err != <span class="hljs-literal">nil</span> &#123;c.mu.Unlock()<span class="hljs-keyword">return</span> <span class="hljs-comment">// 已经被其他协程取消</span>&#125;<span class="hljs-comment">// 给 err 字段赋值</span>c.err = err<span class="hljs-comment">// 关闭 channel，通知其他协程</span><span class="hljs-keyword">if</span> c.done == <span class="hljs-literal">nil</span> &#123;c.done = closedchan&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">close</span>(c.done)&#125;<span class="hljs-comment">// 遍历它的所有子节点</span><span class="hljs-keyword">for</span> child := <span class="hljs-keyword">range</span> c.children &#123;                <span class="hljs-comment">// 递归地取消所有子节点</span>child.cancel(<span class="hljs-literal">false</span>, err)&#125;<span class="hljs-comment">// 将子节点置空</span>c.children = <span class="hljs-literal">nil</span>c.mu.Unlock()<span class="hljs-keyword">if</span> removeFromParent &#123;        <span class="hljs-comment">// 从父节点中移除自己 </span>removeChild(c.Context, c)&#125;&#125;</code></pre></div><p>cancel()方法的功能就是关闭 channel：c.done；递归地取消它的所有子节点；从父节点从删除自己。达到的效果是通过关闭 channel，将取消信号传递给了它的所有子节点。</p><div class="code-wrapper"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithCancel(<span class="hljs-params">parent</span> Context)</span> (ctx Context, cancel CancelFunc)func <span class="hljs-constructor">WithDeadline(<span class="hljs-params">parent</span> Context, <span class="hljs-params">deadline</span> <span class="hljs-params">time</span>.Time)</span> (Context, CancelFunc)func <span class="hljs-constructor">WithTimeout(<span class="hljs-params">parent</span> Context, <span class="hljs-params">timeout</span> <span class="hljs-params">time</span>.Duration)</span> (Context, CancelFunc)func <span class="hljs-constructor">WithValue(<span class="hljs-params">parent</span> Context, <span class="hljs-params">key</span>, <span class="hljs-params">val</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> Context</code></pre></div><p>上面四个可以理解为Context的继承衍生。</p><p>对于我们日常使用来说，学会Context的继承的4个方法和Background、TODO基本就够了。</p><h1 id="Context使用场景"><a href="#Context使用场景" class="headerlink" title="Context使用场景"></a>Context使用场景</h1><ol><li><p>超时请求</p><div class="code-wrapper"><pre><code class="hljs css">package <span class="hljs-selector-tag">main</span>import (    &quot;context&quot;    &quot;fmt&quot;    &quot;<span class="hljs-selector-tag">time</span>&quot;)func <span class="hljs-selector-tag">main</span>() &#123;    ctx, cancel := context.<span class="hljs-built_in">WithTimeout</span>(context.<span class="hljs-built_in">Background</span>(), <span class="hljs-number">50</span>*time.Millisecond)    defer <span class="hljs-built_in">cancel</span>()    select &#123;    case &lt;-time.<span class="hljs-built_in">After</span>(<span class="hljs-number">1</span> * time.Second):        fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-string">&quot;overslept&quot;</span>)    case &lt;-ctx.<span class="hljs-built_in">Done</span>():        fmt.<span class="hljs-built_in">Println</span>(ctx.<span class="hljs-built_in">Err</span>()) // prints <span class="hljs-string">&quot;context deadline exceeded&quot;</span>    &#125;&#125;</code></pre></div></li><li><p>共享数据</p></li></ol><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx := context.Background()process(ctx)ctx = context.WithValue(ctx, <span class="hljs-string">&quot;traceId&quot;</span>, <span class="hljs-string">&quot;qcrao-2019&quot;</span>)process(ctx)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">process</span><span class="hljs-params">(ctx context.Context)</span></span> &#123;traceId, ok := ctx.Value(<span class="hljs-string">&quot;traceId&quot;</span>).(<span class="hljs-keyword">string</span>)<span class="hljs-keyword">if</span> ok &#123;fmt.Printf(<span class="hljs-string">&quot;process over. trace_id=%s\n&quot;</span>, traceId)&#125; <span class="hljs-keyword">else</span> &#123;fmt.Printf(<span class="hljs-string">&quot;process over. no trace_id\n&quot;</span>)&#125;&#125;</code></pre></div><p>这个在web开发中很实用，传递session、token等信息。</p><ol start="3"><li>防止 goroutine 泄漏<div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gen</span><span class="hljs-params">()</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> &#123;ch &lt;- nn++time.Sleep(time.Second)&#125;&#125;()<span class="hljs-keyword">return</span> ch&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> gen() &#123;fmt.Println(n)<span class="hljs-keyword">if</span> n == <span class="hljs-number">5</span> &#123;<span class="hljs-keyword">break</span>&#125;&#125;&#125;</code></pre></div></li></ol><p>当 n = 5 的时候，直接 break 。但是 gen 的协程就会执行无限循环，永远不会停下来。发生了 goroutine 泄漏。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;context&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gen</span><span class="hljs-params">(ctx context.Context)</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">int</span></span> &#123;ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> &#123;<span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;-ctx.Done():<span class="hljs-keyword">return</span><span class="hljs-keyword">case</span> ch &lt;- n:n++time.Sleep(time.Second)&#125;&#125;&#125;()<span class="hljs-keyword">return</span> ch&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;ctx, cancel := context.WithCancel(context.Background())<span class="hljs-keyword">defer</span> cancel() <span class="hljs-comment">// 避免其他地方忘记 cancel，且重复调用不影响</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> gen(ctx) &#123;fmt.Println(n)<span class="hljs-keyword">if</span> n == <span class="hljs-number">5</span> &#123;cancel()<span class="hljs-keyword">break</span>&#125;&#125;&#125;</code></pre></div><h1 id="Context-使用原则"><a href="#Context-使用原则" class="headerlink" title="Context 使用原则"></a>Context 使用原则</h1><p>最后记住几个主要的使用原则：</p><ul><li>不要将 Context 塞到结构体里。直接将 Context 类型作为函数的第一参数，而且一般都命名为 ctx。</li><li>不要向函数传入一个 nil 的 context，如果你实在不知道传什么，标准库给你准备好了一个 context：todo。</li><li>不要把本应该作为函数参数的类型塞到 context 中，context 存储的应该是一些共同的数据。例如：登陆的 session、cookie 等。</li><li>同一个 context 可能会被传递到多个 goroutine，别担心，context 是并发安全的。</li></ul><p>参考文章：</p><ul><li><a href="https://www.cnblogs.com/qcrao-2018/p/11007503.html">深度解密Go语言之context</a></li><li><a href="https://www.flysnow.org/2017/05/12/go-in-action-go-context.html">Go语言实战笔记（二十）| Go Context</a>​</li></ul>]]></content>
    
    
    <categories>
      
      <category>gosourcecode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gosourcecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x/rate/limit</title>
    <link href="/2021/01/06/rate/"/>
    <url>/2021/01/06/rate/</url>
    
    <content type="html"><![CDATA[<p>限流是保证服务可用性和稳定的利器之一。go自带有限流器rate，我们来研读一下源码，源码较少，我们列出主要代码部分，注释说明：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// 限定速率</span><span class="hljs-keyword">type</span> Limit <span class="hljs-keyword">float64</span><span class="hljs-comment">// 常量Inf：无速率限制</span><span class="hljs-keyword">const</span> Inf = Limit(math.MaxFloat64)<span class="hljs-comment">// 限流器的结构体，本质就是一个令牌桶，</span><span class="hljs-keyword">type</span> Limiter <span class="hljs-keyword">struct</span> &#123;  mu     sync.Mutex  limit  Limit  burst  <span class="hljs-keyword">int</span>  tokens <span class="hljs-keyword">float64</span>  <span class="hljs-comment">// 记录上次 Limiter 被更新的时间</span>  last time.Time  <span class="hljs-comment">// lastEvent 记录速率受限制的时间</span>  lastEvent time.Time&#125;<span class="hljs-comment">// new一个新的限流器 *Limiter，r是速率，b是允许突发的令牌数量</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewLimiter</span><span class="hljs-params">(r Limit, b <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Limiter</span></span> &#123;  <span class="hljs-keyword">return</span> &amp;Limiter&#123;    limit: r,    burst: b,  &#125;&#125;<span class="hljs-comment">// Reservation 保存了限流器延迟后发生的事件信息</span><span class="hljs-keyword">type</span> Reservation <span class="hljs-keyword">struct</span> &#123;  <span class="hljs-comment">// 是否满足条件分配了令牌啊</span>  ok        <span class="hljs-keyword">bool</span>  <span class="hljs-comment">// 限流器</span>  lim       *Limiter  <span class="hljs-comment">// 令牌数量</span>  tokens    <span class="hljs-keyword">int</span>  <span class="hljs-comment">// 满足令牌发放的时间</span>  timeToAct time.Time  <span class="hljs-comment">// 令牌发放速率</span>  limit Limit&#125;<span class="hljs-comment">// 这是一个重要的内部函数，返回一个Reservation</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lim *Limiter)</span> <span class="hljs-title">reserveN</span><span class="hljs-params">(now time.Time, n <span class="hljs-keyword">int</span>, maxFutureReserve time.Duration)</span> <span class="hljs-title">Reservation</span></span> &#123;  <span class="hljs-comment">// 互斥锁，保证原子性</span>  lim.mu.Lock()  <span class="hljs-comment">// 判断速率是不是最大，是的话无需限流</span>  <span class="hljs-keyword">if</span> lim.limit == Inf &#123;    lim.mu.Unlock()    <span class="hljs-keyword">return</span> Reservation&#123;      ok:        <span class="hljs-literal">true</span>,      lim:       lim,      tokens:    n,      timeToAct: now,    &#125;  &#125;  <span class="hljs-comment">// 调用 advance 方法，获取最新的时间、上一次取得令牌的时间、最新的token数量</span>  now, last, tokens := lim.advance(now)  <span class="hljs-comment">// 更新token数量</span>  tokens -= <span class="hljs-keyword">float64</span>(n)  <span class="hljs-comment">// 计算等待时间，数量小于0表示令牌桶中木有可用的令牌了</span>  <span class="hljs-keyword">var</span> waitDuration time.Duration  <span class="hljs-keyword">if</span> tokens &lt; <span class="hljs-number">0</span> &#123;    waitDuration = lim.limit.durationFromTokens(-tokens)  &#125;  <span class="hljs-comment">// 计算结果</span>  ok := n &lt;= lim.burst &amp;&amp; waitDuration &lt;= maxFutureReserve  <span class="hljs-comment">// 初始化 Reservation</span>  r := Reservation&#123;    ok:    ok,    lim:   lim,    limit: lim.limit,  &#125;    <span class="hljs-comment">// 更新令牌桶数量和时间</span>  <span class="hljs-keyword">if</span> ok &#123;    r.tokens = n    r.timeToAct = now.Add(waitDuration)  &#125;  <span class="hljs-comment">// 更新限流器最新取得令牌的时间、数量、事件</span>  <span class="hljs-keyword">if</span> ok &#123;    lim.last = now    lim.tokens = tokens    lim.lastEvent = r.timeToAct  &#125; <span class="hljs-keyword">else</span> &#123;    lim.last = last  &#125;  lim.mu.Unlock()  <span class="hljs-keyword">return</span> r&#125;<span class="hljs-comment">// 计算时间变化的 Limiter 的状态变化，得到最新的时间，最后一次取得令牌的时间和 token 令牌数量</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(lim *Limiter)</span> <span class="hljs-title">advance</span><span class="hljs-params">(now time.Time)</span> <span class="hljs-params">(newNow time.Time, newLast time.Time, newTokens <span class="hljs-keyword">float64</span>)</span></span> &#123;  last := lim.last  <span class="hljs-keyword">if</span> now.Before(last) &#123;    last = now  &#125;  maxElapsed := lim.limit.durationFromTokens(<span class="hljs-keyword">float64</span>(lim.burst) - lim.tokens)  elapsed := now.Sub(last)  <span class="hljs-keyword">if</span> elapsed &gt; maxElapsed &#123;    elapsed = maxElapsed  &#125;  delta := lim.limit.tokensFromDuration(elapsed)  tokens := lim.tokens + delta  <span class="hljs-keyword">if</span> burst := <span class="hljs-keyword">float64</span>(lim.burst); tokens &gt; burst &#123;    tokens = burst  &#125;  <span class="hljs-keyword">return</span> now, last, tokens&#125;<span class="hljs-comment">// 这里单独放出来，是提醒一下，go也有精度缺失问题，所以复杂计算要注意</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(limit Limit)</span> <span class="hljs-title">tokensFromDuration</span><span class="hljs-params">(d time.Duration)</span> <span class="hljs-title">float64</span></span> &#123;  sec := <span class="hljs-keyword">float64</span>(d/time.Second) * <span class="hljs-keyword">float64</span>(limit)  nsec := <span class="hljs-keyword">float64</span>(d%time.Second) * <span class="hljs-keyword">float64</span>(limit)  <span class="hljs-keyword">return</span> sec + nsec/<span class="hljs-number">1e9</span>&#125;</code></pre></div><p>使用实例和demo可看：</p><p><a href="https://github.13sai.com/goexample/9.html">golang 限流器</a></p>]]></content>
    
    
    <categories>
      
      <category>gosourcecode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gosourcecode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB的简单使用说明</title>
    <link href="/2020/12/24/301/"/>
    <url>/2020/12/24/301/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 下载，注意下载对应的系统版本，否则安装会报错wget https:<span class="hljs-regexp">//</span>fastdl.mongodb.org<span class="hljs-regexp">/linux/m</span>ongodb-linux-x86_64-rhel70-<span class="hljs-number">4.4</span>.<span class="hljs-number">1</span>.tgz<span class="hljs-regexp">//</span> 解压即可，无需编译安装tar -zxvf mongodb-linux-x86_64-rhel70-<span class="hljs-number">4.4</span>.<span class="hljs-number">1</span>.tgzmv mongodb-linux-x86_64-rhel70-<span class="hljs-number">4.4</span>.<span class="hljs-number">1</span> <span class="hljs-regexp">/usr/</span>local/mongodb</code></pre></div><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>新建mongodb.conf（版本可能不一样，略有不同）</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">dbpath</span> = /data/mongodb/data <span class="hljs-comment">#数据文件存放目录  </span><span class="hljs-attr">logpath</span> = /data/mongodb/log/mongodb.log <span class="hljs-comment">#日志文件存放目录  </span><span class="hljs-attr">port</span> = <span class="hljs-number">27000</span>  <span class="hljs-comment">#端口  </span><span class="hljs-attr">fork</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment">#以守护程序的方式启用，即在后台运行  </span><span class="hljs-attr">bind_ip</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/mongodb/</span><span class="hljs-regexp">//</span> 启动服务bin<span class="hljs-regexp">/mongod -f ./m</span>ongodb.conf</code></pre></div><h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><p>设置密码</p><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> admin;<span class="hljs-keyword">db</span>.createUser(&#123;user:<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-keyword">pwd</span>:<span class="hljs-string">&quot;666888&quot;</span>,roles:[<span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>]&#125;);<span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span>;<span class="hljs-keyword">db</span>.createUser(&#123;    user: <span class="hljs-string">&quot;test&quot;</span>,    <span class="hljs-keyword">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>,    roles: [&#123;role: <span class="hljs-string">&quot;readWrite&quot;</span>,<span class="hljs-keyword">db</span>: <span class="hljs-string">&quot;hotel&quot;</span>&#125;]&#125;)<span class="hljs-keyword">db</span>.createUser(    &#123;      user: <span class="hljs-string">&quot;admin&quot;</span>,      <span class="hljs-keyword">pwd</span>: <span class="hljs-string">&quot;5176567&quot;</span>,      roles: [&#123;role: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, <span class="hljs-keyword">db</span>: <span class="hljs-string">&quot;admin&quot;</span>&#125;]    &#125;)</code></pre></div><p>role的说明</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Read</span>：允许用户读取指定数据库readWrite：允许用户读写指定数据库dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问<span class="hljs-keyword">system</span>.profileuserAdmin：允许用户向<span class="hljs-keyword">system</span>.users集合写入，可以找指定数据库里创建、删除和管理用户clusterAdmin：只在<span class="hljs-keyword">admin</span>数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。readAnyDatabase：只在<span class="hljs-keyword">admin</span>数据库中可用，赋予用户所有数据库的读权限readWriteAnyDatabase：只在<span class="hljs-keyword">admin</span>数据库中可用，赋予用户所有数据库的读写权限userAdminAnyDatabase：只在<span class="hljs-keyword">admin</span>数据库中可用，赋予用户所有数据库的userAdmin权限dbAdminAnyDatabase：只在<span class="hljs-keyword">admin</span>数据库中可用，赋予用户所有数据库的dbAdmin权限。root：只在<span class="hljs-keyword">admin</span>数据库中可用。超级账号，超级权限</code></pre></div><p>建议出root和admin，各个数据库使用自己独立的账号密码。</p><p>auth尝试一下，如果返回1，表示auth验证成功</p><div class="code-wrapper"><pre><code class="hljs 1c">db.auth(&#x27;root&#x27;, &#x27;<span class="hljs-number">666888</span>&#x27;)</code></pre></div><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>关闭mongo服务</p><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> admin<span class="hljs-keyword">db</span>.shutdownServer()</code></pre></div><p>清空当前数据库</p><div class="code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> xxx<span class="hljs-keyword">db</span>.dropDatabase()</code></pre></div><h2 id="集成到Laravel"><a href="#集成到Laravel" class="headerlink" title="集成到Laravel"></a>集成到Laravel</h2><p>安装</p><blockquote><p>composer require jenssegers/mongodb 3.6.x</p></blockquote><p>低版本需要在config/app.php加入</p><div class="code-wrapper"><pre><code class="hljs cpp">Jenssegers\Mongodb\MongodbServiceProvider::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span></code></pre></div><p>配置database.php</p><div class="code-wrapper"><pre><code class="hljs dart"><span class="hljs-string">&#x27;mongodb&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;mongodb&#x27;</span>,            <span class="hljs-string">&#x27;host&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_HOST&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>),            <span class="hljs-string">&#x27;port&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_PORT&#x27;</span>, <span class="hljs-number">27017</span>),            <span class="hljs-string">&#x27;database&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_DATABASE&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>),            <span class="hljs-string">&#x27;username&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_USERNAME&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>),            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_PWD&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),            <span class="hljs-string">&#x27;options&#x27;</span> =&gt; [                <span class="hljs-comment">// here you can pass more settings to the Mongo Driver Manager</span>                <span class="hljs-comment">// see https://www.php.net/manual/en/mongodb-driver-manager.construct.php under &quot;Uri Options&quot; for a list of complete parameters that you can use</span>            <span class="hljs-string">&#x27;database&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;MONGODB_AUTHENTICATION_DATABASE&#x27;</span>, <span class="hljs-string">&#x27;hotel&#x27;</span>), <span class="hljs-comment">// required with Mongo 3+</span>            ],        ],</code></pre></div><p>Model定义:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Author: 13sai</span><span class="hljs-comment"> * Date: 2020/12/22</span><span class="hljs-comment"> * Time: 15:08</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Jenssegers</span>\<span class="hljs-title">Mongodb</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$collection</span> = <span class="hljs-string">&#x27;products&#x27;</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$connection</span> = <span class="hljs-string">&#x27;mongodb&#x27;</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$guarded</span> = [<span class="hljs-string">&#x27;id&#x27;</span>];&#125;</code></pre></div><p>使用:</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$users</span> = User::distinct(<span class="hljs-string">&#x27;name&#x27;</span>)-&gt;get();<span class="hljs-variable">$users</span> = User::whereIn(<span class="hljs-string">&#x27;age&#x27;</span>, [<span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>])-&gt;get();<span class="hljs-variable">$total</span> = Product::count();<span class="hljs-variable">$price</span> = Product::avg(<span class="hljs-string">&#x27;price&#x27;</span>);</code></pre></div><p>Eloquent ORM常用的命令均支持，用起来毫无违和感，select略有不同，会把_id查询出来。</p><p><a href="https://github.com/jenssegers/laravel-mongodb">更多命令点击查看代码仓库</a></p><p>大致也就这些了，赶紧使用起来吧！！！</p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go的并发模型</title>
    <link href="/2020/11/21/283/"/>
    <url>/2020/11/21/283/</url>
    
    <content type="html"><![CDATA[<p>介绍并发模型，我们先来说一下并发和并行。</p><h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><p>并发和并行否是为了充分利用CPU多核计算资源提出来的概念。</p><ul><li>并发指的是在同一个时间段内，多条指令在CPU上同时执行</li><li>并行值得是在同一时刻，多条指令在CPU上同时执行</li></ul><p>并发程序其实并不要求CPU具备多核计算的能力，在同一时间段内，多个线程会被分配一定的执行时间片，在CPU上被快速轮换执行。</p><h1 id="CSP并发模型"><a href="#CSP并发模型" class="headerlink" title="CSP并发模型"></a>CSP并发模型</h1><p>Go语言中实现了两种并发模型，一种是依赖于共享内存实现的线程-锁并发模型，另一种则是CSP。</p><p>CSP倡导使用通信来共享内存，它有两个关键点：</p><ol><li>并发实体，通常可以理解为执行线程，它们相互独立且可以并发执行</li><li>通道，并发实体之间通过通道发送消息，进行通信</li></ol><p>CSP 类似于我们常用的同步队列，它关注的消息传输的方式（通道），并不关注消息实体。发送者和接收者可能并不知道对方是谁，耦合度是很低的。</p><p>虽然CSP的通道提供了极大的灵活性，但作为独立的对象，它可以被任意并发实体创建、读取、写入、使用，但使用时务必注意，当一个并发实体在读取一个永远没有数据放入的通道或者把数据放入一个永远不会被读取的通道，是会被阻塞，发生死锁的。</p><h1 id="MPG线程模型"><a href="#MPG线程模型" class="headerlink" title="MPG线程模型"></a>MPG线程模型</h1><p>Go语言不但有着独特的并发编程模型，还拥有强大的用于调度goroutine、对接系统级线程的调度器。</p><p>这个调度器是Go语言运行时系统的重要组成部分，它主要负责统筹调配Go并发编程模型中的三个主要元素，即：MPG。</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>Machine</td><td>一个Machine对应一个内核线程，相当于内核线程在Go进程中的映射</td></tr><tr><td>Processor</td><td>一个Processor表示执行Go程序所必须的上下文环境，可以理解为用户代码逻辑的处理器</td></tr><tr><td>Goroutine</td><td>是对Go语言中代码片段的封装，其实是一个轻量级的用户线程</td></tr></tbody></table><p>M和P是一对一绑定的，但由于P的存在，G和M可以呈现出多对多的关系。当一个正在与某个M对接并运行着的G，需要因某个事件（比如等待I/O或锁的解除）而暂停运行的时候，调度器总会及时地发现，并把这个G与那个M分离开，以释放计算资源供那些等待运行的G使用。</p><p>可以看图，更直观：</p><p><img src="/images/post/ebfe3e28315f12a08fbb4ffaee32e046.png" alt="MPG模型"></p><hr><p>有关P和M的个数问题</p><ul><li>P的数量：</li></ul><p>由启动时环境变量$GOMAXPROCS或者是由runtime的方法GOMAXPROCS()决定。这意味着在程序执行的任意时刻都只有$GOMAXPROCS个goroutine在同时运行。</p><ul><li>M的数量:</li></ul><p>go语言本身的限制：go程序启动时，会设置M的最大数量，默认10000。但是内核很难支持这么多的线程数，所以这个限制可以忽略。</p><p>runtime/debug中的SetMaxThreads函数，设置M的最大数量。</p><p>M与P的数量没有绝对关系，一个M阻塞，P就会去创建或者切换另一个M，所以，即使P的默认数量是1，也有可能会创建很多个M出来。</p><p>P和M何时会被创建：</p><ul><li>P何时创建：在确定了P的最大数量n后，运行时系统会根据这个数量创建n个P。</li><li>M何时创建：没有足够的M来关联P并运行其中的可运行的G。比如所有的M此时都阻塞住了，而P中还有很多就绪任务，就会去寻找空闲的M，而没有空闲的，就会去创建新的M。</li></ul><hr><p>参考：</p><ul><li>《Go语言高并发于为服务实战》</li><li>《Go语言核心36讲》</li><li><a href="https://studygolang.com/articles/26921">Golang调度器GMP原理与调度全分析</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL间隙锁</title>
    <link href="/2020/10/27/MySQL-gaplock/"/>
    <url>/2020/10/27/MySQL-gaplock/</url>
    
    <content type="html"><![CDATA[<p>gap lock，也就是间隙锁，是innodb行级锁的一种，其他的还有record lock, Next-KeyLocks。</p><ul><li>行锁（Record Lock）：锁直接加在索引记录上面。</li><li>间隙锁（Gap Lock）：锁加在不存在的空闲空间，可以是两个索引记录之间，也可能是第一个索引记录之前或最后一个索引之后的空间。</li><li>Next-Key Lock：行锁与间隙锁组合起来用就叫做Next-Key Lock。</li></ul><h1 id="什么时候会取得gap-lock"><a href="#什么时候会取得gap-lock" class="headerlink" title="什么时候会取得gap lock"></a>什么时候会取得gap lock</h1><p>这和隔离级别有关,只在REPEATABLE READ或以上的隔离级别下的特定操作才会取得gap lock或nextkey lock。<br>locking reads，UPDATE和DELETE时，除了对唯一索引的唯一搜索外都会获取gap锁或next-key锁。即锁住其扫描的范围。</p><p>我们来看看实例：</p><div class="code-wrapper"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`test`</span> (  <span class="hljs-symbol">`id`</span> int(<span class="hljs-number">11</span>) DEFAULT <span class="hljs-literal">NULL</span>,  <span class="hljs-symbol">`c1`</span> int(<span class="hljs-number">11</span>) DEFAULT <span class="hljs-literal">NULL</span>,  <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`test_idx1`</span> (<span class="hljs-symbol">`id`</span>)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre></div><p>插入3条记录，</p><div class="code-wrapper"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>,<span class="hljs-number">2</span>);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>,<span class="hljs-number">3</span>);</code></pre></div><p>在REPEATABLE READ下，更新一条记录不提交，然后看看能阻塞另外的会话哪些操作。</p><p>SESSION 1:</p><p>SESSION 1中更新id=20的记录</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; begin;<span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<span class="hljs-attribute">mysql</span>&gt; update test set c<span class="hljs-number">1</span>=<span class="hljs-number">2</span> where id=<span class="hljs-number">20</span>;<span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">04</span> sec)<span class="hljs-attribute">Rows</span> matched: <span class="hljs-number">1</span>  Changed: <span class="hljs-number">1</span>  Warnings: <span class="hljs-number">0</span></code></pre></div><p>SESSION 2:</p><div class="code-wrapper"><pre><code class="hljs subunit">mysql&gt; begin;Query OK, 0 rows affected (0.00 sec)mysql&gt; insert into test values(9,4);Query OK, 1 row affected (0.00 sec)mysql&gt; insert into test values(10,4);<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; insert into test values(19,4);<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; update test set c1=22 where id=20;<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; insert into test values(20,4);<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; insert into test values(21,4);<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; insert into test values(29,4);<span class="hljs-keyword">ERROR </span>1205 (HY000): Lock wait timeout exceeded; try restarting transactionmysql&gt; insert into test values(30,4);Query OK, 1 row affected (0.01 sec)</code></pre></div><p>SESSION 2中，执行插入操作，发现[10,30)范围不能插入数据。</p><p>SESSION 1:</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; begin;<span class="hljs-attribute">mysql</span>&gt; update test set c<span class="hljs-number">1</span>=<span class="hljs-number">4</span> where id=<span class="hljs-number">21</span>;<span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)</code></pre></div><p>SESSION 2:</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span>&gt; begin;<span class="hljs-attribute">mysql</span>&gt; update test set c<span class="hljs-number">1</span>=<span class="hljs-number">22</span> where id=<span class="hljs-number">20</span>;<span class="hljs-attribute">Query</span> OK, <span class="hljs-number">1</span> row affected (<span class="hljs-number">0</span>.<span class="hljs-number">01</span> sec)<span class="hljs-attribute">mysql</span>&gt; insert into test values(<span class="hljs-number">20</span>,<span class="hljs-number">4</span>);<span class="hljs-attribute">ERROR</span> <span class="hljs-number">1205</span> (HY<span class="hljs-number">000</span>): Lock wait timeout exceeded; try restarting transaction<span class="hljs-attribute">mysql</span>&gt; update test set c<span class="hljs-number">1</span>=<span class="hljs-number">4</span> where id=<span class="hljs-number">30</span>;<span class="hljs-attribute">Query</span> OK, <span class="hljs-number">0</span> rows affected (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)</code></pre></div><p>这里呢，是去锁住了一条不存在的记录，他会锁住最近的[20,30)区间，然而与前一个例子不同的是，这里update（id = 20）是可以成功的，insert（id = 20）是不可以的。</p><p>如果SESSION 1的表扫描没有用到索引，那么gap或next-key锁住的范围是整个表，即任何值都不能插入。</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>间隙锁在InnoDB的唯一作用就是防止其它事务的插入操作，以此来达到防止幻读的发生，所以间隙锁不分什么共享锁与排它锁。</p><p>既然知道有gap lock和next key lock，我们开发中就要避免收到其影响，在并发场景下，使用锁尽量走索引，甚至是唯一索引。当然，也可以关闭间隙锁，可以把隔离级别降为读已提交Read Committed，或者开启参数innodb_locks_unsafe_for_binlog。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>layer关闭的问题</title>
    <link href="/2020/10/21/277/"/>
    <url>/2020/10/21/277/</url>
    
    <content type="html"><![CDATA[<p>layer弹出层应该是我们比较常用的一个组件了。</p><p>遇到个问题，就是弹出层加上下一个上一个，其实按理是比较好实现，点击上一个下一个按钮，调用一下layer.close即可，然而无奈的是弹出的是一个iframe，都不在一个页面，如何调用layer.close。</p><p>那可怎么办呢？</p><div class="code-wrapper"><pre><code class="hljs pgsql">var <span class="hljs-keyword">index</span>=parent.layer.getFrameIndex(<span class="hljs-keyword">window</span>.name);parent.layer.<span class="hljs-keyword">close</span>(<span class="hljs-keyword">index</span>);parent.layer.<span class="hljs-keyword">open</span>(&#123;    <span class="hljs-keyword">type</span>: <span class="hljs-number">2</span>,    title: <span class="hljs-string">&#x27;详情&#x27;</span>,    shadeClose: <span class="hljs-keyword">true</span>,    area: [<span class="hljs-string">&#x27;1000px&#x27;</span>, <span class="hljs-string">&#x27;96%&#x27;</span>],    content: &quot;...&quot;&#125;);</code></pre></div><p>如上，我们可以调用parent.layer.close，并通过parent.layer.getFrameIndex获取副页面的layer元素，这样就实现此需求了。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang的time使用</title>
    <link href="/2020/09/10/275/"/>
    <url>/2020/09/10/275/</url>
    
    <content type="html"><![CDATA[<p>time应该是开发中比较常用的库了，常见方法说明：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;a := time.Now().Unix()fmt.Println(<span class="hljs-string">&quot;时间戳---&quot;</span>, a)<span class="hljs-comment">// 2006-01-02 15:04:05 记住这一刻</span>b := time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)fmt.Println(<span class="hljs-string">&quot;格式化时间&quot;</span>, b)<span class="hljs-comment">/**</span><span class="hljs-comment">func (t Time) Add(d Duration) Time</span><span class="hljs-comment">Duration如下</span><span class="hljs-comment">const (</span><span class="hljs-comment">Nanosecond  Duration = 1</span><span class="hljs-comment">Microsecond          = 1000 * Nanosecond</span><span class="hljs-comment">Millisecond          = 1000 * Microsecond</span><span class="hljs-comment">Second               = 1000 * Millisecond</span><span class="hljs-comment">Minute               = 60 * Second</span><span class="hljs-comment">Hour                 = 60 * Minute</span><span class="hljs-comment">)</span><span class="hljs-comment"> */</span>c := time.Now().Add(time.Minute * <span class="hljs-number">3</span>)fmt.Println(<span class="hljs-string">&quot;3分钟后时间&quot;</span>, c.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>))<span class="hljs-comment">/**</span><span class="hljs-comment">func (t Time) AddDate(years int, months int, days int) Time</span><span class="hljs-comment">*/</span>d := time.Now().AddDate(<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>,<span class="hljs-number">10</span>)fmt.Println(<span class="hljs-string">&quot;时间&quot;</span>, d.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>))<span class="hljs-comment">// 返回年月日三个值</span>fmt.Println(time.Now().Date())<span class="hljs-comment">// 返回时分秒三个值</span>fmt.Println(time.Now().Clock())fmt.Println(time.Now().Year(), time.Now().Month(), time.Now().Day())fmt.Println(time.Now().Weekday(), time.Now().Hour())fmt.Println(time.Now().YearDay())fmt.Println(time.Since(d))<span class="hljs-comment">// tring返回采用如下格式字符串的格式化时间。</span><span class="hljs-comment">// &quot;2006-01-02 15:04:05.999999999 -0700 MST&quot;</span>fmt.Println(time.Now().String())time.AfterFunc(<span class="hljs-number">2</span>*time.Second, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;fmt.Println(<span class="hljs-string">&quot;hello 2s&quot;</span>)&#125;)loc, _ := time.LoadLocation(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>)<span class="hljs-keyword">const</span> longForm = <span class="hljs-string">&quot;Jan 2, 2006 at 3:04pm (MST)&quot;</span><span class="hljs-keyword">const</span> shortForm = <span class="hljs-string">&quot;2006-Jan-02&quot;</span>t, _ := time.ParseInLocation(longForm, <span class="hljs-string">&quot;Jul 9, 2012 at 5:02am (CEST)&quot;</span>, loc)fmt.Println(t)<span class="hljs-comment">/**</span><span class="hljs-comment">func ParseInLocation(layout, value string, loc *Location) (Time, error)</span><span class="hljs-comment"> */</span>t, _ = time.ParseInLocation(shortForm, <span class="hljs-string">&quot;2022-Jul-09&quot;</span>, loc)fmt.Println(t)<span class="hljs-comment">/**</span><span class="hljs-comment">func Parse(layout, value string) (Time, error)</span><span class="hljs-comment"></span><span class="hljs-comment">解析一个格式化的时间字符串并返回它代表的时间</span><span class="hljs-comment">ParseInLocation类似Parse但有两个重要的不同之处。</span><span class="hljs-comment">第一，当缺少时区信息时，Parse将时间解释为UTC时间，而ParseInLocation将返回值的Location设置为loc；</span><span class="hljs-comment">第二，当时间字符串提供了时区偏移量信息时，Parse会尝试去匹配本地时区，而ParseInLocation会去匹配loc</span><span class="hljs-comment">*/</span>t, _ = time.Parse(longForm, <span class="hljs-string">&quot;Feb 3, 2023 at 7:54pm (PST)&quot;</span>)fmt.Println(t)t, _ = time.Parse(shortForm, <span class="hljs-string">&quot;2020-Feb-03&quot;</span>)fmt.Println(t)ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)timeout := time.After(time.Second * <span class="hljs-number">2</span>)timer := time.NewTimer(time.Second * <span class="hljs-number">4</span>) <span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">for</span> &#123;<span class="hljs-comment">// i++</span><span class="hljs-keyword">select</span> &#123;<span class="hljs-keyword">case</span> &lt;- ch:fmt.Println(<span class="hljs-string">&quot;channel close&quot;</span>)<span class="hljs-keyword">return</span><span class="hljs-keyword">case</span> &lt;- timer.C:fmt.Println(<span class="hljs-string">&quot;4s的NewTimer定时任务&quot;</span>)<span class="hljs-keyword">case</span> &lt;- timeout:fmt.Println(<span class="hljs-string">&quot;4s定时输出&quot;</span>)<span class="hljs-keyword">case</span> &lt;- time.After(time.Second * <span class="hljs-number">6</span>):fmt.Println(<span class="hljs-string">&quot;6s到了&quot;</span>) <span class="hljs-comment">// default:</span><span class="hljs-comment">// //Sleep 1秒，参数就是上面的Duration</span><span class="hljs-comment">// time.Sleep(time.Second * 1)</span><span class="hljs-comment">// fmt.Println(&quot;go 1s&quot;)</span>&#125;&#125;&#125;()time.Sleep(time.Second * <span class="hljs-number">15</span>)fmt.Println(<span class="hljs-string">&quot;close----&quot;</span>)<span class="hljs-built_in">close</span>(ch)time.Sleep(time.Second * <span class="hljs-number">2</span>)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel6配合MaatwebsiteExcel实现Excel导出</title>
    <link href="/2020/08/31/272/"/>
    <url>/2020/08/31/272/</url>
    
    <content type="html"><![CDATA[<p>相比导入，项目中导出场景更多，估摸着现在有十多个导出了，之前写了导入，这会才把导出补上。</p><p>安装之前说过，这里说一下配置，虽然已有默认配置，但还是有修改配置的场景，所以建议生成配置文件。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//生成config/excel.php</span>php artisan vendor:publish --provider=<span class="hljs-string">&quot;Maatwebsite\Excel\ExcelServiceProvider&quot;</span></code></pre></div><p>配置只提一个，其他注释蛮细的，</p><div class="code-wrapper"><pre><code class="hljs dart"><span class="hljs-string">&#x27;csv&#x27;</span> =&gt; [<span class="hljs-string">&#x27;delimiter&#x27;</span>              =&gt; <span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;enclosure&#x27;</span>              =&gt; <span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;line_ending&#x27;</span>            =&gt; PHP_EOL,<span class="hljs-comment">// 导出csv中文乱码，把use_bom设为true即可</span><span class="hljs-string">&#x27;use_bom&#x27;</span>                =&gt; <span class="hljs-keyword">true</span>,<span class="hljs-string">&#x27;include_separator_line&#x27;</span> =&gt; <span class="hljs-keyword">false</span>,<span class="hljs-string">&#x27;excel_compatibility&#x27;</span>    =&gt; <span class="hljs-keyword">false</span>,],</code></pre></div><p>接下来，来完成一个导出的demo说明下常用的一些点。</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><div class="code-wrapper"><pre><code class="hljs php">php artisan make:export MultiExport</code></pre></div><p>生成文件如下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exports</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">FromCollection</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiExport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FromCollection</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> \Illuminate\Support\Collection</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collection</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//</span>    &#125;&#125;</code></pre></div><ul><li>自定义sheet，增加 WithTitle</li><li>自定义列名，增加WithHeadings</li><li>不想使用Collection，替换FromCollection使用FromArray</li><li>多个sheet，替换FromCollection使用WithMultipleSheets</li></ul><p>经过改造：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 多重导出</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exports</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exports</span>\<span class="hljs-title">MultiExportA</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exports</span>\<span class="hljs-title">MultiExportB</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">WithMultipleSheets</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiExport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WithMultipleSheets</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$date</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$date</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;date = <span class="hljs-variable">$date</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sheets</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$sheets</span> = [];        <span class="hljs-variable">$sheets</span>[] = <span class="hljs-keyword">new</span> MultiExportA(<span class="hljs-keyword">$this</span>-&gt;date);        <span class="hljs-variable">$sheets</span>[] = <span class="hljs-keyword">new</span> MultiExportB(<span class="hljs-keyword">$this</span>-&gt;date);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$sheets</span>;    &#125;&#125;---<span class="hljs-comment">// MultiExportA，MultiExportB类比即可</span><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exports</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">FromArray</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">WithHeadings</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">WithTitle</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">ExportA</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultiExportA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FromArray</span>, <span class="hljs-title">WithTitle</span>, <span class="hljs-title">WithHeadings</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$date</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$date</span>, <span class="hljs-variable">$cityId</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;date = <span class="hljs-variable">$date</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">headings</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> [            <span class="hljs-string">&#x27;ID&#x27;</span>,            <span class="hljs-string">&#x27;名称&#x27;</span>,            <span class="hljs-string">&#x27;价格&#x27;</span>,            <span class="hljs-string">&#x27;手机&#x27;</span>        ];    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> array</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">array</span>(<span class="hljs-params"></span>) : <span class="hljs-title">array</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$data</span> = ExportA::where(<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;date)            -&gt;get()            -&gt;toArray();        <span class="hljs-variable">$ret</span> = [];        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val</span>) &#123;            <span class="hljs-comment">// 一段神奇的代码计算出了价格</span>            <span class="hljs-variable">$price</span> = ...;            <span class="hljs-variable">$ret</span>[] = [                <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$val</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&quot;\t&quot;</span>,                <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-variable">$val</span>[<span class="hljs-string">&#x27;name&#x27;</span>],                <span class="hljs-string">&#x27;price&#x27;</span> =&gt; <span class="hljs-variable">$price</span>,                <span class="hljs-comment">// 转换为文本，编码excel使用了科学计数法</span>                <span class="hljs-string">&#x27;mobile&#x27;</span> =&gt; <span class="hljs-variable">$val</span>[<span class="hljs-string">&#x27;mobile&#x27;</span>].<span class="hljs-string">&quot;\t&quot;</span>,            ];        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">title</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;表格A&#x27;</span>;    &#125;&#125;</code></pre></div><p>使用</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 保存</span><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> MultiExport(<span class="hljs-variable">$date</span>);Excel::store(<span class="hljs-variable">$obj</span>, <span class="hljs-string">&#x27;MultiExport&#x27;</span>.<span class="hljs-variable">$date</span>.<span class="hljs-string">&#x27;.xlsx&#x27;</span>);<span class="hljs-comment">// 下载csv</span>Excel::download(<span class="hljs-variable">$obj</span>, <span class="hljs-string">&#x27;MultiExport&#x27;</span>.<span class="hljs-variable">$date</span>.<span class="hljs-string">&#x27;.csv&#x27;</span>, \Maatwebsite\Excel\Excel::CSV, [<span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-string">&#x27;text/csv&#x27;</span>]);</code></pre></div><h2 id="问题思考"><a href="#问题思考" class="headerlink" title="问题思考"></a>问题思考</h2><p>当数据量过大的时候，导出时很可能会内存溢出了。建议：</p><ul><li>使用其他高性能的组件，或者使用原生代码流式输出到浏览器，也可以直接使用其他语言（比如go）编写</li><li>文件过大，Excel打开大数据量文件也很鸡肋，容易卡死甚至崩溃，尝试分文件导出，比如1w一个文件</li><li>部分导出过程可能有计算，可以提前计算好，导出时直接读表，使用LazyCollection， <a href="https://learnku.com/laravel/t/42018" title="使用 Lazy Collections 来提高 Laravel Excel 读取的性能（轻松支持百万数据）">使用 Lazy Collections 来提高 Laravel Excel 读取的性能（轻松支持百万数据）</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel常用代码合集</title>
    <link href="/2020/08/30/270/"/>
    <url>/2020/08/30/270/</url>
    
    <content type="html"><![CDATA[<p>用Laravel也有不短的时间了，也用过不少版本了，以下代码是在日常项目中收集，作为笔记，也分享出来，希望对你有点用处。<br>注：版本没标注，若有不兼容的问题，微调即可。</p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>不太习惯单独弄个Request验证类，比较习惯下面的写法：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Validator</span>;<span class="hljs-variable">$inputData</span> = <span class="hljs-variable">$request</span>-&gt;only([<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-string">&#x27;draw_id&#x27;</span>]);    <span class="hljs-variable">$messages</span> = [    <span class="hljs-string">&#x27;required&#x27;</span>=&gt;<span class="hljs-string">&#x27;:attribute为必填项&#x27;</span>,         <span class="hljs-string">&#x27;int&#x27;</span>=&gt;<span class="hljs-string">&#x27;:attribute参数类型错误&#x27;</span>,         <span class="hljs-string">&#x27;max&#x27;</span>=&gt;<span class="hljs-string">&#x27;:attribute长度不得超过 :size&#x27;</span>,    ];    <span class="hljs-variable">$validator</span> = Validator::make(<span class="hljs-variable">$inputData</span>, [<span class="hljs-string">&#x27;draw_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;required|int&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,<span class="hljs-string">&#x27;mobile&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,<span class="hljs-string">&#x27;address&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,], <span class="hljs-variable">$messages</span>,[<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-string">&#x27;收货人姓名&#x27;</span>,<span class="hljs-string">&#x27;mobile&#x27;</span>=&gt;<span class="hljs-string">&#x27;手机号码&#x27;</span>,<span class="hljs-string">&#x27;address&#x27;</span>=&gt;<span class="hljs-string">&#x27;收货地址&#x27;</span>,]);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$validator</span>-&gt;fails()) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::response([], current(<span class="hljs-variable">$validator</span>-&gt;errors()-&gt;all()), <span class="hljs-number">2</span>);&#125;</code></pre></div><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><h2 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h2><ul><li><p>一对一</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// Model定义，关联外键</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><span class="hljs-class"></span>&#123;    ...        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userIntegral</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasOne(<span class="hljs-string">&#x27;App\Models\UserIntegral&#x27;</span>, <span class="hljs-string">&#x27;user_id&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>);    &#125;&#125;<span class="hljs-comment">// 使用with查询</span>(<span class="hljs-keyword">new</span> User())-&gt;with(<span class="hljs-string">&#x27;userIntegral&#x27;</span>)-&gt;orderBy(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>)-&gt;paginate(<span class="hljs-variable">$limit</span>);</code></pre></div></li><li><p>一对多</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//Model</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Database</span>\<span class="hljs-title">Eloquent</span>\<span class="hljs-title">Model</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hotel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">orders</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;hasMany(<span class="hljs-string">&#x27;App\Models\Order&#x27;</span>);    &#125;&#125;<span class="hljs-comment">//使用，比如查询某个Hotel下status=30的Order</span><span class="hljs-variable">$hotel</span> = Hotel::with([<span class="hljs-string">&#x27;orders&#x27;</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$query</span></span>) </span>&#123;        <span class="hljs-variable">$query</span>-&gt;where(<span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-number">30</span>);    &#125;])-&gt;find(<span class="hljs-number">4</span>);</code></pre></div></li></ul><h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><p>这个可以参见之前的文章<a href="https://learnku.com/articles/39988" title="Laravel 统一错误处理为 JSON">Laravel 统一错误处理为 JSON</a></p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="失败队列入库"><a href="#失败队列入库" class="headerlink" title="失败队列入库"></a>失败队列入库</h2><ul><li><p>生成表<br>生成failed_jobs表</p><div class="code-wrapper"><pre><code class="hljs cpp">php artisan queue:failed-tablephp artisan migrate</code></pre></div></li><li><p>单独处理</p></li></ul><p>可以在Job中单独处理失败，Job失败也会写入上面生成的failed_jobs表</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment">* 任务失败的处理过程</span><span class="hljs-comment">*</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span>  Exception  $exception</span><span class="hljs-comment">* [<span class="hljs-doctag">@return</span>](https://learnku.com/users/31554) void</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">failed</span>(<span class="hljs-params"><span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span></span>)</span><span class="hljs-function"></span>&#123;<span class="hljs-comment">// 处理</span>&#125;</code></pre></div><h2 id="重试队列"><a href="#重试队列" class="headerlink" title="重试队列"></a>重试队列</h2><p>有时候代码有漏洞可能会有队列执行失败的状况，这时候我们就需要重试。</p><ul><li>查看所有失败<div class="code-wrapper"><pre><code class="hljs shell">php artisan queue:failed</code></pre></div></li><li>重试所有失败<div class="code-wrapper"><pre><code class="hljs shell">php artisan queue:retry all</code></pre></div></li><li>重试单个失败<div class="code-wrapper"><pre><code class="hljs shell">php artisan queue:retry 13</code></pre></div></li><li>清空失败（重要的队列数据万不可这么操作）<div class="code-wrapper"><pre><code class="hljs arduino">php artisan queue:flush</code></pre></div></li></ul><p>另外，手动去操作确实不太方便，你可以设置个cron，定时重试所有失败，但务必要注意消息提醒，以免队列一直重试一直失败，往复运行，影响了正常的队列性能。</p><h1 id="其他常用代码"><a href="#其他常用代码" class="headerlink" title="其他常用代码"></a>其他常用代码</h1><h2 id="文件上传OSS"><a href="#文件上传OSS" class="headerlink" title="文件上传OSS"></a>文件上传OSS</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Controller</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Storage</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Validator</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">OSS</span>\<span class="hljs-title">OssClient</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">OSS</span>\<span class="hljs-title">Core</span>\<span class="hljs-title">OssException</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$request</span>-&gt;file(<span class="hljs-string">&#x27;file&#x27;</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span>-&gt;isValid()) &#123;            <span class="hljs-variable">$ext</span> = <span class="hljs-variable">$file</span>-&gt;getClientOriginalExtension();            <span class="hljs-variable">$realPath</span> = <span class="hljs-variable">$file</span>-&gt;getRealPath();            <span class="hljs-variable">$filepath</span> = config(<span class="hljs-string">&#x27;app.env&#x27;</span>).<span class="hljs-string">&#x27;/&#x27;</span> . md5(uniqid(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">true</span>));            <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;uploadOss(<span class="hljs-variable">$realPath</span>, <span class="hljs-variable">$filepath</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$ext</span>);            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;code&#x27;</span>]) &#123;                <span class="hljs-keyword">return</span> response([<span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]]);            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">return</span> response([<span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-string">&#x27;上传成功&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span> =&gt; [                    <span class="hljs-string">&#x27;filepath&#x27;</span> =&gt; <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;url&#x27;</span>],                    <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <span class="hljs-variable">$request</span>-&gt;all()                ]]);            &#125;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 上传oss</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $filePath  当前路径</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $object   预定义文件名，可含文件夹</span><span class="hljs-comment">     * [<span class="hljs-doctag">@return</span>](https://learnku.com/users/31554) array</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadOss</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$object</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$accessKeyId</span> = config(<span class="hljs-string">&#x27;filesystems.disks&#x27;</span>)[config(<span class="hljs-string">&#x27;filesystems.default&#x27;</span>)][<span class="hljs-string">&#x27;access_key&#x27;</span>];        <span class="hljs-variable">$accessKeySecret</span> = config(<span class="hljs-string">&#x27;filesystems.disks&#x27;</span>)[config(<span class="hljs-string">&#x27;filesystems.default&#x27;</span>)][<span class="hljs-string">&#x27;secret_key&#x27;</span>];        <span class="hljs-variable">$endpoint</span> = config(<span class="hljs-string">&#x27;filesystems.disks&#x27;</span>)[config(<span class="hljs-string">&#x27;filesystems.default&#x27;</span>)][<span class="hljs-string">&#x27;endpoint&#x27;</span>];        <span class="hljs-variable">$bucket</span>= config(<span class="hljs-string">&#x27;filesystems.disks&#x27;</span>)[config(<span class="hljs-string">&#x27;filesystems.default&#x27;</span>)][<span class="hljs-string">&#x27;bucket&#x27;</span>];        <span class="hljs-variable">$url</span> = config(<span class="hljs-string">&#x27;filesystems.disks&#x27;</span>)[config(<span class="hljs-string">&#x27;filesystems.default&#x27;</span>)][<span class="hljs-string">&#x27;host&#x27;</span>];        <span class="hljs-keyword">try</span>&#123;            <span class="hljs-variable">$ossClient</span> = <span class="hljs-keyword">new</span> OssClient(<span class="hljs-variable">$accessKeyId</span>, <span class="hljs-variable">$accessKeySecret</span>, <span class="hljs-variable">$endpoint</span>);            <span class="hljs-variable">$ossClient</span>-&gt;uploadFile(<span class="hljs-variable">$bucket</span>, <span class="hljs-variable">$object</span>, <span class="hljs-variable">$filePath</span>);            <span class="hljs-keyword">return</span> [                <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">0</span>,                <span class="hljs-string">&#x27;data&#x27;</span> =&gt; [                    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$object</span>                ]            ];        &#125; <span class="hljs-keyword">catch</span>(OssException <span class="hljs-variable">$e</span>) &#123;            <span class="hljs-keyword">return</span> [                <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-number">1</span>,                <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-variable">$e</span>-&gt;getMessage()            ];        &#125;    &#125;&#125;<span class="hljs-comment">// -------</span><span class="hljs-comment">// 配置</span><span class="hljs-string">&#x27;oss&#x27;</span> =&gt; [  <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;oss&#x27;</span>,  <span class="hljs-string">&#x27;root&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,  <span class="hljs-string">&#x27;access_key&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_ACCESS_KEY&#x27;</span>),  <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_SECRET_KEY&#x27;</span>),  <span class="hljs-string">&#x27;endpoint&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_ENDPOINT&#x27;</span>), <span class="hljs-comment">// 使用 ssl 这里设置如: https://oss-cn-beijing.aliyuncs.com</span>  <span class="hljs-string">&#x27;bucket&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_BUCKET&#x27;</span>),  <span class="hljs-string">&#x27;isCName&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_IS_CNAME&#x27;</span>, <span class="hljs-literal">false</span>), <span class="hljs-comment">// 如果 isCname 为 false，endpoint 应配置 oss 提供的域名如：`oss-cn-beijing.aliyuncs.com`，否则为自定义域名，，cname 或 cdn 请自行到阿里 oss 后台配置并绑定 bucket</span>  <span class="hljs-string">&#x27;host&#x27;</span> =&gt; env(<span class="hljs-string">&#x27;OSS_HOST&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)],</code></pre></div><h2 id="json输出"><a href="#json输出" class="headerlink" title="json输出"></a>json输出</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span>;<span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;ok&#x27;</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">response</span>(<span class="hljs-params"><span class="hljs-variable">$data</span> = [], <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$data</span>)) &#123;        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">new</span> \<span class="hljs-built_in">stdClass</span>();    &#125;    <span class="hljs-keyword">return</span> response()-&gt;json([        <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-variable">$code</span>? <span class="hljs-variable">$code</span> : <span class="hljs-built_in">self</span>::<span class="hljs-variable">$code</span>,        <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-variable">$msg</span>? <span class="hljs-variable">$msg</span> : <span class="hljs-built_in">self</span>::<span class="hljs-variable">$msg</span>,        <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <span class="hljs-variable">$data</span>,    ], <span class="hljs-number">200</span>);&#125;</code></pre></div><h2 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h2><ul><li><p>普通版本</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// $autoDel字段删除，$ttl 过期时间，秒</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">processLock</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$autoDel</span> = <span class="hljs-literal">true</span>, <span class="hljs-variable">$ttl</span> = <span class="hljs-number">60</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;processLock:&#x27;</span>.<span class="hljs-variable">$key</span>;<span class="hljs-comment">// 不同版本或redis扩展，会有略微不同，自行调整下代码即可</span>    <span class="hljs-keyword">if</span> (Redis::Command(<span class="hljs-string">&#x27;set&#x27;</span>, [<span class="hljs-variable">$key</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;EX&#x27;</span>, <span class="hljs-variable">$ttl</span>, <span class="hljs-string">&#x27;NX&#x27;</span>])) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$autoDel</span>) &#123;            register_shutdown_function(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$key</span></span>) </span>&#123;                Redis::del(<span class="hljs-variable">$key</span>);            &#125;);        &#125;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div></li><li><p>lua版本</p></li></ul><div class="code-wrapper"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getScript</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&lt;&lt;&lt;LUA</span><span class="hljs-string">        local ret = redis.call(&quot;setnx&quot;, KEYS[1], ARGV[1])</span><span class="hljs-string">        if ret == 1 then</span><span class="hljs-string">            return redis.call(&quot;expire&quot;, KEYS[1], ARGV[2])</span><span class="hljs-string">        else</span><span class="hljs-string">            return 0</span><span class="hljs-string">        end</span><span class="hljs-string">LUA</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processLock</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$autoDel</span> = <span class="hljs-literal">true</span>, <span class="hljs-variable">$ttl</span> = <span class="hljs-number">60</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (Redis::eval(<span class="hljs-keyword">$this</span>-&gt;getScript(), <span class="hljs-number">1</span>, <span class="hljs-variable">$key</span>, <span class="hljs-number">1</span>, <span class="hljs-variable">$ttl</span>)) &#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$autoDel</span>) &#123;register_shutdown_function(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$key</span></span>) </span>&#123;Redis::del(<span class="hljs-variable">$key</span>);&#125;);&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div><p>说明：Redis::eval行第一个1表示key的数量，是为了区分KEYS和ARGV。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p><a href="https://learnku.com/articles/39993" title="Laravel 配合 jwt 使用">Laravel 配合 jwt 使用</a></p><h2 id="系统通知到钉钉"><a href="#系统通知到钉钉" class="headerlink" title="系统通知到钉钉"></a>系统通知到钉钉</h2><p>我们可以使用队列，把一些重要的通知投到钉钉，主要代码如下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Jobs</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">Queueable</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">Dispatchable</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">InteractsWithQueue</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Log</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Client</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemNotify</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithQueue</span>, <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$title</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$type</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$robot</span>;    <span class="hljs-keyword">const</span> DD_URL = <span class="hljs-string">&#x27;https://oapi.dingtalk.com&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Create a new job instance.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $title</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $content</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $type text, markdown</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $robot</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$title</span>, <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;markdown&#x27;</span>, <span class="hljs-variable">$robot</span> = <span class="hljs-number">1</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// 单独使用SystemNotify队列</span>        <span class="hljs-keyword">$this</span>-&gt;queue = <span class="hljs-string">&#x27;SystemNotify&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;title = <span class="hljs-variable">$title</span>;        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-variable">$content</span>;        <span class="hljs-keyword">$this</span>-&gt;type = <span class="hljs-variable">$type</span>;        <span class="hljs-keyword">$this</span>-&gt;robot = <span class="hljs-variable">$robot</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Execute the job.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// 可以不使用关键字，建议钉钉机器人使用IP段设置，更为安全</span>        <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">$this</span>-&gt;type)&#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;markdown&#x27;</span>:                <span class="hljs-variable">$params</span> = [                    <span class="hljs-string">&#x27;msgtype&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;type,                    <span class="hljs-keyword">$this</span>-&gt;type =&gt; [                        <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;title.<span class="hljs-string">&#x27;[关键字]&#x27;</span>,                        <span class="hljs-string">&#x27;text&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;content                    ]                ];                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">default</span>:                <span class="hljs-variable">$params</span> = [                    <span class="hljs-string">&#x27;msgtype&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;type,                    <span class="hljs-keyword">$this</span>-&gt;type =&gt; [                        <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;content.<span class="hljs-string">&#x27;[关键字]&#x27;</span>,                    ]                ];                <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-variable">$params</span> = json_encode(<span class="hljs-variable">$params</span>, JSON_UNESCAPED_UNICODE);        <span class="hljs-variable">$uri</span> = <span class="hljs-built_in">self</span>::URL_MAPPING[<span class="hljs-keyword">$this</span>-&gt;robot];        <span class="hljs-keyword">$this</span>-&gt;getClient()-&gt;request(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-variable">$uri</span>, [            <span class="hljs-string">&#x27;headers&#x27;</span> =&gt; [                <span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span>            ],            <span class="hljs-string">&#x27;body&#x27;</span> =&gt; <span class="hljs-variable">$params</span>        ]);    &#125;    <span class="hljs-comment">// 对应不同的钉钉群通知，修改access_token参数即可</span>    <span class="hljs-keyword">const</span> URL_MAPPING = [        <span class="hljs-number">1</span> =&gt; <span class="hljs-string">&#x27;/robot/send?access_token=@1&#x27;</span>,        <span class="hljs-number">2</span> =&gt; <span class="hljs-string">&#x27;/robot/send?access_token=@2&#x27;</span>    ];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getClient</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Client([            <span class="hljs-string">&#x27;base_uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;https://oapi.dingtalk.com&#x27;</span>,            <span class="hljs-string">&#x27;timeout&#x27;</span>  =&gt; <span class="hljs-number">30</span>,            <span class="hljs-string">&#x27;verify&#x27;</span> =&gt; <span class="hljs-literal">false</span>        ]);    &#125;&#125;</code></pre></div><p>说明：通知内容可以自定义，添加智能机器人操作比较简单就不赘述了</p><ul><li><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq" title="钉钉文档">钉钉文档</a></li></ul><h2 id="后台操作日志"><a href="#后台操作日志" class="headerlink" title="后台操作日志"></a>后台操作日志</h2><p><a href="https://learnku.com/articles/43900" title="利用 Laravel 中间件给后台加个操作日志">利用 Laravel 中间件给后台加个操作日志</a></p><h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><p><a href="https://learnku.com/articles/42849" title="Laravel6 配合 Maatwebsite\Excel 实现 Excel 导入">Laravel6 配合 Maatwebsite\Excel 实现 Excel 导入</a></p><p><a href="https://learnku.com/articles/49392" title="Laravel6 配合 Maatwebsite\Excel 实现 Excel 导出">Laravel6 配合 Maatwebsite\Excel 实现 Excel 导出</a></p><p>陆续补充中…</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近使用gin的总结</title>
    <link href="/2020/07/20/261/"/>
    <url>/2020/07/20/261/</url>
    
    <content type="html"><![CDATA[<p>最近有新项目是利用gin开发的，过程中遇到一些问题，总结一下，作为笔记，也希望能帮助到你。</p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>中间件：</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Cors</span><span class="hljs-params">()</span> <span class="hljs-title">gin</span>.<span class="hljs-title">HandlerFunc</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<span class="hljs-comment">// 这里可以用*，也可以用你指定的域名</span>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<span class="hljs-comment">// 允许头部参数</span>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Content-Type,AccessToken,X-CSRF-Token, Authorization, Token&quot;</span>)<span class="hljs-comment">// 允许的方法</span>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;POST, GET, OPTIONS&quot;</span>)c.Header(<span class="hljs-string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="hljs-string">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type&quot;</span>)c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>) method := c.Request.Method<span class="hljs-comment">//放行OPTIONS方法</span><span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;OPTIONS&quot;</span> &#123;c.AbortWithStatus(http.StatusOK)&#125;<span class="hljs-comment">// 处理请求</span>c.Next()&#125;&#125;</code></pre></div><p>然后在路由中加入：</p><div class="code-wrapper"><pre><code class="hljs ada">// g : *<span class="hljs-type">gin.Engine</span>g.<span class="hljs-keyword">Use</span>(Cors())</code></pre></div><p>当然也可以在Nginx层配置，可自行查阅，我就不展开了。</p><h2 id="使用多个中间件"><a href="#使用多个中间件" class="headerlink" title="使用多个中间件"></a>使用多个中间件</h2><div class="code-wrapper"><pre><code class="hljs css">// g : *gin.Engineg.<span class="hljs-built_in">Use</span>(<span class="hljs-built_in">Cors</span>())g.<span class="hljs-built_in">Use</span>(<span class="hljs-built_in">Session</span>())</code></pre></div><h2 id="中间件终止请求"><a href="#中间件终止请求" class="headerlink" title="中间件终止请求"></a>中间件终止请求</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Auth</span><span class="hljs-params">()</span> <span class="hljs-title">gin</span>.<span class="hljs-title">HandlerFunc</span></span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;uid := c.MustGet(<span class="hljs-string">&quot;uid&quot;</span>).(<span class="hljs-keyword">int</span>)<span class="hljs-keyword">if</span> uid == <span class="hljs-number">0</span> &#123;c.Abort()controller.SendResponse(c, <span class="hljs-number">401</span>, <span class="hljs-string">&quot;未登录&quot;</span>, <span class="hljs-literal">nil</span>)<span class="hljs-comment">// return可忽略</span><span class="hljs-keyword">return</span>&#125; <span class="hljs-keyword">else</span> &#123;c.Next()&#125;    &#125;&#125;</code></pre></div><h2 id="session使用"><a href="#session使用" class="headerlink" title="session使用"></a>session使用</h2><div class="code-wrapper"><pre><code class="hljs stylus">package utilimport (<span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions/redis&quot;</span>redisGo <span class="hljs-string">&quot;github.com/gomodule/redigo/redis&quot;</span><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-comment">// 启动session</span>func SessionStart(g *gin<span class="hljs-selector-class">.Engine</span>, RedisClient *redisGo<span class="hljs-selector-class">.Pool</span>, key ...<span class="hljs-selector-attr">[]</span>byte)  &#123;store, _ := redis<span class="hljs-selector-class">.NewStoreWithPool</span>(RedisClient, <span class="hljs-selector-attr">[]</span>byte(viper<span class="hljs-selector-class">.GetString</span>(<span class="hljs-string">&quot;name&quot;</span>)))redis<span class="hljs-selector-class">.SetKeyPrefix</span>(store, <span class="hljs-string">&quot;session_&quot;</span>)g<span class="hljs-selector-class">.Use</span>(sessions<span class="hljs-selector-class">.Sessions</span>(viper<span class="hljs-selector-class">.GetString</span>(<span class="hljs-string">&quot;name&quot;</span>), store))&#125;<span class="hljs-comment">// 使用session</span>session  := sessions<span class="hljs-selector-class">.Default</span>(c)session<span class="hljs-selector-class">.Set</span>(<span class="hljs-string">&quot;uid&quot;</span>, uid)uid  := session<span class="hljs-selector-class">.Get</span>(<span class="hljs-string">&quot;uid&quot;</span>)</code></pre></div><h2 id="上传oss"><a href="#上传oss" class="headerlink" title="上传oss"></a>上传oss</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;github.com/aliyun/aliyun-oss-go-sdk/oss&quot;</span><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">upload</span><span class="hljs-params">(localPath <span class="hljs-keyword">string</span>, iType <span class="hljs-keyword">int</span>, Name <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span></span> &#123;client, err := oss.New(viper.GetString(<span class="hljs-string">&quot;oss.end_point&quot;</span>), viper.GetString(<span class="hljs-string">&quot;oss.access_key_id&quot;</span>), viper.GetString(<span class="hljs-string">&quot;oss.access_key_secret&quot;</span>))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span>     &#125;    <span class="hljs-comment">// 获取存储空间。</span>    bucket, err := client.Bucket(viper.GetString(<span class="hljs-string">&quot;oss.bucket&quot;</span>))    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span>     &#125;    <span class="hljs-comment">// 上传本地文件。</span>ossPath := fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, <span class="hljs-string">&quot;qiling&quot;</span>, Name)    err = bucket.PutObjectFromFile(ossPath, localPath)    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span>    &#125;path = fmt.Sprintf(<span class="hljs-string">&quot;%s/%s&quot;</span>, viper.GetString(<span class="hljs-string">&quot;oss.hosts&quot;</span>), ossPath)os.Remove(localPath)<span class="hljs-keyword">return</span>&#125;</code></pre></div><h2 id="几个实用的方法"><a href="#几个实用的方法" class="headerlink" title="几个实用的方法"></a>几个实用的方法</h2><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">import</span>  (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;crypto/md5&quot;</span><span class="hljs-string">&quot;bytes&quot;</span><span class="hljs-string">&quot;regexp&quot;</span>)<span class="hljs-comment">// md5</span><span class="hljs-function"><span class="hljs-keyword">func</span>  <span class="hljs-title">Md5</span><span class="hljs-params">(str <span class="hljs-keyword">string</span>)</span>  <span class="hljs-title">string</span></span>  &#123;<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%x&quot;</span>, md5.Sum([]<span class="hljs-keyword">byte</span>(str)));&#125;<span class="hljs-comment">// 判断是不是真实手机号码</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsMobile</span><span class="hljs-params">(mobile <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;    result, _ := regexp.MatchString(<span class="hljs-string">`^(1\d&#123;10&#125;)$`</span>, mobile)    <span class="hljs-keyword">if</span> result &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;&#125;<span class="hljs-comment">// 合并字符串</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StrCombine</span><span class="hljs-params">(str ...<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">var</span> bt bytes.Buffer<span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> str &#123;bt.WriteString(arg)    &#125;<span class="hljs-comment">//获得拼接后的字符串</span><span class="hljs-keyword">return</span> bt.String()&#125;</code></pre></div><p>大概就这些了，后面有可以分析的再补充。</p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用vue-element-admin的一些总结</title>
    <link href="/2020/07/14/262/"/>
    <url>/2020/07/14/262/</url>
    
    <content type="html"><![CDATA[<p>最近开发的项目后台基于vue-element-admin开发，在逐步完善的过程中遇到了一些问题，特此总结，希望能对你有所帮助。</p><p>先上链接，真的很好用，安利一下，链接如下：</p><ul><li>  <a href="https://link.zhihu.com/?target=https://panjiachen.gitee.io/vue-element-admin-site/zh/">A magical vue admin</a></li></ul><p>基本上常用的不常用的功能都有，就不多说了，有兴趣链接直达，正式开始正文。</p><h3 id="修改菜单图标为elementUI图标"><a href="#修改菜单图标为elementUI图标" class="headerlink" title="修改菜单图标为elementUI图标"></a>修改菜单图标为elementUI图标</h3><p>官方的svg图标确实比较少，添加我也觉得繁琐，另外，既然集成了elementUI，直接用elementUI图标就好了。</p><p>改：</p><div class="code-wrapper"><pre><code class="hljs stylus">修改菜单<span class="hljs-attribute">icon</span>为elementUI图标：<span class="hljs-comment">// 文件地址：src\layout\components\Sidebar\Item.vue</span><span class="hljs-comment">// if (icon) &#123;</span><span class="hljs-comment">//   vnodes.push(&lt;svg-icon icon-class=&#123;icon&#125;/&gt;)</span><span class="hljs-comment">// &#125;</span><span class="hljs-keyword">if</span> (<span class="hljs-attribute">icon</span>) &#123;  vnodes<span class="hljs-selector-class">.push</span>(&lt;<span class="hljs-selector-tag">i</span> class=&#123;<span class="hljs-attribute">icon</span>&#125;&gt;&lt;/i&gt;)&#125;</code></pre></div><h3 id="关闭eslint"><a href="#关闭eslint" class="headerlink" title="关闭eslint"></a>关闭eslint</h3><p>官网已有答案</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">// vue.config.js</span>lintOnSave: <span class="hljs-literal">false</span></code></pre></div><p>but，如果你使用的是git管理代码，会发现commit的时候依旧会触发eslint。</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> package.json <span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;    <span class="hljs-string">&quot;src/**/*.&#123;js,vue&#125;&quot;</span>: [      <span class="hljs-string">&quot;eslint --fix&quot;</span>, <span class="hljs-regexp">//</span> 删除这一行      <span class="hljs-string">&quot;git add&quot;</span>    ]  &#125;,</code></pre></div><h3 id="增加本地环境变量"><a href="#增加本地环境变量" class="headerlink" title="增加本地环境变量"></a>增加本地环境变量</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> package.json <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;local&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve --mode local&quot;</span>,    ...  &#125;,</code></pre></div><p>复制.env.production为.env.local，自定义配置后，运行：</p><div class="code-wrapper"><pre><code class="hljs applescript">yarn <span class="hljs-built_in">run</span> <span class="hljs-keyword">local</span></code></pre></div><h3 id="缓存页面"><a href="#缓存页面" class="headerlink" title="缓存页面"></a>缓存页面</h3><p>想缓存的页面：</p><div class="code-wrapper"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><span class="xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;cacheIndex&quot;</span>,</span></code></pre></div><p>加入cachedViews</p><div class="code-wrapper"><pre><code class="hljs pf">// src\store\modules\tagsView.js<span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = &#123;  visitedViews: [],  cachedViews: [    &#x27;cacheIndex&#x27;  ]&#125;</code></pre></div><p>最近开发的项目后台基于vue-element-admin开发，在逐步完善的过程中遇到了一些问题，特此总结，希望能对你有所帮助。</p><p>先上链接，真的很好用，安利一下，链接如下：</p><ul><li>  <a href="https://link.zhihu.com/?target=https://panjiachen.gitee.io/vue-element-admin-site/zh/">A magical vue admin</a></li></ul><p>基本上常用的不常用的功能都有，就不多说了，有兴趣链接直达，正式开始正文。</p><h3 id="修改菜单图标为elementUI图标-1"><a href="#修改菜单图标为elementUI图标-1" class="headerlink" title="修改菜单图标为elementUI图标"></a>修改菜单图标为elementUI图标</h3><p>官方的svg图标确实比较少，添加我也觉得繁琐，另外，既然集成了elementUI，直接用elementUI图标就好了。</p><p>改：</p><div class="code-wrapper"><pre><code class="hljs stylus">修改菜单<span class="hljs-attribute">icon</span>为elementUI图标：<span class="hljs-comment">// 文件地址：src\layout\components\Sidebar\Item.vue</span><span class="hljs-comment">// if (icon) &#123;</span><span class="hljs-comment">//   vnodes.push(&lt;svg-icon icon-class=&#123;icon&#125;/&gt;)</span><span class="hljs-comment">// &#125;</span><span class="hljs-keyword">if</span> (<span class="hljs-attribute">icon</span>) &#123;  vnodes<span class="hljs-selector-class">.push</span>(&lt;<span class="hljs-selector-tag">i</span> class=&#123;<span class="hljs-attribute">icon</span>&#125;&gt;&lt;/i&gt;)&#125;</code></pre></div><h3 id="关闭eslint-1"><a href="#关闭eslint-1" class="headerlink" title="关闭eslint"></a>关闭eslint</h3><p>官网已有答案</p><div class="code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-comment">// vue.config.js</span>lintOnSave: <span class="hljs-literal">false</span></code></pre></div><p>but，如果你使用的是git管理代码，会发现commit的时候依旧会触发eslint。</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> package.json <span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;    <span class="hljs-string">&quot;src/**/*.&#123;js,vue&#125;&quot;</span>: [      <span class="hljs-string">&quot;eslint --fix&quot;</span>, <span class="hljs-regexp">//</span> 删除这一行      <span class="hljs-string">&quot;git add&quot;</span>    ]  &#125;,</code></pre></div><h3 id="增加本地环境变量-1"><a href="#增加本地环境变量-1" class="headerlink" title="增加本地环境变量"></a>增加本地环境变量</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> package.json <span class="hljs-string">&quot;scripts&quot;</span>: &#123;    <span class="hljs-string">&quot;local&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve --mode local&quot;</span>,    ...  &#125;,</code></pre></div><p>复制.env.production为.env.local，自定义配置后，运行：</p><div class="code-wrapper"><pre><code class="hljs applescript">yarn <span class="hljs-built_in">run</span> <span class="hljs-keyword">local</span></code></pre></div><h3 id="缓存页面-1"><a href="#缓存页面-1" class="headerlink" title="缓存页面"></a>缓存页面</h3><p>想缓存的页面：</p><div class="code-wrapper"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><span class="xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;cacheIndex&quot;</span>,</span></code></pre></div><p>加入cachedViews</p><div class="code-wrapper"><pre><code class="hljs pf">// src\store\modules\tagsView.js<span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = &#123;  visitedViews: [],  cachedViews: [    &#x27;cacheIndex&#x27;  ]&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP的构成和生命周期</title>
    <link href="/2020/06/03/253/"/>
    <url>/2020/06/03/253/</url>
    
    <content type="html"><![CDATA[<h3 id="PHP的源码构成"><a href="#PHP的源码构成" class="headerlink" title="PHP的源码构成"></a>PHP的源码构成</h3><ul><li>SAPI（PHP的应用接口层）</li><li>main（主要代码，输入/输出，web通信以及PHP框架的初始化操作等）</li><li>ZendVM（PHP解析器的主要实现，代码的解释和执行，核心部分）</li><li>Extension（可分为PHP和Zend扩展）</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>模块初始化（PHP框架，Zend引擎的初始化操作）</li><li>请求初始化（对于FPM而言，是在worker进程accept一个请求并读取/解析完请求数据后的一个阶段）</li><li>执行脚本阶段（PHP代码的编译、执行，PHP脚本经历从源代码到抽象语法树再到opline指令，opline指令也就是Zend引擎可识别的执行指令）</li><li>请求关闭阶段（flush输出内容，发送HTTP应答header头，清理全局变量、关闭编译器、关闭执行器等，resgister_shutdown_function也是在此执行）</li><li>模块关闭阶段（SAPI关闭时执行）</li></ul><p>根据不同SAPI的实现，会有一些差别。比如命令行模式，每执行一次脚本都要经历这五个阶段；而FastCGI模式下，只在启动时执行一次模块初始化，然后请求只经历请求初始化，执行脚本和请求关闭几个阶段。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用ElementUI的table和calendar制作一个价格日历</title>
    <link href="/2020/05/04/250/"/>
    <url>/2020/05/04/250/</url>
    
    <content type="html"><![CDATA[<p>项目中需要做一个价格日历，便于展示和修改日期价格，我们先看下最终效果，然后利用ElementUI的table 和 calendar 实现一下。</p><p><img src="https://cdn.learnku.com/uploads/images/202005/04/41489/pto2GeGfrI.jpg!large" alt="价格日历"><br><img src="https://cdn.learnku.com/uploads/images/202005/04/41489/pjnT5lsXnM.jpg!large" alt="设置价格"></p><p>来看看主要代码（代码仅保留了主要代码和属性，并不完整，可以自行根据实际情况修改）：</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;calendar-list-container&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-comment">&lt;!--expand-row-keys设置了row-key也要设置，</span></span><span class="hljs-comment"><span class="xml">expand-change当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded）row, (expandedRows | expanded)--&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;table&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;listLoading&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;list&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">element-loading-text</span>=<span class="hljs-string">&quot;loading&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">row-key</span>=<span class="hljs-string">&quot;id&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">:expand-row-keys</span>=<span class="hljs-string">&quot;expands&quot;</span></span></span><span class="hljs-tag"><span class="xml">      @<span class="hljs-attr">expand-change</span>=<span class="hljs-string">&quot;expandChange&quot;</span></span></span><span class="hljs-tag"><span class="xml">    &gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> </span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;expand&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!--价格日历渲染 --&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-calendar</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">v-loading</span>=<span class="hljs-string">&quot;calendarLoad&quot;</span>  </span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">element-loading-text</span>=<span class="hljs-string">&quot;loading&quot;</span></span></span><span class="hljs-tag"><span class="xml">          &gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span></span></span><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;dateCell&quot;</span></span></span><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123;date, data&#125;&quot;</span></span></span><span class="hljs-tag"><span class="xml">            &gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!--今日及之后的价格可设置setPrice --&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;nowDay &lt;= data.day.replace(/-/g, &#x27;&#x27;)? &#x27;calendar-div&#x27; : &#x27;calendar-div calendar-prev&#x27;&quot;</span></span></span><span class="hljs-tag"><span class="xml">                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;nowDay &lt;= data.day.replace(/-/g, &#x27;&#x27;) &amp;&amp; setPrice(data, date)&quot;</span></span></span><span class="hljs-tag"><span class="xml">              &gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">data.day.slice</span>(<span class="hljs-name">-2</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;data.type == &#x27;current-month&#x27; &amp;&amp; refreshPrice(data)&quot;</span></span></span><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price &quot;</span></span></span><span class="hljs-tag"><span class="xml">                &gt;</span></span><span class="xml">                  预订价：</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">priceList</span>[data.day.slice(-2) -1] &#125;&#125;</span><span class="xml">元</span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-calendar</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">class-name</span>=<span class="hljs-string">&quot;overflow-on&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scope.row.name</span> &#125;&#125;</span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml"></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;图片&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;210&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;scope.row.imageList[0]&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:150px&quot;</span></span></span><span class="hljs-tag"><span class="xml">          &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml"></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;今日价格&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">max-width</span>=<span class="hljs-string">&quot;200&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scope.row.price</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml"></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;原价&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">max-width</span>=<span class="hljs-string">&quot;200&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scope.row.original_price</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml"></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><span class="hljs-tag"><span class="xml">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleCheck(scope.row)&quot;</span></span></span><span class="hljs-tag"><span class="xml">          &gt;</span></span><span class="xml">            价格设置</span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><span class="xml"></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;设置价格&quot;</span></span></span><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;dialogPriceVisible&quot;</span></span></span><span class="hljs-tag"><span class="xml">    &gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small-space&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;temp&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;left&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 500px; margin-left:50px;&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.name&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">disabled</span></span></span><span class="hljs-tag"><span class="xml">          /&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;时间段&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.date&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">:picker-options</span>=<span class="hljs-string">&quot;pickerBeginDateBefore&quot;</span></span></span><span class="hljs-tag"><span class="xml">          /&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分时计价&quot;</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;is_part&quot;</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">required</span></span></span><span class="hljs-tag"><span class="xml">        &gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-radio</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.is_part&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;0&quot;</span></span></span><span class="hljs-tag"><span class="xml">          &gt;</span></span><span class="xml">            不分平时周末</span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-radio</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-radio</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.is_part&quot;</span></span></span><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;1&quot;</span></span></span><span class="hljs-tag"><span class="xml">          &gt;</span></span><span class="xml">            区分周末</span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-radio</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;平时价&quot;</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.normal_price&quot;</span> /&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;temp.is_part == 1&quot;</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;周末价&quot;</span></span></span><span class="hljs-tag"><span class="xml">        &gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;temp.week_price&quot;</span> /&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><span class="xml"></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogPriceVisible = false&quot;</span>&gt;</span></span><span class="xml">          取 消</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><span class="hljs-tag"><span class="xml">          @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;putPrice&quot;</span></span></span><span class="hljs-tag"><span class="xml">        &gt;</span></span><span class="xml">          确 定</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; fetchList, setRoomPrice, getRoomPrice &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api&quot;</span>;</span></span><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment&#x27;</span>;</span></span><span class="javascript"><span class="xml"></span></span><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><span class="javascript"><span class="xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;room&quot;</span>,</span></span><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><span class="javascript"><span class="xml">    <span class="hljs-keyword">return</span> &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">pickerBeginDateBefore</span>:&#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">disabledDate</span>(<span class="hljs-params">time</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">          <span class="hljs-keyword">return</span> time.getTime() &lt; <span class="hljs-built_in">Date</span>.now() - <span class="hljs-number">86400</span>*<span class="hljs-number">1000</span>;</span></span><span class="javascript"><span class="xml">        &#125;</span></span><span class="javascript"><span class="xml">      &#125;,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">schedule</span>: [],</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">list</span>: [],</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">dialogPriceVisible</span>: <span class="hljs-literal">false</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">dialogFormVisible</span>: <span class="hljs-literal">false</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">priceDate</span>: <span class="hljs-string">&#x27;2020-01-01&#x27;</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">nowDate</span>: <span class="hljs-number">1</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">nowMonth</span>: <span class="hljs-number">1</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">nowDay</span>: <span class="hljs-number">0</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">nowYear</span>: <span class="hljs-number">2020</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">calendarMonth</span>: <span class="hljs-number">1</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">priceList</span>: [],</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">expands</span>: [],<span class="hljs-comment">//只展开一行放入当前行id</span></span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">room</span>: &#123;&#125;,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">listLoading</span>:<span class="hljs-literal">false</span>,</span></span><span class="javascript"><span class="xml">      <span class="hljs-attr">calendarLoad</span>: <span class="hljs-literal">false</span>,</span></span><span class="javascript"><span class="xml">    &#125;;</span></span><span class="javascript"><span class="xml">  &#125;,</span></span><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.priceDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.nowDate = <span class="hljs-built_in">this</span>.priceDate.getDate();</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.nowMonth = <span class="hljs-built_in">this</span>.priceDate.getMonth();</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.calendarMonth = <span class="hljs-built_in">this</span>.nowMonth;</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.nowYear = <span class="hljs-built_in">this</span>.priceDate.getFullYear();</span></span><span class="javascript"><span class="xml">    <span class="hljs-built_in">this</span>.nowDay = <span class="hljs-built_in">this</span>.priceDate.getFullYear()*<span class="hljs-number">10000</span>+ (<span class="hljs-number">1</span>+<span class="hljs-built_in">this</span>.priceDate.getMonth())*<span class="hljs-number">100</span>+ <span class="hljs-built_in">this</span>.priceDate.getDate();</span></span><span class="javascript"><span class="xml">  &#125;,</span></span><span class="javascript"><span class="xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><span class="javascript"><span class="xml">    refreshPrice (data) &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-comment">// console.log(data);</span></span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">if</span> (!data.isSelected) &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">if</span> (data.day.slice(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>) == <span class="hljs-built_in">this</span>.calendarMonth + <span class="hljs-number">1</span>) &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.calendarMonth = data.day.slice(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>) - <span class="hljs-number">1</span>;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;</span></span><span class="javascript"><span class="xml">      getRoomPrice(that.room.id, &#123;<span class="hljs-string">&#x27;date&#x27;</span>: data.day&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> arr = [];</span></span><span class="javascript"><span class="xml">        response.data.priceList.forEach(<span class="hljs-function">(<span class="hljs-params">item,index,array</span>)=&gt;</span>&#123;</span></span><span class="javascript"><span class="xml">            arr[index] = item? item : that.room.price;</span></span><span class="javascript"><span class="xml">        &#125;)</span></span><span class="javascript"><span class="xml">        that.priceList = arr</span></span><span class="javascript"><span class="xml">      &#125;);</span></span><span class="javascript"><span class="xml">      that.$forceUpdate()</span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">getRowKeys</span>(<span class="hljs-params">row</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-comment">// console.log(row.id)</span></span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> row.id   <span class="hljs-comment">//这里看这一行中需要根据哪个属性值是id</span></span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">selectDate</span>(<span class="hljs-params">type</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-comment">// consoloe.log(type)</span></span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">expandChange</span>(<span class="hljs-params">row, expandedRows</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-comment">// console.log(this.expands)</span></span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;</span></span><span class="javascript"><span class="xml">      that.room = row;</span></span><span class="javascript"><span class="xml">  <span class="hljs-comment">// 每次只展开一行</span></span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">if</span> (expandedRows.length) &#123; </span></span><span class="javascript"><span class="xml">        that.calendarLoad = <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">        getRoomPrice(row.id, &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-built_in">this</span>.priceDate&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">          that.calendarLoad = <span class="hljs-literal">false</span>;</span></span><span class="javascript"><span class="xml">          <span class="hljs-keyword">var</span> arr = [];</span></span><span class="javascript"><span class="xml">          response.data.priceList.forEach(<span class="hljs-function">(<span class="hljs-params">item,index,array</span>)=&gt;</span>&#123;</span></span><span class="javascript"><span class="xml">              arr[index] = item? item : row.price;</span></span><span class="javascript"><span class="xml">          &#125;)</span></span><span class="javascript"><span class="xml">          that.priceList = arr</span></span><span class="javascript"><span class="xml">          that.expands = [row.id]</span></span><span class="javascript"><span class="xml">        &#125;);</span></span><span class="javascript"><span class="xml">      &#125; <span class="hljs-keyword">else</span> &#123; </span></span><span class="javascript"><span class="xml">  <span class="hljs-comment">// 收起价格日历</span></span></span><span class="javascript"><span class="xml">        that.expands = []</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">setPrice</span>(<span class="hljs-params">data, date</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.nowDay &gt; data.day.replace(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&#x27;&#x27;</span>)) &#123;</span></span><span class="javascript"><span class="xml">          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><span class="javascript"><span class="xml">      &#125;</span></span><span class="javascript"><span class="xml">      <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;</span></span><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.temp = &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">name</span>: that.room.name,</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">date</span>: [date, date],</span></span><span class="javascript"><span class="xml">        <span class="hljs-attr">is_part</span>: <span class="hljs-number">0</span>,</span></span><span class="javascript"><span class="xml">      &#125;;</span></span><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.dialogPriceVisible = <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">putPrice</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><span class="javascript"><span class="xml">      <span class="hljs-built_in">this</span>.dialogPriceVisible = <span class="hljs-literal">true</span>;</span></span><span class="javascript"><span class="xml">        setRoomPrice(<span class="hljs-built_in">this</span>.room.id, <span class="hljs-built_in">this</span>.temp).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">          <span class="hljs-keyword">if</span> (res.code == <span class="hljs-number">0</span>) &#123;</span></span><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;编辑成功&quot;</span>);</span></span><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.dialogPriceVisible = !<span class="hljs-built_in">this</span>.dialogPriceVisible;</span></span><span class="javascript"><span class="xml">            <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;</span></span><span class="javascript"><span class="xml">            getRoomPrice(that.room.id, &#123;<span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-built_in">this</span>.temp.date[<span class="hljs-number">0</span>]&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">              <span class="hljs-keyword">var</span> arr = [];</span></span><span class="javascript"><span class="xml">              response.data.priceList.forEach(<span class="hljs-function">(<span class="hljs-params">item,index,array</span>)=&gt;</span>&#123;</span></span><span class="javascript"><span class="xml">                  arr[index] = item? item : that.room.price;</span></span><span class="javascript"><span class="xml">              &#125;)</span></span><span class="javascript"><span class="xml">              that.priceList = arr</span></span><span class="javascript"><span class="xml">            &#125;);</span></span><span class="javascript"><span class="xml">            fetchList(that.params).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span></span><span class="javascript"><span class="xml">              that.list = response.data;</span></span><span class="javascript"><span class="xml">            &#125;);</span></span><span class="javascript"><span class="xml">            that.resetTemp();</span></span><span class="javascript"><span class="xml">            that.$forceUpdate()</span></span><span class="javascript"><span class="xml">          &#125; <span class="hljs-keyword">else</span> &#123;</span></span><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$message.error(res.msg);</span></span><span class="javascript"><span class="xml">          &#125;</span></span><span class="javascript"><span class="xml">        &#125;);</span></span><span class="javascript"><span class="xml">    &#125;,</span></span><span class="javascript"><span class="xml"><span class="hljs-comment">// 用于可展开表格与树形表格，切换某一行的展开状态，如果使用了第二个参数，则是设置这一行展开与否（expanded 为 true 则展开）</span></span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">handleCheck</span>(<span class="hljs-params">row</span>)</span> &#123;</span></span><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> $table = <span class="hljs-built_in">this</span>.$refs.table</span></span><span class="javascript"><span class="xml">        $table.toggleRowExpansion(row)</span></span><span class="javascript"><span class="xml">    &#125;</span></span><span class="javascript"><span class="xml">  &#125;</span></span><span class="javascript"><span class="xml">&#125;;</span></span><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>价格日历返回数据格式：</p><div class="code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;操作成功&quot;</span>,<span class="hljs-attr">&quot;data&quot;</span>: &#123;<span class="hljs-attr">&quot;room&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;大床房&quot;</span>,<span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">299</span>,<span class="hljs-attr">&quot;original_price&quot;</span>: <span class="hljs-number">289</span>&#125;,<span class="hljs-attr">&quot;priceList&quot;</span>: [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">209</span>, <span class="hljs-number">219</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>],&#125;&#125;</code></pre></div><p>priceList是本月价格，false表示未设置。</p><hr><p>table的功能比较强大，部分属性函数并不常用，可以自行打印出来看看，研究一下即可。<br>calendar是2.8版本新增的组件，如果版本过低，可以尝试升级到新版本。</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Laravel中间件给后台加个操作日志</title>
    <link href="/2020/04/29/248/"/>
    <url>/2020/04/29/248/</url>
    
    <content type="html"><![CDATA[<p>项目后台角色及人员变多，需要加下日志，方便查询，不妨利用中间件实现下。</p><p>方案：</p><ul><li>中间件判断是否需要记录，写入队列</li><li>队列写入数据库</li></ul><p>表设计</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `admin_log` (  `id` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,  `user_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  `path` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  `<span class="hljs-keyword">method</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  `ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  `input` text <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  `created_at` <span class="hljs-type">timestamp</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8mb4_unicode_ci ROW_FORMAT<span class="hljs-operator">=</span><span class="hljs-keyword">DYNAMIC</span>;</code></pre></div><p>新建中间件AdminLogMiddleware，在后台路由中加入此中间件即可，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Author: sai</span><span class="hljs-comment"> * Date: 2020/4/1</span><span class="hljs-comment"> * Time: 16:19</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Jobs</span>\<span class="hljs-title">OperationLogJob</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Auth</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminLogMiddleware</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理传入的参数</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Closure  $next</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  string  $role</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span>, <span class="hljs-variable">$role</span></span>)</span><span class="hljs-function">    </span>&#123;<span class="hljs-comment">// 剔除GET，OPTIONS请求</span>        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$method</span> = <span class="hljs-variable">$request</span>-&gt;getMethod(), [<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;OPTIONS&#x27;</span>])) &#123;            <span class="hljs-variable">$data</span> = [                <span class="hljs-string">&#x27;user_id&#x27;</span> =&gt; Auth::guard(<span class="hljs-string">&#x27;admin&#x27;</span>)-&gt;id(),                <span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$request</span>-&gt;getPathInfo(),                <span class="hljs-string">&#x27;method&#x27;</span> =&gt; <span class="hljs-variable">$method</span>,                <span class="hljs-string">&#x27;ip&#x27;</span> =&gt; <span class="hljs-variable">$request</span>-&gt;getClientIp(),                <span class="hljs-string">&#x27;input&#x27;</span> =&gt; \json_encode(<span class="hljs-variable">$request</span>-&gt;all(), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE),            ];<span class="hljs-comment">// 异步写入，提高操作流畅性</span>            <span class="hljs-variable">$job</span> = (<span class="hljs-keyword">new</span> OperationLogJob(<span class="hljs-variable">$data</span>));            dispatch(<span class="hljs-variable">$job</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Jobs</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">AdminLog</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">Queueable</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">Dispatchable</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">InteractsWithQueue</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">SerializesModels</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationLogJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ShouldQueue</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">use</span> <span class="hljs-title">Dispatchable</span>, <span class="hljs-title">InteractsWithQueue</span>, <span class="hljs-title">Queueable</span>, <span class="hljs-title">SerializesModels</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Create a new job instance.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//</span>        <span class="hljs-keyword">$this</span>-&gt;queue = <span class="hljs-string">&#x27;adminLog&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-variable">$data</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Execute the job.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//</span>        AdminLog::create(<span class="hljs-keyword">$this</span>-&gt;data);    &#125;&#125;</code></pre></div><p>执行队列：</p><div class="code-wrapper"><pre><code class="hljs cpp">php artisan queue:work --queue=adminLog</code></pre></div><p>当然，也可以不写入数据库，写在log文件里，这里就不展开了。</p><p>另外，为了方便，也可以给后台统一加入AdminLogMiddleware中间件，把不需要做记录的路由加入配置文件，在中间件加入判断，省去在路由配置去区分是否需要记录。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElementUI中table表格自定义表头Tooltip文字提示</title>
    <link href="/2020/04/29/247/"/>
    <url>/2020/04/29/247/</url>
    
    <content type="html"><![CDATA[<p>table表格需要增加提示文案说明，没有现成的属性添加，我们可以通过<code>render-header</code>来渲染表头。</p><p>代码如下：</p><div class="code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;价格&quot;</span></span></span><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">:render-header</span>=<span class="hljs-string">&quot;renderTipsHeader&quot;</span></span></span><span class="hljs-tag"><span class="xml">      &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><span class="xml">          </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">scope.row.amount</span> &#125;&#125;</span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span></code></pre></div><p>renderTipsHeader：</p><div class="code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">renderTipsHeader</span> (h,&#123;<span class="hljs-selector-tag">column</span>&#125;) &#123;      <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">h</span>(        <span class="hljs-string">&#x27;div&#x27;</span>,[              h(<span class="hljs-string">&#x27;span&#x27;</span>, column.label),             h(<span class="hljs-string">&#x27;el-tooltip&#x27;</span>,&#123;　　　　      <span class="hljs-attribute">props</span>:&#123;　　　　　　　　<span class="hljs-attribute">effect</span>:<span class="hljs-string">&#x27;dark&#x27;</span>,　　　　　　　　<span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;提示文案&#x27;</span>,　　　　　　　　<span class="hljs-attribute">placement</span>:<span class="hljs-string">&#x27;top&#x27;</span>　　　　　　&#125;,　　　 　　　　 &#125;,[                 h(<span class="hljs-string">&#x27;i&#x27;</span>, &#123;                     <span class="hljs-attribute">class</span>:<span class="hljs-string">&#x27;el-icon-question&#x27;</span>,                     <span class="hljs-attribute">style</span>:<span class="hljs-string">&#x27;color:#409EFF;margin-left:5px;&#x27;</span>                 &#125;)            ])        ]    ); &#125;</code></pre></div><p>效果如图：<br><img src="https://cdn.learnku.com/uploads/images/202004/29/41489/I9iAzrrrkU.png!large"></p><div class="code-wrapper"><pre><code class="hljs stylus">render-<span class="hljs-selector-tag">header</span> 列标题 Label 区域渲染使用的 Function <span class="hljs-function"><span class="hljs-title">Function</span><span class="hljs-params">(h, &#123; column, <span class="hljs-variable">$index</span> &#125;)</span></span></code></pre></div><p>感兴趣可以打印出来看看，这里还有更复杂的应用–<a href="https://github.com/Darkerxi/ElementUI-Table-column_render-header">https://github.com/Darkerxi/ElementUI-Table-column_render-header</a></p><hr><p>参考文章：<br><a href="https://www.cnblogs.com/jmwlhj/p/11004378.html" title="element-ui自定义table表头，修改标题样式、添加tooltip及 :render-header使用简介">element-ui自定义table表头，修改标题样式、添加tooltip及 :render-header使用简介</a></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享按日执行的脚本</title>
    <link href="/2020/04/25/246/"/>
    <url>/2020/04/25/246/</url>
    
    <content type="html"><![CDATA[<p>项目中要做一些按日进行的统计，之前的任务都没跑，写个脚本执行下。</p><p>plus.sh</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>START_DATE=<span class="hljs-variable">$1</span>END_DATE=<span class="hljs-variable">$2</span>EXEC_COMMAND=<span class="hljs-variable">$3</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;start_date: &#x27;</span><span class="hljs-variable">$START_DATE</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;end_date: &#x27;</span><span class="hljs-variable">$END_DATE</span>i=<span class="hljs-variable">$START_DATE</span><span class="hljs-keyword">while</span> [[ <span class="hljs-variable">$i</span> &lt; `date -d <span class="hljs-string">&quot;+1 day <span class="hljs-variable">$END_DATE</span>&quot;</span> +%Y%m%d` ]]  <span class="hljs-keyword">do</span>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>    <span class="hljs-variable">$EXEC_COMMAND</span> <span class="hljs-variable">$i</span>    i=`date -d <span class="hljs-string">&quot;+1 day <span class="hljs-variable">$i</span>&quot;</span> +%Y%m%d`<span class="hljs-keyword">done</span></code></pre></div><p>执行</p><blockquote><p>./plus.sh 2020-03-01 2020-04-24 ‘php artisan command:test’</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel6配合MaatwebsiteExcel实现Excel导入</title>
    <link href="/2020/04/05/245/"/>
    <url>/2020/04/05/245/</url>
    
    <content type="html"><![CDATA[<p>前一段需要项目中需要通过Excel导入用户，之前用过phpexcel，总感觉太过繁琐，印象中phpexcel也很久没更新，看到项目中有使用<code>Maatwebsite\Excel</code>，便尝试使用一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> maatwebsite/excel</code></pre></div><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="生成导入类"><a href="#生成导入类" class="headerlink" title="生成导入类"></a>生成导入类</h3><div class="code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">php</span> artisan make:<span class="hljs-keyword">import</span> AdminsImport <span class="hljs-comment">--model=Admin</span></code></pre></div><p>会看到app下面生成了Imports文件夹。</p><h3 id="完善业务逻辑"><a href="#完善业务逻辑" class="headerlink" title="完善业务逻辑"></a>完善业务逻辑</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Imports</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">Admin</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">function</span> <span class="hljs-title">EasyWeChat</span>\<span class="hljs-title">Kernel</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">str_random</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">ToModel</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminsImport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ToModel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> array $row</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> \Illuminate\Database\Eloquent\Model|null</span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">model</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$row</span></span>)</span><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//过滤表头和空行，我这边表头的第一个单元格是id，具体自行调整</span>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>]) || <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;id&#x27;</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Admin([            <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>],            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; bcrypt(<span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>]),            <span class="hljs-string">&#x27;api_token&#x27;</span> =&gt; str_random(<span class="hljs-number">60</span>),        ]);    &#125;&#125;</code></pre></div><h3 id="导入任务"><a href="#导入任务" class="headerlink" title="导入任务"></a>导入任务</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Commands</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Imports</span>\<span class="hljs-title">AdminsImport</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Excel</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImportAdmin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * The name and signature of the console command.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$signature</span> = <span class="hljs-string">&#x27;importAdmin&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * The console command description.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$description</span> = <span class="hljs-string">&#x27;导入admin&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Create a new command instance.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">parent</span>::__construct();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Execute the console command.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        Excel::import(<span class="hljs-keyword">new</span> AdminsImport(), storage_path(<span class="hljs-string">&#x27;files/export.xlsx&#x27;</span>));<span class="hljs-keyword">$this</span>-&gt;info(<span class="hljs-keyword">$this</span>-&gt;description.<span class="hljs-string">&#x27;完成&#x27;</span>);&#125;&#125;</code></pre></div><h3 id="其他逻辑"><a href="#其他逻辑" class="headerlink" title="其他逻辑"></a>其他逻辑</h3><p>当然，可能业务必不仅仅是写入数据，可能有一些设计具体业务的操作，那么你可以这样操作。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Imports</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">Admin</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">function</span> <span class="hljs-title">EasyWeChat</span>\<span class="hljs-title">Kernel</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">str_random</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Concerns</span>\<span class="hljs-title">ToCollection</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Collection</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminsImport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ToCollection</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">collection</span>(<span class="hljs-params">Collection <span class="hljs-variable">$rows</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//如果需要去除表头</span>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$rows</span>[<span class="hljs-number">0</span>]);        <span class="hljs-comment">//$rows 是数组格式</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;createData(<span class="hljs-variable">$rows</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createData</span>(<span class="hljs-params"><span class="hljs-variable">$rows</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$success</span> = <span class="hljs-number">0</span>;        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$rows</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>) &#123;            <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>];            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$row</span>[<span class="hljs-number">0</span>])) &#123;                <span class="hljs-keyword">continue</span>;            &#125;            (<span class="hljs-keyword">new</span> Admin())-&gt;create(                [                    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>],                    <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>],                    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; bcrypt(<span class="hljs-variable">$row</span>[<span class="hljs-number">3</span>]),                    <span class="hljs-string">&#x27;api_token&#x27;</span> =&gt; str_random(<span class="hljs-number">60</span>),                ]            );            <span class="hljs-comment">// 其他业务代码</span>            <span class="hljs-variable">$success</span>++;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$success</span>.<span class="hljs-string">&#x27;-&#x27;</span>.count(<span class="hljs-variable">$rows</span>);    &#125;&#125;</code></pre></div><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">php7</span>.<span class="hljs-number">2</span> artisan importAdmin</code></pre></div><p>总的来说，使用起来还是简单明了的。</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>具体导入实现可以搜索<code>Maatwebsite\Excel\Excel</code>查看，里面还有导出、以队列方式导入等，支持的格式也是多种多样，具体代码如下，功能还是很强大的，足够应付日常需求了。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Collection</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Files</span>\<span class="hljs-title">Filesystem</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Files</span>\<span class="hljs-title">TemporaryFile</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Queue</span>\<span class="hljs-title">ShouldQueue</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Bus</span>\<span class="hljs-title">PendingDispatch</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Maatwebsite</span>\<span class="hljs-title">Excel</span>\<span class="hljs-title">Helpers</span>\<span class="hljs-title">FileTypeDetector</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Excel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Exporter</span>, <span class="hljs-title">Importer</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">use</span> <span class="hljs-title">RegistersCustomConcerns</span>;    <span class="hljs-keyword">const</span> XLSX     = <span class="hljs-string">&#x27;Xlsx&#x27;</span>;    <span class="hljs-keyword">const</span> CSV      = <span class="hljs-string">&#x27;Csv&#x27;</span>;    <span class="hljs-keyword">const</span> TSV      = <span class="hljs-string">&#x27;Csv&#x27;</span>;    <span class="hljs-keyword">const</span> ODS      = <span class="hljs-string">&#x27;Ods&#x27;</span>;    <span class="hljs-keyword">const</span> XLS      = <span class="hljs-string">&#x27;Xls&#x27;</span>;    <span class="hljs-keyword">const</span> SLK      = <span class="hljs-string">&#x27;Slk&#x27;</span>;    <span class="hljs-keyword">const</span> XML      = <span class="hljs-string">&#x27;Xml&#x27;</span>;    <span class="hljs-keyword">const</span> GNUMERIC = <span class="hljs-string">&#x27;Gnumeric&#x27;</span>;    <span class="hljs-keyword">const</span> HTML     = <span class="hljs-string">&#x27;Html&#x27;</span>;    <span class="hljs-keyword">const</span> MPDF     = <span class="hljs-string">&#x27;Mpdf&#x27;</span>;    <span class="hljs-keyword">const</span> DOMPDF   = <span class="hljs-string">&#x27;Dompdf&#x27;</span>;    <span class="hljs-keyword">const</span> TCPDF    = <span class="hljs-string">&#x27;Tcpdf&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Writer</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$writer</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> QueuedWriter</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$queuedWriter</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Filesystem</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filesystem</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> Reader</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$reader</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Writer       $writer</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> QueuedWriter $queuedWriter</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Reader       $reader</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Filesystem   $filesystem</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span></span><span class="hljs-params"><span class="hljs-function">        Writer <span class="hljs-variable">$writer</span>,</span></span><span class="hljs-params"><span class="hljs-function">        QueuedWriter <span class="hljs-variable">$queuedWriter</span>,</span></span><span class="hljs-params"><span class="hljs-function">        Reader <span class="hljs-variable">$reader</span>,</span></span><span class="hljs-params"><span class="hljs-function">        Filesystem <span class="hljs-variable">$filesystem</span></span></span><span class="hljs-params"><span class="hljs-function">    </span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;writer       = <span class="hljs-variable">$writer</span>;        <span class="hljs-keyword">$this</span>-&gt;reader       = <span class="hljs-variable">$reader</span>;        <span class="hljs-keyword">$this</span>-&gt;filesystem   = <span class="hljs-variable">$filesystem</span>;        <span class="hljs-keyword">$this</span>-&gt;queuedWriter = <span class="hljs-variable">$queuedWriter</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">download</span>(<span class="hljs-params"><span class="hljs-variable">$export</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$fileName</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$writerType</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$headers</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> response()-&gt;download(            <span class="hljs-keyword">$this</span>-&gt;export(<span class="hljs-variable">$export</span>, <span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$writerType</span>)-&gt;getLocalPath(),            <span class="hljs-variable">$fileName</span>,            <span class="hljs-variable">$headers</span>        )-&gt;deleteFileAfterSend(<span class="hljs-literal">true</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span>(<span class="hljs-params"><span class="hljs-variable">$export</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$diskName</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$writerType</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$diskOptions</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$export</span> <span class="hljs-keyword">instanceof</span> ShouldQueue) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;queue(<span class="hljs-variable">$export</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$diskName</span>, <span class="hljs-variable">$writerType</span>, <span class="hljs-variable">$diskOptions</span>);        &#125;        <span class="hljs-variable">$temporaryFile</span> = <span class="hljs-keyword">$this</span>-&gt;export(<span class="hljs-variable">$export</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$writerType</span>);        <span class="hljs-variable">$exported</span> = <span class="hljs-keyword">$this</span>-&gt;filesystem-&gt;disk(<span class="hljs-variable">$diskName</span>, <span class="hljs-variable">$diskOptions</span>)-&gt;copy(            <span class="hljs-variable">$temporaryFile</span>,            <span class="hljs-variable">$filePath</span>        );        <span class="hljs-variable">$temporaryFile</span>-&gt;delete();        <span class="hljs-keyword">return</span> <span class="hljs-variable">$exported</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queue</span>(<span class="hljs-params"><span class="hljs-variable">$export</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$disk</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$writerType</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$diskOptions</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$writerType</span> = FileTypeDetector::detectStrict(<span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$writerType</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;queuedWriter-&gt;store(            <span class="hljs-variable">$export</span>,            <span class="hljs-variable">$filePath</span>,            <span class="hljs-variable">$disk</span>,            <span class="hljs-variable">$writerType</span>,            <span class="hljs-variable">$diskOptions</span>        );    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">raw</span>(<span class="hljs-params"><span class="hljs-variable">$export</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$writerType</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$temporaryFile</span> = <span class="hljs-keyword">$this</span>-&gt;writer-&gt;export(<span class="hljs-variable">$export</span>, <span class="hljs-variable">$writerType</span>);        <span class="hljs-variable">$contents</span> = <span class="hljs-variable">$temporaryFile</span>-&gt;contents();        <span class="hljs-variable">$temporaryFile</span>-&gt;delete();        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">import</span>(<span class="hljs-params"><span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$disk</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$readerType</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$readerType</span> = FileTypeDetector::detect(<span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>);        <span class="hljs-variable">$response</span>   = <span class="hljs-keyword">$this</span>-&gt;reader-&gt;read(<span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>, <span class="hljs-variable">$disk</span>);        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> <span class="hljs-keyword">instanceof</span> PendingDispatch) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params"><span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$disk</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$readerType</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">array</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$readerType</span> = FileTypeDetector::detect(<span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;reader-&gt;toArray(<span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>, <span class="hljs-variable">$disk</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toCollection</span>(<span class="hljs-params"><span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$disk</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$readerType</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">Collection</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$readerType</span> = FileTypeDetector::detect(<span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;reader-&gt;toCollection(<span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$readerType</span>, <span class="hljs-variable">$disk</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritdoc</span>&#125;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queueImport</span>(<span class="hljs-params">ShouldQueue <span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$disk</span> = <span class="hljs-literal">null</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$readerType</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;import(<span class="hljs-variable">$import</span>, <span class="hljs-variable">$filePath</span>, <span class="hljs-variable">$disk</span>, <span class="hljs-variable">$readerType</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object      $export</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string|null $fileName</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string      $writerType</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> \PhpOffice\PhpSpreadsheet\Exception</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> TemporaryFile</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">export</span>(<span class="hljs-params"><span class="hljs-variable">$export</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$fileName</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$writerType</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">TemporaryFile</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$writerType</span> = FileTypeDetector::detectStrict(<span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$writerType</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;writer-&gt;export(<span class="hljs-variable">$export</span>, <span class="hljs-variable">$writerType</span>);    &#125;&#125;</code></pre></div><p>最后，感谢下面这一篇站内文章让我快速上手。</p><ul><li><a href="https://learnku.com/articles/32400" title="maatwebsite/Excel 3.1 使用教程 （导入篇）">maatwebsite/Excel 3.1 使用教程 （导入篇）</a></li></ul><p>最后，附上Laravel Excel 文档：</p><ul><li><a href="https://docs.laravel-excel.com/3.1/getting-started/" title="Laravel Excel">Laravel Excel</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go的类型转换</title>
    <link href="/2020/03/29/243/"/>
    <url>/2020/03/29/243/</url>
    
    <content type="html"><![CDATA[<p>类型转换是经常使用到的，汇总了一些比较常见的用法，分享给你～</p><div class="code-wrapper"><pre><code class="hljs nim">package main/**变量类型转换*/<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;reflect&quot;</span><span class="hljs-string">&quot;strconv&quot;</span>)<span class="hljs-keyword">func</span> main() &#123;    v := <span class="hljs-string">&quot;hello world&quot;</span>    fmt.<span class="hljs-type">Println</span>(typeofFmt(v))fmt.<span class="hljs-type">Println</span>(typeofReflect(v))str := <span class="hljs-string">&quot;1245&quot;</span>fmt.<span class="hljs-type">Println</span>(stringToInt(str))fmt.<span class="hljs-type">Println</span>(stringToInt64(str))a := <span class="hljs-number">3545</span>;<span class="hljs-keyword">var</span> b <span class="hljs-built_in">int64</span>;b = <span class="hljs-number">98</span>;fmt.<span class="hljs-type">Println</span>(int64ToString(b))fmt.<span class="hljs-type">Println</span>(intToString(a))<span class="hljs-keyword">var</span> f <span class="hljs-built_in">float64</span>f = <span class="hljs-number">3</span>.<span class="hljs-number">45</span>fmt.<span class="hljs-type">Println</span>(floatToString(f))str = <span class="hljs-string">&quot;1.24&quot;</span>fmt.<span class="hljs-type">Println</span>(stringToFloat(str))//<span class="hljs-built_in">int</span>到<span class="hljs-built_in">int64</span>fmt.<span class="hljs-type">Println</span>(<span class="hljs-built_in">int64</span>(<span class="hljs-number">1234</span>))//<span class="hljs-built_in">int</span> 转化为 <span class="hljs-built_in">float</span>score := <span class="hljs-number">100</span>fmt.<span class="hljs-type">Println</span>(<span class="hljs-built_in">float64</span>(score))&#125;// 利用fmt<span class="hljs-keyword">func</span> typeofFmt(v <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-built_in">string</span> &#123;    <span class="hljs-keyword">return</span> fmt.<span class="hljs-type">Sprintf</span>(<span class="hljs-string">&quot;%T&quot;</span>, v)&#125;// 利用reflect<span class="hljs-keyword">func</span> typeofReflect(v <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-built_in">string</span> &#123;    <span class="hljs-keyword">return</span> reflect.<span class="hljs-type">TypeOf</span>(v).<span class="hljs-type">String</span>()&#125;// <span class="hljs-built_in">string</span>转<span class="hljs-built_in">int</span><span class="hljs-keyword">func</span> stringToInt(a <span class="hljs-built_in">string</span>) <span class="hljs-built_in">int</span> &#123;d,_ := strconv.<span class="hljs-type">Atoi</span>(a)<span class="hljs-keyword">return</span>  d&#125;//<span class="hljs-type">Atoi</span>是<span class="hljs-type">ParseInt</span>(s, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>)的简写。// <span class="hljs-built_in">string</span>转<span class="hljs-built_in">int64</span><span class="hljs-keyword">func</span> stringToInt64(a <span class="hljs-built_in">string</span>) <span class="hljs-built_in">int64</span> &#123;d, _ := strconv.<span class="hljs-type">ParseInt</span>(a, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>) <span class="hljs-keyword">return</span>  d&#125;/**<span class="hljs-keyword">func</span> <span class="hljs-type">ParseInt</span>(s <span class="hljs-built_in">string</span>, base <span class="hljs-built_in">int</span>, bitSize <span class="hljs-built_in">int</span>) (i <span class="hljs-built_in">int64</span>, err error)返回字符串表示的整数值，接受正负号。base指定进制（<span class="hljs-number">2</span>到<span class="hljs-number">36</span>），如果base为<span class="hljs-number">0</span>，则会从字符串前置判断，<span class="hljs-string">&quot;0x&quot;</span>是<span class="hljs-number">16</span>进制，<span class="hljs-string">&quot;0&quot;</span>是<span class="hljs-number">8</span>进制，否则是<span class="hljs-number">10</span>进制；bitSize指定结果必须能无溢出赋值的整数类型，<span class="hljs-number">0</span>、<span class="hljs-number">8</span>、<span class="hljs-number">16</span>、<span class="hljs-number">32</span>、<span class="hljs-number">64</span> 分别代表 <span class="hljs-built_in">int</span>、<span class="hljs-built_in">int8</span>、<span class="hljs-built_in">int16</span>、<span class="hljs-built_in">int32</span>、<span class="hljs-built_in">int64</span>；返回的err是*<span class="hljs-type">NumErr</span>类型的，如果语法有误，err.<span class="hljs-type">Error</span> = <span class="hljs-type">ErrSyntax</span>；如果结果超出类型范围err.<span class="hljs-type">Error</span> = <span class="hljs-type">ErrRange</span>。*/// <span class="hljs-built_in">int</span>转<span class="hljs-built_in">string</span><span class="hljs-keyword">func</span> intToString(a <span class="hljs-built_in">int</span>) <span class="hljs-built_in">string</span> &#123;str := strconv.<span class="hljs-type">Itoa</span>(a) <span class="hljs-keyword">return</span> str&#125;// <span class="hljs-built_in">int64</span>转<span class="hljs-built_in">string</span><span class="hljs-keyword">func</span> int64ToString(a <span class="hljs-built_in">int64</span>) <span class="hljs-built_in">string</span> &#123;str := strconv.<span class="hljs-type">FormatInt</span>(a,<span class="hljs-number">10</span>)<span class="hljs-keyword">return</span> str&#125;/**<span class="hljs-keyword">func</span> <span class="hljs-type">FormatInt</span>(i <span class="hljs-built_in">int64</span>, base <span class="hljs-built_in">int</span>) <span class="hljs-built_in">string</span>返回i的base进制的字符串表示。base 必须在<span class="hljs-number">2</span>到<span class="hljs-number">36</span>之间，结果中会使用小写字母&#x27;a&#x27;到&#x27;z&#x27;表示大于<span class="hljs-number">10</span>的数字。*/// <span class="hljs-built_in">float</span>转<span class="hljs-built_in">string</span><span class="hljs-keyword">func</span> floatToString (f <span class="hljs-built_in">float64</span>) <span class="hljs-built_in">string</span> &#123;<span class="hljs-keyword">return</span> strconv.<span class="hljs-type">FormatFloat</span>(f,&#x27;f&#x27;,-<span class="hljs-number">1</span>,<span class="hljs-number">32</span>)&#125;/**<span class="hljs-keyword">func</span> <span class="hljs-type">FormatFloat</span>(f <span class="hljs-built_in">float64</span>, fmt byte, prec, bitSize <span class="hljs-built_in">int</span>) <span class="hljs-built_in">string</span>bitSize表示f的来源类型（<span class="hljs-number">32</span>：<span class="hljs-built_in">float32</span>、<span class="hljs-number">64</span>：<span class="hljs-built_in">float64</span>），会据此进行舍入。fmt表示格式：&#x27;f&#x27;（-ddd.dddd）、&#x27;b&#x27;（-ddddp±ddd，指数为二进制）、&#x27;e&#x27;（-d.dddde±dd，十进制指数）、&#x27;E&#x27;（-d.ddddE±dd，十进制指数）、&#x27;g&#x27;（指数很大时用&#x27;e&#x27;格式，否则&#x27;f&#x27;格式）、&#x27;G&#x27;（指数很大时用&#x27;E&#x27;格式，否则&#x27;f&#x27;格式）。prec控制精度（排除指数部分）：对&#x27;f&#x27;、&#x27;e&#x27;、&#x27;E&#x27;，它表示小数点后的数字个数；对&#x27;g&#x27;、&#x27;G&#x27;，它控制总的数字个数。如果prec 为-<span class="hljs-number">1</span>，则代表使用最少数量的、但又必需的数字来表示f。*/// <span class="hljs-built_in">string</span>转<span class="hljs-built_in">float</span><span class="hljs-keyword">func</span> stringToFloat(s <span class="hljs-built_in">string</span>) <span class="hljs-built_in">float64</span> &#123;f,_ := strconv.<span class="hljs-type">ParseFloat</span>(s,<span class="hljs-number">64</span>)<span class="hljs-keyword">return</span> f&#125;/**<span class="hljs-keyword">func</span> <span class="hljs-type">ParseFloat</span>(s <span class="hljs-built_in">string</span>, bitSize <span class="hljs-built_in">int</span>) (f <span class="hljs-built_in">float64</span>, err error)解析一个表示浮点数的字符串并返回其值。如果s合乎语法规则，函数会返回最为接近s表示值的一个浮点数（使用<span class="hljs-type">IEEE754</span>规范舍入）。bitSize指定了期望的接收类型，<span class="hljs-number">32</span>是<span class="hljs-built_in">float32</span>（返回值可以不改变精确值的赋值给<span class="hljs-built_in">float32</span>），<span class="hljs-number">64</span>是<span class="hljs-built_in">float64</span>；返回值err是*<span class="hljs-type">NumErr</span>类型的，语法有误的，err.<span class="hljs-type">Error</span>=<span class="hljs-type">ErrSyntax</span>；结果超出表示范围的，返回值f为±<span class="hljs-type">Inf</span>，err.<span class="hljs-type">Error</span>= <span class="hljs-type">ErrRange</span>。*/</code></pre></div><p>更多类型转换相关可查看标准库：<br>- <a href="https://studygolang.com/pkgdoc" title="strconv">strconv</a></p><hr><p>技术文章也发布在自己的公众号【爱好历史的程序员】，欢迎扫码关注，谢谢！</p><p><img src="https://cdn.learnku.com/uploads/images/201912/01/41489/1DaPm3bQeT.png!large" alt="爱好历史的程序员"></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常用类型及应用场景</title>
    <link href="/2020/03/22/230/"/>
    <url>/2020/03/22/230/</url>
    
    <content type="html"><![CDATA[<h2 id="主要类型"><a href="#主要类型" class="headerlink" title="主要类型"></a>主要类型</h2><ul><li>字符串（strings，bitmaps）</li><li>散列（hashes）</li><li>列表（lists）</li><li>集合（sets）</li><li>有序集合（sorted sets） </li><li>hyperloglogs </li><li>发布订阅（pub/sub）</li><li>地理空间（geospatial）</li><li>Stream（5.0版本新增）</li></ul><p>关于命令我推荐看这两个：</p><ul><li><a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></li><li><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><ul><li>缓存</li><li>分布式锁（setnx）</li><li>签到统计（setbit）</li><li>计数（incr）</li></ul><h3 id="hashes"><a href="#hashes" class="headerlink" title="hashes"></a>hashes</h3><ul><li>缓存</li><li>用户标签</li></ul><h3 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h3><ul><li>队列</li></ul><h3 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h3><ul><li>交集并集</li><li>数据去重</li></ul><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><ul><li>排行榜</li><li>延时任务</li><li>限流</li></ul><h3 id="hyperloglogs"><a href="#hyperloglogs" class="headerlink" title="hyperloglogs"></a>hyperloglogs</h3><ul><li>uv统计（ip统计）</li></ul><h3 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h3><ul><li>发布订阅（不是特别可靠）</li></ul><h3 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h3><ul><li>附近的人</li></ul><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>队列</li><li>发布订阅</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="利用事务实现秒杀"><a href="#利用事务实现秒杀" class="headerlink" title="利用事务实现秒杀"></a>利用事务实现秒杀</h4><p>以php代码为例：</p><blockquote><p>WATCH命令可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行。监控一直持续到EXEC命令（事务中的命令是在EXEC之后才执行的，所以在MULTI命令后可以修改WATCH监控的键值）</p></blockquote><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 库存为<span class="hljs-number">5</span><span class="hljs-regexp">//</span>实例化redis<span class="hljs-variable">$redis</span> = new Redis();<span class="hljs-regexp">//</span>连接<span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;sale&#x27;</span>;<span class="hljs-variable">$redis</span>-&gt;setnx(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>); <span class="hljs-regexp">//</span> 此项不预定义亦可，保证key唯一就行<span class="hljs-variable">$redis</span>-&gt;watch(<span class="hljs-variable">$key</span>); <span class="hljs-regexp">//</span>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。<span class="hljs-variable">$sale_num</span> = <span class="hljs-variable">$redis</span>-&gt;get(<span class="hljs-variable">$key</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$sale_num</span> &gt; <span class="hljs-number">4</span>) &#123;<span class="hljs-keyword">exit</span>();&#125;<span class="hljs-variable">$redis</span>-&gt;multi(); <span class="hljs-regexp">//</span>标记事务<span class="hljs-variable">$redis</span>-&gt;incr(<span class="hljs-variable">$key</span>);  <span class="hljs-regexp">//</span>销量+<span class="hljs-number">1</span>sleep(<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span>模拟真实环境<span class="hljs-variable">$ret</span> = <span class="hljs-variable">$redis</span>-&gt;exec(); <span class="hljs-regexp">//</span> 事务块内所有命令的返回值，按命令执行的先后顺序排列。<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ret</span>) &#123;    <span class="hljs-regexp">//</span> 自定义的一个基于medoo的dbclassinclude <span class="hljs-string">&#x27;db.php&#x27;</span>;<span class="hljs-variable">$db</span> = new db([    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>,    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;13sai&#x27;</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;13sai&#x27;</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;*&#x27;</span>,    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>]);<span class="hljs-variable">$db</span>-&gt;update(<span class="hljs-string">&#x27;goods&#x27;</span>, [<span class="hljs-string">&quot;stock_num[-]&quot;</span> =&gt; <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">1</span>]);&#125;</code></pre></div><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><blockquote><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/201910/30/41489/7MfaHZCwKT.png!large" alt="bloom"></p><p>php实现推荐看看这篇文章：</p><ul><li><a href="https://github.13sai.com/2019/05/21/188/">https://github.13sai.com/2019/05/21/188/</a></li></ul><p>当然，Redis自己也有第三方模块：</p><ul><li><a href="https://github.com/RedisBloom/RedisBloom">https://github.com/RedisBloom/RedisBloom</a></li></ul><div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/RedisBloom/</span>RedisBloom.gitcd redisbloommake<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/redis-server --loadmodule ./</span>redisbloom.so</code></pre></div><p>Bloom：向过滤器添加新项,如果尚不存在，则会为您创建一个新的过滤器</p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.ADD newFilter foo(integer) <span class="hljs-number">1</span></code></pre></div><p>Bloom：检查过滤器中是否存在项 </p><div class="code-wrapper"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.EXISTS newFilter foo(integer) <span class="hljs-number">1</span><span class="hljs-number">127.0.0.1:6379</span>&gt; BF.EXISTS newFilter notpresent(integer) <span class="hljs-number">0</span></code></pre></div><h3 id="限流Redis-cell"><a href="#限流Redis-cell" class="headerlink" title="限流Redis-cell"></a>限流Redis-cell</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 提前安装rust哟git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/brandur/</span>redis-cell.gitcd redis-cellcargo build --releasecp target<span class="hljs-regexp">/release/</span>libredis_cell.dylib <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/modules/</span>redis-server --loadmodule <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/modules/</span>libredis_cell.so</code></pre></div><p>该模块只有1条指令cl.throttle，它的参数和返回值都略显复杂，接下来让我们来看看这个指令具体该如何使用。</p><div class="code-wrapper"><pre><code class="hljs gherkin">&gt; cl.throttle limitThrot  15  30  60  1                    ▲     ▲  ▲  ▲  ▲                    |<span class="hljs-string">     </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  └───── need 1 quota (可选参数，默认值也是1)</span><span class="hljs-string">                    </span>|<span class="hljs-string">     </span>|<span class="hljs-string">  └──┴─────── 30 operations / 60 seconds 这是漏水速率</span><span class="hljs-string">                    </span>|<span class="hljs-string">     └───────────── 15 capacity 这是漏斗容量</span><span class="hljs-string">&gt;                   └─────────────────── key</span></code></pre></div><p>上面这个指令的意思是允许频率为每 60s 最多 30 次(漏水速率)，漏斗的初始容量为 15，也就是说一开始可以取 15 个，然后才开始受漏水速率的影响。我们看到这个指令中漏水速率变成了 2 个参数，替代了之前的单个浮点数。用两个参数相除的结果来表达漏水速率相对单个浮点数要更加直观一些。</p><div class="code-wrapper"><pre><code class="hljs tap">&gt; cl.throttle limitThrot<span class="hljs-number"> 15 </span>30<span class="hljs-number"> 60 </span>11) (integer)<span class="hljs-number"> 0 </span>  <span class="hljs-comment"># 0 表示允许，1表示拒绝</span>2) (integer)<span class="hljs-number"> 15 </span> <span class="hljs-comment"># 漏斗容量capacity</span>3) (integer)<span class="hljs-number"> 14 </span> <span class="hljs-comment"># 漏斗剩余空间left_quota</span>4) (integer) -1  <span class="hljs-comment"># 如果拒绝了，需要多长时间后再试(漏斗有空间了，单位秒)</span>5) (integer)<span class="hljs-number"> 2 </span>  <span class="hljs-comment"># 多长时间后，漏斗完全空出来(left_quota==capacity，单位秒)</span></code></pre></div><hr><p>基本上常见的场景就是这些了，各位周末愉快！</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL是如何做到不丢数据</title>
    <link href="/2020/03/18/MySQL-data/"/>
    <url>/2020/03/18/MySQL-data/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。附上专栏链接，有兴趣可点击订阅：<a href="https://time.geekbang.org/column/intro/139">https://time.geekbang.org/column/intro/139</a></p></blockquote><p>MySQL是如何做到数据不丢失呢？</p><p>我们先来介绍下WAL。</p><h3 id="WAL-Write-Ahead-Loggin-机制"><a href="#WAL-Write-Ahead-Loggin-机制" class="headerlink" title="WAL(Write-Ahead Loggin)机制"></a>WAL(Write-Ahead Loggin)机制</h3><p>WAL 是预写式日志, 关键点在于先写日志再写磁盘.</p><p>MySQL在对数据页进行修改时, 通过将”修改了什么”这个操作记录在日志中, 而不必马上将更改内容刷新到磁盘上, 从而将随机写转换为顺序写, 提高了性能。</p><p>这种机制一方面提高了MySQL的吞吐量，另一方面也实现了数据的高可靠性。</p><h3 id="binlog的写入机制"><a href="#binlog的写入机制" class="headerlink" title="binlog的写入机制"></a>binlog的写入机制</h3><p>事务执行过程中，先把日志写到binlog cache，事务提交的时候，再把binlog cache写到binlog文件中。</p><p>一个事务的binlog是不能被拆开的，因此不论这个事务多大，也要确保一次性写入。这就涉及到了binlog cache的保存问题。</p><p>系统给binlog cache分配了一片内存，每个线程一个，参数 binlog_cache_size用于控制单个线程内binlog cache所占内存的大小。如果超过了这个参数规定的大小，就要暂存到磁盘。</p><p>事务提交的时候，执行器把binlog cache里的完整事务写入到binlog中，并清空binlog cache。</p><p><img src="https://static001.geekbang.org/resource/image/9e/3e/9ed86644d5f39efb0efec595abb92e3e.png" alt="binlog"></p><p>可以看到，每个线程有自己binlog cache，但是共用同一份binlog文件。</p><p>图中的write，指的就是指把日志写入到文件系统的page cache，并没有把数据持久化到磁盘，所以速度比较快。</p><p>图中的fsync，才是将数据持久化到磁盘的操作。</p><p>write 和fsync的时机，是由参数sync_binlog控制的：</p><ul><li>sync_binlog=0的时候，表示每次提交事务都只write，不fsync；</li><li>sync_binlog=1的时候，表示每次提交事务都会执行fsync；</li><li>sync_binlog=N(N&gt;1)的时候，表示每次提交事务都write，但累积N个事务后才fsync。</li></ul><p>因此，在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。在实际的业务场景中，考虑到丢失日志量的可控性，一般不建议将这个参数设成0，比较常见的是将其设置为100~1000中的某个数值。</p><p>但是，将sync_binlog设置为N，对应的风险是：如果主机发生异常重启，会丢失最近N个事务的binlog日志。</p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>先说说说redo log的三种状态：</p><p><img src="https://static001.geekbang.org/resource/image/9d/d4/9d057f61d3962407f413deebc80526d4.png" alt="redo log"></p><ul><li>红色：存在redo log buffer中，物理上是在MySQL进程内存中</li><li>黄色：写到磁盘(write)，但是没有持久化（fsync)，物理上是在文件系统的page cache里面</li><li>绿色：持久化到磁盘，对应的是hard disk</li></ul><hr><p>为了控制 redo log 的写入策略，InnoDB 提供了 innodb_flush_log_at_trx_commit 参 数，它有三种可能取值:</p><ul><li>0，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</li><li>1，表示每次事务提交时都将 redo log 直接持久化到磁盘;</li><li>2 ，表示每次事务提交时都只是把 redo log 写到 page cache。</li></ul><p>InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写 到文件系统的 page cache，然后调用 fsync 持久化到磁盘。</p><p>实际上，除了后台线程每秒一次的轮询操作外，还有两种场景会让一个没有提交的事务的 redo log 写入到磁盘中。</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-number">1</span>. <span class="hljs-keyword">redo</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">buffer</span> 占用的空间即将达到 innodb_log_buffer_size 一半的时 候，后台线程会主动写盘。注意，由于这个事务并没有提交，所以这个写盘动作只是 <span class="hljs-keyword">write</span>，而没有调用 fsync，也就是只留在了文件系统的 page cache。<span class="hljs-number">2</span>. 并行的事务提交的时候，顺带将这个事务的 <span class="hljs-keyword">redo</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">buffer</span> 持久化到磁 盘。假设一个事务 A 执行到一半，已经写了一些 <span class="hljs-keyword">redo</span> <span class="hljs-built_in">log</span> 到 <span class="hljs-keyword">buffer</span> 中，这时候有另 外一个线程的事务 B 提交，如果 innodb_flush_log_at_trx_commit 设置的是 <span class="hljs-number">1</span>，那么 按照这个参数的逻辑，事务 B 要把 <span class="hljs-keyword">redo</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">buffer</span> 里的日志全部持久化到磁盘。这时 候，就会带上事务 A 在 <span class="hljs-keyword">redo</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">buffer</span> 里的日志一起持久化到磁盘。</code></pre></div><p>既然MySQL能保证redo log和binlog能可靠性写入磁盘，那么在他们两者直接如何保证可靠转换的呢？</p><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>redo log 先 prepare，再写 binlog，最后再把 redo log commit。利用这个两阶段提交机制，MySQL保证了redo log和binlog的可靠传输。</p><p>最后我们来看下整体简图：</p><p><img src="https://static001.geekbang.org/resource/image/5a/28/5ae7d074c34bc5bd55c82781de670c28.png" alt="持久化"></p><hr><h3 id="配置建议"><a href="#配置建议" class="headerlink" title="配置建议"></a>配置建议</h3><ul><li>innodb_flush_log_at_trx_commit=1。表示每次事务的redolog都直接持久化到磁盘，保证mysql重启后数据不丢失。</li><li>sync_binlog=1。表示每次事务的binlog都直接持久化到磁盘，保证mysql重启后binlog记录是完整的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL主从</title>
    <link href="/2020/03/17/MySQL-master-slave/"/>
    <url>/2020/03/17/MySQL-master-slave/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。附上专栏链接，有兴趣可点击订阅：<a href="https://time.geekbang.org/column/intro/139">https://time.geekbang.org/column/intro/139</a></p></blockquote><p>昨天的文章我们操作了主从复制，那么你有仔细想一想工作原理吗？</p><h3 id="主从同步复制原理"><a href="#主从同步复制原理" class="headerlink" title="主从同步复制原理"></a>主从同步复制原理</h3><p>复制简单分成三步：</p><ol><li>master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）；</li><li>slave将master的binary log events拷贝到它的中继日志(relay log)；</li><li>slave重做中继日志中的事件，将改变反映它自己的数据。</li></ol><p>当然，其中的细节是很复杂的，我们可以看下极客时间《MySQL实战45讲》专栏的图：</p><p><img src="https://static001.geekbang.org/resource/image/a6/a3/a66c154c1bc51e071dd2cc8c1d6ca6a3.png" alt="master-slave"></p><p>主库接收到客户端的更新请求后，执行内部事务的更新逻辑，同时写binlog。</p><p>而备库B跟主库A之间维持了一个长连接。主库A内部有一个线程，专门用于服务备库B的这个长连接。一个事务日志同步的完整过程是这样的：</p><p>在备库B上通过change master命令，设置主库A的IP、端口、用户名、密码，以及要从哪个位置开始请求binlog，这个位置包含文件名和日志偏移量。</p><p>在备库B上执行start slave命令，这时候备库会启动两个线程，就是图中的io_thread和sql_thread。其中io_thread负责与主库建立连接。</p><p>主库A校验完用户名、密码后，开始按照备库B传过来的位置，从本地读取binlog，发给B。</p><p>备库B拿到binlog后，写到本地文件，称为中转日志（relay log）。</p><p>sql_thread读取中转日志，解析出日志里的命令，并执行。</p><h3 id="binlog里记录的是什么？"><a href="#binlog里记录的是什么？" class="headerlink" title="binlog里记录的是什么？"></a>binlog里记录的是什么？</h3><p>那么介绍了工作原理，之前也有文章介绍过binlog，那么binlog里到底记录的是什么呢？</p><p>binlog根据配置记录的内容是不一样的，我们看表格：</p><table><thead><tr><th>format</th><th>定义</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>statement</td><td>记录的是修改SQL语句</td><td>日志文件小，节约IO，提高性能</td><td>准确性差，对一些系统函数不能准确复制或不能复制，如now()、uuid()等</td></tr><tr><td>row</td><td>记录的是每行实际数据的变更</td><td>准确性强，能准确复制数据的变更</td><td>日志文件大，较大的网络IO和磁盘IO</td></tr><tr><td>mixed</td><td>statement和row模式的混合</td><td>准确性强，文件大小适中</td><td>有可能发生主从不一致问题</td></tr></tbody></table><p><img src="https://static001.geekbang.org/resource/image/b9/31/b9818f73cd7d38a96ddcb75350b52931.png" alt="statement"></p><p><img src="https://static001.geekbang.org/resource/image/d6/26/d67a38db154afff610ae3bb64e266826.png" alt="row"></p><p>推荐使用的是row模式，准确性高，虽然说文件大，但是现在有SSD和万兆光纤网络，这些磁盘IO和网络IO都是可以接受的。</p><p>mixed格式的意思是，MySQL自己会判断这条SQL语句是否可能引起主备不一致，如果有可能，就用row格式，否则就用statement格式。<br>也就是说，mixed格式可以利用statment格式的优点，同时又避免了数据不一致的风险。那么，为什么不推荐使用mixed模式，我们可以举例说明（数据恢复）：</p><p>我们就分别从delete、insert和update这三种SQL语句的角度，来看看数据恢复的问题。</p><p>即使执行的是delete语句，row格式的binlog也会把被删掉的行的整行信息保存起来。所以，如果你在执行完一条delete语句以后，发现删错数据了，可以直接把binlog中记录的delete语句转成insert，把被错删的数据插入回去就可以恢复了。</p><p>如果你是执行错了insert语句呢？那就更直接了。row格式下，insert语句的binlog里会记录所有的字段信息，这些信息可以用来精确定位刚刚被插入的那一行。这时，你直接把insert语句转成delete语句，删除掉这被误插入的一行数据就可以了。</p><p>如果执行的是update语句的话，binlog里面会记录修改前整行的数据和修改后的整行数据。所以，如果你误执行了update语句的话，只需要把这个event前后的两行信息对调一下，再去数据库里面执行，就能恢复这个更新操作了。</p><p>其实，由delete、insert或者update语句导致的数据操作错误，需要恢复到操作之前状态的情况，也时有发生。</p><h3 id="查看binlog"><a href="#查看binlog" class="headerlink" title="查看binlog"></a>查看binlog</h3><p>binlog本身是一类二进制文件。二进制文件更省空间，写入速度更快，是无法直接打开来查看的。<br>因此mysql提供了命令mysqlbinlog进行查看。<br>一般的statement格式的二进制文件，用下面命令就可以</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysqlbinlog</span> mysql-bin.<span class="hljs-number">000001</span></code></pre></div><p>如果是row格式，加上-v或者-vv参数就行，如</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysqlbinlog</span> -vv mysql-bin.<span class="hljs-number">000001</span></code></pre></div><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>log_bin = {on | off | base_name}</td><td>指定是否启用记录二进制日志或者指定一个日志路径</td></tr><tr><td>sql_log_bin ={ on | off }</td><td>指定是否启用记录二进制日志</td></tr><tr><td>expire_logs_days</td><td>指定自动删除二进制日志的时间，即日志过期时间</td></tr><tr><td>log_bin_index</td><td>指定mysql-bin.index文件的路径</td></tr><tr><td>binlog_format = { mixed | row | statement }</td><td>指定二进制日志基于什么模式记录</td></tr><tr><td>max_binlog_size</td><td>指定二进制日志文件最大值</td></tr><tr><td>binlog_cache_size</td><td>指定事务日志缓存区大小</td></tr><tr><td>max_binlog_cache_size</td><td>指定二进制日志缓存最大大小</td></tr><tr><td>sync_binlog = { 0 | n }</td><td>指定写缓冲多少次，刷一次盘</td></tr></tbody></table><hr><p>之前是介绍一些概念的东西，今天我们来换换口味，实际操作一下啊，操作内容是搭建我们经常用到的MySQL主从。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>已经安装好了主数据库和从数据库，并新建database为test，假如一些数据。（因为是测试，单机器上开两个MySQL示例也可以）</p><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">REPLICATION</span> SLAVE, <span class="hljs-keyword">REPLICATION</span> CLIENT <span class="hljs-keyword">ON</span> . <span class="hljs-keyword">TO</span> repl@<span class="hljs-string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;111111&#x27;</span>; //分配账号 <span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> . <span class="hljs-keyword">to</span> repl@<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>; //授权</code></pre></div><p>查看状态</p><div class="code-wrapper"><pre><code class="hljs crmsh">SHOW <span class="hljs-keyword">MASTER</span> <span class="hljs-title">STATUS</span>;//记住这里的file和position。</code></pre></div><p>修改配置</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <span class="hljs-attr">log-bin</span>=mysql-bin <span class="hljs-attr">server-id</span>=<span class="hljs-number">1</span></code></pre></div><p>重启</p><h4 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h4><p>修改配置，注意server_id要与主库，其他从库不一样，可以设置成ip</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span> <span class="hljs-attr">log_bin</span> = mysql-bin <span class="hljs-attr">server_id</span> = <span class="hljs-number">2</span> <span class="hljs-attr">relay_log</span> = mysql-relay-bin <span class="hljs-attr">log_slave_updates</span> = <span class="hljs-number">1</span> <span class="hljs-attr">read_only</span> = <span class="hljs-number">1</span></code></pre></div><p>重启后，建议先进行重置操作。</p><div class="code-wrapper"><pre><code class="hljs crmsh">reset <span class="hljs-literal">slave</span></code></pre></div><p>连接master</p><div class="code-wrapper"><pre><code class="hljs routeros">CHANGE MASTER <span class="hljs-keyword">TO</span> <span class="hljs-attribute">MASTER_HOST</span>=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,MASTER_USER=&#x27;repl&#x27;, <span class="hljs-attribute">MASTER_PASSWORD</span>=<span class="hljs-string">&#x27;111111&#x27;</span>, <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;mysql-bin.000051&#x27;</span>,master_log_pos=8694;</code></pre></div><p>master_log_file和master_log_pos就是上面记住的file和position，具体自行修改。</p><p>开启并查看状态</p><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> <span class="hljs-literal">slave</span> show <span class="hljs-literal">slave</span> status</code></pre></div><p>如果Slave_IO_Running和Slave_SQL_Running都显示Yes，一般就成功了。</p><p>失败一般就是master_log_pos，master_log_file配置有问题，重新配置下就行了。</p><p>可以在master插入修改数据，测试slave是否相应变化。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果master已有数据，可以锁定master（flush tables with read lock），然后导出同步到slave，配置完成后释放master（unlock tables）。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>【原创】研发应该懂的binlog知识(上) <a href="https://www.cnblogs.com/rjzheng/p/9721765.html">https://www.cnblogs.com/rjzheng/p/9721765.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的count</title>
    <link href="/2020/03/15/MySQL-count/"/>
    <url>/2020/03/15/MySQL-count/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。</p></blockquote><p>count(*)语句应该是我们开发中很经常用到的,n那么你有仔细研究过吗？</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><blockquote><p>MyISAM引擎把一个表的总行数存在了磁盘上，因此执行count(<em>)的时候会直接返回这个数，效率很高；如果加了where 条件的话，MyISAM表也是不能返回得这么快的。而InnoDB引擎就麻烦了，它执行count(</em>)的时候，需要把数据一行一行地从引擎里面读出来，然后判断not null累积计数。</p></blockquote><p>那你就问了，为什么InnoDB不跟MyISAM一样，也把数字存起来呢？</p><p>这是因为即使是在同一个时刻的多个查询，由于多版本并发控制（MVCC）的原因，InnoDB表“应该返回多少行”也是不确定的。</p><p>假设表t中现在有10000条记录，我们设计了三个用户并行的会话。</p><ul><li>会话A先启动事务并查询一次表的总行数；</li><li>会话B启动事务，插入一行后记录后，查询表的总行数；</li><li>会话C先启动一个单独的语句，插入一行记录后，查询表的总行数。</li><li>我们假设从上到下是按照时间顺序执行的，同一行语句是在同一时刻执行的。</li></ul><p><img src="https://static001.geekbang.org/resource/image/5e/97/5e716ba1d464c8224c1c1f36135d0e97.png" alt="图1 会话A、B、C的执行流程"></p><p>你会看到，在最后一个时刻，三个会话A、B、C会同时查询表t的总行数，但拿到的结果却不同。</p><p>这和InnoDB的事务设计有关系，可重复读是它默认的隔离级别，在代码上就是通过多版本并发控制来实现的。每一行记录都要判断自己是否对这个会话可见，因此对于<code>count(*)</code>请求来说，InnoDB只好把数据一行一行地读出依次判断，可见的行才能够用于计算“基于这个查询”的表的总行数。</p><p>当然，现在这个看上去笨笨的MySQL，在执行<code>count(*)</code>操作的时候还是做了优化的。</p><p>InnoDB支持的是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是主键值。所以，普通索引树比主键索引树小很多。对于count(*)这样的操作，遍历哪个索引树得到的结果逻辑上都是一样的。因此，MySQL优化器会找到最小的那棵树来遍历。</p><p>在保证逻辑正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一。</p><p>如果你用过<code>show table status</code> 命令的话，就会发现这个命令的输出结果里面也有一个TABLE_ROWS用于显示这个表当前有多少行，这个命令执行挺快的，那这个TABLE_ROWS能代替<code>count(*)</code>吗？</p><p>而索引统计的值是通过采样来估算的，实际上，TABLE_ROWS就是从这个采样估算得来的，因此它也不是很准。有多不准呢，官方文档说误差可能达到40%到50%。所以，<code>show table status</code>命令显示的行数也不能直接使用。</p><blockquote><p>MyISAM表虽然count(*)很快，但是不支持事务；<code>show table status</code>命令虽然返回很快，但是不准确；InnoDB表直接<code>count(*)</code>会遍历全表，虽然结果准确，但会导致性能问题。</p></blockquote><p>那么，如果你现在有一个页面经常要显示记录总数，到底应该怎么办呢？</p><p>有时候，我们未必就只能纠结于count，我们可以自己额外计数。</p><h3 id="计数方法"><a href="#计数方法" class="headerlink" title="计数方法"></a>计数方法</h3><h4 id="缓存计数"><a href="#缓存计数" class="headerlink" title="缓存计数"></a>缓存计数</h4><p>对于更新很频繁的库来说，你可能会第一时间想到，用缓存系统来支持，比如Redis。</p><p>我们可以用一个Redis服务来保存这个表的总行数，读和更新操作都很快。</p><p>当然，使用Redis存储计数是有一些问题的。</p><p>首先，无法保证Redis完全可用，假如异常挂掉，我们无法保证MySQL和Redis数据的一致性。</p><p>其次，即使Redis正常可用，计数也并不精确，因为MySQL和Redis存储必然有先后之分，在高并发场景下，多个会话从Redis和MySQL读到的数据很可能是不一致的，我们可以看看图片，就不展开说明了。</p><p><img src="https://static001.geekbang.org/resource/image/39/33/39898af053695dad37227d71ae288e33.png" alt="图2 会话A、B执行时序图"></p><p>当然了，在某些场景下，我们可以这么做，因为业务并不要保证数据每时每刻都是精确的，那就无需考虑这些问题，Redis异常后我们可以从计算表行数去更新。</p><h4 id="数据库计数"><a href="#数据库计数" class="headerlink" title="数据库计数"></a>数据库计数</h4><p>我们也可以用MySQl新建一张表去计数。那么针对缓存计数的两个问题，我们来分析下：</p><p>首先，这解决了崩溃丢失的问题，InnoDB是支持崩溃恢复不丢数据的。</p><p>然后，我们再看看能不能解决计数不精确的问题。当然，我们有“事务”这个大杀器，可以保证数据一致性。</p><h3 id="不同的count用法对比"><a href="#不同的count用法对比" class="headerlink" title="不同的count用法对比"></a>不同的count用法对比</h3><ol><li><p><code>count(主键id)</code>：InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层。server层拿到id后，判断是不可能为null，就按行累加。</p></li><li><p><code>count(1)</code>：InnoDB引擎遍历整张表，但不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为null，按行累加，显然这比上面的效率要高一些。</p></li><li><p><code>count(字段)</code>：如果这个“字段”是定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累加；如果这个“字段”定义允许为null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是null才累加。</p></li><li><p>count(<em>)：是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(</em>)肯定不是null，按行累加。</p></li></ol><blockquote><p>按照效率排序的话，<code>count(字段)&lt;count(主键id)&lt;count(1)≈count(*)</code>，所以我建议你，尽量使用<code>count(*)</code>。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的锁</title>
    <link href="/2020/03/14/MySQL-lock/"/>
    <url>/2020/03/14/MySQL-lock/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。</p></blockquote><p>锁是MySQL中经常用到的，根据加锁的范围，MySQL里面的锁大致可以分成全局锁、表级锁和行锁三类。</p><p><img src="/images/qiniu/master-slave.png" alt="主备流程图"></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>顾名思义，全局锁就是对整个数据库实例加锁。</p><p>MySQL提供了一个加全局读锁的方法，命令是</p><blockquote><p>Flush tables with read lock (FTWRL)。</p></blockquote><p>当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p><blockquote><p>典型使用场景是，做全库逻辑备份。</p></blockquote><p>官方自带的逻辑备份工具是mysqldump。当mysqldump使用参数–single-transaction的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于MVCC的支持，这个过程中数据是可以正常更新的。</p><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>MySQL里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>表锁的语法是 </p><blockquote><p>lock tables … read/write。</p></blockquote><p>与FTWRL类似，可以用unlock tables主动释放锁，也可以在客户端断开的时候自动释放。需要注意，lock tables语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p><p>举个例子, 如果在某个线程A中执行</p><blockquote><p>lock tables t1 read, t2 write</p></blockquote><p>这个语句，则其他线程写t1、读写t2的语句都会被阻塞。同时，线程A在执行unlock tables之前，也只能执行读t1、读写t2的操作。连写t1都不允许，自然也不能访问其他表。</p><p>在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于InnoDB这种支持行锁的引擎，一般不使用lock tables命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p>另一类表级的锁是MDL（metadata lock)。</p><p>MDL不需要显式使用，在访问一个表的时候会被自动加上。</p><blockquote><p>MDL的作用是，保证读写的正确性。你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p></blockquote><p>因此，在MySQL 5.5版本中引入了MDL，当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。</p><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。</p><p>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。</p><p>虽然MDL锁是系统默认会加的，但却是你不能忽略的一个机制。比如下面这个例子，我经常看到有人掉到这个坑里：给一个小表加个字段，导致整个库挂了。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>MySQL的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如MyISAM引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB是支持行锁的，这也是MyISAM被InnoDB替代的重要原因之一。</p><blockquote><p>在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</p></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote><p>所谓死锁<DeadLock>: 是指两个或两个以上的进程在执行过程中,<br>因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.<br>此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等竺的进程称为死锁进程.<br>表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的InnoDB.</p></blockquote><p><img src="/images/qiniu/lock.png" alt="死锁"></p><blockquote><p>当出现死锁以后，有两种策略：</p></blockquote><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout来设置。<br>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数innodb_deadlock_detect设置为on，表示开启这个逻辑。</p><h3 id="加锁规则"><a href="#加锁规则" class="headerlink" title="加锁规则"></a>加锁规则</h3><p>加锁规则里面，包含了两个“原则”、两个“优化”和一个“bug”。</p><ul><li>原则1：加锁的基本单位是next-key lock，lock是前开后闭区间。</li><li>原则2：查找过程中访问到的对象才会加锁。</li><li>优化1：索引上的等值查询，给唯一索引加锁的时候，next-key lock退化为行锁。</li><li>优化2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。</li><li>一个bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL事务隔离</title>
    <link href="/2020/03/13/MySQL-Isolation/"/>
    <url>/2020/03/13/MySQL-Isolation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。</p></blockquote><p>提到事务，你肯定会想到ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中I，也就是“隔离性”。</p><p>SQL标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。</p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p><img src="/images/qiniu/7dea45932a6b722eb069d2264d0066f8.png" alt="隔离级别"></p><div class="code-wrapper"><pre><code class="hljs armasm">我们来看看在不同的隔离级别下，事务A会有哪些不同的返回结果，也就是图里面<span class="hljs-built_in">V1</span>、<span class="hljs-built_in">V2</span>、<span class="hljs-built_in">V3</span>的返回值分别是什么。若隔离级别是“读未提交”， 则<span class="hljs-built_in">V1</span>的值就是<span class="hljs-number">2</span>。这时候事务B虽然还没有提交，但是结果已经被A看到了。因此，<span class="hljs-built_in">V2</span>、<span class="hljs-built_in">V3</span>也都是<span class="hljs-number">2</span>。若隔离级别是“读提交”，则<span class="hljs-built_in">V1</span>是<span class="hljs-number">1</span>，<span class="hljs-built_in">V2</span>的值是<span class="hljs-number">2</span>。事务B的更新在提交后才能被A看到。所以， <span class="hljs-built_in">V3</span>的值也是<span class="hljs-number">2</span>。若隔离级别是“可重复读”，则<span class="hljs-built_in">V1</span>、<span class="hljs-built_in">V2</span>是<span class="hljs-number">1</span>，<span class="hljs-built_in">V3</span>是<span class="hljs-number">2</span>。之所以<span class="hljs-built_in">V2</span>还是<span class="hljs-number">1</span>，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。若隔离级别是“串行化”，则在事务B执行“将<span class="hljs-number">1</span>改成<span class="hljs-number">2</span>”的时候，会被锁住。直到事务A提交后，事务B才可以继续执行。所以从A的角度看， <span class="hljs-built_in">V1</span>、<span class="hljs-built_in">V2</span>值是<span class="hljs-number">1</span>，<span class="hljs-built_in">V3</span>的值是<span class="hljs-number">2</span>。</code></pre></div><p>查看隔离级别：</p><blockquote><p>show variables like ‘transaction_isolation’;</p></blockquote><h3 id="事务启动"><a href="#事务启动" class="headerlink" title="事务启动"></a>事务启动</h3><blockquote><p>显式启动事务语句， begin 或 start transaction。配套的提交语句是commit，回滚语句是rollback。</p></blockquote><p>建议你总是使用set autocommit=1, 通过显式语句的方式来启动事务。</p><h3 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h3><p>理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。</p><p>在MySQL中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新值，通过回滚操作，都可以得到前一个状态的值。</p><p>假设一个值从1被按顺序改成了2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://static001.geekbang.org/resource/image/d9/ee/d9c313809e5ac148fc39feff532f0fee.png" alt="img"></p><p>当前值是4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的read-view。如图中看到的，在视图A、B、C里面，这一个记录的值分别是1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于read-view A，要得到1，就必须将当前值依次执行图中所有的回滚操作得到。</p><p>同时你会发现，即使现在有另外一个事务正在将4改成5，这个事务跟read-view A、B、C对应的事务是不会冲突的。</p><p>你一定会问，回滚日志总不能一直保留吧，什么时候删除呢？答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。</p><p>什么时候才不需要了呢？就是当系统里没有比这个回滚日志更早的read-view的时候。</p><p>基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。</p><p>长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。</p><p>在MySQL 5.5及以前的版本，回滚日志是跟数据字典一起放在ibdata文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有20GB，而回滚段有200GB的库。最终只好为了清理回滚段，重建整个库。</p><p>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这事需要注意的。</p><h3 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h3><div class="code-wrapper"><pre><code class="hljs inform7">START TRANSACTION    <span class="hljs-comment">[transaction_characteristic <span class="hljs-comment">[, transaction_characteristic]</span> ...]</span>transaction_characteristic: &#123;    WITH CONSISTENT SNAPSHOT  | READ WRITE  | READ ONLY&#125;BEGIN <span class="hljs-comment">[WORK]</span>COMMIT <span class="hljs-comment">[WORK]</span> <span class="hljs-comment">[AND <span class="hljs-comment">[NO]</span> CHAIN]</span> <span class="hljs-comment">[<span class="hljs-comment">[NO]</span> RELEASE]</span>ROLLBACK <span class="hljs-comment">[WORK]</span> <span class="hljs-comment">[AND <span class="hljs-comment">[NO]</span> CHAIN]</span> <span class="hljs-comment">[<span class="hljs-comment">[NO]</span> RELEASE]</span>SET autocommit = &#123;0 | 1&#125;</code></pre></div><p>这些语句提供对事务使用的控制 ：</p><ul><li>START TRANSACTION或 BEGIN开始新交易。</li><li>COMMIT 提交当前事务，使其更改永久生效。</li><li>ROLLBACK 回滚当前事务，取消其更改。</li><li>SET autocommit 禁用或启用当前会话的默认自动提交模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL中几个重要的日志</title>
    <link href="/2020/03/12/MySQL-log/"/>
    <url>/2020/03/12/MySQL-log/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文为极客时间专栏《MySQL实战45讲》笔记，文中部分图文来自该专栏。</p></blockquote><h3 id="几个日志的作用"><a href="#几个日志的作用" class="headerlink" title="几个日志的作用"></a>几个日志的作用</h3><ul><li>重做日志（redo log）：确保事务的持久性。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启mysql服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</li><li>回滚日志（undo log）：保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），即非锁定读</li><li>二进制日志（binlog）：用于复制和备份，在主从复制中，从库利用主库上的binlog进行重播，实现主从同步。 也可基于时间点做数据库的的还原。</li></ul><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>在MySQL里，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高。为了解决这个问题，MySQL的设计者就用了WAL技术，WAL的全称是Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。</p><p>具体来说，当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>另外，InnoDB的redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么这块“粉板”总共就可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><p><img src="/images/qiniu/redolog.png" alt="redolog"></p><p>write pos是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。checkpoint是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos和checkpoint之间的是空着的部分，可以用来记录新的操作。如果write pos追上checkpoint，表示满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把checkpoint推进一下。</p><p>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>在数据修改的时候，不仅记录了redo log，还记录了相对应的undo log，如果因为某些原因导致事务失败或回滚了，可以借助undo log进行回滚。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</p><p>当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。有时候应用到行版本控制的时候，也是通过undo log来实现的：当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据是什么，从而提供该行版本信息，让用户实现非锁定一致性读取。</p><p>undo log是采用段(segment)的方式来记录的，每个undo操作在记录的时候占用一个undo log segment。</p><p>另外，undo log也会产生redo log，因为undo log也要实现持久性保护。</p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>MySQL整体来看，其实就有两块：一块是Server层，它主要做的是MySQL功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的redo log是InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog（归档日志）。</p><p>我想你肯定会问，为什么会有两份日志呢？</p><p>因为最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统——也就是redo log来实现crash-safe能力。</p><p>这两种日志有以下三点不同。</p><ul><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。</li><li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><p>有了对这两个日志的概念性理解，我们再来看执行器和InnoDB引擎在执行这个简单的update语句时的内部流程。</p><p>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p><p>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</p><p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</p><p>执行器生成这个操作的binlog，并把binlog写入磁盘。</p><p>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。</p><p>这里我给出这个update语句的执行流程图，图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。</p><p><img src="http://image.13sai.com/mysql2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="image"></p><p>参考文章：<br>详细分析MySQL事务日志(redo log和undo log)-<br><a href="https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html#auto_id_14">https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html#auto_id_14</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL执行流程说明</title>
    <link href="/2020/03/11/MySQL-workon/"/>
    <url>/2020/03/11/MySQL-workon/</url>
    
    <content type="html"><![CDATA[<p>MySQL的执行流程示意图：</p><p><img src="/images/qiniu/FC0E1A88145F46E6856980A725570302.png" alt="sql执行流程"></p><p>大体来说，MySQL可以分为Server层和存储引擎层两部分。</p><p>Server层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>而存储引擎层负责数据的存储和提取，常见的有InnoDB、MyISAM、Memory等多个存储引擎。现在最常用的存储引擎是InnoDB，从MySQL 5.5.5版本开始它成为了默认存储引擎。</p><p>从图中不难看出，不同的存储引擎共用一个Server层，也就是从连接器到执行器的部分。</p><p>我们依次看下每个组件的作用。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：</p><div class="code-wrapper"><pre><code class="hljs tp">mysql -h <span class="hljs-variable">$ip</span> -<span class="hljs-keyword">P</span> <span class="hljs-variable">$port</span> -u <span class="hljs-variable">$user</span> -p</code></pre></div><p>输完命令之后，你就需要在交互对话里面输入密码。</p><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在<code>show processlist</code>命令中看到它。</p><p>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。<br>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</p><p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p><p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数wait_timeout控制的，默认值是8小时。</p><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要进行重连操作，然后再执行请求。</p><h5 id="连接注意点："><a href="#连接注意点：" class="headerlink" title="连接注意点："></a>连接注意点：</h5><ul><li>长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。</li><li>短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</li></ul><p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p><p>但是全部使用长连接后，你可能会发现，有些时候MySQL占用内存涨得特别快，这是因为MySQL在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是MySQL异常重启了。</p><p>怎么解决这个问题呢？你可以考虑以下两种方案。</p><ol><li>定期主动断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>如果你用的是MySQL 5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立完成后，你就可以执行select语句了。执行逻辑就会来到第二步：查询缓存。</p><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。key是查询的语句，value是查询的结果。如果你的查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p><p>但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</p><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>好在MySQL也提供了这种“按需使用”的方式。你可以将参数query_cache_type设置成DEMAND，这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用SQL_CACHE显式指定，像下面这个语句一样：</p><p>mysql&gt; select SQL_CACHE * from T where ID=10；</p><blockquote><p>需要注意的是，MySQL 8.0版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有这个功能了。</p></blockquote><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL需要知道你要做什么，因此需要对SQL语句做解析。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。</p><p>MySQL从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名T”，把字符串“ID”识别成“列ID”。</p><p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。</p><p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句select少打了开头的字母“s”。</p><div class="code-wrapper"><pre><code class="hljs routeros">mysql&gt; elect * <span class="hljs-keyword">from</span> t where <span class="hljs-attribute">id</span>=1;<span class="hljs-builtin-name">ERROR</span> 1064 (42000): You have an <span class="hljs-builtin-name">error</span> <span class="hljs-keyword">in</span> your SQL syntax; check the<span class="hljs-built_in"> manual </span>that corresponds <span class="hljs-keyword">to</span> your MySQL<span class="hljs-built_in"> server </span>version <span class="hljs-keyword">for</span> the right syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;elect * from t where ID=1&#x27;</span> at line 1</code></pre></div><p>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>经过了分析器，MySQL就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p><p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>MySQL通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。</p><p>开始执行的时候，要先判断一下你对这个表T有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示(在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用precheck验证权限)。</p><div class="code-wrapper"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> T <span class="hljs-keyword">where</span> ID=<span class="hljs-number">10</span>;ERROR <span class="hljs-number">1142</span> (<span class="hljs-number">42000</span>): <span class="hljs-keyword">SELECT</span> command denied <span class="hljs-keyword">to</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;b&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">table</span> <span class="hljs-string">&#x27;T&#x27;</span></code></pre></div><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p>比如我们这个例子中的表T中，ID字段没有索引，那么执行器的执行流程是这样的：</p><p>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中；</p><p>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</p><p>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</p><p>至此，这个语句就执行完成了。</p><p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElementUI多图拖拽</title>
    <link href="/2020/02/27/228/"/>
    <url>/2020/02/27/228/</url>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>yarn add vuedraggable<br>or<br>npm i -S vuedraggable</p></blockquote><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">:offset</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;预览&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image-list&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">draggable</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;showImgList&quot;</span>  @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;dragChange&quot;</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(image, index) in showImgList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image-wrap&quot;</span>&gt;</span>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;imgStyle&quot;</span> /&gt;</span>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-wrap&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;removeFile(index)&quot;</span>&gt;</span>                                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-delete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span></span><span class="hljs-tag">                                <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;imageListUpload&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">:action</span>=<span class="hljs-string">&quot;$uploadPicUrl&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">:headers</span>=<span class="hljs-string">&quot;header&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">&quot;beforeUpload&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">:on-success</span>=<span class="hljs-string">&quot;uploadSuccess&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image-uploader&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">:on-error</span>=<span class="hljs-string">&quot;onError&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">multiple</span></span><span class="hljs-tag">                                <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span><span class="hljs-tag">                                <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span>                                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;loading ? &#x27;el-icon-loading&#x27; : &#x27;el-icon-plus&#x27;&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;imgStyle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>                            <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">draggable</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><span class="css"><span class="hljs-selector-class">.ql-container</span> <span class="hljs-selector-class">.ql-editor</span>&#123;</span><span class="css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">400px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.avatar-uploader</span> <span class="hljs-selector-class">.el-upload</span> &#123;</span><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;</span><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.avatar-uploader</span> <span class="hljs-selector-tag">img</span> &#123;</span><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;</span><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.avatar-uploader</span> <span class="hljs-selector-class">.avatar-uploader-icon</span> &#123;</span><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#d9d9d9</span>;</span><span class="css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><span class="css">    <span class="hljs-attribute">cursor</span>: pointer;</span><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#8c939d</span>;</span><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">178px</span>;</span><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;</span><span class="css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">178px</span>;</span><span class="css">    <span class="hljs-attribute">text-align</span>: center;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-id">#video</span> <span class="hljs-selector-class">.video</span> &#123;</span><span class="css">    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;</span><span class="css">    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">200px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.avatar</span> &#123;</span><span class="css"> <span class="hljs-attribute">width</span>: <span class="hljs-number">178px</span>;</span><span class="css"> <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;</span><span class="css"> <span class="hljs-attribute">display</span>: block;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.avatar-uploader</span> <span class="hljs-selector-tag">img</span> &#123;</span><span class="css">   <span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;</span><span class="css">   <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.ql-editor</span>&#123;</span><span class="css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">400px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.ql-snow</span> <span class="hljs-selector-class">.ql-picker</span> &#123;</span><span class="css">      <span class="hljs-attribute">height</span>: auto;</span><span class="css">&#125;</span><span class="css"></span><span class="css"><span class="hljs-selector-class">.image-list</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> &#123;</span><span class="css">  <span class="hljs-attribute">display</span>: flex;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-list</span> <span class="hljs-selector-class">.image-wrap</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> <span class="hljs-selector-class">.image-wrap</span> &#123;</span><span class="css">  <span class="hljs-attribute">position</span>: relative;</span><span class="css">  <span class="hljs-attribute">display</span>: inline-block;</span><span class="css">  <span class="hljs-attribute">box-sizing</span>: content-box;</span><span class="css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">0</span>;</span><span class="css">  <span class="hljs-attribute">vertical-align</span>: top;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-list</span> <span class="hljs-selector-class">.image-wrap</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.icon-wrap</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> <span class="hljs-selector-class">.image-wrap</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.icon-wrap</span> &#123;</span><span class="css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-list</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span> &#123;</span><span class="css">  <span class="hljs-attribute">position</span>: absolute;</span><span class="css">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><span class="css">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><span class="css">  <span class="hljs-attribute">cursor</span>: default;</span><span class="css">  <span class="hljs-attribute">text-align</span>: center;</span><span class="css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><span class="css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><span class="css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><span class="css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.7</span>);</span><span class="css">  <span class="hljs-attribute">transition</span>: opacity .<span class="hljs-number">3s</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-list</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span> <span class="hljs-selector-class">.el-icon-zoom-in</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span> <span class="hljs-selector-class">.el-icon-zoom-in</span> &#123;</span><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><span class="css">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">8px</span>;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-list</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span> <span class="hljs-selector-class">.el-icon-delete</span>,</span><span class="css"><span class="hljs-selector-class">.image-item</span> <span class="hljs-selector-class">.image-wrap</span> <span class="hljs-selector-class">.icon-wrap</span> <span class="hljs-selector-class">.el-icon-delete</span> &#123;</span><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-item</span> &#123;</span><span class="css">  <span class="hljs-attribute">display</span>: inline-flex;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-uploader</span> &#123;</span><span class="css">  <span class="hljs-attribute">display</span>: inline-block;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-uploader</span> <span class="hljs-selector-class">.el-upload</span> &#123;</span><span class="css">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-number">#d9d9d9</span>;</span><span class="css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><span class="css">  <span class="hljs-attribute">cursor</span>: pointer;</span><span class="css">  <span class="hljs-attribute">position</span>: relative;</span><span class="css">  <span class="hljs-attribute">overflow</span>: hidden;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-uploader</span> <span class="hljs-selector-class">.el-upload</span> <span class="hljs-selector-attr">[class^=<span class="hljs-string">&quot;el-icon&quot;</span>]</span> &#123;</span><span class="css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;</span><span class="css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#8c939d</span>;</span><span class="css">  <span class="hljs-attribute">text-align</span>: center;</span><span class="css">&#125;</span><span class="css"><span class="hljs-selector-class">.image-uploader</span> <span class="hljs-selector-class">.el-upload</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><span class="css">  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#409EFF</span>;</span><span class="css">&#125;</span><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-keyword">import</span> draggable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuedraggable&#x27;</span></span><span class="javascript"></span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">    <span class="hljs-attr">components</span>: &#123;</span><span class="javascript">        draggable,</span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            <span class="hljs-attr">showImgList</span>: [],</span><span class="javascript">            <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span>,</span><span class="javascript">        &#125;</span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.$route.params.id &gt; <span class="hljs-number">0</span>) &#123;</span><span class="javascript">            <span class="hljs-built_in">this</span>.getInfo(<span class="hljs-built_in">this</span>.$route.params.id)</span><span class="javascript">            <span class="hljs-built_in">this</span>.goodsForm.id = <span class="hljs-built_in">this</span>.$route.params.id;</span><span class="javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">this</span>.responseVisible = <span class="hljs-literal">false</span>;</span><span class="javascript">        &#125;</span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-attr">computed</span>: &#123;</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">imgStyle</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;180px&#x27;</span>, </span><span class="javascript">                <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;180px&#x27;</span>,</span><span class="javascript">                <span class="hljs-attr">lineHeight</span>: <span class="hljs-string">&#x27;180px&#x27;</span>,</span><span class="javascript">            &#125;</span><span class="javascript">        &#125;</span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">        <span class="hljs-comment">// 为图片ICON绑定事件  getModule 为编辑器的内部属性</span></span><span class="javascript">        <span class="hljs-comment">// this.$refs.myQuillEditor.quill.getModule(&#x27;toolbar&#x27;).addHandler(&#x27;image&#x27;, this.imgHandler)</span></span><span class="javascript">        <span class="hljs-comment">// this.$refs.myQuillEditor.quill.getModule(&#x27;toolbar&#x27;).addHandler(&#x27;video&#x27;, this.insertVideo) // 为视频ICON绑定事件</span></span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">beforeUpload</span>(<span class="hljs-params">file</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">if</span> (file.type.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;image&#x27;</span>) &#123;</span><span class="javascript">                <span class="hljs-keyword">let</span> tempSize = file.size / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">2</span>;</span><span class="javascript">                <span class="hljs-keyword">if</span> (tempSize &gt; <span class="hljs-number">1</span>) &#123;</span><span class="javascript">                    <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;图片尺寸不得大于2M！&#x27;</span>);</span><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><span class="javascript">                &#125;</span><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;请上传图片格式（jpg、png、gif）&#x27;</span>);</span><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><span class="javascript">            &#125;</span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params">id</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>;</span><span class="javascript">            projectInfo(id).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;</span><span class="javascript">                _self.goodsForm = res.data.data;</span><span class="javascript">                _self.goodsForm.start_time = timestampToDate(_self.goodsForm.start_time);</span><span class="javascript">                _self.goodsForm.over_time = timestampToDate(_self.goodsForm.over_time);</span><span class="javascript">                _self.showImgList = _self.goodsForm.desc.split(<span class="hljs-string">&quot;|&quot;</span>);</span><span class="javascript">                _self.responseVisible = <span class="hljs-literal">false</span>;</span><span class="javascript">            &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(error);</span><span class="javascript">            &#125;)</span><span class="javascript">        &#125;,</span><span class="javascript">        </span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handleRemove</span>(<span class="hljs-params">file, fileList</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(file, fileList);</span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">uploadSuccess</span>(<span class="hljs-params">response, file, fileList</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">try</span> &#123;</span><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fileInfo <span class="hljs-keyword">of</span> fileList) &#123;</span><span class="javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.type === <span class="hljs-string">&#x27;image&#x27;</span>) &#123;</span><span class="javascript">                        <span class="hljs-built_in">this</span>.imgUrl = response.key</span><span class="javascript">                        <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:data&#x27;</span>, response.key)</span><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.showImgList.length &gt;= <span class="hljs-built_in">this</span>.limit) &#123; <span class="hljs-comment">// 限制图片张数</span></span><span class="javascript">                            <span class="hljs-built_in">this</span>.showImgList.length = <span class="hljs-built_in">this</span>.limit</span><span class="javascript">                            <span class="hljs-keyword">throw</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`最多上传 <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.limit&#125;</span> 张图片`</span>))</span><span class="javascript">                        &#125;</span><span class="javascript">                        <span class="hljs-built_in">this</span>.showImgList.push(response.data.filepath)</span><span class="javascript">                        <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:data&#x27;</span>, <span class="hljs-built_in">this</span>.showImgList)</span><span class="javascript">                    &#125;</span><span class="javascript">                &#125;</span><span class="javascript">            &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><span class="javascript">                <span class="hljs-built_in">this</span>.$message.error(error.message)</span><span class="javascript">            &#125; <span class="hljs-keyword">finally</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span></span><span class="javascript">                <span class="hljs-built_in">this</span>.$refs.imageListUpload &amp;&amp; <span class="hljs-built_in">this</span>.$refs.imageListUpload.clearFiles()</span><span class="javascript">                <span class="hljs-built_in">this</span>.$refs.imageUpload &amp;&amp; <span class="hljs-built_in">this</span>.$refs.imageUpload.clearFiles()</span><span class="javascript">            &#125;</span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">removeFile</span>(<span class="hljs-params">index</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&#x27;确定删除该图片吗?&#x27;</span>, <span class="hljs-string">&#x27;提示&#x27;</span>, &#123;</span><span class="javascript">                <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,</span><span class="javascript">                <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>,</span><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span></span><span class="javascript">            &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.type === <span class="hljs-string">&#x27;image&#x27;</span>) &#123;</span><span class="javascript">                    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:data&#x27;</span>, <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span>.data === <span class="hljs-string">&#x27;object&#x27;</span> ? &#123;&#125; : <span class="hljs-string">&#x27;&#x27;</span>)</span><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">                    <span class="hljs-built_in">this</span>.showImgList.splice(index, <span class="hljs-number">1</span>)</span><span class="javascript">                    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:data&#x27;</span>, <span class="hljs-built_in">this</span>.showImgList)</span><span class="javascript">                &#125;</span><span class="javascript">            &#125;)</span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">onError</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;上传文件失败&#x27;</span>)</span><span class="javascript">        &#125;,</span><span class="javascript"></span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">dragChange</span>(<span class="hljs-params">ele</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>(ele.moved)</span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">handleRemove</span>(<span class="hljs-params">file, fileList</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-keyword">let</span> imgList = fileList.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;</span><span class="javascript">                <span class="hljs-keyword">return</span> item.response.key</span><span class="javascript">            &#125;)</span><span class="javascript">            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:data&#x27;</span>, imgList)</span><span class="javascript">        &#125;,</span><span class="javascript">    &#125;</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>注意务必注册引入组件</p><div class="code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> draggable <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuedraggable&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    ...    components: &#123;        draggable,    &#125;,    ...</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用篇：2.延时任务</title>
    <link href="/2020/02/22/phpframe14/"/>
    <url>/2020/02/22/phpframe14/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><blockquote><p>延时任务有别于定时任务，定时任务往往是固定周期的，有明确的触发时间。而延时任务一般没有固定的开始时间，它常常是由一个事件触发的，而在这个事件触发之后的一段时间内触发另一个事件。</p></blockquote><p>我们不妨来设定一个实际的场景，电商系统下单成功之后如果15分钟未支付成功，就系统自动取消订单。</p><p>我们先来实现代码，然后再来详细说明：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 我们定义一个abstract，定义两个方法，startAfter和startAt</span><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayTask</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> DELAY_TASK = <span class="hljs-string">&#x27;delayTask&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 延时时间，在触发时间后多久执行</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $pushDelayTime</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startAfter</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$pushDelayTime</span></span>)</span><span class="hljs-function">    </span>&#123;        RedisManager::getRedis()-&gt;zAdd(<span class="hljs-built_in">self</span>::DELAY_TASK, time() + <span class="hljs-variable">$pushDelayTime</span>, serialize(<span class="hljs-keyword">$this</span>));    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 定时时间，在未来某时刻执行</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $pushDelayAt</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startAt</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$pushDelayAt</span></span>)</span><span class="hljs-function">    </span>&#123;        RedisManager::getRedis()-&gt;zAdd(<span class="hljs-built_in">self</span>::DELAY_TASK, <span class="hljs-variable">$pushDelayAt</span>, serialize(<span class="hljs-keyword">$this</span>));    &#125;    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDelayTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DelayTask</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-variable">$id</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$file</span>  = <span class="hljs-string">&#x27;text.txt&#x27;</span>;<span class="hljs-comment">//要写入文件的文件名（可以是任意文件名），如果文件不存在，将会创建一个</span>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;写入的内容&quot;</span>.time().<span class="hljs-string">&quot;\n&quot;</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span> = file_put_contents(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$content</span>,FILE_APPEND))&#123;<span class="hljs-comment">// 这个函数支持版本(PHP 5)</span>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;写入成功。&lt;br /&gt;&quot;</span>;        &#125;    &#125;&#125;</code></pre></div><p>RedisManager是封装的一个单例模式实现的redis类，我们也贴出代码，然后再对上面的代码做一些说明。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisManager</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$instance</span> = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> = <span class="hljs-keyword">new</span> \Redis();        <span class="hljs-variable">$config</span> = <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;redis.config.php&#x27;</span>;        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>-&gt;connect(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;host&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;port&#x27;</span>], <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;timeout&#x27;</span>]);        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>-&gt;auth(<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取静态实例</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRedis</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>) &#123;            <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 禁止clone</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;    &#125;&#125;</code></pre></div><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">redis</span> <span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD saif <span class="hljs-number">1</span> redis(integer) <span class="hljs-number">1</span>redis <span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD saif <span class="hljs-number">2</span> mongodb(integer) <span class="hljs-number">1</span>redis <span class="hljs-number">127.0.0.1:6379</span>&gt; ZADD saif <span class="hljs-number">4</span> mysql(integer) <span class="hljs-number">0</span>redis <span class="hljs-number">127.0.0.1:6379</span>&gt; ZRANGE saif <span class="hljs-number">0</span> <span class="hljs-number">10</span> WITHSCORES<span class="hljs-number">1</span>) <span class="hljs-string">&quot;redis&quot;</span><span class="hljs-number">2</span>) <span class="hljs-string">&quot;1&quot;</span><span class="hljs-number">3</span>) <span class="hljs-string">&quot;mongodb&quot;</span><span class="hljs-number">4</span>) <span class="hljs-string">&quot;2&quot;</span><span class="hljs-number">5</span>) <span class="hljs-string">&quot;mysql&quot;</span><span class="hljs-number">6</span>) <span class="hljs-string">&quot;4&quot;</span></code></pre></div><p>如果你有redis可视化工具，你会发现有序集合存储的结构是这样：</p><table><thead><tr><th>row</th><th>value</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>redis</td><td>1</td></tr><tr><td>2</td><td>mongodb</td><td>2</td></tr><tr><td>3</td><td>mysql</td><td>4</td></tr></tbody></table><p>我们再来看一下代码，我们使用时间戳作为分值，使用对象作为值，存储到Redis有序集合。</p><blockquote><p>file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] ) : int   — 将一个字符串写入文件</p></blockquote><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><div class="code-wrapper"><pre><code class="hljs livescript">我们先尝试写入任务：<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">4</span>))</span>-&gt;</span>startAfter(<span class="hljs-number">900</span>);<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">4</span>))</span>-&gt;</span>startAfter(<span class="hljs-number">120</span>);<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">4</span>))</span>-&gt;</span>startAfter(<span class="hljs-number">600</span>);<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">3</span>))</span>-&gt;</span>startAt(<span class="hljs-number">158120384</span>);<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">3</span>))</span>-&gt;</span>startAt(<span class="hljs-number">158420380</span>);<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> TestDelayTask(<span class="hljs-number">3</span>))</span>-&gt;</span>startAt(<span class="hljs-number">158120900</span>);</code></pre></div><p>执行代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayTaskTask</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> QueneName = <span class="hljs-string">&#x27;delayTask&#x27;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$currentTime</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$once</span> = <span class="hljs-number">5</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;currentTime = time();        error_reporting(error_reporting() &amp; ~E_WARNING);        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;            <span class="hljs-comment">// 每次取出5条</span>            <span class="hljs-variable">$list</span> = RedisManager::getRedis()-&gt;zRange(<span class="hljs-built_in">self</span>::QueneName, <span class="hljs-number">0</span>, <span class="hljs-keyword">$this</span>-&gt;once, <span class="hljs-literal">true</span>);            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$list</span>)) &#123;                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val</span>=&gt;<span class="hljs-variable">$score</span>) &#123;                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$score</span> &lt; <span class="hljs-keyword">$this</span>-&gt;currentTime) &#123;                        unserialize(<span class="hljs-variable">$val</span>)-&gt;run();                        RedisManager::getRedis()-&gt;zDelete(<span class="hljs-built_in">self</span>::QueneName, <span class="hljs-variable">$val</span>);                    &#125; <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;                    &#125;                &#125;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;&#125;(<span class="hljs-keyword">new</span> DelayTaskTask())-&gt;run();</code></pre></div><p>我们可以设置一个定时任务，每分钟执行一次上述代码。</p><p>我们执行之后，会发现一旦过了我们设定的时间，text.txt就不断有文字写入了。</p><p>代码比较杂，我有一个demo代码，大家可以查看。</p><p><a href="https://github.com/13sai/wheels/tree/master/DelayTask-%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1">DelayTask-基于redis的延时任务</a></p><p>这样，我们就利用Redis有序集合，完成了一个很基础的延时任务。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>加入run方法代码执行时间过长，一分钟执行一次有什么问题吗？</li><li>每分钟执行一次，间隔有点长，能不能优化呢？</li></ul>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>应用篇：1.分布式锁</title>
    <link href="/2020/02/22/phpframe13/"/>
    <url>/2020/02/22/phpframe13/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><blockquote><p>为了防止分布式系统中的多个进程之间相互干扰，我们需要一种分布式协调技术来对这些进程进行调度。而这个分布式协调技术的核心就是来实现这个分布式锁。</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行</li><li>高可用的获取锁与释放锁</li><li>高性能的获取锁与释放锁</li><li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）</li><li>具备锁失效机制，防止死锁</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li></ul><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>常见的有：</p><ul><li>基于Redis</li><li>基于mysql</li><li>基于Zookeeper</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>考虑到我们使用的PHP语言，简单结合Redis来实现一下分布式锁。</p><p>我们来画个简单的原理图：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/25/41489/ov5tcJmAKT.png!large" alt="image"></p><p>原理十分简单，那么我们如何实现呢？</p><p>这里我们用到两个知识点：</p><ul><li>Redis的setnx方法</li><li>php的register</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processLock</span>(<span class="hljs-params"><span class="hljs-variable">$redis</span>, <span class="hljs-variable">$key</span>, <span class="hljs-variable">$ttl</span> = <span class="hljs-number">5</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$ret</span> = <span class="hljs-variable">$redis</span>-&gt;setnx(<span class="hljs-variable">$key</span>, <span class="hljs-number">1</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ret</span>) &#123;        <span class="hljs-variable">$redis</span>-&gt;expire(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$ttl</span>);        register_shutdown_function(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$redis</span>, <span class="hljs-variable">$key</span></span>)</span>&#123;            <span class="hljs-variable">$redis</span>-&gt;del(<span class="hljs-variable">$key</span>);            &#125;);    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;&#125;</code></pre></div><p>demo里的$redis是一个redis实例，我们在前面已经实现过，不多说明。</p><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>我们使用的setnx命令，senx表示“SET if Not eXists”，如果key不存在，则set，如果存在，则不set</p><div class="code-wrapper"><pre><code class="hljs pgsql">redis&gt; SETNX mykey &quot;Hello&quot;(<span class="hljs-type">integer</span>) <span class="hljs-number">1</span>redis&gt; SETNX mykey &quot;World&quot;(<span class="hljs-type">integer</span>) <span class="hljs-number">0</span>redis&gt; <span class="hljs-keyword">GET</span> mykey&quot;Hello&quot;</code></pre></div><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>使用的是del，即删除这个key。这里结合了 register_shutdown_function — 注册一个会在php中止时执行的函数，设置了之后我们就可以不必手动去解锁</p><h4 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h4><p>这里给锁加了一个expire过期时间5秒，目的是防止使用这个方法之后的执行了“神奇”代码抛出了语法错误，导致register_shutdown_function里的代码没有执行，虽然请求结束，但是加锁后，没有解锁，影响了后续请求。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>加入setnx之后expire之前程序异常了怎么办？</li></ul>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis持久化aof和rdb</title>
    <link href="/2020/02/16/aof/"/>
    <url>/2020/02/16/aof/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis持久"><a href="#Redis持久" class="headerlink" title="Redis持久"></a>Redis持久</h1><p>持久化的功能:Redis是内存数据库，数据都是存储在内存中，为了避免进程退出导致数据的永久丢失，需要定期将Redis中的数据以某种形式(数据或命令) 从内存保存到硬盘。 当下次Redis重启时，利用持久化文件实现数据恢复。除此之外，为了进行灾难备份，可以将持久化文件拷贝到一个远程位置。</p><p>Redis持久化分为RDB持久化和AOF持久化，前者将当前数据保存到硬盘，后者则是将每次执行的写命令保存到硬盘。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><blockquote><p>RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。 ，触发 RDB 持久化过程分为手动触发和自动触发。</p></blockquote><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><p>save 命令:阻塞当前 Redis 服务器，直到 RDB 过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。</p><p>bgsave 命令:Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。</p><p>显然 bgsave 命令是针对 save阻塞问题做的优化。因此 Redis 内部所有的涉及 RDB 的操作都采用 bgsave 的方式。</p><p>除了执行命令手动触发之外，Redis 内部还存在自动触发 RDB 的持久化机制，例如以下场景:</p><ol><li>使用 save 相关配置，如“save m n”。表示 m 秒内数据集存在 n 次修改时，自动触发 bgsave。</li><li>如果从节点执行全量复制操作，主节点自动执行 bgsave 生成 RDB 文件并发送给从节点。</li><li>执行 debug reload 命令重新加载 Redis 时，也会自动触发 save 操作。</li><li>默认情况下执行 shutdown 命令时，如果没有开启 AOF 持久化功能则自动执行 bgsave。</li></ol><h3 id="bgsave流程"><a href="#bgsave流程" class="headerlink" title="bgsave流程"></a>bgsave流程</h3><p><img src="http://img1.sycdn.imooc.com/5c8518900001734506990490.png" alt="bgsave流程"></p><ol><li>执行 bgsave 命令，Redis 父进程判断当前是否存在正在执行的子进程，如 RDB/AOF 子进程，如果存在 bgsave 命令直接返回。</li><li>父进程执行 fork 操作创建子进程，fork操作过程中父进程会阻塞。</li><li>父进程 fork 完成后，bgsave 命令返回“Background saving started”信息并不再阻塞父进程，可以继续响应其他命令。</li><li>子进程会共享一部分主进程的数据空间，并且把共享的数据置为read-only的状态，子进程创建 RDB 文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。在持久化的过程中是避免不了有新的数据写入的，因为我们有一部分的数据是共享的，两个进程同时拥有一块数据，肯定会导致数据不一致的问题， 但是依赖于操作系统的fork机制，在修改的时候一定是修改部分内存页的数据，这个时候会触发对应内存页的copyonwrite的操作</li><li>进程发送信号给父进程表示完成，父进程更新统计信息。</li></ol><h3 id="配置文件（流程类似bgsave）"><a href="#配置文件（流程类似bgsave）" class="headerlink" title="配置文件（流程类似bgsave）"></a>配置文件（流程类似bgsave）</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># 900s内至少达到一条写命令 </span><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span><span class="hljs-comment"># 300s内至少达至10条写命令 </span><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><span class="hljs-comment"># 60s内至少达到10000条写命令 </span><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span></code></pre></div><h3 id="RDB-文件的处理"><a href="#RDB-文件的处理" class="headerlink" title="RDB 文件的处理"></a>RDB 文件的处理</h3><h5 id="1-保存"><a href="#1-保存" class="headerlink" title="1. 保存:"></a>1. 保存:</h5><p>RDB 文件保存在 dir 配置指定的目录下，文件名通过 dbfilename 配置指定。可以通过执行 config set dir{newDir}和 config set<br>dbfilename{newFileName}运行期动态执行，当下次运行时 RDB 文件会保存到新目录。<br>当遇到坏盘或磁盘写满等情况时，可以通过 config set dir{newDir}在线修改文件路径到可用的磁盘路径，之后执行 bgsave 进行磁盘切换，同样适用于 AOF 持久化文件。</p><h5 id="2-压缩"><a href="#2-压缩" class="headerlink" title="2. 压缩:"></a>2. 压缩:</h5><p>Redis 默认采用 LZF 算法对生成的 RDB 文件做压缩处理，压缩后的文件远远小于内存大小，默认开启，可以通过参数 config set rdbcompression{yes|no}动态修改。<br>虽然压缩 RDB 会消耗 CPU，但可大幅降低文件的体积，方便保存到硬盘或通过网络发送给从节点，因此线上建议开启。</p><h3 id="RDB方式的优点"><a href="#RDB方式的优点" class="headerlink" title="RDB方式的优点"></a>RDB方式的优点</h3><ol><li>RDB 是一个非常紧凑的文件，它保存了 Redis 在某个时间点上的数据集。这种文件非常适合用于进行备份: 比如说，你可以在最近的 24小时内，每小时备份一次 RDB文件，并且在每个月的每一天，也备份一个 RDB 文件。 这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。</li><li>RDB 可以最大化 Redis 的性能:父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存 工作，父进程无须执行任何磁盘 I/O 操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li></ol><h3 id="RDB方式的缺点"><a href="#RDB方式的缺点" class="headerlink" title="RDB方式的缺点"></a>RDB方式的缺点</h3><ol><li>RDB 方式数据没办法做到实时持久化/秒级持久化。 如果服务器宕机的话，采用RDB的方式会造成某个时段内数据的丢失，比如我们设置10分钟同步一次或5分钟达到1000次写入就同步一次，那么如果还没达到触发条件服务器就死机了，那么这个时间段的数据会丢失。</li><li>使用bgsave命令在forks子进程时，如果数据量太大，forks的过程也会发生阻塞，另外，forks子进程会耗费内存。</li></ol><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><blockquote><p>AOF(append only file)持久化:与RDB存储某个时刻的快照不同，AOF持久化方式会记录客户端对服务器的每一次写操作命令到日志当中，并将这些写操作以Redis协议追加保存到以后缀为aof文件末尾</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>redis.conf</p><div class="code-wrapper"><pre><code class="hljs pgsql">appendonly yes #启用aof持久化方式 appendfsync <span class="hljs-keyword">always</span>/<span class="hljs-keyword">no</span>/everysec设置为<span class="hljs-keyword">always</span>时，会极大消弱Redis的性能，因为这种模式下每次<span class="hljs-keyword">write</span>后都会调用fsync（Linux为调用fdatasync）。如果设置为<span class="hljs-keyword">no</span>，则<span class="hljs-keyword">write</span>后不会有fsync调用，由操作系统自动调度刷磁盘，性能是最好的。everysec为最多每秒调用一次fsync，这种模式性能并不是很糟糕，一般也不会产生毛刺，这归功于Redis引入了BIO线程，所有fsync操作都异步交给了BIO线程。</code></pre></div><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="http://image.13sai.com/study/aof.png" alt="image"></p><ol><li>所有的写入命令会追加到 aof_buf(缓冲区)中。（Redis使用单线程响应命令，如果每次AOF文件命令都追加到磁盘，会极大的影响处理性能）</li><li>AOF 缓冲区根据对应的策略向硬盘做同步操作。</li><li>随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</li><li>当 Redis 服务器重启时，可以加载 AOF 文件进行数据恢复。</li></ol><h3 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h3><blockquote><p>AOF将客户端的每一个写操作都追加到aof文件末尾，随着命令不断写入 AOF，文件会越来越大，为了解决这个问题，Redis 引入了AOF 重写机制压缩文件体积。AOF 文件重写是把 Redis 进程内的数据转化为写命令同步到新 AOF 文件的过程。 比如:<br>多条写命令可以合并为一个，如:lpush list a、lpush list b、lpush list c 可以转化为:lpush list a b c。 </p><p>AOF 重写降低了文件占用空间，除此之外，另一个目的是:更小的 AOF 文件可以更快地被 Redis 加载。</p></blockquote><h3 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h3><p><img src="http://image.13sai.com/study/aof-rewrite.png" alt="重写机制"></p><ol><li><p>执行 AOF 重写请求。 如果当前进程正在执行 AOF 重写，请求不执行并返回如下响应: ERR Background append only file rewriting already in progress</p></li><li><p>父进程执行 fork 创建子进程，并拿到fork时的AOF文件数据写到一个临时AOF文件中。</p></li><li><p>主进程 fork 操作完成后，继续响应其他命令。所有修改命令依然写入 AOF 缓冲区并根据 appendfsync 策略同步到硬盘，保证原有 AOF 机制正确 性。</p></li><li><p>由于 fork 操作运用写时复制技术，子进程只能共享 fork 操作时的内存数据。由于父进程依然响应命令，Redis 使用“AOF 重写缓冲区”保存这部分新数据，防止新 AOF 文件生成期间丢失这部分数据。</p></li><li><p>子进程根据内存快照，按照命令合并规则写入到新的 AOF 文件。每次批量写入硬盘数据量由配置 aof-rewrite-incremental-fsync 控制，默认为 32MB，防止单 次刷盘数据过多造成硬盘阻塞。</p><p>5.1) 新 AOF 文件写入完成后，子进程发送信号给父进程，父进程更新统计信息。<br>5.2) 父进程把 AOF 重写缓冲区的数据写入到新的 AOF 文件。<br>5.3) 使用新 AOF 文件替换老文件，完成 AOF 重写。</p></li></ol><h3 id="触发重写"><a href="#触发重写" class="headerlink" title="触发重写"></a>触发重写</h3><ol><li><p>手动触发:直接调用 bgrewriteaof 命令。</p></li><li><p>自动触发:根据 auto-aof-rewrite-min-size和auto-aof-rewrite-percentage 参数确定自动触发时机。</p><div class="code-wrapper"><pre><code class="hljs coq"><span class="hljs-built_in">auto</span>-aof-<span class="hljs-built_in">rewrite</span>-min-size:表示运行 AOF 重写时文件最小体积，默认为 <span class="hljs-number">64</span>MB。<span class="hljs-built_in">auto</span>-aof-<span class="hljs-built_in">rewrite</span>-percentage:代表当前 AOF 文件空间(aof_current_size)和上一次重写后 AOF 文件空间(aof_base_size)的比值。示例:<span class="hljs-built_in">auto</span>-aof-<span class="hljs-built_in">rewrite</span>-percentage:<span class="hljs-number">100</span> <span class="hljs-built_in">auto</span>-aof-<span class="hljs-built_in">rewrite</span>-min-size:<span class="hljs-number">64</span>mb默认配置是当AOF文件大小是上次<span class="hljs-built_in">rewrite</span>后大小的一倍且文件大于<span class="hljs-number">64</span>M时触发</code></pre></div></li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>AOF文件损坏<br>在写入aof日志文件时，如果Redis服务器宕机，则aof日志文件文件会出格式错误，在重启Redis服务器时，Redis服务器会拒绝载入这个aof文件， 可以通过命令修复aof并恢复数据</p><blockquote><p>redis-check-aof -fix file.aof</p></blockquote><h3 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h3><ol><li>AOF可以设置 完全不同步、每秒同步、每次操作同，默认是每秒同步。因为AOF是操作指令的追加，所以可以频繁的大量的同步。</li><li>AOF文件是一个值追加日志的文件，即使服务宕机为写入完整的命令，也可以通过redis-check-aof工具修复这些问题。</li><li>如果AOF文件过大，Redis会在后台自动地重写AOF文件。重写后会使AOF文件压缩到最小所需的指令集。</li><li>AOF文件是有序保存数据库的所有写入操作，易读，易分析。即使如果不小心误操作数据库，也很容易找出错误指令，恢复到某个数据节点。例如不小心FLUSHALL，可以非常容易恢复到执行命令之前。</li></ol><h3 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h3><ol><li>相同数据量下，AOF的文件通常体积会比RDB大。因为AOF是存指令的，而RDB是所有指令的结果快照。但AOF在日志重写后会压缩一些空间。</li><li>在大量写入和载入的时候，AOF的效率会比RDB低。因为大量写入，AOF会执行更多的保存命令，载入的时候也需要大量的重执行命令来得到最后的结果。RDB对此更有优势。</li></ol><h3 id="配置汇总"><a href="#配置汇总" class="headerlink" title="配置汇总"></a>配置汇总</h3><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">1000</span>:<span class="hljs-number">60</span>s内至少达到<span class="hljs-number">1000</span>条写命令<span class="hljs-attribute">appendonly</span> no:是否开启AOF<span class="hljs-attribute">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span>:AOF文件名<span class="hljs-attribute">dir</span> ./:RDB文件和AOF文件所在目录<span class="hljs-attribute">appendfsync</span> everysec:fsync持久化策略<span class="hljs-attribute">no</span>-appendfsync-<span class="hljs-literal">on</span>-rewrite no:AOF重写期间是否禁止fsync;如果开启该选项，可以减轻文件重写时CPU和硬盘的负载(尤其是硬盘)，但是可能会丢 失AOF重写期间的数据;需要在负载和安全性之间进行平衡<span class="hljs-attribute">auto</span>-aof-rewrite-percentage <span class="hljs-number">100</span>:文件重写触发条件之一<span class="hljs-attribute">auto</span>-aof-rewrite-min-size <span class="hljs-number">64</span>mb:文件重写触发提交之一<span class="hljs-attribute">aof</span>-load-truncated yes:如果AOF文件结尾损坏，Redis启动时是否仍载入AOF文件</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：9.设计模式</title>
    <link href="/2020/02/16/phpframe12/"/>
    <url>/2020/02/16/phpframe12/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>框架的开发基本结束了，这一节我们来探讨一下设计模式。</p><hr><p>谈设计模式，首先要来简单聊聊面向对象。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>面向对象程序设计（Object-Oriented Programming, OOP）是一种程序设计范型，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和可扩展性。它和面向过程、函数式编程被称为编程语言中的三大范式。</p></blockquote><h3 id="概念知识"><a href="#概念知识" class="headerlink" title="概念知识"></a>概念知识</h3><ol><li>面向对象的核心思想是对象、封装、可重用性、可扩展性。</li><li>面向对象三要素：封装、继承和多态。</li><li>面向对象设计的五大原则：单一职责原则、接口隔离原则、开放封闭原则、替换原则、依赖倒置原则。</li></ol><p>关于这些概念的更详细解释，我推荐大家阅读《PHP核心技术与最佳实践》这本书关于关于面向对象的部分。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>上述所述的面向对象知识，尤其是面向对象设计的五大原则，是诸多设计模式的基础。</p><p>设计模式有很多，我们可以简单列出来：</p><ol><li>有强调实例化过程的创建型设计模式</li></ol><ul><li>抽象工厂</li><li>生成器</li><li>工厂方法</li><li>原型</li><li>单例</li></ul><ol start="2"><li>又有组合对象和类构成更大结构的结构型设计模式</li></ol><ul><li>适配器模式</li><li>桥接模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><ol start="3"><li>还有行为型设计模式</li></ol><ul><li>职责链模式</li><li>命令模式</li><li>解释器模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式</li><li>状态模式</li><li>策略模式</li><li>模板授权模式</li><li>访问者模式</li></ul><p>说到这里你有没有蒙圈？</p><p>其实我们无需一下子去了解那么多设计模式，在实际开发过程中我们可能也是混合使用设计模式的。我们不妨可以就框架里用到的几个典型的设计模式做一些分析。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>是否还记得我们使用Redis代替Session那一节，我们就用到了单例模式。</p><p>我们来简化一下代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisSession</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$redis</span>;        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRedisInstance</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;redis)) &#123;            <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> \Redis();            <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;host&#x27;</span>], <span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;port&#x27;</span>], <span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;timeout&#x27;</span>]);            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;auth&#x27;</span>]) &#123;                <span class="hljs-variable">$redis</span>-&gt;auth(<span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;auth&#x27;</span>]);            &#125;            <span class="hljs-keyword">$this</span>-&gt;redis = <span class="hljs-variable">$redis</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;redis;    &#125;&#125;</code></pre></div><p>一般我们还会在类里面加入一个魔术方法__clone，防止实例创建后被clone</p><p>单例模式有显而易见的优点：提高可重用性，减少开销。框架里使用Redis时都可以使用此方法来获取redis，也减少redis的连接数和多次连接时间。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>还记得依赖注入那一节么，我们举例的那个Travel就是一个很好的策略模式Demo：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *具体策略类(ConcreteStrategy)</span><span class="hljs-comment"> *1：乘坐飞机</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirPlanelStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;travelbyAirPlain\r\n&quot;</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *具体策略类(ConcreteStrategy)</span><span class="hljs-comment"> *2：乘坐火车</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrainStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;travelbyTrain\r\n&quot;</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *环境类(Context):</span><span class="hljs-comment"> *用一个ConcreteStrategy对象来配置。</span><span class="hljs-comment"> *维护一个对Travel对象的引用。可定义一个接口来让Strategy访问它的数据。</span><span class="hljs-comment"> *算法解决类，以提供客户选择使用何种解决方案：</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonContext</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$strategy</span> = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Travel <span class="hljs-variable">$travel</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;strategy=<span class="hljs-variable">$travel</span>;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     *旅行</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travel</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span><span class="hljs-keyword">$this</span>-&gt;strategy-&gt;travelAlgorithm();    &#125;&#125;<span class="hljs-comment">// 乘坐火车旅行</span><span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> PersonContext(<span class="hljs-keyword">new</span> TrainStrategy());<span class="hljs-variable">$person</span>-&gt;travel();<span class="hljs-comment">// 改乘飞机</span><span class="hljs-variable">$person</span> =PersonContext(<span class="hljs-keyword">new</span> AirPlanelStrategy());<span class="hljs-variable">$person</span>-&gt;travel();</code></pre></div><p>策略模式降低了代码耦合度，可以使得我们下层代码依赖上层，替换下层代码即可简单实现功能的替换。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>我们在路由解析创建控制器那里使用了工厂方法，只不过与路由解析代码糅合在一起，我们简化一下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createController</span>(<span class="hljs-params"><span class="hljs-variable">$controllerName</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$controllerName</span> = rtrim(<span class="hljs-variable">$controllerName</span>,<span class="hljs-string">&#x27;\\&#x27;</span>).<span class="hljs-string">&#x27;Controller&#x27;</span>;        <span class="hljs-keyword">if</span> (!class_exists(<span class="hljs-variable">$controllerName</span>)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundException(<span class="hljs-string">&quot;未找到控制器&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$controllerName</span>;    &#125;        ···&#125;</code></pre></div><p>工厂方法是很常见的一种设计模式，像Model经常能用到。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：8.依赖注入与控制反转</title>
    <link href="/2020/02/15/phpframe11/"/>
    <url>/2020/02/15/phpframe11/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><h3 id="依赖倒置原则（Dependence-Inversion-Principle）"><a href="#依赖倒置原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependence Inversion Principle）"></a>依赖倒置原则（Dependence Inversion Principle）</h3><p>DIP是面向对象设计原则之一。<br>传统软件设计中，上层代码依赖于下层代码，当下层出现变动时， 上层代码也要相应变化，维护成本较高。而DIP的核心思想是上层定义接口，下层实现这个接口， 从而使得下层依赖于上层，降低耦合度，提高整个系统的弹性。这是一种经实践证明的有效策略。</p><h3 id="控制反转（Inversion-of-Control）"><a href="#控制反转（Inversion-of-Control）" class="headerlink" title="控制反转（Inversion of Control）"></a>控制反转（Inversion of Control）</h3><p>IoC则是DIP的一种具体思路，DIP只是一种理念、思想，而IoC是一种实现DIP的方法。 IoC的核心是将类（上层）所依赖的单元（下层）的实例化过程交由第三方来实现。</p><p>当调用者需要被调用者的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例，但在这里，创建被调用者的工作不再由调用者来完成，而是将被调用者的创建移到调用者的外部，从而反转被调用者的创建，消除了调用者对被调用者创建的控制，因此称为控制反转。</p><h3 id="依赖注入（Dependence-Injection）"><a href="#依赖注入（Dependence-Injection）" class="headerlink" title="依赖注入（Dependence Injection）"></a>依赖注入（Dependence Injection）</h3><p>DI是IoC的一种设计模式，按照DI的模式，就可以实现IoC。 DI的实质就是把一个类不可能更换的部分和可更换的部分分离开来，通过注入的方式来使用，从而达到解耦的目的。</p><p>这里我们举个例子（旅行的接口）说明一下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *乘坐飞机</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirPlanelStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;travelbyAirPlain\r\n&quot;</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *乘坐火车</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrainStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Travel</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travelAlgorithm</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span><span class="hljs-string">&quot;travelbyTrain\r\n&quot;</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *算法解决类，以提供客户选择使用何种解决方案：</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonContext</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$strategy</span> = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Travel <span class="hljs-variable">$travel</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;strategy=<span class="hljs-variable">$travel</span>;    &#125;        <span class="hljs-comment">/**</span><span class="hljs-comment">     *旅行</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">travel</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span><span class="hljs-keyword">$this</span>-&gt;strategy-&gt;travelAlgorithm();    &#125;&#125;<span class="hljs-comment">// 乘坐火车旅行</span><span class="hljs-variable">$person</span> = <span class="hljs-keyword">new</span> PersonContext(<span class="hljs-keyword">new</span> TrainStrategy());<span class="hljs-variable">$person</span>-&gt;travel();<span class="hljs-comment">// 改乘飞机</span><span class="hljs-variable">$person</span> =PersonContext(<span class="hljs-keyword">new</span> AirPlanelStrategy());<span class="hljs-variable">$person</span>-&gt;travel();</code></pre></div><p>当我们更换交通工具时，只需要去增加Travel接口的实现，修改下实现的代码接口，无需去改动核心代码。</p><h3 id="控制反转容器（IoC-Container）"><a href="#控制反转容器（IoC-Container）" class="headerlink" title="控制反转容器（IoC Container）"></a>控制反转容器（IoC Container）</h3><p>当项目比较大时，依赖关系可能会十分复杂。 而IoC Container提供了动态地创建、注入依赖单元，映射依赖关系等功能，方便开发者使用，并大大缩减了许多代码量。 </p><p>因为我们的框架比较简单，我们不妨实现下Ioc容器(主要参考了Yii的di容器)。</p><p>代码实现用到了PHP的反射Api，有疑问的不妨先看看手册：</p><ul><li><a href="https://www.php.net/manual/zh/book.reflection.php">PHP反射</a></li></ul><p>还记得PSR吗？PSR11是关于依赖注入容器接口规范：</p><p>然后我们利用composer执行</p><blockquote><p>composer require psr/container</p></blockquote><p>我们在library/Components新建Container实现ContainerInterface，在library/Exceptions下新建ContainerException实现Psr\Container\ContainerExceptionInterface，新建ContainerNotFoundException实现Psr\Container\NotFoundExceptionInterface。</p><p>我们主要来实现一下Container代码，我们预先定义三个属性，用以保存对象、依赖及依赖的定义信息。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Components</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">ContainerException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">ContainerNotFoundException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Container</span>\<span class="hljs-title">ContainerInterface</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">ReflectionClass</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Container</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ContainerInterface</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">// 用于保存依赖的定义，以对象名称为键</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$definitions</span> = [];    <span class="hljs-comment">// 用于缓存ReflectionClass对象，以对象名称为键</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$reflections</span> = [];    <span class="hljs-comment">// 用于缓存依赖信息，以对象名称为键</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$dependencies</span> = [];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">has</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;definitions[<span class="hljs-variable">$class</span>]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span><span class="hljs-function">    </span>&#123;        ...    &#125;&#125;</code></pre></div><p>我们先添加一个set方法，用以定义，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>, <span class="hljs-variable">$definition</span> = []</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">$this</span>-&gt;definitions[<span class="hljs-variable">$class</span>] = <span class="hljs-keyword">$this</span>-&gt;normalizeDefinition(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$definition</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;&#125;<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">normalizeDefinition</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>, <span class="hljs-variable">$definition</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// $definition 是空的转换成 [&#x27;class&#x27; =&gt; $class] 形式</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;class&#x27;</span> =&gt; <span class="hljs-variable">$class</span>];        <span class="hljs-comment">// $definition 是字符串，转换成 [&#x27;class&#x27; =&gt; $definition] 形式</span>    &#125; <span class="hljs-keyword">elseif</span> (is_string(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;class&#x27;</span> =&gt; <span class="hljs-variable">$definition</span>];        <span class="hljs-comment">// $definition 是对象，则直接将其作为依赖的定义</span>    &#125; <span class="hljs-keyword">elseif</span> (is_object(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$definition</span>;        <span class="hljs-comment">// $definition 是数组则确保该数组定义了 class 元素</span>    &#125; <span class="hljs-keyword">elseif</span> (is_array(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;class&#x27;</span>])) &#123;            <span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;class&#x27;</span>] = <span class="hljs-variable">$class</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$definition</span>;        <span class="hljs-comment">// 这也不是，那也不是，那就抛出异常算了</span>    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ContainerException(            <span class="hljs-string">&quot;不支持的类型： \&quot;<span class="hljs-subst">$class</span>\&quot;: &quot;</span> . gettype(<span class="hljs-variable">$definition</span>));    &#125;&#125;</code></pre></div><p>知识点：</p><ul><li>gettype — 获取变量的类型</li></ul><p>然后我们重点实现get方法：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// 加入未作set操作，我们依旧可以构建</span>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;definitions[<span class="hljs-variable">$class</span>])) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;build(<span class="hljs-variable">$class</span>);    &#125;    <span class="hljs-variable">$definition</span> = <span class="hljs-keyword">$this</span>-&gt;definitions[<span class="hljs-variable">$class</span>];    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-variable">$concrete</span> = <span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;class&#x27;</span>];        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$definition</span>[<span class="hljs-string">&#x27;class&#x27;</span>]);        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$concrete</span> === <span class="hljs-variable">$class</span>) &#123;            <span class="hljs-variable">$object</span> = <span class="hljs-keyword">$this</span>-&gt;build(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$definition</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$object</span> = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-variable">$concrete</span>);        &#125;    &#125; <span class="hljs-keyword">elseif</span> (is_object(<span class="hljs-variable">$definition</span>)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_singletons[<span class="hljs-variable">$class</span>] = <span class="hljs-variable">$definition</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ContainerNotFoundException(<span class="hljs-string">&#x27;不能识别的对象类型: &#x27;</span> . gettype(<span class="hljs-variable">$definition</span>));    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$object</span>;&#125;</code></pre></div><p>build方法如下，主要是构建出对象并实现注入，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>, <span class="hljs-variable">$params</span> = []</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">// 通过反射api获取对象</span>        <span class="hljs-variable">$reflector</span> = <span class="hljs-keyword">$this</span>-&gt;getReflectionClass(<span class="hljs-variable">$class</span>);                <span class="hljs-comment">// 获取依赖关系数组</span>        <span class="hljs-variable">$dependencies</span> = <span class="hljs-keyword">$this</span>-&gt;getDependencies(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$reflector</span>);        <span class="hljs-comment">// 创建一个类的新实例,给出的参数将传递到类的构造函数.</span>        <span class="hljs-variable">$reflector</span> =  <span class="hljs-variable">$reflector</span>-&gt;newInstanceArgs(<span class="hljs-variable">$dependencies</span>);                <span class="hljs-keyword">return</span> <span class="hljs-variable">$reflector</span>;    &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$t</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ContainerException(<span class="hljs-string">&#x27;反射出错&#x27;</span>);    &#125;&#125;</code></pre></div><p>获取对象：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReflectionClass</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;reflections[<span class="hljs-variable">$class</span>])) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;reflections[<span class="hljs-variable">$class</span>];    &#125;    <span class="hljs-variable">$reflector</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-variable">$class</span>);    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$reflector</span>-&gt;isInstantiable()) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ContainerException(<span class="hljs-string">&quot;不能实例化&quot;</span>.<span class="hljs-variable">$class</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;reflections[<span class="hljs-variable">$class</span>] = <span class="hljs-variable">$reflector</span>;&#125;</code></pre></div><p>获取依赖关系：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDependencies</span>(<span class="hljs-params"><span class="hljs-variable">$class</span>, <span class="hljs-variable">$reflector</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// 判断是否有缓存依赖关系</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;dependencies[<span class="hljs-variable">$class</span>])) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;dependencies[<span class="hljs-variable">$class</span>];    &#125;    <span class="hljs-variable">$constructor</span> = <span class="hljs-variable">$reflector</span>-&gt;getConstructor();    <span class="hljs-comment">#如果没有构造函数， 直接实例化并返回</span>    <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$constructor</span>)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;dependencies[<span class="hljs-variable">$class</span>] = [];    &#125;    <span class="hljs-variable">$parameters</span> = <span class="hljs-variable">$constructor</span>-&gt;getParameters();    <span class="hljs-variable">$dependencies</span> = [];    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$parameters</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$className</span>) &#123;        <span class="hljs-variable">$dependency</span> = <span class="hljs-variable">$className</span>-&gt;getClass();        <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$dependency</span>)) &#123;            <span class="hljs-variable">$dependencies</span>[] = <span class="hljs-keyword">$this</span>-&gt;resolveNoneClass(<span class="hljs-variable">$className</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// 先取出容器中绑定的类 否则自动绑定</span>            <span class="hljs-variable">$dependencies</span>[] = <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-variable">$dependency</span>-&gt;getName());        &#125;    &#125;        <span class="hljs-keyword">$this</span>-&gt;dependencies[<span class="hljs-variable">$class</span>] = <span class="hljs-variable">$dependencies</span>;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$dependencies</span>;&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolveNoneClass</span>(<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// 有默认值则返回默认值</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$class</span>-&gt;isDefaultValueAvailable()) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$class</span>-&gt;getDefaultValue();    &#125;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ContainerException(<span class="hljs-string">&#x27;不能解析参数&#x27;</span>);&#125;</code></pre></div><p>到这里，我们基本就完成了一个完整的IOC Container的代码。</p><p>我们来写一个demo：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><span class="hljs-class"></span>&#123;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">C <span class="hljs-variable">$c</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;ccc = <span class="hljs-variable">$c</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">B <span class="hljs-variable">$b</span>, C <span class="hljs-variable">$c</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;bbb = <span class="hljs-variable">$b</span>;        <span class="hljs-keyword">$this</span>-&gt;ccc = <span class="hljs-variable">$c</span>;    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Components</span>\<span class="hljs-title">Container</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controller</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$contain</span> = <span class="hljs-keyword">new</span> Container();        <span class="hljs-variable">$contain</span>-&gt;set(<span class="hljs-string">&#x27;App\\Https\\Controllers\\A&#x27;</span>);        p(<span class="hljs-variable">$contain</span>-&gt;get(<span class="hljs-string">&#x27;App\\Https\\Controllers\\A&#x27;</span>));    &#125;&#125;</code></pre></div><p>我们可以看到的结果：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/f42MB1d9gr.png!large" alt="image"></p><p>是不是代码简洁很多了，不愿因为需要创建一个A对象，而先去实例化B和C，这些都是由我们完成的IOC Container去实现了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一节我们实现了IOC容器，然而你如果仔细去想，我们会发现我们可以让容器更加强大，比如单例对象的实现，比如依赖的扩展（兼容对象参数注入，数组参数注入等）。这些你可以自行实现，我也在源代码做了简单的扩展，大家可以思考试着实现一下，当然也可以看看开源框架Laravel、Yii的服务容器的实现。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：7.使用redis加速session读写</title>
    <link href="/2020/02/15/phpframe10/"/>
    <url>/2020/02/15/phpframe10/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>大家都知道，默认的session是存储在文件里的，一般情况下这是没什么问题的，然而一旦访问很多，session的使用就会频繁读写文件，必然会影响应用的性能。另外，假如是多机部署，session的共享也是个问题。</p><p>既然我们知道有Redis这个利器，而PHP也是支持session自定义的，那么为何不要性能更好又能实现共享session的Redis呢？</p><h3 id="Redis是什么？"><a href="#Redis是什么？" class="headerlink" title="Redis是什么？"></a>Redis是什么？</h3><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key - value 数据库</p><h3 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h3><ul><li>string</li><li>hash</li><li>set</li><li>sorted set</li><li>pub/sub</li><li>list</li></ul><p>另外还有HyperLogLog，geo….</p><h3 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a>Redis的优势</h3><ul><li>性能极佳，官网显示QPS能达到100k/s</li><li>数据结构丰富，不止于字符串，hash</li><li>稳定性不错，持久化</li><li>支持集群</li><li>社区不错，使用率高，对于PHP程序员，除了LNMP/LAMP，然后应该就是Redis了</li></ul><h3 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h3><ul><li>缓存</li><li>分布式锁</li><li>计数器</li><li>队列</li><li>geo</li><li>……</li></ul><h3 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h3><ul><li><a href="http://doc.redisfans.com/">点击查看Redis命令</a></li></ul><h3 id="使用redis存储session"><a href="#使用redis存储session" class="headerlink" title="使用redis存储session"></a>使用redis存储session</h3><p>我介绍两种方法给大家：</p><ol><li>session_start带参</li><li>session_set_save_handler托管session</li></ol><p>下面我们里一一说明：</p><h2 id="session-start"><a href="#session-start" class="headerlink" title="session_start"></a>session_start</h2><p>session_start ([ array $options = array() ] ) : bool —— 启动新会话或者重用现有会话（<a href="https://www.php.net/manual/zh/session.configuration.php">点击查看更多参数</a>）</p><p>来看demo：</p><div class="code-wrapper"><pre><code class="hljs prolog">session_start([    <span class="hljs-string">&#x27;save_path&#x27;</span> =&gt; <span class="hljs-string">&#x27;tcp://127.0.0.1:6379&#x27;</span>,    <span class="hljs-string">&#x27;save_handler&#x27;</span> =&gt; <span class="hljs-string">&#x27;redis&#x27;</span>,]);$<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] = <span class="hljs-number">10001</span>;$<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;userInfo&#x27;</span>] = [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;sai&#x27;</span>];p($<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);p($<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;userInfo&#x27;</span>]);</code></pre></div><p>输出如下：</p><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>10001</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>Array(    [name] => sai)</pre></div><p>我们可以使用redis-cli连接查看：</p><blockquote><p>redis-cli -h 127.0.0.1 -p 6379<br>// 如设置密码再输入（auth 你设置的密码）即可</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/89KRhPfXOo.png!large" alt="image"></p><p>我们可以看到redis里有了PHPREDIS_SESSION:nmo65igogqnq8ur2gia94jt15u，里面存储了我们的session信息。</p><h2 id="session-set-save-handler"><a href="#session-set-save-handler" class="headerlink" title="session_set_save_handler"></a>session_set_save_handler</h2><p>建议session.serialize_handler = php_serialize，默认php写入和读取略微繁琐。</p><p>这里说明我们成功了将session信息通过Redis进行了读写。下面我们使用session_set_save_handler来实现：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Sessions</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">SessionHandler</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisSession</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SessionHandler</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$redis</span>;        <span class="hljs-keyword">private</span> <span class="hljs-variable">$lifeTime</span> = <span class="hljs-number">7200</span>;        <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$prefix</span> = <span class="hljs-string">&#x27;PHPREDIS_SESSION:&#x27;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$config</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;config = <span class="hljs-variable">$config</span>;    &#125;        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRedisInstance</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;redis)) &#123;            <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> \Redis();            <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;host&#x27;</span>], <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;port&#x27;</span>], <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;timeout&#x27;</span>]);            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;auth&#x27;</span>]) &#123;                <span class="hljs-variable">$redis</span>-&gt;auth(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;auth&#x27;</span>]);            &#125;            <span class="hljs-keyword">$this</span>-&gt;redis = <span class="hljs-variable">$redis</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;redis;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getRedisInstance()-&gt;get(<span class="hljs-keyword">$this</span>-&gt;prefix.<span class="hljs-variable">$id</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>, <span class="hljs-variable">$data</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;getRedisInstance()-&gt;setex(<span class="hljs-keyword">$this</span>-&gt;prefix.<span class="hljs-variable">$id</span>, <span class="hljs-keyword">$this</span>-&gt;lifeTime, <span class="hljs-variable">$data</span>)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;getRedisInstance()-&gt;delete(<span class="hljs-variable">$id</span>))&#123;<span class="hljs-comment">//删除redis中的指定记录</span>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gc</span>(<span class="hljs-params"><span class="hljs-variable">$maxlifetime</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        session_write_close();    &#125;&#125;<span class="hljs-variable">$handler</span> = <span class="hljs-keyword">new</span> RedisSession([            <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,            <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">6379</span>,            <span class="hljs-string">&#x27;auth&#x27;</span> =&gt; <span class="hljs-literal">null</span>,            <span class="hljs-string">&#x27;timeout&#x27;</span> =&gt; <span class="hljs-number">5</span>,        ]);session_set_save_handler(<span class="hljs-variable">$handler</span>, <span class="hljs-literal">true</span>);session_start();<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] = <span class="hljs-number">10001</span>;<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;userInfo&#x27;</span>] = [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;sai&#x27;</span>];p(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);p(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;userInfo&#x27;</span>]);</code></pre></div><p>知识点：</p><ol><li>这里需要注意下read方法，里面需要加一下serialize，以便于我们存储复杂的session结构。如果不加会报错（Warning: session_start(): Failed to read session data: user (path: )）这是因为Redis无法直接存储array结构，需要转化为string类型存储。</li></ol><p>我们也来看看Redis客户端存储情况：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/joxyEbzS9I.png!large" alt="image"></p><p>通用我们也看到redis存储了session，与前面略有不同的只是存储的key不一样。但是我们可以定义一个私有属性：</p><blockquote><p>private $prefix = ‘PHPREDIS_SESSION:’;</p></blockquote><p>然后做一下调整即可：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;getRedisInstance()-&gt;get(<span class="hljs-keyword">$this</span>-&gt;prefix.<span class="hljs-variable">$id</span>));&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$data</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;getRedisInstance()-&gt;setex(<span class="hljs-keyword">$this</span>-&gt;prefix.<span class="hljs-variable">$id</span>, <span class="hljs-keyword">$this</span>-&gt;lifeTime, <span class="hljs-variable">$data</span>)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div><p>运行后会发现把之前第一种设置的session覆盖掉。</p><p>当然我比较建议使用第二种方法，便于我们定制化编码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说，两种方法配置都比较简单，个人建议使用第二种方式实现，这样也比较适合集成到框架，后期我们可以在进行扩展。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：6.简单测试</title>
    <link href="/2020/02/13/phpframe09/"/>
    <url>/2020/02/13/phpframe09/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>虽然框架基本完成，但我们还没有测试过。</p><p>我们使用postman作为接口测试工具（<a href="http://saif.com/test%EF%BC%89%E3%80%82">http://saif.com/test）。</a></p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 自定义路由</span><span class="hljs-keyword">return</span> [    <span class="hljs-string">&#x27;debug&#x27;</span> =&gt; <span class="hljs-literal">false</span>,    <span class="hljs-string">&#x27;route&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/welcome&#x27;</span>,        <span class="hljs-string">&#x27;test&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/test&#x27;</span>,    ],];<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">welcome</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json([<span class="hljs-string">&#x27;hello&#x27;</span> =&gt; <span class="hljs-string">&#x27;welcome&#x27;</span>]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json(<span class="hljs-variable">$params</span>);    &#125;&#125;</code></pre></div><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/rLIdUbGV7m.png!large" alt="postman"></p><p>我们测试下：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/sJhWP98OZl.png!large" alt="image"><br><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/HNUl9U9nds.png!large" alt="image"><br><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/LRE2vTxosk.png!large" alt="image"></p><p>我们发现能正常获取获取GET参数，但没有获取到POST参数。</p><p>debug：</p><p>我们发现Content-Type输出是：</p><meta charset='utf-8' /><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>multipart/form-data; boundary=--------------------------498010462598077868347660</pre></div><p>我们优化一下代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBodyParams</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$contentType</span> = strtolower(<span class="hljs-keyword">$this</span>-&gt;getHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>));        <span class="hljs-comment">// p($contentType);</span>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$contentType</span>, <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;        <span class="hljs-keyword">$this</span>-&gt;_bodyParams = \json_decode(file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>), <span class="hljs-literal">true</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">$this</span>-&gt;_bodyParams = <span class="hljs-variable">$_POST</span>;    &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_bodyParams?? [];&#125;</code></pre></div><p>另外我们发现getHeader方法有点问题：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHeader</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$name</span> = ucfirst(<span class="hljs-variable">$name</span>);    <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">&#x27;apache_request_headers&#x27;</span>)) &#123;        <span class="hljs-variable">$headers</span> = apache_request_headers();        p(<span class="hljs-variable">$headers</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$name</span>]?? <span class="hljs-variable">$defaultValue</span>;    &#125;    <span class="hljs-comment">// $_SERVER使用下划线</span>    <span class="hljs-variable">$name</span> = strtoupper(str_replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$name</span>));    <span class="hljs-comment">// 部分自定义参数需要加上HTTP_</span>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$name</span>]?? (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_&#x27;</span>.<span class="hljs-variable">$name</span>] ?? <span class="hljs-variable">$defaultValue</span>);&#125;</code></pre></div><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/b8XamwywCv.png!large" alt="image"></p><p>测试正常。</p><p>另外，做一下说明，我们可以使用public function test($params)，是源于我们Request，将参数注入到方法里。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAction</span>(<span class="hljs-params"><span class="hljs-variable">$route</span></span>)</span><span class="hljs-function"></span>&#123;    ... 省略代码    <span class="hljs-keyword">return</span> <span class="hljs-variable">$controller</span>-&gt;<span class="hljs-variable">$action</span>(array_merge(<span class="hljs-keyword">$this</span>-&gt;getQueryParams(), <span class="hljs-keyword">$this</span>-&gt;getBodyParams()));&#125;</code></pre></div><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><blockquote><p>我们使用的是wrk压测</p></blockquote><p><a href="https://github.com/wg/wrk">wrk</a></p><div class="code-wrapper"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">git clone https:<span class="hljs-comment">//github.com/wg/wrk</span></span><span class="hljs-meta">&gt;</span> <span class="javascript">cd wrk </span><span class="hljs-meta">&gt;</span> <span class="javascript">make</span><span class="hljs-meta">&gt;</span> <span class="javascript">ln -s ./wrk /usr/bin/wrk</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs vim">wrk参数：-<span class="hljs-keyword">c</span>,    --connections（连接数）:      total <span class="hljs-keyword">number</span> of HTTP connections <span class="hljs-keyword">to</span> keep <span class="hljs-keyword">open</span> with each thread handling <span class="hljs-keyword">N</span> = connections/threads-d,    --duration（测试持续时间）:     duration of the test, <span class="hljs-keyword">e</span>.g. <span class="hljs-number">2</span>s, <span class="hljs-number">2</span><span class="hljs-keyword">m</span>, <span class="hljs-number">2</span>h-t,    --threads（线程）:            total <span class="hljs-keyword">number</span> of threads <span class="hljs-keyword">to</span> use-s,    --script（脚本）:             LuaJIT script, see SCRIPTING-H,    --header（头信息）:           HTTP header <span class="hljs-keyword">to</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">to</span> request, <span class="hljs-keyword">e</span>.g. <span class="hljs-string">&quot;User-Agent: wrk&quot;</span>       --latency（响应信息）:         <span class="hljs-keyword">print</span> detailed latency statistics       --timeout（超时时间）:         record <span class="hljs-keyword">a</span> timeout <span class="hljs-keyword">if</span> <span class="hljs-keyword">a</span> response <span class="hljs-keyword">is</span> not received within this amount of time.-v,    --<span class="hljs-keyword">version</span>（版本信息）          <span class="hljs-keyword">Print</span> <span class="hljs-keyword">version</span> details</code></pre></div><p>我们仅仅在控制返回空信息，然后对比yii2（返回字符串“yii2”），laravel5.5（返回字符串“laravel5.5”）。</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/Lr272Ljbqz.png!large" alt="image"></p><p><img src="/images/qiniu/wrk2.png" alt="image"></p><p>因为我们的框架没有中间件、组件之类的，所以性能对比yii2、laravel，QPS要高很多。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：5.自定义配置与路由</title>
    <link href="/2020/02/09/phpframe08/"/>
    <url>/2020/02/09/phpframe08/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>我们已经开发完成，但我们还需要更多。比如自定义配置和路由。</p><p>app文件夹下新建Config.php</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> *自定义配置</span><span class="hljs-comment"> */</span><span class="hljs-keyword">return</span> [    <span class="hljs-string">&#x27;debug&#x27;</span> =&gt; <span class="hljs-literal">false</span>,    <span class="hljs-string">&#x27;route&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/welcome&#x27;</span>,        <span class="hljs-string">&#x27;test&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/test&#x27;</span>,    ],];</code></pre></div><p>新建DemoController（app/Https/Controllers目录下）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Demo控制器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Controller</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">welcome</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json([<span class="hljs-string">&#x27;hello&#x27;</span> =&gt; <span class="hljs-string">&#x27;welcome&#x27;</span>]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json(<span class="hljs-variable">$params</span>);    &#125;&#125;</code></pre></div><p>修改入口文件index.php,加入加载配置代码：</p><div class="code-wrapper"><pre><code class="hljs php">... 省略代码<span class="hljs-comment">// 加载配置</span><span class="hljs-variable">$config</span> = <span class="hljs-keyword">require</span> SF_LIBRARY_PATH.<span class="hljs-string">&#x27;Config.php&#x27;</span>;<span class="hljs-variable">$appConfig</span> = file_exists(<span class="hljs-variable">$appConfigPath</span> = SF_APP_PATH.<span class="hljs-string">&#x27;Config.php&#x27;</span>) ? <span class="hljs-keyword">require</span> <span class="hljs-variable">$appConfigPath</span> : [];<span class="hljs-variable">$config</span> = array_merge(<span class="hljs-variable">$config</span>, <span class="hljs-variable">$appConfig</span>);<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;debug&#x27;</span>] = (<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;debug&#x27;</span>]?? SF_DEBUG);...省略代码</code></pre></div><p>解析路由部分也加入自定义路由处理：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// Application</span>...省略代码<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleRequest</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$route</span> = <span class="hljs-variable">$request</span>-&gt;resolve(<span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;route&#x27;</span>]??[]);    <span class="hljs-variable">$response</span> = <span class="hljs-variable">$request</span>-&gt;runAction(<span class="hljs-variable">$route</span>);    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行结果赋值给$response-&gt;data，并返回给response对象</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> <span class="hljs-keyword">instanceof</span> Response) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;    &#125;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SaiException(<span class="hljs-string">&#x27;Content format error&#x27;</span>);&#125;...省略代码<span class="hljs-comment">// Request</span>...省略代码<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAction</span>(<span class="hljs-params"><span class="hljs-variable">$route</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (array_key_exists(<span class="hljs-variable">$route</span>, <span class="hljs-keyword">$this</span>-&gt;_route)) &#123;        <span class="hljs-variable">$route</span> = <span class="hljs-keyword">$this</span>-&gt;_route[<span class="hljs-variable">$route</span>];    &#125;    <span class="hljs-variable">$match</span> = explode(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-variable">$route</span>);    <span class="hljs-variable">$match</span> = array_filter(<span class="hljs-variable">$match</span>);    ...省略代码</code></pre></div><p>保存后打开浏览器看看效果：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/VAvnoQ1BZY.png!large" alt="image"></p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/FnRaFKfjAC.png!large" alt="image"></p><p>这里虽然有自定义路由，但是我们有时候需要禁止默认路由，所以我们不妨增加配置参数defaultRoute，用来控制是否开启默认路由。</p><p>我们修改一下路由解析的代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//Application</span>...省略代码<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleRequest</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$route</span> = <span class="hljs-variable">$request</span>-&gt;resolve(<span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;route&#x27;</span>]??[]);    <span class="hljs-variable">$response</span> = <span class="hljs-variable">$request</span>-&gt;runAction(<span class="hljs-variable">$route</span>, <span class="hljs-keyword">$this</span>-&gt;_config[<span class="hljs-string">&#x27;defaultRoute&#x27;</span>]??<span class="hljs-literal">true</span>);    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行结果赋值给$response-&gt;data，并返回给response对象</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> <span class="hljs-keyword">instanceof</span> Response) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;    &#125;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SaiException(<span class="hljs-string">&#x27;Content format error&#x27;</span>);&#125;...省略代码</code></pre></div><div class="code-wrapper"><pre><code class="hljs php">...省略代码<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAction</span>(<span class="hljs-params"><span class="hljs-variable">$route</span>, <span class="hljs-variable">$defaultRoute</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (array_key_exists(<span class="hljs-variable">$route</span>, <span class="hljs-keyword">$this</span>-&gt;_route)) &#123;        <span class="hljs-variable">$route</span> = <span class="hljs-keyword">$this</span>-&gt;_route[<span class="hljs-variable">$route</span>];    &#125; <span class="hljs-keyword">elseif</span> (!<span class="hljs-variable">$defaultRoute</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundException(<span class="hljs-string">&quot;route not found:&quot;</span>.<span class="hljs-variable">$route</span>);    &#125;    ...省略代码</code></pre></div><p>我们在app下面的Config，加入：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">return</span> [    <span class="hljs-string">&#x27;debug&#x27;</span> =&gt; <span class="hljs-literal">false</span>,    <span class="hljs-string">&#x27;route&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/welcome&#x27;</span>,        <span class="hljs-string">&#x27;test&#x27;</span> =&gt; <span class="hljs-string">&#x27;demo/test&#x27;</span>,    ],    <span class="hljs-string">&#x27;defaultRoute&#x27;</span> =&gt; <span class="hljs-literal">false</span>,];</code></pre></div><p>我们打开浏览器输入<a href="http://saif.com/login">http://saif.com/login</a></p><p>报错如下：</p><div class="code-wrapper"><pre style="position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;">Array(    [line] =&gt; 137    [msg] =&gt; route not found:login    [code] =&gt; 404    [file] =&gt; library/Https/Request.php)</pre></div>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：4.入口文件</title>
    <link href="/2020/02/08/phpframe07/"/>
    <url>/2020/02/08/phpframe07/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>上一节我们完成了从路由解析到数据输出的过程，并且之前已经完成了Request的编写，这一节我们写完入口文件，真正的将我们的web应用跑起来了。</p><hr><p>入口文件里需要做些什么呢？</p><p>还记得那个流程图吗？</p><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/Fd5m6n01d6.png!large" alt="简单流程图"></p><p>我们需要加载配置，实例化Application并运行，并且引入后面可能遇到的一些常量。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;..&#x27;</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;library&#x27;</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;System.php&#x27;</span>;<span class="hljs-comment">// 加载配置</span><span class="hljs-variable">$config</span> = <span class="hljs-keyword">require</span> SF_LIBRARY_PATH.<span class="hljs-string">&#x27;Config.php&#x27;</span>;<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;debug&#x27;</span>] = (<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;debug&#x27;</span>]?? SF_DEBUG);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;debug&#x27;</span>]) &#123;    ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;On&quot;</span>);    error_reporting(E_ALL);&#125;<span class="hljs-comment">// composer自动加载</span><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/../vendor/autoload.php&#x27;</span>;<span class="hljs-comment">// 实例化应用并运行</span><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> Library\Application(<span class="hljs-keyword">new</span> Library\Https\Request() ,<span class="hljs-variable">$config</span>);<span class="hljs-variable">$app</span>-&gt;run();</code></pre></div><p>知识点：</p><ol><li>__DIR__是PHP的一个魔术常量，可以理解成当前文件所在路径。DIRECTORY_SEPARATOR是一个显示系统分隔符的命令，DIRECTORY_SEPARATOR是PHP的内部常量，不需要任何定义与包含即可直接使用。</li><li>ini_set — 为一个配置选项设置值</li><li>error_reporting — 设置应该报告何种 PHP 错误</li></ol><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// Turn off all error reporting</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-comment">// Report simple running errors</span>error_reporting(E_ERROR | E_WARNING | E_PARSE);<span class="hljs-comment">// Reporting E_NOTICE can be good too (to report uninitialized</span><span class="hljs-comment">// variables or catch variable name misspellings ...)</span>error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);<span class="hljs-comment">// Report all errors except E_NOTICE</span>error_reporting(E_ALL &amp; ~E_NOTICE);<span class="hljs-comment">// Report all PHP errors (see changelog)</span>error_reporting(E_ALL);<span class="hljs-comment">// Report all PHP errors</span>error_reporting(-<span class="hljs-number">1</span>);<span class="hljs-comment">// Same as error_reporting(E_ALL);</span>ini_set(<span class="hljs-string">&#x27;error_reporting&#x27;</span>, E_ALL);<span class="hljs-meta">?&gt;</span></code></pre></div><h3 id="System-php"><a href="#System-php" class="headerlink" title="System.php"></a>System.php</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// debug默认开启</span>defined(<span class="hljs-string">&#x27;SF_DEBUG&#x27;</span>) <span class="hljs-keyword">or</span> define(<span class="hljs-string">&#x27;SF_DEBUG&#x27;</span>, <span class="hljs-literal">true</span>);<span class="hljs-comment">// 框架开始运行时间</span>defined(<span class="hljs-string">&#x27;SF_START_TIME&#x27;</span>) <span class="hljs-keyword">or</span> define(<span class="hljs-string">&#x27;SF_START_TIME&#x27;</span>, microtime(<span class="hljs-literal">true</span>));<span class="hljs-comment">// 核心文件目录</span>defined(<span class="hljs-string">&#x27;SF_LIBRARY_PATH&#x27;</span>) <span class="hljs-keyword">or</span> define(<span class="hljs-string">&#x27;SF_LIBRARY_PATH&#x27;</span>, <span class="hljs-keyword">__DIR__</span>.DIRECTORY_SEPARATOR);<span class="hljs-comment">// 应用目录</span>defined(<span class="hljs-string">&#x27;SF_APP_PATH&#x27;</span>) <span class="hljs-keyword">or</span> define(<span class="hljs-string">&#x27;SF_APP_PATH&#x27;</span>, <span class="hljs-keyword">__DIR__</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;..&#x27;</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;app&#x27;</span>.DIRECTORY_SEPARATOR);<span class="hljs-comment">// 入口目录</span>defined(<span class="hljs-string">&#x27;SF_PUBLIC_PATH&#x27;</span>) <span class="hljs-keyword">or</span> define(<span class="hljs-string">&#x27;SF_PUBLIC_PATH&#x27;</span>, <span class="hljs-keyword">__DIR__</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;..&#x27;</span>.DIRECTORY_SEPARATOR.<span class="hljs-string">&#x27;public&#x27;</span>.DIRECTORY_SEPARATOR);</code></pre></div><h3 id="Config-php"><a href="#Config-php" class="headerlink" title="Config.php"></a>Config.php</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 系统配置</span><span class="hljs-comment"> */</span><span class="hljs-keyword">return</span> [    <span class="hljs-string">&#x27;debug&#x27;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-comment">// 建议开发过程中开启</span>];</code></pre></div><hr><p>到这里，我们的框架已经可以运行起来了。</p><h3 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h3><p>配置Nginx</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;    <span class="hljs-attribute">server_name</span>  saif.com;    <span class="hljs-comment"># 框架根目录</span>    <span class="hljs-attribute">root</span> /Users/sai/Work/www/saif/public;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">index</span> index.html index.htm index.php;        <span class="hljs-attribute">try_files</span> $uri $uri/ /index.php?$query_string;    &#125;    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;    <span class="hljs-attribute">location</span> = /50x.html &#123;    &#125;    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;        <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;        <span class="hljs-attribute">fastcgi_index</span>  index.php;        <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        <span class="hljs-attribute">include</span>        fastcgi_params;    &#125;&#125;</code></pre></div><p>浏览器输入<a href="http://saif.com./">http://saif.com。</a></p><p>你会看到返回的json数组：</p><p><img src="https://cdn.learnku.com/uploads/images/202002/20/41489/Nm11LNESo9.png!large" alt="框架入口"></p><p>备注：前面3行请忽略，是我浏览器的插件自动加入的。</p><p>到这里，我们已经完成了基础API框架的开发。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：3.路由解析</title>
    <link href="/2020/02/08/phpframe06/"/>
    <url>/2020/02/08/phpframe06/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>上一节我们介绍了编写了如何处理请求与输出数据，这一节我们开始编写路由模块。</p><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>还记得我们之前建立的Application在哪里吗？</p><p>我们先思考一下Application应该具备哪些功能？</p><p>首先很重要的，我们要让应用运行起来，姑且就先定义run方法。另外我们需要处理请求并且输出数据，我们再定义一个handleRequest方法。当然，我们的应用是有一些配置信息（config）的。</p><p>因为，我们不难编写出以下代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">SaiException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Request</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>\<span class="hljs-title">Response</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$request</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span>, <span class="hljs-variable">$config</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;config = <span class="hljs-variable">$config</span>;        <span class="hljs-keyword">$this</span>-&gt;request = <span class="hljs-variable">$request</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 运行应用并输出数据</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> bool</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-variable">$response</span> = <span class="hljs-keyword">$this</span>-&gt;handleRequest(<span class="hljs-keyword">$this</span>-&gt;request);            <span class="hljs-variable">$response</span>-&gt;send();            <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>-&gt;exitStatus;        &#125; <span class="hljs-keyword">catch</span> (SaiException <span class="hljs-variable">$e</span>) &#123;            <span class="hljs-variable">$e</span>-&gt;response(<span class="hljs-variable">$e</span>-&gt;getCode(), [                <span class="hljs-string">&#x27;line&#x27;</span> =&gt; <span class="hljs-variable">$e</span>-&gt;getLine(),                <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-variable">$e</span>-&gt;getMessage(),                <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-variable">$e</span>-&gt;getCode(),                <span class="hljs-string">&#x27;file&#x27;</span> =&gt; <span class="hljs-variable">$e</span>-&gt;getFile(),            ]);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理请求</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Request $request</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SaiException</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleRequest</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// todo</span>        <span class="hljs-comment">// 返回Response对象</span>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;    &#125;&#125;</code></pre></div><p>这里我们看到handleRequest方法还有一部分代码为完成，回想以下流程图，这里就是我们比较核心的部分，路由处理模块。</p><h3 id="路由解析"><a href="#路由解析" class="headerlink" title="路由解析"></a>路由解析</h3><p>路由解析我们使用非常简单而常见的处理方式，不妨看几个url例子来理解一下：</p><table><thead><tr><th>route</th><th>controller</th><th>method</th></tr></thead><tbody><tr><td><a href="http://blog.13sai.com/">http://blog.13sai.com/</a></td><td>IndexController</td><td>index</td></tr><tr><td><a href="http://blog.13sai.com/admin">http://blog.13sai.com/admin</a></td><td>AdminController</td><td>index</td></tr><tr><td><a href="http://blog.13sai.com/admin/test">http://blog.13sai.com/admin/test</a></td><td>AdminController</td><td>test</td></tr><tr><td><a href="http://blog.13sai.com/admin/index/test">http://blog.13sai.com/admin/index/test</a></td><td>Admin\IndexController</td><td>test</td></tr></tbody></table><p>有没有看出规律，我们会以斜杠/分割路由为几个部分，最后两部分分别是对应的控制器名称和方法名称，少于两部分默认用index，多余两部分的作为控制器的命名空间。然后我们要根据路由找到控制器构建出控制器。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 控制器处理</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $route</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> mixed</span><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NotFoundException</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAction</span>(<span class="hljs-params"><span class="hljs-variable">$route</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$match</span> = explode(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-variable">$route</span>);    <span class="hljs-variable">$match</span> = array_filter(<span class="hljs-variable">$match</span>);    <span class="hljs-comment">// 处理$route=/</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$match</span>)) &#123;        <span class="hljs-variable">$match</span> = [<span class="hljs-string">&#x27;index&#x27;</span>];        <span class="hljs-variable">$controller</span> = <span class="hljs-keyword">$this</span>-&gt;createController(<span class="hljs-variable">$match</span>);        <span class="hljs-variable">$action</span> = <span class="hljs-string">&#x27;index&#x27;</span>;    <span class="hljs-comment">// 处理$route=index</span>    &#125; <span class="hljs-keyword">elseif</span> (count(<span class="hljs-variable">$match</span>) &lt; <span class="hljs-number">2</span>) &#123;        <span class="hljs-variable">$controller</span> = <span class="hljs-keyword">$this</span>-&gt;createController(<span class="hljs-variable">$match</span>);        <span class="hljs-variable">$action</span> = <span class="hljs-string">&#x27;index&#x27;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable">$action</span> = array_pop(<span class="hljs-variable">$match</span>);        <span class="hljs-variable">$controller</span> = <span class="hljs-keyword">$this</span>-&gt;createController(<span class="hljs-variable">$match</span>);        <span class="hljs-keyword">if</span> (!method_exists(<span class="hljs-variable">$controller</span>, <span class="hljs-variable">$action</span>)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundException(<span class="hljs-string">&quot;method not found:&quot;</span>.<span class="hljs-variable">$action</span>);        &#125;    &#125;    <span class="hljs-comment">// 将get和post注入控制器方法中</span>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$controller</span>-&gt;<span class="hljs-variable">$action</span>(array_merge(<span class="hljs-keyword">$this</span>-&gt;getQueryParams(), <span class="hljs-keyword">$this</span>-&gt;getBodyParams()));&#125;<span class="hljs-comment">// app应用控制器命名空间</span><span class="hljs-keyword">private</span> <span class="hljs-variable">$controllerNameSpace</span> = <span class="hljs-string">&#x27;App\\Https\\Controllers\\&#x27;</span>;<span class="hljs-comment">// 之前定义的基类控制器</span><span class="hljs-keyword">private</span> <span class="hljs-variable">$baseController</span> = <span class="hljs-string">&#x27;Library\\Https\\Controller&#x27;</span>;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createController</span>(<span class="hljs-params"><span class="hljs-variable">$match</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$controllerName</span> = <span class="hljs-keyword">$this</span>-&gt;controllerNameSpace;    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$match</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$namespace</span>) &#123;        <span class="hljs-variable">$controllerName</span> .= ucfirst(<span class="hljs-variable">$namespace</span>).<span class="hljs-string">&#x27;\\&#x27;</span>;    &#125;    <span class="hljs-variable">$controllerName</span> = rtrim(<span class="hljs-variable">$controllerName</span>,<span class="hljs-string">&#x27;\\&#x27;</span>).<span class="hljs-string">&#x27;Controller&#x27;</span>;    <span class="hljs-keyword">if</span> (!class_exists(<span class="hljs-variable">$controllerName</span>)) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$controllerName</span> == <span class="hljs-keyword">$this</span>-&gt;controllerNameSpace.<span class="hljs-string">&#x27;IndexController&#x27;</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;baseController;        &#125;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundException(<span class="hljs-string">&quot;controller not found:&quot;</span>.<span class="hljs-variable">$controllerName</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$controllerName</span>;&#125;</code></pre></div><p>上面是寻找控制器和方法的过程，但我们需要提前获得页面地址以解析路由。</p><p>知识点：</p><ol><li>反斜杠：反斜线有多种用法。首先，如果紧接着是一个非字母数字字符，表明取消 该字符所代表的特殊涵义。这种将反斜线作为转义字符的用法在字符类 内部和外部都可用。</li><li>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array——依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。代码中是过滤value为空的单元。</li></ol><h3 id="获取页面地址"><a href="#获取页面地址" class="headerlink" title="获取页面地址"></a>获取页面地址</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 返回不含参数的REQUEST_URI地址</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getPathUrl();&#125;<span class="hljs-keyword">private</span> <span class="hljs-variable">$pathUrl</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取请求地址</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> bool|mixed|string</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPathUrl</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (is_null(<span class="hljs-keyword">$this</span>-&gt;pathUrl)) &#123;        <span class="hljs-variable">$url</span> = trim(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>], <span class="hljs-string">&#x27;/&#x27;</span>);        <span class="hljs-variable">$index</span> = strpos(<span class="hljs-variable">$url</span>, <span class="hljs-string">&#x27;?&#x27;</span>);        <span class="hljs-keyword">$this</span>-&gt;pathUrl = (<span class="hljs-variable">$index</span> &gt; -<span class="hljs-number">1</span>) ? substr(<span class="hljs-variable">$url</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$index</span>) : <span class="hljs-variable">$url</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;pathUrl;&#125;</code></pre></div><p>我们尽量让Application变得简洁，而路由解析又和Request关联度较高，因此我们不妨把这些方法抛出到Request对象。</p><p>知识点：</p><ol><li>strpos ( string $haystack , mixed $needle [, int $offset = 0 ] ) : int——返回 needle 在 haystack 中首次出现的数字位置，如果没找到 needle，将返回 FALSE。</li></ol><p>上面已经解析好路由并且找到了控制器和方法。这样我们就可以完善Application的代码了。</p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleRequest</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$route</span> = <span class="hljs-variable">$request</span>-&gt;resolve();    <span class="hljs-variable">$response</span> = <span class="hljs-variable">$request</span>-&gt;runAction(<span class="hljs-variable">$route</span>);    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 执行结果赋值给$response-&gt;data，并返回给response对象</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$response</span> <span class="hljs-keyword">instanceof</span> Response) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$response</span>;    &#125;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SaiException(<span class="hljs-string">&#x27;输出的内容格式错误&#x27;</span>);&#125;</code></pre></div><p>再次需要说明的是，我们在这里仅做了json格式输出，如果有兴趣，你可以自己动手拓展一下。</p><p>另：NotFoundException继承自SaiException，代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Exceptions</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SaiException</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">404</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：2.请求与输出</title>
    <link href="/2020/02/04/phpframe05/"/>
    <url>/2020/02/04/phpframe05/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>我们在library\Https目录下新建Request、Response，开始编写请求和输出的代码。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>我们实现几个常用的方法，get、post、method等，这里主要用$_SERVER实现，为了复用我们定义了三个私有属性存储get参数、post参数和method。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 处理请求</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Components</span>\<span class="hljs-title">Base</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取请求方法</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMethod</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>])) &#123;            <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;GET&#x27;</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 请求头</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> null $defaultValue</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed|null</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getHeader</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$name</span> = ucfirst(<span class="hljs-variable">$name</span>);        <span class="hljs-keyword">if</span> (function_exists(<span class="hljs-string">&#x27;apache_request_headers&#x27;</span>)) &#123;            <span class="hljs-variable">$headers</span> = apache_request_headers();            <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$name</span>]?? <span class="hljs-variable">$defaultValue</span>;        &#125;        <span class="hljs-variable">$name</span> = strtoupper(<span class="hljs-variable">$name</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$name</span>]?? <span class="hljs-variable">$defaultValue</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取get参数</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> null $name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> null $defaultValue</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> |null</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$name</span> === <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getQueryParams();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getQueryParam(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getQueryParam</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$params</span> = <span class="hljs-keyword">$this</span>-&gt;getQueryParams();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$params</span>[<span class="hljs-variable">$name</span>]) ? <span class="hljs-variable">$params</span>[<span class="hljs-variable">$name</span>] : <span class="hljs-variable">$defaultValue</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getQueryParams</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;queryParams)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;queryParams = <span class="hljs-variable">$_GET</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;queryParams;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取post参数</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> null $name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> null $defaultValue</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array|mixed|null</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-literal">null</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$name</span> === <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getBodyParams();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;getBodyParam(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBodyParam</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$defaultValue</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$params</span> = <span class="hljs-keyword">$this</span>-&gt;getBodyParams();        <span class="hljs-keyword">if</span> (is_object(<span class="hljs-variable">$params</span>)) &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">return</span> <span class="hljs-variable">$params</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;;            &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-variable">$defaultValue</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$params</span>[<span class="hljs-variable">$name</span>]) ? <span class="hljs-variable">$params</span>[<span class="hljs-variable">$name</span>] : <span class="hljs-variable">$defaultValue</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBodyParams</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$contentType</span> = strtolower(<span class="hljs-keyword">$this</span>-&gt;getHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>));        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$contentType</span> == <span class="hljs-string">&#x27;multipart/form-data&#x27;</span>) &#123;            <span class="hljs-keyword">$this</span>-&gt;bodyParams = <span class="hljs-variable">$_POST</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">$this</span>-&gt;bodyParams = \json_decode(file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>), <span class="hljs-literal">true</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;bodyParams?? [];    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * get参数数组</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$queryParams</span> = [];    <span class="hljs-comment">/**</span><span class="hljs-comment">     * post参数数组</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$bodyParams</span> = [];    <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;&#125;</code></pre></div><p>知识点：</p><ol><li>获取请求头部信息的方式nginx和apache不同</li></ol><ul><li>apache可以使用apache_request_headers</li><li>nginx使用$_SERVER，并且需要注意的是的是自定义信息等参数会在前面自动加上http_，并且会转换为大写</li></ul><p><img src="/images/qiniu/server.png" alt="server图片"></p><ol start="2"><li>post参数获取的方式</li></ol><ul><li>当Content-Type是<code>application/x-www-data-urlencoded</code>或<code>multipart/form-data</code>时，数据会放进$_POST中；</li><li>除了Coentent-Type为multipart/form-data的情况，数据都可以通过file_get_contents(“php://input”)取到；</li><li>不建议使用$GLOBALS[‘HTTP_RAW_POST_DATA’]</li></ul><hr><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>Response默认以使用广泛的json输出，暂时也只考虑json格式输出的情况。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 数据输出</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Components</span>\<span class="hljs-title">Base</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Response</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$result</span> = [];    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;success&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">send</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        header(<span class="hljs-string">&#x27;Content-Type:application/json; charset=utf-8&#x27;</span>);        <span class="hljs-keyword">echo</span> \json_encode([            <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;result,            <span class="hljs-string">&#x27;msg&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;msg,            <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;code,            <span class="hljs-string">&#x27;timestamp&#x27;</span> =&gt; time()        ]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">json</span>(<span class="hljs-params"><span class="hljs-variable">$data</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;result = array_merge(<span class="hljs-keyword">$this</span>-&gt;result, <span class="hljs-variable">$data</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;    &#125;&#125;</code></pre></div><p>知识点：</p><ol><li>header() 用于发送原生的 HTTP 头。</li><li>json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] ) : string — 对变量进行 JSON 编码，<a href="https://www.php.net/manual/zh/json.constants.php">options可以预定义常量</a>，如 JSON_UNESCAPED_UNICODE，JSON_UNESCAPED_SLASHES。</li></ol><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>结合输出对象，我们在创建一个基类控制器，也放在相同的Https目录，我们控制创建一个构造函数，实例化一个Response，并实现一个通用的json：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 基类控制器</span><span class="hljs-comment"> * 预定义json方法，便于其他控制器使用</span><span class="hljs-comment"> * 返回格式</span><span class="hljs-comment"> &#123;</span><span class="hljs-comment">    &quot;data&quot;: [],</span><span class="hljs-comment">    &quot;msg&quot;: &quot;success&quot;,</span><span class="hljs-comment">    &quot;code&quot;: 0,</span><span class="hljs-comment">    &quot;timestamp&quot;: 1572231957</span><span class="hljs-comment">&#125;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Https</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$response</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">200</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;response = <span class="hljs-keyword">new</span> Response();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">json</span>(<span class="hljs-params"><span class="hljs-variable">$data</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json(<span class="hljs-variable">$data</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"><span class="hljs-variable">$params</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;response-&gt;json([<span class="hljs-string">&#x27;hello&#x27;</span> =&gt; <span class="hljs-string">&#x27;saif&#x27;</span>]);    &#125;&#125;</code></pre></div><p>app应用里的控制器都必须继承这个基类控制器。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>框架篇：1.框架目录与辅助</title>
    <link href="/2020/02/02/phpframe04/"/>
    <url>/2020/02/02/phpframe04/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>那么就利用composer来开始我们的项目吧。</p><p>新建目录并进入目录，输入命令：</p><blockquote><p>composer init</p></blockquote><p>命令行会跟你确认以下信息（以下信息可以自行DIY）</p><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-comment"># 1. 输入项目命名空间</span><span class="hljs-comment"># 注意&lt;vendor&gt;/&lt;name&gt; 必须要符合 [a-z0-9_.-]+/[a-z0-9_.-]+</span>Package name (&lt;vendor&gt;/&lt;name&gt;) yourname/projectname<span class="hljs-comment"># 2. 项目描述</span>Description []:这是一个测试composer init 项目<span class="hljs-comment"># 3. 输入作者信息</span>Author [<span class="hljs-number">13sai</span> &lt;sai0556@qq.com&gt;, n <span class="hljs-keyword">to</span> skip]:<span class="hljs-comment"># 4. 输入最低稳定版本，stable, RC, beta, alpha, dev</span>Minimum Stability []:dev<span class="hljs-comment"># 5. 输入项目类型</span>Package Type (e.g. library, project, metapackage, composer-plugin) []:project<span class="hljs-comment"># 6. 输入授权类型</span>License []:MITDefine your dependencies.<span class="hljs-comment"># 7. 输入依赖信息</span>Would you like <span class="hljs-keyword">to</span> define your dependencies (<span class="hljs-built_in">require</span>) interactively [<span class="hljs-literal">yes</span>]?<span class="hljs-comment"># 7.1. 如果需要依赖，则输入要安装的依赖</span>Search <span class="hljs-keyword">for</span> a package:php<span class="hljs-comment"># 7.2. 输入版本号</span>Enter the version constraint <span class="hljs-keyword">to</span> <span class="hljs-built_in">require</span> (<span class="hljs-keyword">or</span> leave blank <span class="hljs-keyword">to</span> use the latest version): &gt;=<span class="hljs-number">5.4</span>.<span class="hljs-number">0</span><span class="hljs-comment">#  如需多个依赖，则重复以上两个步骤(7.1/7.2)</span>Search <span class="hljs-keyword">for</span> a package:<span class="hljs-comment"># 8. 是否需要require-dev，</span>Would you like <span class="hljs-keyword">to</span> define your dev dependencies (<span class="hljs-built_in">require</span>-dev) interactively [<span class="hljs-literal">yes</span>]?&#123;    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;sai/saif&quot;</span>,    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;php framework&quot;</span>,    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;project&quot;</span>,    <span class="hljs-string">&quot;require&quot;</span>: &#123;    &#125;,    <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>,    <span class="hljs-string">&quot;authors&quot;</span>: [        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;13sai&quot;</span>,            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;sai0556@qq.com&quot;</span>        &#125;    ],    <span class="hljs-string">&quot;minimum-stability&quot;</span>: <span class="hljs-string">&quot;dev&quot;</span>&#125;<span class="hljs-comment"># 9. 是否生成composer.json</span>Do you confirm generation [<span class="hljs-literal">yes</span>]?<span class="hljs-comment"># 现在安装依赖项吗</span>Would you like <span class="hljs-keyword">to</span> install dependencies now [<span class="hljs-literal">yes</span>]?</code></pre></div><p>我们的目录下会生成composer.json。</p><hr><p>然后我们来思考一个问题：</p><blockquote><p>你觉得一个基础的API框架需要什么模块呢？</p></blockquote><p>下面是我的思考结果：</p><ul><li>路由</li><li>请求</li><li>数据响应</li><li>异常处理</li><li>日志系统…</li></ul><p>当然，你可能觉得还应该有：</p><ul><li>配置</li><li>session</li><li>缓存</li><li>验证</li><li>模型</li><li>服务层</li><li>文件上传…</li></ul><p>也许你想到更多：</p><ul><li>任务调度</li><li>队列</li><li>用户验证</li><li>锁</li><li>…</li></ul><p>那么这么些我们如何取舍呢？手心手背都是肉啊。</p><p>这里需要做一下说明，我们所做的框架无需考虑太多的功能，是做一个简单可用的API接口框架，我们接受get/post请求，返回json数据，并且路由好用，这是我们的初衷，其他的暂且就“断舍离”吧。</p><p>我们先画一个极简的流程图。</p><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/I8ta10A3ob.png!large" alt="简单流程图"></p><p>我们一切从简，所以我们定义以下几个模块：</p><ul><li>路由</li><li>控制器</li><li>请求</li><li>数据响应</li><li>配置</li><li>异常处理</li><li>…</li></ul><p>基于这些，我们新建目录，app和library，public</p><ul><li>app web应用</li><li>library 核心代码</li><li>public 入口目录</li></ul><p>出于简单安全考虑，我们的入口单独放在public目录，并在目录下新建index.php作为我们的入口文件。</p><p>library下面新建几个目录和文件</p><ul><li>Components 常用组件</li><li>Exceptions 异常模块</li><li>Https http应用模块</li><li>Sessions session模块</li><li>Application.php 应用文件</li><li>Config.php 配置文件</li><li>Functions.php 常用函数</li><li>System.php 框架自定义常量</li></ul><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/QE8AHxxoup.png!large" alt="image"></p><p>对应的我们在composer.json中加入一些autoload配置，用以自动加载，省去我们实现自动加载。</p><div class="code-wrapper"><pre><code class="hljs swift"><span class="hljs-string">&quot;autoload&quot;</span>: &#123;    <span class="hljs-string">&quot;psr-4&quot;</span>: &#123;        <span class="hljs-string">&quot;Library<span class="hljs-subst">\\</span>&quot;</span>: <span class="hljs-string">&quot;library/&quot;</span>,        <span class="hljs-string">&quot;App<span class="hljs-subst">\\</span>&quot;</span>: <span class="hljs-string">&quot;app/&quot;</span>    &#125;,    <span class="hljs-string">&quot;files&quot;</span>: [        <span class="hljs-string">&quot;library/Functions.php&quot;</span>    ]&#125;</code></pre></div><p>执行一下，composer install或者composer dump-autoload即可。</p><hr><p>这里简单说明一下autoload的四种方式：</p><h4 id="autoload的四种方式"><a href="#autoload的四种方式" class="headerlink" title="autoload的四种方式"></a>autoload的四种方式</h4><ol><li>PSR-4</li></ol><p>在psr-4键下，定义了相对于包根目录从名称空间到路径的映射。当自动加载一个类（如foo\bar\baz）时，指向src/目录的名称空间前缀foo\，意味着自动加载程序将查找一个名为src/bar/baz.php的文件，并包括它（如果存在）。注意，与旧的psr-0样式相反，前缀（foo\）不在文件路径中。</p><p>命名空间前缀必须以“\”结尾，以避免类似前缀之间的冲突。例如，foo将匹配foobar名称空间中的类，因此后面的反斜杠可以解决问题：foo\，foobar\。</p><p>该数组可以在生成的文件vendor/composer/autoload_psr4.php中找到。</p><ol start="2"><li>PSR-0</li></ol><p>在 psr-0 key 下你定义了一个命名空间到实际路径的映射（相对于包的根目录）。注意，这里同样支持 PEAR-style 方式的约定（与命名空间不同，PEAR 类库在类名上采用了下划线分隔）。</p><p>请注意，命名空间的申明应该以 \ 结束，以确保 autoloader 能够准确响应。例： Foo 将会与 FooBar 匹配，然而以反斜杠结束就可以解决这样的问题， Foo\ 和 FooBar\ 将会被区分开来。</p><p>PSR-0 引用都将被结合为一个单一的键值对数组，存储至 vendor/composer/autoload_namespaces.php 文件中。</p><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/weRQPYwumQ.png!large" alt="image"></p><ol start="3"><li>classmap</li></ol><p>你可以用 classmap 生成支持支持自定义加载的不遵循 PSR-0/4 规范的类库。要配置它指向需要的目录，以便能够准确搜索到类文件。</p><p>classmap 引用的所有组合会存储到 vendor/composer/autoload_classmap.php 文件中。这个 map 是经过扫描指定目录（同样支持直接精确到文件）中所有的 .php 和 .inc 文件里内置的类而得到的。</p><ol start="4"><li>files</li></ol><p>如果你想要明确的指定，在每次请求时都要载入某些文件，那么你可以使用 ‘files’ autoloading。通常作为函数库的载入方式（而非类库）。files 引用的文件会存储到 vendor/composer/autoload_files.php 文件中</p><ul><li><a href="https://docs.phpcomposer.com/04-schema.html#autoload">点击查看autoload说明与实例</a></li></ul><hr><p>我们先不着急进行核心代码编写，不妨先做一下辅助工作，常用方法，异常处理等。</p><h3 id="常用函数Functions"><a href="#常用函数Functions" class="headerlink" title="常用函数Functions"></a>常用函数Functions</h3><p>编写常用函数</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 常用函数</span><span class="hljs-comment"> */</span> <span class="hljs-keyword">if</span> (!function_exists(<span class="hljs-string">&quot;p&quot;</span>)) &#123;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (is_bool(<span class="hljs-variable">$var</span>)) &#123;            var_dump(<span class="hljs-variable">$var</span>);        &#125; <span class="hljs-keyword">elseif</span> (is_null(<span class="hljs-variable">$var</span>)) &#123;            var_dump(<span class="hljs-literal">null</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;meta charset=&#x27;utf-8&#x27;/&gt;</span><span class="hljs-string">&lt;pre style=&#x27;position:relative;</span><span class="hljs-string">z-index:999;</span><span class="hljs-string">padding:10px;</span><span class="hljs-string">border-radius:5px;</span><span class="hljs-string">background:#f5f5f5;</span><span class="hljs-string">border:1px solid #aaa;</span><span class="hljs-string">font-size:14px;</span><span class="hljs-string">line-height:18px;</span><span class="hljs-string">opacity:0.8;&#x27;&gt;&quot;</span>.print_r(<span class="hljs-variable">$var</span>, <span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);        &#125;    &#125;&#125;······</code></pre></div><hr><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在Exceptions目录下，定义一个最基础的异常SaiException：</p><div class="code-wrapper"><pre><code class="hljs zephir">&lt;?php<span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Exceptions</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SaiException</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Exception</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> CODE_MAPPING = [        <span class="hljs-number">100</span> =&gt; <span class="hljs-string">&#x27;Continue&#x27;</span>,        <span class="hljs-number">101</span> =&gt; <span class="hljs-string">&#x27;Switching Protocols&#x27;</span>,        <span class="hljs-number">102</span> =&gt; <span class="hljs-string">&#x27;Processing&#x27;</span>,        <span class="hljs-number">200</span> =&gt; <span class="hljs-string">&#x27;OK&#x27;</span>,        <span class="hljs-number">201</span> =&gt; <span class="hljs-string">&#x27;Created&#x27;</span>,        <span class="hljs-number">202</span> =&gt; <span class="hljs-string">&#x27;Accepted&#x27;</span>,        <span class="hljs-number">203</span> =&gt; <span class="hljs-string">&#x27;Non-Authoritative Information&#x27;</span>,        <span class="hljs-number">204</span> =&gt; <span class="hljs-string">&#x27;No Content&#x27;</span>,        <span class="hljs-number">205</span> =&gt; <span class="hljs-string">&#x27;Reset Content&#x27;</span>,        <span class="hljs-number">206</span> =&gt; <span class="hljs-string">&#x27;Partial Content&#x27;</span>,        <span class="hljs-number">207</span> =&gt; <span class="hljs-string">&#x27;Multi-Status&#x27;</span>,        <span class="hljs-number">226</span> =&gt; <span class="hljs-string">&#x27;IM Used&#x27;</span>,        <span class="hljs-number">300</span> =&gt; <span class="hljs-string">&#x27;Multiple Choices&#x27;</span>,        <span class="hljs-number">301</span> =&gt; <span class="hljs-string">&#x27;Moved Permanently&#x27;</span>,        <span class="hljs-number">302</span> =&gt; <span class="hljs-string">&#x27;Found&#x27;</span>,        <span class="hljs-number">303</span> =&gt; <span class="hljs-string">&#x27;See Other&#x27;</span>,        <span class="hljs-number">304</span> =&gt; <span class="hljs-string">&#x27;Not Modified&#x27;</span>,        <span class="hljs-number">305</span> =&gt; <span class="hljs-string">&#x27;Use Proxy&#x27;</span>,        <span class="hljs-number">306</span> =&gt; <span class="hljs-string">&#x27;Reserved&#x27;</span>,        <span class="hljs-number">307</span> =&gt; <span class="hljs-string">&#x27;Temporary Redirect&#x27;</span>,        <span class="hljs-number">400</span> =&gt; <span class="hljs-string">&#x27;Bad Request&#x27;</span>,        <span class="hljs-number">401</span> =&gt; <span class="hljs-string">&#x27;Unauthorized&#x27;</span>,        <span class="hljs-number">402</span> =&gt; <span class="hljs-string">&#x27;Payment Required&#x27;</span>,        <span class="hljs-number">403</span> =&gt; <span class="hljs-string">&#x27;Forbidden&#x27;</span>,        <span class="hljs-number">404</span> =&gt; <span class="hljs-string">&#x27;Not Found&#x27;</span>,        <span class="hljs-number">405</span> =&gt; <span class="hljs-string">&#x27;Method Not Allowed&#x27;</span>,        <span class="hljs-number">406</span> =&gt; <span class="hljs-string">&#x27;Not Acceptable&#x27;</span>,        <span class="hljs-number">407</span> =&gt; <span class="hljs-string">&#x27;Proxy Authentication Required&#x27;</span>,        <span class="hljs-number">408</span> =&gt; <span class="hljs-string">&#x27;Request Timeout&#x27;</span>,        <span class="hljs-number">409</span> =&gt; <span class="hljs-string">&#x27;Conflict&#x27;</span>,        <span class="hljs-number">410</span> =&gt; <span class="hljs-string">&#x27;Gone&#x27;</span>,        <span class="hljs-number">411</span> =&gt; <span class="hljs-string">&#x27;Length Required&#x27;</span>,        <span class="hljs-number">412</span> =&gt; <span class="hljs-string">&#x27;Precondition Failed&#x27;</span>,        <span class="hljs-number">413</span> =&gt; <span class="hljs-string">&#x27;Request Entity Too Large&#x27;</span>,        <span class="hljs-number">414</span> =&gt; <span class="hljs-string">&#x27;Request-URI Too Long&#x27;</span>,        <span class="hljs-number">415</span> =&gt; <span class="hljs-string">&#x27;Unsupported Media Type&#x27;</span>,        <span class="hljs-number">416</span> =&gt; <span class="hljs-string">&#x27;Requested Range Not Satisfiable&#x27;</span>,        <span class="hljs-number">417</span> =&gt; <span class="hljs-string">&#x27;Expectation Failed&#x27;</span>,        <span class="hljs-number">422</span> =&gt; <span class="hljs-string">&#x27;Unprocessable Entity&#x27;</span>,        <span class="hljs-number">423</span> =&gt; <span class="hljs-string">&#x27;Locked&#x27;</span>,        <span class="hljs-number">424</span> =&gt; <span class="hljs-string">&#x27;Failed Dependency&#x27;</span>,        <span class="hljs-number">426</span> =&gt; <span class="hljs-string">&#x27;Upgrade Required&#x27;</span>,        <span class="hljs-number">429</span> =&gt; <span class="hljs-string">&#x27;Too Many Request&#x27;</span>,        <span class="hljs-number">500</span> =&gt; <span class="hljs-string">&#x27;Internal Server Error&#x27;</span>,        <span class="hljs-number">501</span> =&gt; <span class="hljs-string">&#x27;Not Implemented&#x27;</span>,        <span class="hljs-number">502</span> =&gt; <span class="hljs-string">&#x27;Bad Gateway&#x27;</span>,        <span class="hljs-number">503</span> =&gt; <span class="hljs-string">&#x27;Service Unavailable&#x27;</span>,        <span class="hljs-number">504</span> =&gt; <span class="hljs-string">&#x27;Gateway Timeout&#x27;</span>,        <span class="hljs-number">505</span> =&gt; <span class="hljs-string">&#x27;HTTP Version Not Supported&#x27;</span>,        <span class="hljs-number">506</span> =&gt; <span class="hljs-string">&#x27;Variant Also Negotiates&#x27;</span>,        <span class="hljs-number">507</span> =&gt; <span class="hljs-string">&#x27;Insufficient Storage&#x27;</span>,        <span class="hljs-number">510</span> =&gt; <span class="hljs-string">&#x27;Not Extended&#x27;</span>,        <span class="hljs-number">1001</span> =&gt; <span class="hljs-string">&#x27;LACK PARAMS&#x27;</span>,        <span class="hljs-number">1002</span> =&gt; <span class="hljs-string">&#x27;RETRY TOO MANY&#x27;</span>,    ];    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 输出指定HTTP状态码的响应头信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int $code</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> $data</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">response</span><span class="hljs-params">($code, $data)</span></span>&#123;        $code = array_key_exists($code, <span class="hljs-keyword">self</span>::CODE_MAPPING)? $code : <span class="hljs-number">500</span>;        $desc = <span class="hljs-keyword">self</span>::CODE_MAPPING[$code];        $protocol = $_SERVER[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>];        <span class="hljs-keyword">if</span> ( <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span> != $protocol &amp;&amp; <span class="hljs-string">&#x27;HTTP/1.0&#x27;</span> != $protocol )            $protocol = <span class="hljs-string">&#x27;HTTP/1.0&#x27;</span>;        $header = <span class="hljs-string">&quot;$protocol $code $desc&quot;</span>;        header($header);        p($data);    &#125;&#125;</code></pre></div><p>几乎后面所有Exception的类都会继承这个异常类。</p><hr><p>在Components目录下新建基础的类Base：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">Library</span>\<span class="hljs-title">Components</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> <span class="hljs-keyword">implements</span> \<span class="hljs-title">ArrayAccess</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_container</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (method_exists(<span class="hljs-keyword">$this</span>, <span class="hljs-variable">$method</span> = <span class="hljs-string">&#x27;get&#x27;</span>.ucfirst(<span class="hljs-variable">$name</span>))) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$method</span>(<span class="hljs-variable">$name</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (method_exists(<span class="hljs-keyword">$this</span>, <span class="hljs-variable">$method</span> = <span class="hljs-string">&#x27;set&#x27;</span>.ucfirst(<span class="hljs-variable">$name</span>))) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$method</span>(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetSet</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span>, <span class="hljs-variable">$value</span></span>) </span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (is_null(<span class="hljs-variable">$offset</span>)) &#123;            <span class="hljs-keyword">$this</span>-&gt;_container[] = <span class="hljs-variable">$value</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">$this</span>-&gt;_container[<span class="hljs-variable">$offset</span>] = <span class="hljs-variable">$value</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetExists</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;_container[<span class="hljs-variable">$offset</span>]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetUnset</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;_container[<span class="hljs-variable">$offset</span>]);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">offsetGet</span>(<span class="hljs-params"><span class="hljs-variable">$offset</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;_container[<span class="hljs-variable">$offset</span>]) ? <span class="hljs-keyword">$this</span>-&gt;_container[<span class="hljs-variable">$offset</span>] : <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div><p>这里有两个知识点：</p><ol><li>ArrayAccess数组式访问接口（提供像访问数组一样访问对象的能力的接口。）</li><li>魔术方法__set和__get（在给不可访问属性赋值时__set() 会被调用;读取不可访问属性的值时__get() 会被调用。）</li></ol><p>如果想了解更多，可看官方文档：</p><ul><li><a href="https://www.php.net/manual/zh/class.arrayaccess.php">ArrayAccess接口</a></li><li><a href="https://www.php.net/manual/zh/language.oop5.magic.php">魔术方法</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础篇：3.反射</title>
    <link href="/2020/02/01/phpframe03/"/>
    <url>/2020/02/01/phpframe03/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><blockquote><p>反射，直观理解就是根据到达地找到出发地和来源。 反射指在PHP运行状态中，扩展分析PHP程序，导出或提出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取信息以及动态调用对象方法的功能称为反射API。</p></blockquote><p>不妨先来看一个demo：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Author: sai</span><span class="hljs-comment"> * Date: 2019/10/21</span><span class="hljs-comment"> * Time: 10:59</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"><span class="hljs-variable">$msg</span>, <span class="hljs-variable">$var</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;pre style=&#x27;position:relative;</span><span class="hljs-string">z-index:999;</span><span class="hljs-string">padding:10px;</span><span class="hljs-string">border-radius:5px;</span><span class="hljs-string">background:#f5f5f5;</span><span class="hljs-string">border:1px solid #aaa;</span><span class="hljs-string">font-size:14px;</span><span class="hljs-string">line-height:18px;</span><span class="hljs-string">opacity:0.8;&#x27;&gt;&quot;</span>.<span class="hljs-variable">$msg</span>.<span class="hljs-string">&quot;:&quot;</span>.print_r(<span class="hljs-variable">$var</span>, <span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$id</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;    <span class="hljs-keyword">public</span> <span class="hljs-variable">$skills</span> = [];    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>, <span class="hljs-variable">$name</span>, <span class="hljs-variable">$skills</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-variable">$id</span>;        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;        <span class="hljs-keyword">$this</span>-&gt;skills = <span class="hljs-variable">$skills</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;name;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSkill</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        p(<span class="hljs-string">&#x27;skill&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;skills);    &#125;&#125;<span class="hljs-variable">$ref</span> = <span class="hljs-keyword">new</span> ReflectionClass(<span class="hljs-string">&#x27;Demo&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ref</span>-&gt;isInstantiable()) &#123;    p(<span class="hljs-string">&#x27;检查类是否可实例化isInstantiable&#x27;</span>, <span class="hljs-literal">null</span> );&#125;<span class="hljs-variable">$constructor</span> = <span class="hljs-variable">$ref</span>-&gt;getConstructor();p(<span class="hljs-string">&#x27;获取构造函数getConstructor&#x27;</span>, <span class="hljs-variable">$constructor</span>);<span class="hljs-variable">$parameters</span> = <span class="hljs-variable">$constructor</span>-&gt;getParameters();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$parameters</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$param</span>) &#123;    p(<span class="hljs-string">&#x27;获取参数getParameters&#x27;</span>, <span class="hljs-variable">$param</span>);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ref</span>-&gt;hasProperty(<span class="hljs-string">&#x27;name&#x27;</span>)) &#123;    <span class="hljs-variable">$attr</span> = <span class="hljs-variable">$ref</span>-&gt;getProperty(<span class="hljs-string">&#x27;name&#x27;</span>);    p(<span class="hljs-string">&#x27;获取属性getProperty&#x27;</span>, <span class="hljs-variable">$attr</span>);&#125;<span class="hljs-variable">$attributes</span> = <span class="hljs-variable">$ref</span>-&gt;getProperties();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$attributes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>) &#123;    p(<span class="hljs-string">&#x27;获取属性列表getProperties&#x27;</span>, <span class="hljs-variable">$row</span>-&gt;getName() );&#125;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ref</span>-&gt;hasMethod(<span class="hljs-string">&#x27;getSkill&#x27;</span>)) &#123;    <span class="hljs-variable">$method</span> = <span class="hljs-variable">$ref</span>-&gt;getMethod(<span class="hljs-string">&#x27;getSkill&#x27;</span>);    p(<span class="hljs-string">&#x27;获取方法getMethod&#x27;</span>, <span class="hljs-variable">$method</span>);&#125;<span class="hljs-variable">$methods</span> = <span class="hljs-variable">$ref</span>-&gt;getMethods();<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>) &#123;    p(<span class="hljs-string">&#x27;获取方法列表getMethods&#x27;</span>, <span class="hljs-variable">$row</span>-&gt;getName());&#125;<span class="hljs-variable">$instance</span> = <span class="hljs-variable">$ref</span>-&gt;newInstanceArgs([<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;sai&#x27;</span>, [<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;js&#x27;</span>]]);p(<span class="hljs-string">&#x27;newInstanceArgs&#x27;</span>, <span class="hljs-variable">$instance</span>);</code></pre></div><p>输出：</p><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>检查类是否可实例化isInstantiable:</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取构造函数getConstructor:ReflectionMethod Object(    [name] => __construct    [class] => Demo)</pre></div><p></pre><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取参数getParameters:ReflectionParameter Object<br>(<br>    [name] => id<br>)<br></pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取参数getParameters:ReflectionParameter Object<br>(<br>    [name] => name<br>)<br></pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取参数getParameters:ReflectionParameter Object<br>(<br>    [name] => skills<br>)<br></pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取属性getProperty:ReflectionProperty Object<br>(<br>    [name] => name<br>    [class] => Demo<br>)<br></pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取属性列表getProperties:id</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取属性列表getProperties:name</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取属性列表getProperties:skills</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取方法getMethod:ReflectionMethod Object<br>(<br>    [name] => getSkill<br>    [class] => Demo<br>)<br></pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取方法列表getMethods:__construct</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取方法列表getMethods:getName</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>获取方法列表getMethods:getSkill</pre></div><div class="code-wrapper"><pre style='position:relative;z-index:999;padding:10px;border-radius:5px;background:#f5f5f5;border:1px solid #aaa;font-size:14px;line-height:18px;opacity:0.8;'>newInstanceArgs:Demo Object<br>(<br>    [id:Demo:private] => 1<br>    [name:protected] => sai<br>    [skills] => Array<br>        (<br>            [0] => php<br>            [1] => js<br>        )</p><p>)<br></pre></div></p><p>demo里面就有使用了ReflectionClass类，当然ReflectionClass类不止于这些方法。</p><h3 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h3><p>ReflectionClass类还有更多方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ReflectionClass::__construct</td><td>初始化 ReflectionClass 类</td></tr><tr><td>ReflectionClass::export</td><td>导出一个类</td></tr><tr><td>ReflectionClass::getConstant</td><td>获取定义过的一个常量</td></tr><tr><td>ReflectionClass::getConstants</td><td>获取一组常量</td></tr><tr><td>ReflectionClass::getConstructor</td><td>获取类的构造函数</td></tr><tr><td>ReflectionClass::getDefaultProperties</td><td>获取默认属性</td></tr><tr><td>ReflectionClass::getDocComment</td><td>获取文档注释</td></tr><tr><td>ReflectionClass::getEndLine</td><td>获取最后一行的行数</td></tr><tr><td>ReflectionClass::getExtension</td><td>根据已定义的类获取所在扩展的 ReflectionExtension 对象</td></tr><tr><td>ReflectionClass::getExtensionName</td><td>获取定义的类所在的扩展的名称</td></tr><tr><td>ReflectionClass::getFileName</td><td>获取定义类的文件名</td></tr><tr><td>ReflectionClass::getInterfaceNames</td><td>获取接口（interface）名称</td></tr><tr><td>ReflectionClass::getInterfaces</td><td>获取接口</td></tr><tr><td>ReflectionClass::getMethod</td><td>获取一个类方法的 ReflectionMethod。</td></tr><tr><td>ReflectionClass::getMethods</td><td>获取方法的数组</td></tr><tr><td>ReflectionClass::getModifiers</td><td>获取类的修饰符</td></tr><tr><td>ReflectionClass::getName</td><td>获取类名</td></tr><tr><td>ReflectionClass::getNamespaceName</td><td>获取命名空间的名称</td></tr><tr><td>ReflectionClass::getParentClass</td><td>获取父类</td></tr><tr><td>ReflectionClass::getProperties</td><td>获取一组属性</td></tr><tr><td>ReflectionClass::getProperty</td><td>获取类的一个属性的 ReflectionProperty</td></tr><tr><td>ReflectionClass::getReflectionConstant</td><td>Gets a ReflectionClassConstant for a class’s constant</td></tr><tr><td>ReflectionClass::getReflectionConstants</td><td>Gets class constants</td></tr><tr><td>ReflectionClass::getShortName</td><td>获取短名</td></tr><tr><td>ReflectionClass::getStartLine</td><td>获取起始行号</td></tr><tr><td>ReflectionClass::getStaticProperties</td><td>获取静态（static）属性</td></tr><tr><td>ReflectionClass::getStaticPropertyValue</td><td>获取静态（static）属性的值</td></tr><tr><td>ReflectionClass::getTraitAliases</td><td>返回 trait 别名的一个数组</td></tr><tr><td>ReflectionClass::getTraitNames</td><td>返回这个类所使用 traits 的名称的数组</td></tr><tr><td>ReflectionClass::getTraits</td><td>返回这个类所使用的 traits 数组</td></tr><tr><td>ReflectionClass::hasConstant</td><td>检查常量是否已经定义</td></tr><tr><td>ReflectionClass::hasMethod</td><td>检查方法是否已定义</td></tr><tr><td>ReflectionClass::hasProperty</td><td>检查属性是否已定义</td></tr><tr><td>ReflectionClass::implementsInterface</td><td>接口的实现</td></tr><tr><td>ReflectionClass::inNamespace</td><td>检查是否位于命名空间中</td></tr><tr><td>ReflectionClass::isAbstract</td><td>检查类是否是抽象类（abstract）</td></tr><tr><td>ReflectionClass::isAnonymous</td><td>检查类是否是匿名类</td></tr><tr><td>ReflectionClass::isCloneable</td><td>返回了一个类是否可复制</td></tr><tr><td>ReflectionClass::isFinal</td><td>检查类是否声明为 final</td></tr><tr><td>ReflectionClass::isInstance</td><td>检查类的实例</td></tr><tr><td>ReflectionClass::isInstantiable</td><td>检查类是否可实例化</td></tr><tr><td>ReflectionClass::isInterface</td><td>检查类是否是一个接口（interface）</td></tr><tr><td>ReflectionClass::isInternal</td><td>检查类是否由扩展或核心在内部定义</td></tr><tr><td>ReflectionClass::isIterable</td><td>Check whether this class is iterable</td></tr><tr><td>ReflectionClass::isIterateable</td><td>检查是否可迭代（iterateable）</td></tr><tr><td>ReflectionClass::isSubclassOf</td><td>检查是否为一个子类</td></tr><tr><td>ReflectionClass::isTrait</td><td>返回了是否为一个 trait</td></tr><tr><td>ReflectionClass::isUserDefined</td><td>检查是否由用户定义的</td></tr><tr><td>ReflectionClass::newInstance</td><td>从指定的参数创建一个新的类实例</td></tr><tr><td>ReflectionClass::newInstanceArgs</td><td>从给出的参数创建一个新的类实例。</td></tr><tr><td>ReflectionClass::newInstanceWithoutConstructor</td><td>创建一个新的类实例而不调用它的构造函数</td></tr><tr><td>ReflectionClass::setStaticPropertyValue</td><td>设置静态属性的值</td></tr><tr><td>ReflectionClass::__toString</td><td>返回 ReflectionClass 对象字符串的表示形式。</td></tr></tbody></table><p>除去强大的ReflectionClass，还有Reflection、ReflectionClassConstant 、ReflectionMethod 、ReflectionFunctionAbstract等等。建议查看手册：</p><ul><li><a href="https://www.php.net/manual/zh/book.reflection.php">PHP反射</a></li></ul><h3 id="反射的实际应用"><a href="#反射的实际应用" class="headerlink" title="反射的实际应用"></a>反射的实际应用</h3><ol><li>反射可以用于文档、文件生成。可以用它对文件里的类进行扫描，逐个生成描述文档;</li><li>既然反射可以探知类的内部结构，那么可以用它做hook实现插件功能；</li><li>可以用于做动态代理，在未知或者不确定类名的情况下，动态生成和实例化一些类和执行方法；</li><li>依赖注入。对于多次继承的类，我们可以通过多次反射探索到基类的结构，或者采用递归的形式反射，实现实例化所有继承类，这也是PHP依赖注入的原理。</li></ol><h3 id="反射的优点"><a href="#反射的优点" class="headerlink" title="反射的优点"></a>反射的优点</h3><ol><li>支持反射的语言提供了一些在低级语言中难以实现的运行时特性。</li><li>可以在一定程度上避免硬编码，提供灵活性和通用性。</li><li>可以作为一个第一类对象发现并修改源代码的结构（如代码块、类、方法、协议等）。</li><li>可以在运行时像对待源代码语句一样计算符号语法的字符串（类似JavaScript的eval()函数），进而可将跟class或function匹配的字符串转换成class或function的调用或引用。</li><li>可以创建一个新的语言字节码解释器来给编程结构一个新的意义或用途。</li></ol><h3 id="反射的缺点"><a href="#反射的缺点" class="headerlink" title="反射的缺点"></a>反射的缺点</h3><ol><li>学习成本高。面向反射的编程需要较多的高级知识，包括框架、关系映射和对象交互，以利用更通用的代码执行</li><li>同样因为反射的概念和语法都比较抽象，过多地滥用反射技术会使得代码难以被其他人读懂，不利于合作与交流</li><li>反射在提高了代码灵活性的同时，牺牲了一点点运行效率，有一定的消耗</li><li>反射也会破坏类的封装性，把本不该暴露的方法或属性暴露了出来</li></ol><p>在平时的开发中，我们用到反射其实不多，为什么把它拿到这里来说呢？一来是我们后面会使用到反射去实现Ioc容器，二来反射也是PHP核心功能之一，在我们流行的框架中十分常见，理解它是很有必要的。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础篇：2.composer</title>
    <link href="/2020/02/01/phpframe02/"/>
    <url>/2020/02/01/phpframe02/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><hr><p>上一节我们介绍了我们需要遵循的规范，这一节我们来介绍一下我们的项目中需要用到的一个依赖管理工具——Composer。</p><blockquote><p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/DV0PWOB3Vo.png!large" alt="image"></p><p>如果你是前端工程师，你应该用过npm；如果你是pyhton开发者，你应该用过pip，简单说你可以这样理解composer。</p><p>composer在小册中可能经常会被提及，我们来学习一下安装和常用命令。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>Linux</li></ol><p>composer的安装比较简单，不建议使用yum等管理包直接install，因为有可能会修改你的默认php版本。我们可以跳过以下方式安装：</p><blockquote><p>curl -sS <a href="https://getcomposer.org/installer">https://getcomposer.org/installer</a> | php</p></blockquote><blockquote><p>mv composer.phar /usr/local/bin/composer</p></blockquote><ol start="2"><li>Windows</li></ol><p>下载并且运行 Composer-Setup.exe，它将安装最新版本的 Composer ，建议加入系统的环境变量，这样你就可以在任何目录下直接使用 composer 命令。</p><h3 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h3><p>默认镜像源国内下载比较慢，建议更换镜像源</p><blockquote><p>composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com/">https://packagist.phpcomposer.com</a></p></blockquote><p>也可以使用阿里的镜像源(推荐)</p><blockquote><p>composer config -g repo.packagist composer <a href="https://mirrors.aliyun.com/composer/">https://mirrors.aliyun.com/composer/</a></p></blockquote><blockquote><p>config -g/–global 表示全局配置</p></blockquote><h3 id="composer常用命令"><a href="#composer常用命令" class="headerlink" title="composer常用命令"></a>composer常用命令</h3><h4 id="init初始化"><a href="#init初始化" class="headerlink" title="init初始化"></a>init初始化</h4><div class="code-wrapper"><pre><code class="hljs haml">参数：-<span class="ruby">-<span class="hljs-symbol">name:</span> 包的名称。</span><span class="ruby"></span>-<span class="ruby">-<span class="hljs-symbol">description:</span> 包的描述。</span><span class="ruby"></span>-<span class="ruby">-<span class="hljs-symbol">author:</span> 包的作者。</span><span class="ruby"></span>-<span class="ruby">-<span class="hljs-symbol">homepage:</span> 包的主页。</span><span class="ruby"></span>-<span class="ruby">-<span class="hljs-symbol">require:</span> 需要依赖的其它包，必须要有一个版本约束。并且应该遵循 foo/<span class="hljs-symbol">bar:</span><span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> 这样的格式。</span><span class="ruby"></span>-<span class="ruby">-<span class="hljs-keyword">require</span>-<span class="hljs-symbol">dev:</span> 开发版的依赖包，内容格式与 --<span class="hljs-keyword">require</span> 相同。</span><span class="ruby"></span>-<span class="ruby">-stability (-s): minimum-stability 字段的值。</span></code></pre></div><h3 id="require增加"><a href="#require增加" class="headerlink" title="require增加"></a>require增加</h3><p>require 命令增加新的依赖包到当前目录的 composer.json 文件中，并可以指定版本。</p><blockquote><p>composer require vendor/package:2.* vendor/package2:dev-master</p></blockquote><h4 id="install安装"><a href="#install安装" class="headerlink" title="install安装"></a>install安装</h4><p>install 命令从当前目录读取 composer.json 文件，处理了依赖关系，并把其安装到 vendor 目录下。</p><p>如果当前目录下存在 composer.lock 文件，它会从此文件读取依赖版本，而不是根据 composer.json 文件去获取依赖。这确保了该库的每个使用者都能得到相同的依赖版本。</p><p>如果没有 composer.lock 文件，composer 将在处理完依赖关系后创建它。</p><p>你可以简单把composer.lock理解为扩展库的缓存。</p><h4 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h4><p>为了获取依赖的最新版本，并且更新 composer.lock 文件，你应该使用 update 命令。</p><blockquote><p>composer update</p></blockquote><p>这将解决项目的所有依赖，并将确切的版本号写入 composer.lock。</p><p>如果你只是想更新几个包，你可以像这样分别列出它们：</p><blockquote><p>composer update vendor/package vendor/package2</p></blockquote><p>==注意==：update命令会更新composer.json里限定版本的最新依赖。<br>比如你写的是”monolog/monolog”: “1.*”,update命令可能会把1.0更新为1.2版本，但不会将1.0更新为2.0。所以使用时需要注意。</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>search 命令允许你为当前项目搜索依赖包，通常它只搜索 packagist.org 上的包，你可以简单的输入你的搜索条件。</p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>列出所有可用的软件包，你可以使用 show 命令。</p><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/0I2UwFU0bz.png!large" alt="composer-show"></p><p><a href="https://packagist.org/">也可以点击查看更多composer包</a></p><h3 id="dump-autoload"><a href="#dump-autoload" class="headerlink" title="dump-autoload"></a>dump-autoload</h3><p>打印自动加载索引，某些情况下你需要更新 autoloader，例如在你的包中加入了一个新的类。你可以使用 dump-autoload 来完成，而不必执行 install 或 update 命令。</p><p>此外，它可以打印一个优化过的，符合 PSR-0/4 规范的类的索引，这也是出于对性能的可考虑。在大型的应用中会有许多类文件，而 autoloader 会占用每个请求的很大一部分时间，使用 classmaps 或许在开发时不太方便，但它在保证性能的前提下，仍然可以获得 PSR-0/4 规范带来的便利。</p><p><a href="https://docs.phpcomposer.com/03-cli.html#Command-line-interface/">更composer多命令请点击查看</a></p><hr><p>好了，这一节我们介绍了composer的安装和常用命令。我们后面可以将框架集成到一个composer包，分享给其他开发同学使用。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础篇：1.PSR</title>
    <link href="/2020/02/01/phpframe01/"/>
    <url>/2020/02/01/phpframe01/</url>
    
    <content type="html"><![CDATA[<p>PHP DIY系列–一起手写一个api框架</p><h3 id="创作初衷"><a href="#创作初衷" class="headerlink" title="创作初衷"></a>创作初衷</h3><ul><li>有没有用烦了CURD？</li><li>各种框架是不是有点头大？</li><li>有没有尝试自己设计一个框架？</li><li>学了PHP语法，没有项目去实战，夯实基础</li></ul><p>希望能帮助能让你快速地搭建一个自己的框架，能给你的工作或者学习中带来一定的帮助与启发。</p><h3 id="你能学到什么"><a href="#你能学到什么" class="headerlink" title="你能学到什么"></a>你能学到什么</h3><ol><li>PSR规范</li><li>composer的使用</li><li>快速搭建一个API接口框架</li><li>Redis各种数据类型的应用</li><li>缓存应用分析</li></ol><hr><p>在开发框架之前，我来介绍框架开发遵循的规范。</p><p>大多数编程语言都有自己的一套编码规范，作为“世界上最好的语言”，PHP当然也有自己的编码规范。这个规范就是PHP Standard Recommendation（简称PSR）。</p><p>当然，从我自己的工作中，我发现很多PHP程序员尤其是初级程序员，是不知道PHP是有这么一个规范的，我认为这是不科学的。</p><h3 id="什么是PSR？"><a href="#什么是PSR？" class="headerlink" title="什么是PSR？"></a>什么是PSR？</h3><p>介绍PSR之前需要介绍一下制定此规范的组织—–PHP-FIG，全称是PHP Framework Interoperability。</p><p>组织成员制定规范，并且落实在自己的项目中，虽然不是官方组织，但也代表了大部分PHP社区项目，如CakePHP，Composer，Drupal，PEAR，Slim，Yii framework，Zend Framework等。并且有越来越多的项目加入并遵循此标准。</p><p>PSR项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，让工程师一起更好协同工作。</p><p>截止目前，已经官网已有20条列出，除去起草中和舍弃的，有以下13条。</p><p><img src="https://cdn.learnku.com/uploads/images/202002/18/41489/1wmtWCQ4Fv.png!large" alt="PSRs"></p><hr><p>我们不妨来看看这些规范：</p><h4 id="PSR-1-基础编码规范"><a href="#PSR-1-基础编码规范" class="headerlink" title="PSR-1 基础编码规范"></a>PSR-1 基础编码规范</h4><ul><li>PHP 代码文件必须以 &lt;?php 或 &lt;?= 标签开始</li><li>PHP 代码文件必须以不带BOM的UTF-8编码</li><li>PHP 代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一</li><li>命名空间以及类必须符合 PSR 的自动加载规范PSR-4</li><li>类的命名必须遵循 StudlyCaps 式大写开头的驼峰命名规范</li><li>类中的常量所有字母都必须 大写，单词间用下划线分隔</li><li>方法名称必须符合 camelCase 式的小写开头驼峰命名规范</li></ul><h4 id="PSR-12-代码风格规范"><a href="#PSR-12-代码风格规范" class="headerlink" title="PSR-12 代码风格规范"></a>PSR-12 代码风格规范</h4><p>PSR-12的规范很细致，包含了声明、命名空间、类及继承以及控制结构等说明。</p><p>我们先来看一个demo：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<span class="hljs-keyword">namespace</span> <span class="hljs-title">Vendor</span>\<span class="hljs-title">Package</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Vendor</span>\<span class="hljs-title">Package</span>\&#123;<span class="hljs-title">ClassA</span> <span class="hljs-title">as</span> <span class="hljs-title">A</span>, <span class="hljs-title">ClassB</span>, <span class="hljs-title">ClassC</span> <span class="hljs-title">as</span> <span class="hljs-title">C</span>&#125;;<span class="hljs-keyword">use</span> <span class="hljs-title">Vendor</span>\<span class="hljs-title">Package</span>\<span class="hljs-title">SomeNamespace</span>\<span class="hljs-title">ClassD</span> <span class="hljs-title">as</span> <span class="hljs-title">D</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">function</span> <span class="hljs-title">Vendor</span>\<span class="hljs-title">Package</span>\&#123;<span class="hljs-title">functionA</span>, <span class="hljs-title">functionB</span>, <span class="hljs-title">functionC</span>&#125;;<span class="hljs-keyword">use</span> <span class="hljs-title">const</span> <span class="hljs-title">Vendor</span>\<span class="hljs-title">Package</span>\&#123;<span class="hljs-title">ConstantA</span>, <span class="hljs-title">ConstantB</span>, <span class="hljs-title">ConstantC</span>&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Bar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FooInterface</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sampleFunction</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> <span class="hljs-variable">$a</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$b</span> = <span class="hljs-literal">null</span></span>): <span class="hljs-title">array</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> === <span class="hljs-variable">$b</span>) &#123;            bar();        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$a</span> &gt; <span class="hljs-variable">$b</span>) &#123;            <span class="hljs-variable">$foo</span>-&gt;bar(<span class="hljs-variable">$arg1</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            BazClass::bar(<span class="hljs-variable">$arg2</span>, <span class="hljs-variable">$arg3</span>);        &#125;    &#125;    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// method body</span>    &#125;&#125;</code></pre></div><ul><li>代码 必须 遵循 [PSR-1] 中的编码规范</li><li>所有PHP文件必须使用Unix LF (linefeed)作为行的结束符；</li><li>所有PHP文件必须以一个空白行作为结束；</li><li>纯PHP代码文件必须省略最后的 ?&gt; 结束标签</li><li>每行的字符数 应该软性保持在 80 个之内，理论上 一定不可 多于 120 个，但一定不可有硬性限制；非空行后一定不能有多余的空格符；</li><li>空行可以使得阅读代码更加方便以及有助于代码的分块。</li><li>每行一定不能存在多于一条语句</li><li>代码必须使用4个空格符的缩进，一定不能用 tab键</li><li>PHP所有关键字必须全部小写</li><li>控制结构的基本规范如下：<div class="code-wrapper"><pre><code class="hljs dust"><span class="xml">控制结构关键词后必须有一个空格。</span><span class="xml">左括号 ( 后一定不能有空格。</span><span class="xml">右括号 ) 前也一定不能有空格。</span><span class="xml">右括号 ) 与开始花括号 </span><span class="hljs-template-variable">&#123; 间一定有一个空格。</span><span class="hljs-template-variable">结构体主体一定要有一次缩进。</span><span class="hljs-template-variable">结束花括号 &#125;</span><span class="xml"> 一定在结构体主体后单独成行。</span></code></pre></div>代码风格规范内容很多，这里就不一一说明了，大家可自行阅读</li></ul><h4 id="PSR-4-自动加载"><a href="#PSR-4-自动加载" class="headerlink" title="PSR-4 自动加载"></a>PSR-4 自动加载</h4><p>关于由文件路径 自动载入 对应类的相关规范， 本规范是可互操作的，可以作为任一自动载入规范的补充，其中包括 PSR-0，此外， 本 PSR 还包括自动载入的类对应的文件存放路径规范。</p><ol><li><p>此处的“类”泛指所有的class类、接口、traits可复用代码块以及其它类似结构。</p></li><li><p>一个完整的类名需具有以下结构:</p><div class="code-wrapper"><pre><code class="hljs"> \&lt;命名空间&gt;(\&lt;子命名空间&gt;)*\&lt;类名&gt;</code></pre></div><ol><li><p>完整的类名<strong>必须</strong>要有一个顶级命名空间，被称为 “vendor namespace”；</p></li><li><p>完整的类名<strong>可以</strong>有一个或多个子命名空间；</p></li><li><p>完整的类名<strong>必须</strong>有一个最终的类名；</p></li><li><p>完整的类名中任意一部分中的下划线都是没有特殊含义的；</p></li><li><p>完整的类名<strong>可以</strong>由任意大小写字母组成；</p></li><li><p>所有类名都<strong>必须</strong>是大小写敏感的。</p></li></ol></li><li><p>当根据完整的类名载入相应的文件……</p><ol><li><p>完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为“命名空间前缀”，其必须与至少一个“文件基目录”相对应；</p></li><li><p>紧接命名空间前缀后的子命名空间<strong>必须</strong>与相应的”文件基目录“相匹配，其中的命名空间分隔符将作为目录分隔符。</p></li><li><p>末尾的类名<strong>必须</strong>与对应的以 <code>.php</code> 为后缀的文件同名。</p></li><li><p>自动加载器（autoloader）的实现<strong>一定不能</strong>抛出异常、<strong>一定不能</strong>触发任一级别的错误信息以及<strong>不应该</strong>有返回值。</p></li></ol></li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>下表展示了符合规范完整类名、命名空间前缀和文件基目录所对应的文件路径。</p><table><thead><tr><th>完整类名</th><th>命名空间前缀</th><th>文件基目录</th><th>文件路径</th></tr></thead><tbody><tr><td>\Acme\Log\Writer\File_Writer</td><td>Acme\Log\Writer</td><td>./acme-log-writer/lib/</td><td>./acme-log-writer/lib/File_Writer.php</td></tr><tr><td>\Aura\Web\Response\Status</td><td>Aura\Web</td><td>/path/to/aura-web/src/</td><td>/path/to/aura-web/src/Response/Status.php</td></tr><tr><td>\Symfony\Core\Request</td><td>Symfony\Core</td><td>./vendor/Symfony/Core/</td><td>./vendor/Symfony/Core/Request.php</td></tr><tr><td>\Zend\Acl</td><td>Zend</td><td>/usr/includes/Zend/</td><td>/usr/includes/Zend/Acl.php</td></tr></tbody></table><p>暂且只介绍这比较常用的三个规范。</p><p><a href="https://www.php-fig.org/psr/">更多最新规范建议点击查看</a></p><hr><p>本节主要介绍了PHP的编码规范PSR，建议大家在开发中尽量遵循此规范，特别是团队开发的时候，我们不应该各自有着各自的编码风格，应该尽可能统一风格。正如PHP-FIG组织的初衷所说，他们建立的规范不是限制大家的编码自由，只是寻找共性，为了我们一起更好的协同工作。</p>]]></content>
    
    
    <categories>
      
      <category>phpframe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phpframe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见排序算法</title>
    <link href="/2020/01/31/226/"/>
    <url>/2020/01/31/226/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 排序算法php实现</span><span class="hljs-comment"> */</span>run();<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$array</span> = [<span class="hljs-number">31</span>, <span class="hljs-number">54</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">76</span>, <span class="hljs-number">8</span>, <span class="hljs-number">35</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>, <span class="hljs-number">31</span>, <span class="hljs-number">45</span>];    <span class="hljs-comment">//01 冒泡排序</span>    <span class="hljs-variable">$bubbleSortArray</span> = bubbleSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//02 插入排序</span>    <span class="hljs-variable">$insertSortArray</span> = insertSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//03 选择排序</span>    <span class="hljs-variable">$selectSortArray</span> = selectSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//04 希尔排序</span>    <span class="hljs-variable">$shellSortArray</span> = shellSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//05 堆排序</span>    <span class="hljs-variable">$heapSortArray</span> = heapSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//06 归并排序</span>    <span class="hljs-variable">$mergeSortArray</span> = mergeSort(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//07 快速排序</span>    <span class="hljs-variable">$quickSortArray</span> = quickSort(<span class="hljs-variable">$array</span>);        <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;冒泡排序：&quot;</span>;    var_export(<span class="hljs-variable">$bubbleSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;插入排序：&quot;</span>;    var_export(<span class="hljs-variable">$insertSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;选择排序：&quot;</span>;    var_export(<span class="hljs-variable">$selectSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;希尔排序：&quot;</span>;    var_export(<span class="hljs-variable">$shellSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;堆排序：&quot;</span>;    var_export(<span class="hljs-variable">$heapSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;归并排序：&quot;</span>;    var_export(<span class="hljs-variable">$mergeSortArray</span>);    <span class="hljs-keyword">echo</span> PHP_EOL.<span class="hljs-string">&quot;快速排序：&quot;</span>;    var_export(<span class="hljs-variable">$quickSortArray</span>);    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 01 冒泡排序 </span><span class="hljs-comment">     * 说明：就是第一个位置上的数与他相邻第二个位置上的数比较，</span><span class="hljs-comment">     * 如果比他相邻的数小，则两者交换位置，否则不交换。</span><span class="hljs-comment">     * 接着第一个位置上的数与第三个位置上的数比较大小，也是小则交换，</span><span class="hljs-comment">     * 一直到和最后一个位置的数比较交换完毕。</span><span class="hljs-comment">     * 然后，是下一个循环，就是第二个位置上的数重复上面的比较交换操作，</span><span class="hljs-comment">     * 直到把整个数列变成是一个从小到大的有序序列。</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$count</span>; <span class="hljs-variable">$j</span>++) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] &gt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]) &#123;                <span class="hljs-keyword">list</span>(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]) = [<span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>],<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>]];            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 02 插入排序 </span><span class="hljs-comment">     * 说明：从一堆待排序的数列中选出来一个最小值(可以认为第一个数就是已排序的数列)，</span><span class="hljs-comment">     * 然后从剩余的带排序的数列中选出来最小值有序放到已排序的数列中，</span><span class="hljs-comment">     * 依次操作，直到最后的数列都是一个从小到大的有序数列为止</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++) &#123;        <span class="hljs-variable">$min</span> = <span class="hljs-variable">$i</span>;        <span class="hljs-comment">//拿出待排序中的最小值</span>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-variable">$i</span> + <span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$j</span>++) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$min</span>] &gt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]) &#123;                <span class="hljs-variable">$min</span> = <span class="hljs-variable">$j</span>;            &#125;        &#125;        <span class="hljs-comment">//交换，而不是直接赋值，否则会有数据丢失</span>        swap(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$array</span>[<span class="hljs-variable">$min</span>]);        <span class="hljs-comment">//拿出的值插入到已排序的数列中</span>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$k</span>=<span class="hljs-variable">$i</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$k</span>&gt;=<span class="hljs-number">0</span>; <span class="hljs-variable">$k</span>--) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] &lt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$k</span>]) &#123;                swap(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>], <span class="hljs-variable">$array</span>[<span class="hljs-variable">$k</span>]);            &#125;             <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 03 选择排序 </span><span class="hljs-comment">     * 说明：从一堆待排序的数列中选出来一个最小值，放到新的数组的第一个位置，</span><span class="hljs-comment">     * 继续从剩余的数列中选取最小值放入到数组中，重复上面的步骤，将数字都取出来排成新的有序数列</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-variable">$newArr</span> = <span class="hljs-keyword">array</span>();    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++) &#123;        <span class="hljs-variable">$min</span> = selectSortChild(<span class="hljs-variable">$array</span>);        <span class="hljs-comment">// var_dump($min);</span>        <span class="hljs-variable">$newArr</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$min</span>];        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$min</span>]);        <span class="hljs-comment">//unset底层源码只是将min元素指针指向了null，所以需要下面的操作，否则排序结果后几项都是NULL</span>        <span class="hljs-variable">$array</span> = array_merge(<span class="hljs-variable">$array</span>, []);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$newArr</span>;&#125;<span class="hljs-comment">//选择排序子函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSortChild</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-variable">$min</span> = <span class="hljs-number">0</span>;    <span class="hljs-comment">//拿出带排序中的最小值</span>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-variable">$count</span>; <span class="hljs-variable">$j</span>++) &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$min</span>] &gt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]) &#123;            <span class="hljs-variable">$min</span> = <span class="hljs-variable">$j</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$min</span>;&#125;<span class="hljs-comment">//04 希尔排序</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shellSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 04 希尔排序 </span><span class="hljs-comment">     * 说明：插入排序的一种改进，</span><span class="hljs-comment">     * 先比较一定距离的元素成为有序数列，再比较缩小增量距离的元素(可为元素的数量的一半)，</span><span class="hljs-comment">     * 一直到比较的是相邻元素的时候，就成为了插入排序。</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//三层循</span>    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$loop</span> = floor(<span class="hljs-variable">$count</span>); <span class="hljs-variable">$loop</span> &gt; <span class="hljs-number">0</span>; <span class="hljs-variable">$loop</span> = floor(<span class="hljs-variable">$loop</span>/<span class="hljs-number">2</span>)) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-variable">$loop</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>-<span class="hljs-variable">$loop</span>; <span class="hljs-variable">$j</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>] &gt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>+<span class="hljs-variable">$loop</span>]; <span class="hljs-variable">$j</span> = <span class="hljs-variable">$j</span>-<span class="hljs-variable">$loop</span>) &#123;                swap(<span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>], <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>+<span class="hljs-variable">$loop</span>]);            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;&#125;<span class="hljs-comment">//05 堆排序</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">heapSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 05 堆排序 说明：</span><span class="hljs-comment">     * 1) 构造大顶堆 </span><span class="hljs-comment">     * 2）交换堆顶和堆底 </span><span class="hljs-comment">     * 3)重复前面的步骤升序排列完成</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">$count</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-comment">//1. 构造大顶堆</span>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=floor(<span class="hljs-variable">$count</span>/<span class="hljs-number">2</span>) - <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>&gt;=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>--) &#123;        adjustHeap(<span class="hljs-variable">$array</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$count</span>);    &#125;    <span class="hljs-comment">//2. 排序</span>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$count</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&gt;=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;        swap(<span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]);        adjustHeap(<span class="hljs-variable">$array</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$j</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;&#125;<span class="hljs-comment">//堆排序子函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adjustHeap</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$array</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$length</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$length</span>; <span class="hljs-variable">$j</span>=<span class="hljs-variable">$j</span>*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>&lt; <span class="hljs-variable">$length</span> &amp;&amp; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>] &lt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>+<span class="hljs-number">1</span>])<span class="hljs-comment">//右子节点比左子节点大，则j指向右子节点</span>            <span class="hljs-variable">$j</span>++;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>] &gt; <span class="hljs-variable">$tmp</span>) &#123; <span class="hljs-comment">//子节点比父节点大，则将子节点的值赋给父节点(不用交换)</span>            <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>];            <span class="hljs-variable">$i</span> = <span class="hljs-variable">$j</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$tmp</span>;<span class="hljs-comment">//实现交换(i有变化时)</span>&#125;<span class="hljs-comment">//06 归并排序</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 06 归并排序 </span><span class="hljs-comment">     * 说明：将待排序的数列看成是单个的有序的数列，</span><span class="hljs-comment">     * 然后进行合并，直到合并成最后的完整有序的数列</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//1.进行归并</span>    <span class="hljs-variable">$length</span> = count(<span class="hljs-variable">$array</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$gap</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$gap</span>&lt;<span class="hljs-variable">$length</span>; <span class="hljs-variable">$gap</span> = <span class="hljs-variable">$gap</span>*<span class="hljs-number">2</span>) &#123;        mergePass(<span class="hljs-variable">$array</span>, <span class="hljs-variable">$gap</span>, <span class="hljs-variable">$length</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;&#125;<span class="hljs-comment">//归并排序子函数1--合并</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergePass</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$array</span>, <span class="hljs-variable">$gap</span>, <span class="hljs-variable">$length</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//1. 归并长度是gap的相邻两个子表</span>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>+<span class="hljs-number">2</span>*<span class="hljs-variable">$gap</span>-<span class="hljs-number">1</span>&lt;<span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>=<span class="hljs-variable">$i</span>+<span class="hljs-number">2</span>*<span class="hljs-variable">$gap</span>) &#123;        merge(<span class="hljs-variable">$array</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$i</span>+<span class="hljs-variable">$gap</span>-<span class="hljs-number">1</span>, <span class="hljs-variable">$i</span>+<span class="hljs-number">2</span>*<span class="hljs-variable">$gap</span>-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-comment">//2. 余下的两个字表合并，后者的长度小于gap</span>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$i</span>+<span class="hljs-variable">$gap</span>-<span class="hljs-number">1</span> &lt; <span class="hljs-variable">$length</span>) &#123;        merge(<span class="hljs-variable">$array</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$i</span>+<span class="hljs-variable">$gap</span>-<span class="hljs-number">1</span>, <span class="hljs-variable">$length</span>-<span class="hljs-number">1</span>);    &#125;&#125;<span class="hljs-comment">//归并排序子函数2--合并两个有序序列</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$array</span>, <span class="hljs-variable">$low</span>, <span class="hljs-variable">$mid</span>, <span class="hljs-variable">$high</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$i</span> = <span class="hljs-variable">$low</span>;<span class="hljs-comment">//第一段序列的下标</span>    <span class="hljs-variable">$j</span> = <span class="hljs-variable">$mid</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//第二段序列的下标</span>    <span class="hljs-variable">$k</span> = <span class="hljs-number">0</span>;    <span class="hljs-variable">$arrayNew</span> = <span class="hljs-keyword">array</span>();<span class="hljs-comment">//新的临时合并数组</span>    <span class="hljs-comment">//扫描第一段序列和第二段序列，直到有一个序列扫描完毕</span>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;=<span class="hljs-variable">$mid</span> &amp;&amp; <span class="hljs-variable">$j</span>&lt;=<span class="hljs-variable">$high</span>) &#123;        <span class="hljs-comment">//比较两个合并的数组，小的放到新的临时合并数组中</span>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] &gt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>]) &#123;            <span class="hljs-variable">$arrayNew</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>];            <span class="hljs-variable">$k</span>++;            <span class="hljs-variable">$j</span>++;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$arrayNew</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];            <span class="hljs-variable">$k</span>++;            <span class="hljs-variable">$i</span>++;        &#125;    &#125;    <span class="hljs-comment">//数组1中有没扫描的元素，直接复制到新数组中</span>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span> &lt;= <span class="hljs-variable">$mid</span>) &#123;        <span class="hljs-variable">$arrayNew</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];        <span class="hljs-variable">$k</span>++;        <span class="hljs-variable">$i</span>++;    &#125;    <span class="hljs-comment">//数组2中有没扫描的元素，直接复制到新数组中</span>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$j</span> &lt;= <span class="hljs-variable">$high</span>) &#123;        <span class="hljs-variable">$arrayNew</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$j</span>];        <span class="hljs-variable">$k</span>++;        <span class="hljs-variable">$j</span>++;    &#125;    <span class="hljs-comment">//将合并新数组复制到原数组中</span>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-variable">$low</span>,<span class="hljs-variable">$k</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;=<span class="hljs-variable">$high</span>; <span class="hljs-variable">$i</span>++,<span class="hljs-variable">$k</span>++) &#123;        <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$arrayNew</span>[<span class="hljs-variable">$k</span>];    &#125;&#125;<span class="hljs-comment">//交换数据</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$a</span>, &amp;<span class="hljs-variable">$b</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$a</span>;    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$b</span>;    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$res</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params"><span class="hljs-variable">$array</span></span>) </span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">// 判断是否需要运行，因下面已拿出一个中间值，这里&lt;=1</span>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$array</span>) &lt;= <span class="hljs-number">1</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$array</span>;    &#125;    <span class="hljs-variable">$middle</span> = <span class="hljs-variable">$array</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 中间值</span>    <span class="hljs-variable">$left</span> = []; <span class="hljs-comment">// 接收小于中间值</span>    <span class="hljs-variable">$right</span> = [];<span class="hljs-comment">// 接收大于中间值</span>    <span class="hljs-variable">$equal</span> = [];    <span class="hljs-variable">$equal</span>[] = <span class="hljs-variable">$middle</span>;    <span class="hljs-comment">// 循环比较</span>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$array</span>); <span class="hljs-variable">$i</span>++) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$middle</span> == <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>]) &#123;            <span class="hljs-variable">$equal</span>[] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];        &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$middle</span> &lt; <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>]) &#123;            <span class="hljs-variable">$right</span>[] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-variable">$left</span>[] = <span class="hljs-variable">$array</span>[<span class="hljs-variable">$i</span>];        &#125;    &#125;    <span class="hljs-comment">// 递归排序划分好的2边</span>    <span class="hljs-variable">$left</span> = quickSort(<span class="hljs-variable">$left</span>);    <span class="hljs-variable">$right</span> = quickSort(<span class="hljs-variable">$right</span>);    <span class="hljs-comment">// 合并排序后的数据，别忘了合并中间值</span>    <span class="hljs-keyword">return</span> array_merge(<span class="hljs-variable">$left</span>, <span class="hljs-variable">$equal</span>, <span class="hljs-variable">$right</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis使用scan替换keys</title>
    <link href="/2020/01/26/225/"/>
    <url>/2020/01/26/225/</url>
    
    <content type="html"><![CDATA[<p>我们都知道查找Redis的键时，可以使用<code>keys pattern</code>，但当key太多时，keys命令的效率就很低，如果在线上直接使用，甚至可能发生生产事故，这时候，我们不妨使用scan命令。</p><blockquote><p>SCAN 命令是一个基于游标的迭代器（cursor based iterator）： SCAN 命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。当 SCAN 命令的游标参数被设置为 0 时， 服务器将开始一次新的迭代， 而当服务器向用户返回值为 0 的游标时， 表示迭代已结束。</p></blockquote><h2 id="生成key"><a href="#生成key" class="headerlink" title="生成key"></a>生成key</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// 生成1000个</span><span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> \Redis();<span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">10</span>);<span class="hljs-variable">$redis</span>-&gt;select(<span class="hljs-number">2</span>);<span class="hljs-variable">$arr</span> = [    <span class="hljs-string">&#x27;rwer&#x27;</span>,    <span class="hljs-string">&#x27;24erw&#x27;</span>,    <span class="hljs-string">&#x27;rterq4&#x27;</span>,    <span class="hljs-string">&#x27;sdgfd5&#x27;</span>,    <span class="hljs-string">&#x27;dgsdg&#x27;</span>,    <span class="hljs-string">&#x27;sfst&#x27;</span>,];<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">1000</span>; <span class="hljs-variable">$i</span>++) &#123;    <span class="hljs-variable">$redis</span>-&gt;set(md5(<span class="hljs-variable">$i</span>.<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>%<span class="hljs-number">6</span>]), md5(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>%<span class="hljs-number">6</span>].<span class="hljs-string">&#x27;sdfsd&#x27;</span>));&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;OK&quot;</span>.PHP_EOL;</code></pre></div><h2 id="keys查看个数"><a href="#keys查看个数" class="headerlink" title="keys查看个数"></a>keys查看个数</h2><p><code>keys c*</code></p><p><img src="https://cdn.learnku.com/uploads/images/202001/26/41489/1h6zy6J8lM.png!large" alt="Redis中使用scan替换keys"></p><h2 id="scan遍历"><a href="#scan遍历" class="headerlink" title="scan遍历"></a>scan遍历</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> \Redis();<span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">10</span>);<span class="hljs-variable">$redis</span>-&gt;select(<span class="hljs-number">2</span>);<span class="hljs-variable">$iterator</span> = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 遍历前缀</span><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;c*&#x27;</span>;<span class="hljs-variable">$count</span> = <span class="hljs-number">100</span>;<span class="hljs-comment">// 务必设置，如果没扫描到，继续扫描，而不是返回空，否则while直接退出，遍历就会不准确</span><span class="hljs-variable">$redis</span>-&gt;setOption(\Redis::OPT_SCAN, \Redis::SCAN_RETRY);<span class="hljs-variable">$total</span> = [];<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-comment">// $count可以不设置，非必需参数</span><span class="hljs-keyword">while</span>(<span class="hljs-variable">$arr</span> = <span class="hljs-variable">$redis</span>-&gt;scan(<span class="hljs-variable">$iterator</span>, <span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$count</span>)) &#123;    <span class="hljs-variable">$arrVal</span> = <span class="hljs-variable">$redis</span>-&gt;mget(<span class="hljs-variable">$arr</span>);    <span class="hljs-variable">$ret</span> = array_combine(<span class="hljs-variable">$arr</span>, <span class="hljs-variable">$arrVal</span>);    <span class="hljs-variable">$total</span> = array_merge(<span class="hljs-variable">$total</span>, <span class="hljs-variable">$ret</span>);    <span class="hljs-variable">$i</span>++;&#125;<span class="hljs-comment">// var_dump($total);</span>var_dump(<span class="hljs-variable">$i</span>);<span class="hljs-keyword">echo</span> count(<span class="hljs-variable">$total</span>).PHP_EOL;</code></pre></div><p><img src="https://cdn.learnku.com/uploads/images/202001/26/41489/RR8bffjcP6.png!large" alt="Redis中使用scan替换keys"></p><p>当然你也可以不使用\Redis::OPT_SCAN, \Redis::SCAN_RETRY这两个参数，自行循环，判断返回值是不是false，也能遍历成功。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel配合JWT</title>
    <link href="/2020/01/20/224/"/>
    <url>/2020/01/20/224/</url>
    
    <content type="html"><![CDATA[<blockquote><p>测试使用的是Laravel5.5版本。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">composer</span> require tymon/jwt-auth=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>-rc.<span class="hljs-number">5</span></code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h4><div class="code-wrapper"><pre><code class="hljs taggerscript">php artisan vendor:publish --provider=&quot;Tymon<span class="hljs-symbol">\J</span>WTAuth<span class="hljs-symbol">\P</span>roviders<span class="hljs-symbol">\L</span>aravelServiceProvider&quot;php artisan jwt:secret</code></pre></div><h4 id="auth配置"><a href="#auth配置" class="headerlink" title="auth配置"></a>auth配置</h4><div class="code-wrapper"><pre><code class="hljs dart">&lt;?php<span class="hljs-keyword">return</span> [...    <span class="hljs-string">&#x27;defaults&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;guard&#x27;</span> =&gt; <span class="hljs-string">&#x27;web&#x27;</span>,        <span class="hljs-string">&#x27;passwords&#x27;</span> =&gt; <span class="hljs-string">&#x27;users&#x27;</span>,    ],    <span class="hljs-string">&#x27;guards&#x27;</span> =&gt; [        <span class="hljs-string">&#x27;web&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;session&#x27;</span>,            <span class="hljs-string">&#x27;provider&#x27;</span> =&gt; <span class="hljs-string">&#x27;users&#x27;</span>,        ],<span class="hljs-comment">// 使用jwt</span>        <span class="hljs-string">&#x27;api&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;jwt&#x27;</span>,            <span class="hljs-string">&#x27;provider&#x27;</span> =&gt; <span class="hljs-string">&#x27;apiUser&#x27;</span>,        ],    ],    <span class="hljs-string">&#x27;providers&#x27;</span> =&gt; [        ...<span class="hljs-comment">// 指定model</span>        <span class="hljs-string">&#x27;apiUser&#x27;</span> =&gt; [            <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;eloquent&#x27;</span>,            <span class="hljs-string">&#x27;model&#x27;</span> =&gt; App\ApiUser::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span><span class="hljs-class">        ],</span><span class="hljs-class">    ],</span><span class="hljs-class">];</span></code></pre></div><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>控制器：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>\<span class="hljs-title">Api</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">ApiUser</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>\<span class="hljs-title">Controller</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">JWTAuth</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 中间件去除login和refresh</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;auth:api&#x27;</span>, [<span class="hljs-string">&#x27;except&#x27;</span> =&gt; [<span class="hljs-string">&#x27;login&#x27;</span>,<span class="hljs-string">&#x27;refresh&#x27;</span>]]);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Get a JWT via given credentials.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\JsonResponse</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$credentials</span> = <span class="hljs-variable">$request</span>-&gt;only(<span class="hljs-string">&#x27;phone&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>);        <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$credentials</span>) &lt; <span class="hljs-number">2</span>) &#123;            <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">&#x27;error&#x27;</span> =&gt; <span class="hljs-string">&#x27;Unauthorized&#x27;</span>], <span class="hljs-number">401</span>);        &#125;         <span class="hljs-variable">$user</span> = ApiUser::where(<span class="hljs-string">&#x27;phone&#x27;</span>, <span class="hljs-variable">$credentials</span>[<span class="hljs-string">&#x27;phone&#x27;</span>])            -&gt;where(<span class="hljs-string">&#x27;password&#x27;</span>, md5(<span class="hljs-variable">$credentials</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))            -&gt;first();        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$user</span>) || !<span class="hljs-variable">$token</span> = JWTAuth::fromUser(<span class="hljs-variable">$user</span>)) &#123;            <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">&#x27;error&#x27;</span> =&gt; <span class="hljs-string">&#x27;Unauthorized&#x27;</span>], <span class="hljs-number">401</span>);        &#125;        <span class="hljs-comment">// dd($token);</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;respondWithToken(<span class="hljs-variable">$token</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Get the authenticated User.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\JsonResponse</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">me</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> response()-&gt;json(auth(<span class="hljs-string">&#x27;api&#x27;</span>)-&gt;user());    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Log the user out (Invalidate the token).</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\JsonResponse</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        auth()-&gt;logout();        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Successfully logged out&#x27;</span>]);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Refresh a token.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\JsonResponse</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">refresh</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;respondWithToken(auth(<span class="hljs-string">&#x27;api&#x27;</span>)-&gt;refresh());    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Get the token array structure.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  string $token</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\JsonResponse</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">respondWithToken</span>(<span class="hljs-params"><span class="hljs-variable">$token</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> response()-&gt;json([            <span class="hljs-string">&#x27;access_token&#x27;</span> =&gt; <span class="hljs-variable">$token</span>,            <span class="hljs-string">&#x27;token_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;bearer&#x27;</span>,            <span class="hljs-string">&#x27;expires_in&#x27;</span> =&gt; auth(<span class="hljs-string">&#x27;api&#x27;</span>)-&gt;factory()-&gt;getTTL() * <span class="hljs-number">60</span>        ]);    &#125;&#125;</code></pre></div><p>路由：</p><blockquote><p><strong>此处注意，我为了方便测试，使用了get方法，生产环境不建议使用get。</strong></p></blockquote><div class="code-wrapper"><pre><code class="hljs css">// routes/api<span class="hljs-selector-class">.php</span>Route::<span class="hljs-built_in">middleware</span>(<span class="hljs-string">&#x27;api&#x27;</span>)-&gt;<span class="hljs-built_in">prefix</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)-&gt;<span class="hljs-built_in">namespace</span>(<span class="hljs-string">&#x27;Api&#x27;</span>)-&gt;<span class="hljs-built_in">group</span>(function () &#123;Route::<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;login&#x27;</span>, <span class="hljs-string">&#x27;AuthController@login&#x27;</span>);Route::<span class="hljs-built_in">post</span>(<span class="hljs-string">&#x27;logout&#x27;</span>, <span class="hljs-string">&#x27;AuthController@logout&#x27;</span>);Route::<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;refresh&#x27;</span>, <span class="hljs-string">&#x27;AuthController@refresh&#x27;</span>);Route::<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;me&#x27;</span>, <span class="hljs-string">&#x27;AuthController@me&#x27;</span>);&#125;);</code></pre></div><p>测试一下:</p><p><img src="https://cdn.learnku.com/uploads/images/202001/20/41489/EFqa4Najap.png!large" alt="Laravel"><br><img src="https://cdn.learnku.com/uploads/images/202001/20/41489/5JiV5lJM5j.png!large" alt="Laravel"><br><img src="https://cdn.learnku.com/uploads/images/202001/20/41489/bfhTMMdvVq.png!large" alt="Laravel"></p><h4 id="unauthenticated处理"><a href="#unauthenticated处理" class="headerlink" title="unauthenticated处理"></a>unauthenticated处理</h4><p>这里需要注意下，unauthenticated处理一下比较好，否则会默认跳转login登录页面。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Exception</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">Handler</span> <span class="hljs-title">as</span> <span class="hljs-title">ExceptionHandler</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">AuthenticationException</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ExceptionHandler</span></span><span class="hljs-class"></span>&#123;    ...    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unauthenticated</span>(<span class="hljs-params"><span class="hljs-variable">$request</span>, AuthenticationException <span class="hljs-variable">$exception</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> response()-&gt;json([<span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Unauthenticated.&#x27;</span>], <span class="hljs-number">401</span>);         <span class="hljs-comment">/*非api可以这么处理</span><span class="hljs-comment">        return $request-&gt;expectsJson()</span><span class="hljs-comment">                    ? response()-&gt;json([&#x27;message&#x27; =&gt; &#x27;Unauthenticated.&#x27;], 401)</span><span class="hljs-comment">                    : redirect()-&gt;guest(route(&#x27;login&#x27;));</span><span class="hljs-comment">                    */</span>    &#125;&#125;</code></pre></div><hr><h4 id="加入token-refresh"><a href="#加入token-refresh" class="headerlink" title="加入token refresh"></a>加入token refresh</h4><p>加入中间件代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;  <span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">JWTAuth</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">JWTException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">AuthenticationException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">TokenExpiredException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">HttpResponseException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Tymon</span>\<span class="hljs-title">JWTAuth</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>\<span class="hljs-title">BaseMiddleware</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RefreshToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMiddleware</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Handle an incoming request.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Closure  $next</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>)</span><span class="hljs-function">    </span>&#123;          <span class="hljs-keyword">try</span>&#123;            <span class="hljs-comment">//检查请求中是否带有token 如果没有token值则抛出异常</span>            <span class="hljs-keyword">$this</span>-&gt;checkForToken(<span class="hljs-variable">$request</span>);             <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;user = JWTAuth::parseToken()-&gt;authenticate()) &#123;                       <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);            &#125;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationException(<span class="hljs-string">&#x27;Unauthorized&#x27;</span>, []);        &#125;<span class="hljs-keyword">catch</span> (TokenExpiredException <span class="hljs-variable">$exception</span>)&#123;            <span class="hljs-comment">//返回特殊的code</span>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> HttpResponseException(response()-&gt;json([                <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;token expired&#x27;</span>            ]));        &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$exception</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationException(<span class="hljs-string">&#x27;Unauthorized&#x27;</span>, []);        &#125;    &#125;&#125;</code></pre></div><p>注册：</p><div class="code-wrapper"><pre><code class="hljs moonscript">&lt;?phpnamespace App\Http;use Illuminate\Foundation\Http\Kernel as HttpKernel;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kernel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpKernel</span></span>&#123;    ...    protected $routeMiddleware = [        <span class="hljs-string">&#x27;token.refresh&#x27;</span> =&gt; \App\Http\Middleware\RefreshToken::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>        <span class="hljs-string">&#x27;auth.basic&#x27;</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>        <span class="hljs-string">&#x27;bindings&#x27;</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>        <span class="hljs-string">&#x27;can&#x27;</span> =&gt; \Illuminate\Auth\Middleware\Authorize::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>        <span class="hljs-string">&#x27;guest&#x27;</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>        <span class="hljs-string">&#x27;throttle&#x27;</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::<span class="hljs-class"><span class="hljs-keyword">class</span>,</span>    ];&#125;</code></pre></div><p>相应的控制器构造函数修改：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;token.refresh&#x27;</span>, [<span class="hljs-string">&#x27;except&#x27;</span> =&gt; [<span class="hljs-string">&#x27;login&#x27;</span>,<span class="hljs-string">&#x27;refresh&#x27;</span>]]);&#125;</code></pre></div><p>把token时间设置成1分钟，测试一下。</p><p><img src="https://cdn.learnku.com/uploads/images/202001/20/41489/aLxjMvw3xc.png!large" alt="Laravel 配合 jwt 使用"></p><p>可以根据api返回，去调用刷新接口。</p><p>简单使用就是这样啦。更多使用可以看下站内其他文章：<br><a href="https://learnku.com/articles/10885/full-use-of-jwt">JWT 完整使用详解</a><br><a href="https://jwt-auth.readthedocs.io/en/develop/laravel-installation/">jwt-auth文档</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel统一错误处理</title>
    <link href="/2020/01/20/223/"/>
    <url>/2020/01/20/223/</url>
    
    <content type="html"><![CDATA[<p>Laravel中的App\Exceptions\Handler 类负责记录应用程序触发的所有异常，这在我们开发过程中十分方便，总是try…catch使代码太过繁琐且可读性大大降低，那么怎么使用它处理异常为<code>json</code>呢？</p><p>我们可以新建一个class，用来处理异常返回。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Author: sai</span><span class="hljs-comment"> * Date: 2020/1/15</span><span class="hljs-comment"> * Time: 14:31</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiException</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Exception</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">const</span> ERROR_CODE = <span class="hljs-number">1001</span>;    <span class="hljs-keyword">const</span> ERROR_MSG  = <span class="hljs-string">&#x27;ApiException&#x27;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span> = [];    <span class="hljs-comment">/**</span><span class="hljs-comment">     * BusinessException constructor.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $message</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $code</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array $data</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span>, <span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span>, <span class="hljs-variable">$data</span> = []</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-variable">$code</span>  ? : <span class="hljs-built_in">self</span>::ERROR_CODE;        <span class="hljs-keyword">$this</span>-&gt;message  = <span class="hljs-variable">$message</span> ? : <span class="hljs-built_in">self</span>::ERROR_MSG;        <span class="hljs-keyword">$this</span>-&gt;data = <span class="hljs-variable">$data</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> array</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data;    &#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 异常输出</span><span class="hljs-comment"> */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"><span class="hljs-variable">$request</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> response()-&gt;json([            <span class="hljs-string">&#x27;data&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getData(),            <span class="hljs-string">&#x27;code&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getCode(),            <span class="hljs-string">&#x27;messgae&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;getMessage(),        ], <span class="hljs-number">200</span>);    &#125;&#125;</code></pre></div><p>然后我们在Handler加入，加入<code>$dontReport</code>，便不会使用自带的错误处理，而使用自定义的处理。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Exception</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">Handler</span> <span class="hljs-title">as</span> <span class="hljs-title">ExceptionHandler</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ExceptionHandler</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 一些不需管或不需要抛出的异常</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$dontReport</span> = [        ApiException::class,    ];    ...&#125;</code></pre></div><p>我们测试一下：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Exceptions</span>\<span class="hljs-title">ApiException</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApiException(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-number">10001</span>, [<span class="hljs-string">&#x27;oh&#x27;</span> =&gt; <span class="hljs-string">&#x27;no&#x27;</span>]);        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;&#125;</code></pre></div><p>查看输出：</p><p><img src="https://cdn.learnku.com/uploads/images/202001/20/41489/PdsyaJkryT.png!large" alt="Laravel统一错误处理"></p><p>测试ok，我们可以愉快的使用啦。当然，其他形式的错误输出可以自行扩展。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElementUI整合编辑器vue-quill-editor</title>
    <link href="/2020/01/08/222/"/>
    <url>/2020/01/08/222/</url>
    
    <content type="html"><![CDATA[<p>直接上代码：</p><p>main.js</p><div class="code-wrapper"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> VueQuillEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-quill-editor&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;quill/dist/quill.core.css&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;quill/dist/quill.snow.css&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;quill/dist/quill.bubble.css&#x27;</span>Vue.use(VueQuillEditor)</code></pre></div><p>template:</p><div class="code-wrapper"><pre><code class="hljs xml">...<span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;详情&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">quill-editor</span> </span><span class="hljs-tag">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.remark&quot;</span> </span><span class="hljs-tag">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myQuillEditor&quot;</span> </span><span class="hljs-tag">        <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;editorOption&quot;</span> </span><span class="hljs-tag">        @<span class="hljs-attr">blur</span>=<span class="hljs-string">&quot;onEditorBlur($event)&quot;</span> @<span class="hljs-attr">focus</span>=<span class="hljs-string">&quot;onEditorFocus($event)&quot;</span></span><span class="hljs-tag">        @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;onEditorChange($event)&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">quill-editor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;edit-uploader&quot;</span> <span class="hljs-attr">:action</span>=<span class="hljs-string">&quot;uploadPicUrl&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">:headers</span>=<span class="hljs-string">&quot;header&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">:on-success</span>=<span class="hljs-string">&quot;editorUploadSuccess&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">:on-error</span>=<span class="hljs-string">&quot;editorUploadError&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">&quot;beforeEditorUpload&quot;</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-plus avatar-uploader-icon&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;aUpload&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>...   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript"></span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            <span class="hljs-attr">editorOption</span>: &#123;</span><span class="javascript">                <span class="hljs-attr">modules</span>: &#123;</span><span class="javascript">                    <span class="hljs-attr">toolbar</span>: &#123;<span class="hljs-attr">container</span>:[</span><span class="javascript">                    [<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-string">&#x27;italic&#x27;</span>, <span class="hljs-string">&#x27;underline&#x27;</span>, <span class="hljs-string">&#x27;strike&#x27;</span>],</span><span class="javascript">                    [<span class="hljs-string">&#x27;blockquote&#x27;</span>, <span class="hljs-string">&#x27;code-block&#x27;</span>],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-number">2</span> &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-string">&#x27;ordered&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-string">&#x27;bullet&#x27;</span> &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;script&#x27;</span>: <span class="hljs-string">&#x27;sub&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;script&#x27;</span>: <span class="hljs-string">&#x27;super&#x27;</span> &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;indent&#x27;</span>: <span class="hljs-string">&#x27;-1&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;indent&#x27;</span>: <span class="hljs-string">&#x27;+1&#x27;</span> &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;direction&#x27;</span>: <span class="hljs-string">&#x27;rtl&#x27;</span> &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;size&#x27;</span>: [<span class="hljs-string">&#x27;small&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;large&#x27;</span>, <span class="hljs-string">&#x27;huge&#x27;</span>] &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;header&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">false</span>] &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;font&#x27;</span>: [] &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;color&#x27;</span>: [] &#125;, &#123; <span class="hljs-string">&#x27;background&#x27;</span>: [] &#125;],</span><span class="javascript">                    [&#123; <span class="hljs-string">&#x27;align&#x27;</span>: [] &#125;],</span><span class="javascript">                    [<span class="hljs-string">&#x27;clean&#x27;</span>],</span><span class="javascript">                    [<span class="hljs-string">&#x27;link&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>]</span><span class="javascript">                    ],</span><span class="javascript">                    <span class="hljs-attr">handlers</span>: &#123;</span><span class="javascript">                        <span class="hljs-string">&#x27;image&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>&#123;</span><span class="javascript">                            <span class="hljs-keyword">if</span> (value) &#123;</span><span class="javascript">                                <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.edit-uploader input&#x27;</span>).click()</span><span class="javascript">                            &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">                                <span class="hljs-built_in">this</span>.quill.format(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-literal">false</span>);</span><span class="javascript">                            &#125;</span><span class="javascript">                            <span class="hljs-comment">// this.$refs.aUpload.click() //自定义图片上传回调</span></span><span class="javascript">                        &#125;</span><span class="javascript">                    &#125;</span><span class="javascript">                    &#125;,</span><span class="javascript">                    <span class="hljs-attr">syntax</span>: &#123;</span><span class="javascript">                        <span class="hljs-attr">highlight</span>: <span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> hljs.highlightAuto(text).value</span><span class="javascript">                    &#125;</span><span class="javascript">                &#125;,</span><span class="javascript">                </span><span class="javascript">            &#125;</span><span class="javascript">        &#125;</span><span class="javascript">    &#125;,</span><span class="javascript">    <span class="hljs-attr">methods</span>: &#123;</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">onEditorReady</span>(<span class="hljs-params">editor</span>)</span> &#123; <span class="hljs-comment">// 准备编辑器</span></span><span class="javascript">        &#125;,</span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">onEditorBlur</span>(<span class="hljs-params"></span>)</span>&#123;&#125;, <span class="hljs-comment">// 失去焦点事件</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">onEditorFocus</span>(<span class="hljs-params"></span>)</span>&#123;&#125;, <span class="hljs-comment">// 获得焦点事件</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">onEditorChange</span>(<span class="hljs-params"></span>)</span>&#123;&#125;, <span class="hljs-comment">// 内容改变事件</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">beforeEditorUpload</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">            <span class="hljs-comment">// 显示loading动画</span></span><span class="javascript">            <span class="hljs-built_in">this</span>.quillUpdateImg = <span class="hljs-literal">true</span></span><span class="javascript">        &#125;,</span><span class="javascript">        </span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">editorUploadSuccess</span>(<span class="hljs-params">res, file</span>)</span> &#123;</span><span class="javascript">            <span class="hljs-comment">// 获取富文本组件实例</span></span><span class="javascript">            <span class="hljs-keyword">let</span> quill = <span class="hljs-built_in">this</span>.$refs.myQuillEditor.quill</span><span class="javascript">            <span class="hljs-comment">// 如果上传成功</span></span><span class="javascript">            <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">0</span>) &#123;</span><span class="javascript">                <span class="hljs-comment">// 获取光标所在位置</span></span><span class="javascript">                <span class="hljs-keyword">let</span> length = quill.getSelection().index;</span><span class="javascript">                <span class="hljs-comment">// 插入图片  res.info为服务器返回的图片地址</span></span><span class="javascript">                quill.insertEmbed(length, <span class="hljs-string">&#x27;image&#x27;</span>, res.data.filepath)</span><span class="javascript">                <span class="hljs-comment">// 调整光标到最后</span></span><span class="javascript">                quill.setSelection(length + <span class="hljs-number">1</span>)</span><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;图片插入失败&#x27;</span>)</span><span class="javascript">            &#125;</span><span class="javascript">            <span class="hljs-comment">// loading动画消失</span></span><span class="javascript">            <span class="hljs-built_in">this</span>.quillUpdateImg = <span class="hljs-literal">false</span></span><span class="javascript">        &#125;,</span><span class="javascript">    </span><span class="javascript">        <span class="hljs-comment">// 富文本图片上传失败</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-title">editorUploadError</span>(<span class="hljs-params"></span>)</span> &#123;</span><span class="javascript">            <span class="hljs-comment">// loading动画消失</span></span><span class="javascript">            <span class="hljs-built_in">this</span>.quillUpdateImg = <span class="hljs-literal">false</span></span><span class="javascript">            <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;图片插入失败&#x27;</span>)</span><span class="javascript">        &#125;</span><span class="javascript">    &#125;</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>这里需要注意的是，编辑器默认使用base64上传，我们使用elementui的上传组件替换掉原来的图片上传。</p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript签名直传OSS</title>
    <link href="/2020/01/08/221/"/>
    <url>/2020/01/08/221/</url>
    
    <content type="html"><![CDATA[<p>最近在写后台代码，使用的是VUE+ElementUI，踩了一些坑分享一下。</p><blockquote><p>原理：从服务端获取签名，js直接上传阿里云OSS服务器。</p></blockquote><p>elementui主要代码</p><div class="code-wrapper"><pre><code class="hljs sas">template:&lt;el-form-item <span class="hljs-meta">label</span>=<span class="hljs-string">&quot;上传图片&quot;</span> prop=<span class="hljs-string">&quot;video&quot;</span>&gt;    &lt;el-upload id=<span class="hljs-string">&quot;video&quot;</span>  action        :data=<span class="hljs-string">&quot;aliyunOssToken&quot;</span>        :http-request=<span class="hljs-string">&quot;uploadVideo&quot;</span>        :headers=<span class="hljs-string">&quot;header&quot;</span>&gt;        &lt;img v-<span class="hljs-meta">if</span>=<span class="hljs-string">&quot;form.cover&quot;</span> :src=<span class="hljs-string">&quot;form.cover&quot;</span>&gt;        &lt;el-button class=<span class="hljs-string">&quot;avatar-uploader-icon&quot;</span> type=<span class="hljs-string">&quot;primary&quot;</span>&gt;上传&lt;/el-button&gt;    &lt;/el-upload&gt;&lt;/el-form-item&gt;script：upload(<span class="hljs-meta">file</span>)&#123;    var _self = this;    let imgType = <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>.type.split(<span class="hljs-string">&quot;/&quot;</span>)[1].toLowerCase();    <span class="hljs-meta">if</span> (imgType != <span class="hljs-string">&#x27;jpg&#x27;</span> <span class="hljs-variable">&amp;&amp;</span> imgType != <span class="hljs-string">&#x27;png&#x27;</span>) &#123;        this.$<span class="hljs-meta">message</span>.<span class="hljs-meta">error</span>(<span class="hljs-string">&#x27;请上传图片类型&#x27;</span>);        <span class="hljs-meta">return</span>;    &#125;    getOSSTok<span class="hljs-meta">en(</span>).th<span class="hljs-meta">en(</span>functi<span class="hljs-meta">on(</span>res)&#123;        _self.aliyunOssToken = res.data;        var ossData = &#123;&#125;;        //<span class="hljs-meta">key</span>就代表文件层级和阿里云上的文件名        let imgType = <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>.type.split(<span class="hljs-string">&quot;/&quot;</span>)[1];        let <span class="hljs-meta">filename</span> = <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>.name + <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>.size; //md5对图片名称进行加密        let keyValue = <span class="hljs-string">&quot;images/&quot;</span> + md5(new<span class="hljs-meta"> Date(</span>) + <span class="hljs-meta">filename</span>) + <span class="hljs-string">&quot;.&quot;</span> + imgType;        // 组装formdata        let formdata = new FormData();        formdata.append(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>.name)        formdata.append(<span class="hljs-string">&#x27;key&#x27;</span>, keyValue)        formdata.append(<span class="hljs-string">&#x27;policy&#x27;</span>, _self.aliyunOssToken.policy)        formdata.append(<span class="hljs-string">&#x27;OSSAccessKeyId&#x27;</span>, _self.aliyunOssToken.accessid)        formdata.append(<span class="hljs-string">&#x27;success_action_status&#x27;</span>, 200)        formdata.append(<span class="hljs-string">&#x27;signature&#x27;</span>, _self.aliyunOssToken.signature)        formdata.append(<span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-meta">file</span>.<span class="hljs-meta">file</span>)                _self.uploadOSS(formdata, _self.aliyunOssToken.host).th<span class="hljs-meta">en(</span>functi<span class="hljs-meta">on(</span>res)&#123;            _self.form.cover = _self.aliyunOssToken.host + <span class="hljs-string">&#x27;/&#x27;</span> + keyValue;            _self.$<span class="hljs-meta">message</span>.success(<span class="hljs-string">&#x27;上传成功&#x27;</span>);        &#125;).catch(functi<span class="hljs-meta">on(</span><span class="hljs-meta">error</span>)&#123;            _self.$<span class="hljs-meta">message</span>.<span class="hljs-meta">error</span>(<span class="hljs-string">&#x27;上传失败&#x27;</span>);            console<span class="hljs-meta">.log(</span><span class="hljs-meta">error</span>);        &#125;)    &#125;).catch(functi<span class="hljs-meta">on(</span><span class="hljs-meta">error</span>)&#123;        console<span class="hljs-meta">.log(</span><span class="hljs-meta">error</span>);    &#125;)&#125;,uploadOSS(formData, url) &#123;  const config = &#123;    headers: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data;boundary=&quot;</span>+new<span class="hljs-meta"> Date(</span>).ge<span class="hljs-meta">tTime(</span>) &#125;    &#125;;  <span class="hljs-meta">return</span> axios.post(url,formData,config);&#125;</code></pre></div><p>其中：务必使用表单提交方式，aliyunOssToken格式如下</p><div class="code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;accessid&quot;</span>: <span class="hljs-string">&quot;LToofXWKudxfoAlI&quot;</span>,<span class="hljs-attr">&quot;host&quot;</span>: <span class="hljs-string">&quot;https:\/\/xxx.oss-cn-hangzhou.aliyuncs.com&quot;</span>,<span class="hljs-attr">&quot;policy&quot;</span>: <span class="hljs-string">&quot;eyJleHBpcmF0eretaW9uIjoiQxODowNzowMFoiLCJjb25kaXRpb25zIjpbWyJjb250ZW50LWxlbmd0aC17ewreMDQ4NTc2MDAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsInZpZGVvXC8iXV19&quot;</span>,<span class="hljs-attr">&quot;signature&quot;</span>: <span class="hljs-string">&quot;HRFJ4345VIvRhrsMa44546=&quot;</span>,<span class="hljs-attr">&quot;expire&quot;</span>: <span class="hljs-number">1578478020</span>,<span class="hljs-attr">&quot;dir&quot;</span>: <span class="hljs-string">&quot;images\/&quot;</span>&#125;</code></pre></div><p>记得设置阿里云OSS跨域规则：</p><p><img src="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/8466738751/p12308.png" alt="跨域规则"></p><p>文档：</p><ul><li><a href="https://help.aliyun.com/document_detail/31925.html?spm=a2c4g.11186623.6.1443.723d6e285fVXLr#title-c0t-t20-dd6">javascript签名直传</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
      <category>api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wrk压测使用</title>
    <link href="/2019/12/30/220/"/>
    <url>/2019/12/30/220/</url>
    
    <content type="html"><![CDATA[<p>最近有需要做一些压力测试，之前一直用ab，用起来不是很舒服，最近有使用wrk，轻量好用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wg/</span>wrk.git wrkcd wrkmake<span class="hljs-comment"># move the executable to somewhere in your PATH</span>sudo cp wrk <span class="hljs-regexp">/somewhere/i</span>n<span class="hljs-regexp">/your/</span>PATH</code></pre></div><p>默认情况下wrk会使用自带的LuaJIT和OpenSSL，如果你想使用系统已安装的版本，可以使用WITH_LUAJIT和WITH_OPENSSL这两个选项来指定它们的路径。比如：</p><div class="code-wrapper"><pre><code class="hljs routeros">make <span class="hljs-attribute">WITH_LUAJIT</span>=/usr <span class="hljs-attribute">WITH_OPENSSL</span>=/usr</code></pre></div><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><div class="code-wrapper"><pre><code class="hljs dts">wrk <span class="hljs-params">&lt;选项&gt;</span> <span class="hljs-params">&lt;被测HTTP服务的URL&gt;</span>                            <span class="hljs-symbol">  Options:</span>                                                -c, --connections <span class="hljs-params">&lt;N&gt;</span>  跟服务器建立并保持的TCP连接数量      -d, --duration    <span class="hljs-params">&lt;T&gt;</span>  压测时间               -t, --threads     <span class="hljs-params">&lt;N&gt;</span>  使用多少个线程进行压测                                                             -s, --script      <span class="hljs-params">&lt;S&gt;</span>  指定Lua脚本路径           -H, --header      <span class="hljs-params">&lt;H&gt;</span>  为每一个HTTP请求添加HTTP头              --latency          在压测结束后，打印延迟统计信息           --timeout     <span class="hljs-params">&lt;T&gt;</span>  超时时间         -v, --version          打印正在使用的wrk的详细版本信息                                                        <span class="hljs-params">&lt;N&gt;</span>代表数字参数，支持国际单位 (<span class="hljs-number">1</span>k, <span class="hljs-number">1</span>M, <span class="hljs-number">1</span>G)  <span class="hljs-params">&lt;T&gt;</span>代表时间参数，支持时间单位 (<span class="hljs-number">2</span>s, <span class="hljs-number">2</span>m, <span class="hljs-number">2</span>h)</code></pre></div><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="code-wrapper"><pre><code class="hljs erlang-repl">wrk -t8 -c200 -d30s --latency  <span class="hljs-string">&quot;http://www.bing.com&quot;</span>输出：Running <span class="hljs-number">30</span>s test @ http://www.bing.com  <span class="hljs-number">8</span> threads and <span class="hljs-number">200</span> connections  Thread Stats   Avg      Stdev     Max   +/- Stdev    Latency    <span class="hljs-number">46.67</span>ms  <span class="hljs-number">215.38</span>ms   <span class="hljs-number">1.67</span>s    <span class="hljs-number">95.59</span><span class="hljs-comment">%</span>    Req/Sec     <span class="hljs-number">7.91</span>k     <span class="hljs-number">1.15</span>k   <span class="hljs-number">10.26</span>k    <span class="hljs-number">70.77</span><span class="hljs-comment">%</span>  Latency Distribution     <span class="hljs-number">50</span><span class="hljs-comment">%    2.93ms</span>     <span class="hljs-number">75</span><span class="hljs-comment">%    3.78ms</span>     <span class="hljs-number">90</span><span class="hljs-comment">%    4.73ms</span>     <span class="hljs-number">99</span><span class="hljs-comment">%    1.35s </span>  <span class="hljs-number">1790465</span> requests in <span class="hljs-number">30.01</span>s, <span class="hljs-number">684.08</span>MB readRequests/sec:  <span class="hljs-number">59658.29</span>Running <span class="hljs-number">30</span>s test @ http://www.bing.com （压测时间<span class="hljs-number">30</span>s）  <span class="hljs-number">8</span> threads and <span class="hljs-number">200</span> connections （共<span class="hljs-number">8</span>个测试线程，<span class="hljs-number">200</span>个连接）  Thread Stats   Avg      Stdev     Max   +/- Stdev              （平均值） （标准差）（最大值）（正负一个标准差所占比例）    Latency    <span class="hljs-number">46.67</span>ms  <span class="hljs-number">215.38</span>ms   <span class="hljs-number">1.67</span>s    <span class="hljs-number">95.59</span><span class="hljs-comment">%</span>    （延迟）    Req/Sec     <span class="hljs-number">7.91</span>k     <span class="hljs-number">1.15</span>k   <span class="hljs-number">10.26</span>k    <span class="hljs-number">70.77</span><span class="hljs-comment">%</span>    （处理中的请求数）  Latency Distribution （延迟分布）     <span class="hljs-number">50</span><span class="hljs-comment">%    2.93ms</span>     <span class="hljs-number">75</span><span class="hljs-comment">%    3.78ms</span>     <span class="hljs-number">90</span><span class="hljs-comment">%    4.73ms</span>     <span class="hljs-number">99</span><span class="hljs-comment">%    1.35s （99分位的延迟）</span>  <span class="hljs-number">1790465</span> requests in <span class="hljs-number">30.01</span>s, <span class="hljs-number">684.08</span>MB read （<span class="hljs-number">30.01</span>秒内共处理完成了<span class="hljs-number">1790465</span>个请求，读取了<span class="hljs-number">684.08</span>MB数据）Requests/sec:  <span class="hljs-number">59658.29</span> （平均每秒处理完成<span class="hljs-number">59658.29</span>个请求）Transfer/sec:     <span class="hljs-number">22.79</span>MB （平均每秒读取数据<span class="hljs-number">22.79</span>MB）</code></pre></div><h2 id="lua脚本使用"><a href="#lua脚本使用" class="headerlink" title="lua脚本使用"></a>lua脚本使用</h2><div class="code-wrapper"><pre><code class="hljs lua"><span class="hljs-comment">--data.lua</span><span class="hljs-keyword">local</span> data=  <span class="hljs-string">&quot;&#123;.count.:1&#125;&quot;</span>wrk.headers[<span class="hljs-string">&quot;Content-Type&quot;</span>] =  <span class="hljs-string">&quot;application/jason&quot;</span>wrk.method  =  <span class="hljs-string">&quot;POST&quot;</span><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">request</span><span class="hljs-params">()</span></span><span class="hljs-keyword">return</span> wrk.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, data)<span class="hljs-keyword">end</span></code></pre></div><p>测试：</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wrk</span> -t<span class="hljs-number">500</span> -c<span class="hljs-number">1000</span> -d<span class="hljs-number">1</span>s  --script=data.lua --latency https://github.<span class="hljs-number">13</span>sai.com/</code></pre></div><p>个人用了几次，感觉比ab好用，推荐一下。</p><p>参考：<br><a href="http://zhaox.github.io/benchmark/2016/12/28/wrk-guidelines">Http压测工具wrk使用指南</a><br><a href="https://github.com/wg/wrk">wrk</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wrk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gomodules</title>
    <link href="/2019/12/27/219/"/>
    <url>/2019/12/27/219/</url>
    
    <content type="html"><![CDATA[<h2 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h2><p>modules在go的1.11版本中加入，并在最新的Go 1.13中对模块进行了重大改进和更改。</p><p>1.13版本前请务必开启模块</p><blockquote><p>export GO111MODULE=auto</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在你的项目目录中执行：</p><blockquote><p>go mod init 13sai/game</p></blockquote><p>会生成go.mod</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">module</span> <span class="hljs-number">13</span>sai/game<span class="hljs-attribute">go</span> <span class="hljs-number">1</span>.<span class="hljs-number">12</span></code></pre></div><p>然后你可以尽情编写你的项目代码，在你每次go get的时候，modules也会将你的安装的package加入go.mod</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">module</span> <span class="hljs-number">13</span>sai/game<span class="hljs-attribute">go</span> <span class="hljs-number">1</span>.<span class="hljs-number">12</span><span class="hljs-attribute">require</span> github.com/gin-gonic/gin v<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.<span class="hljs-number">0</span> // indirect</code></pre></div><p>当然，你也可以像我一样，先去写代码，不去初始化modules，写完代码之后，初始化，然后执行：</p><blockquote><p>go run main.go</p></blockquote><p>当然，如果你没有翻墙，也没有使用国内镜像，很可能很多包都下载失败。</p><h2 id="Goproxy-中国"><a href="#Goproxy-中国" class="headerlink" title="Goproxy 中国"></a>Goproxy 中国</h2><p>Go 1.13 及以上（推荐）<br>打开你的终端并执行：</p><div class="code-wrapper"><pre><code class="hljs vim">$ <span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GOPROXY=http<span class="hljs-variable">s:</span>//goproxy.<span class="hljs-keyword">cn</span>,direct</code></pre></div><p>完成。</p><p>macOS 或 Linux<br>打开你的终端并执行：</p><div class="code-wrapper"><pre><code class="hljs routeros">$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn</code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs vim">$ <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.<span class="hljs-keyword">profile</span> &amp;&amp; <span class="hljs-keyword">source</span> ~/.<span class="hljs-keyword">profile</span></code></pre></div><p>完成。</p><p>Windows<br>打开你的 PowerShell 并执行：</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">C:</span>\&gt; <span class="hljs-variable">$env</span><span class="hljs-symbol">:GOPROXY</span> = <span class="hljs-string">&quot;https://goproxy.cn&quot;</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 打开“开始”并搜索“env”<span class="hljs-bullet">2.</span> 选择“编辑系统环境变量”<span class="hljs-bullet">3.</span> 点击“环境变量…”按钮<span class="hljs-bullet">4.</span> 在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分）<span class="hljs-bullet">5.</span> 点击“新建…”按钮<span class="hljs-bullet">6.</span> 选择“变量名”输入框并输入“GOPROXY”<span class="hljs-bullet">7.</span> 选择“变量值”输入框并输入“https://goproxy.cn”<span class="hljs-bullet">8.</span> 点击“确定”按钮</code></pre></div><p>完成。</p><h2 id="本地包处理"><a href="#本地包处理" class="headerlink" title="本地包处理"></a>本地包处理</h2><p>本地宝使用这样的方式引入（local.com/13sai/game）</p><p>然后执行：</p><div class="code-wrapper"><pre><code class="hljs routeros">$ go mod <span class="hljs-builtin-name">edit</span> <span class="hljs-attribute">-require</span>=local.com/13sai/game@v1.0.0$ go mod <span class="hljs-builtin-name">edit</span> <span class="hljs-attribute">-replace</span>=local.com/13sai/game@v1.0.0=$PWD</code></pre></div><h2 id="vendor备份"><a href="#vendor备份" class="headerlink" title="vendor备份"></a>vendor备份</h2><blockquote><p>go mod vendor</p></blockquote><p>可以将modules下载到本地vendor目录，其中也包含上面的本地包。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="code-wrapper"><pre><code class="hljs awk">go mod tidy <span class="hljs-regexp">//</span>整理模块（拉取缺少的模块，移除不用的模块）go mod download<span class="hljs-regexp">//</span>下载依赖包到本地缓存go mod graph <span class="hljs-regexp">//</span>打印现有依赖结构go mod verify <span class="hljs-regexp">//</span>校验依赖go mod why <span class="hljs-regexp">//</span>解释为什么需要此模块</code></pre></div><p><a href="https://github.com/golang/go/wiki/Modules#quick-start">Modules的wiki</a></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx负载均衡</title>
    <link href="/2019/12/21/Nginx2/"/>
    <url>/2019/12/21/Nginx2/</url>
    
    <content type="html"><![CDATA[<h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><p>1.轮询(默认)：每一个来自网络中的请求，轮流分配给内部的服务器，从1到N然后重新开始。此种负载均衡算法适合服务器组内部的服务器都具有相同的配置并且平均服务请求 相对均衡的情况。<br>2.加权轮询（weight）：根据服务器的不同处理能力，给每个服务器分配不同的权值，使其能够接受相应权值数的服务请求。例如:服务器A的权值被设计成1，B的权值是3，C的权值是6，则服务器A、B、C将分别接受到10%、30%、60%的服务请求。此种均衡算法能确保高性能的服务器得到更多的使用率，避免低性能的服务器负载过重。<br>3.ip-hash（ip_hash）：nginx将会根据相应的hash函数，对每个请求的ip作为关键字，得到的hash值将会决定将请求分发给相应Server进行处理。<br>4.最少连接数（least_conn）：nginx会判断后端集群服务器中哪个Server当前的 Active Connection 数是最少的，对于每个新进来的请求，nginx将该其分发给对应的Server。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">语法: upstream name &#123; ... &#125; </span><span class="hljs-section">默认值: —</span><span class="hljs-section">上下文: http</span>upstream 指令当中包含server指令<span class="hljs-section">语法: server address [parameters]; </span><span class="hljs-section">上下文: upstream</span></code></pre></div><p>demo:</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> backend &#123;    <span class="hljs-attribute">server</span> backend1.example.com:<span class="hljs-number">8081</span> weight=<span class="hljs-number">4</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span>;     <span class="hljs-attribute">server</span> backend2.example.com:<span class="hljs-number">8080</span> weight=<span class="hljs-number">1</span>;&#125;<span class="hljs-section">server</span> &#123;     <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">proxy_pass</span> http://backend;     &#125;&#125;</code></pre></div><p>参数说明:</p><ul><li>weight=number 设定服务器的权重，默认是1，权重越大被访问机会越大，可以根据机器的配置情况来配置。</li><li>max_fails=number 设定Nginx与服务器通信的尝试失败的次数。在fail_timeout参数定义的时间段内，如果失败的次数达到此值，Nginx就认为服务器不 可用。在下一个fail_timeout时间段，服务器不会再被尝试。 失败的尝试次数默认是1。默认配置时，http_404状态不被认为是失败的尝试。 可以通过指令proxy_next_upstream 和 memcached_next_upstream 来配置什么是失败的尝试。</li><li>fail_timeout=time,统计失败尝试次数的时间段。在这段时间中，服务器失败次数达到指定的尝试次数，服务器就被认为不可用。默认情况下，该超时时间是10秒。 </li><li>backup,标记为备用服务器。当主服务器不可用以后，请求会被传给这些服务器，配置这个指令可以实现故障转移。</li><li>down,标记服务器永久不可用，可以跟ip_hash指令一起使用。</li></ul><h2 id="proxy-next-upstream-指令"><a href="#proxy-next-upstream-指令" class="headerlink" title="proxy_next_upstream 指令"></a>proxy_next_upstream 指令</h2><p>在nginx的配置文件中， proxy_next_upstream 项定义了什么情况下进行重试</p><div class="code-wrapper"><pre><code class="hljs coq">语法: proxy_next_upstream error | <span class="hljs-type">timeout</span> | <span class="hljs-type">invalid_header</span> | <span class="hljs-type">http_500</span> | <span class="hljs-type">http_502</span> | <span class="hljs-type">http_503</span> | <span class="hljs-type">http_504</span> | <span class="hljs-type">http_403</span> | <span class="hljs-type">http_404</span> | <span class="hljs-type">http_429</span> | <span class="hljs-type">non_idempotent</span> | <span class="hljs-type">off</span> ...; 默认值: proxy_next_upstream error <span class="hljs-built_in">timeout</span>;上下文: http, server, location</code></pre></div><p>参数说明:</p><ul><li>error 表示和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现错误。 </li><li>timeout 表示和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现超时。 </li><li>invalid_header 表示后端服务器返回空响应或者非法响应头</li><li>http_500 表示后端服务器返回的响应状态码为500</li><li>non_idempotent 通常，如果请求已发送到上游服务器，则具有非等幂方法（POST、LOCK、PATCH）的请求不会传递到下一个服务器；启用此选项可显式允许重试此类请求；</li><li>off 表示停止将请求发送给下一台后端服务器</li></ul><p>PS: non_idempotent参数，proxy_next_upstream配置默认转发get请求，但对于post等请求并无效果，建议配置这一项。</p><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul><li>proxy_next_upstream_tries:设置重试次数，默认0表示不限制，注意此重试次数指的是所有请求次数(包括第一次和之后的重试次数之和)。 </li><li>proxy_next_upstream_timeout: 设置重试最大超时时间，默认0表示不限制。即在 proxy_next_upstream_timeout 时间内允许 proxy_next_upstream_tries 次重试。如果超过了其中一个设置，则 Nginx 也会结束重试并返回客户端响应(可能是错误码)。</li><li>proxy_send_timeout:后端服务器数据回传时间(代理发送超时时间)</li><li>proxy_read_timeout:连接成功后，后端服务器响应时间(代理接收超时时间) </li><li>proxy_connect_timeout:nginx连接后端的超时时间，一般不超过75s</li></ul><p>demo:</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;    <span class="hljs-attribute">proxy_pass</span>         http://app-proxy;    <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout http_500 http_502 http_503 http_504;    <span class="hljs-attribute">proxy_next_upstream_tries</span> <span class="hljs-number">3</span>;    <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">60s</span>;    <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">60s</span>;    <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">60s</span>;    <span class="hljs-attribute">proxy_pass_request_headers</span>      <span class="hljs-literal">on</span>;    <span class="hljs-attribute">proxy_set_header</span>   Host             $host:$server_port;    <span class="hljs-attribute">proxy_set_header</span>   X-Real-IP        $remote_addr;    <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For  $proxy_add_x_forwarded_for;&#125;</code></pre></div><p>建议自己动手使用这些参数，试验一下，加深印象和理解。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx工作模式和进程模型</title>
    <link href="/2019/12/20/Nginx3/"/>
    <url>/2019/12/20/Nginx3/</url>
    
    <content type="html"><![CDATA[<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><ol><li>Nginx启动后，会产生一个master主进程，主进程执行一系列的工作后会产生一个或者多个工作进程worker</li><li>在客户端请求动态站点的过程中，Nginx服务器还涉及和后端服务器的通信。Nginx将接收到的Web请求通过代理转发到后端服务器，由后端服务器进行数据处理和组织;</li><li>Nginx为了提高对请求的响应效率，降低网络压力，采用了缓存机制，将历史应答数据缓存到本地。保障对缓存文件的快速访问</li></ol><h2 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h2><p>nginx的进程模型，可以由下图来表示：</p><p><img src="https://cdn.learnku.com/uploads/images/201912/20/41489/gVfCciWSaq.png!large" alt="image"></p><h3 id="master进程"><a href="#master进程" class="headerlink" title="master进程"></a>master进程</h3><p>主要用来管理 worker 进程，master进程会接收来自外界发来的信号，再根据信号做不同的事情。所以我们要控制nginx，只需要通过kill向master进程发送信号就行了。</p><p>具体包括以下主要功能:</p><ul><li>接收来自外界的信号</li><li>向各worker进程发送信号</li><li>监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程</li></ul><h4 id="重启说明（示例）"><a href="#重启说明（示例）" class="headerlink" title="重启说明（示例）"></a>重启说明（示例）</h4><p>比如kill -HUP pid，则是告诉nginx，重启nginx，早期版本可以用这个信号来重启nginx，因为是从容地重启，因此服务是不中断的。（现在一般使用<code>nginx -s reload</code>）</p><p>master进程在接收到HUP信号后，会先重新加载配置文件，然后再启动新的worker进程，并向所有老的worker进程发送信号，告诉他们可以光荣退休了。新的worker在启动后，就开始接收新的请求，而老的worker在收到来自master的信号后，就不再接收新的请求，并且在当前进程中的所有未处理完的请求处理完成后，再退出。</p><blockquote><p>（master不需要处理网络事件，不负责业务的执行）</p></blockquote><h3 id="worker进程"><a href="#worker进程" class="headerlink" title="worker进程"></a>worker进程</h3><p>主要任务是完成具体的任务逻辑。其主要关注点是与客户端或后端真实服务器(此时 worker 作为中间代理)之间的数据可读/可写等I/O交互事件。具体包括以下主要功能:</p><ul><li>接收客户端请求;</li><li>将请求一次送入各个功能模块进行过滤处理;</li><li>与后端服务器通信，接收后端服务器处理结果;</li><li>数据缓存proxy_cache模块</li><li>响应客户端请求</li></ul><p>（一个请求，完全由worker进程来处理，而且只在一个worker进程中处理。）</p><h4 id="worker进程是如何处理请求的？"><a href="#worker进程是如何处理请求的？" class="headerlink" title="worker进程是如何处理请求的？"></a>worker进程是如何处理请求的？</h4><p>首先，worker进程之间是平等的，每个worker进程都是从master进程fork过来，在master进程里面，先建立好需要listen的socket（listenfd）之后，然后再fork出多个worker进程。每个worker进程，处理请求的机会也是一样的。当一个连接请求过来，每个进程都有可能处理这个连接，怎么做的呢？</p><p>所有worker进程的listenfd会在新连接到来时变得可读，为保证只有一个进程处理该连接，所有worker进程在注册listenfd读事件前抢accept_mutex，抢到<code>互斥锁</code>的那个worker进程注册listenfd读事件，在读事件里调用accept接受该连接。</p><p>当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后断开连接，这样就是一个完整的请求就是这样的了。</p><p>我们可以了解到一个请求，完全由worker进程来处理，且只在一个worker进程中处理。</p><h3 id="Nginx采用的IO多路复用模型"><a href="#Nginx采用的IO多路复用模型" class="headerlink" title="Nginx采用的IO多路复用模型"></a>Nginx采用的IO多路复用模型</h3><blockquote><p>IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程，目前支持I/O多路复用的系统调用有 select ， poll ， epoll ，I/O多路复用就是通过一种机制，一个进程可以监视多个描述符(socket)，一旦某个描述符就绪(一般是读就绪或者写就绪)，能够通知程序进行相应的读 写操作。</p></blockquote><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><h6 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h6><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过遍历fdset，来找到就绪的描述符。</p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>目前几乎在所有的平台上支持</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><blockquote><p>select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理。这样所带来的缺点是：</p></blockquote><ul><li>select最大的缺陷就是单个进程所打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。（一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max查看。32位机默认是1024个。64位机默认是2048）</li><li>对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低。（当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，那就避免了轮询，这正是epoll与kqueue做的）</li><li>需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大。</li></ul><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><h6 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h6><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。</p><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ul><li>它没有最大连接数的限制，原因是它是基于链表来存储的。</li></ul><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ul><li>大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</li><li>poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</li></ul><p>注意：从上面看，select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p><h6 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h6><p>epoll支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。</p><h6 id="epoll对文件描述符的操作有两种模式"><a href="#epoll对文件描述符的操作有两种模式" class="headerlink" title="epoll对文件描述符的操作有两种模式"></a>epoll对文件描述符的操作有两种模式</h6><p>LT（level trigger）和ET（edge trigger）。LT模式是默认模式，两者区别如下：</p><ul><li>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</li><li>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</li></ul><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><ul><li>没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）。</li><li>效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。<br>　　只有活跃可用的FD才会调用callback函数；即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</li><li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</li></ul><h5 id="kqueue"><a href="#kqueue" class="headerlink" title="kqueue"></a>kqueue</h5><p>kqueue与epoll非常相似，最初是2000年Jonathan Lemon在FreeBSD系统上开发的一个高性能的事件通知接口。注册一批socket描述符到 kqueue 以后，当其中的描述符状态发生变化时，kqueue 将一次性通知应用程序哪些描述符可读、可写或出错了。只是适应平台不多。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/jeakeven/p/5435916.html">网络通信 –&gt; IO多路复用之select、poll、epoll详解</a></li><li><a href="http://tengine.taobao.org/book/chapter_02.html#id1">nginx平台初探</a></li></ul><blockquote><p> 这应该是Nginx系列最后一篇文章了，如果你有疑问，欢迎交流，水平有限，错误欢迎指正。</p></blockquote><hr><p>技术文章也发布在自己的公众号【爱好历史的程序员】，欢迎扫码关注，谢谢！</p><p><img src="https://upload-images.jianshu.io/upload_images/8857285-075d6cd5c9d002b6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="爱好历史的程序员"></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gRPC初体验</title>
    <link href="/2019/12/20/215/"/>
    <url>/2019/12/20/215/</url>
    
    <content type="html"><![CDATA[<blockquote><p>gRPC是可以在任何环境中运行的现代开源高性能RPC框架。它可以通过可插拔的支持来有效地连接数据中心内和跨数据中心的服务，以实现负载平衡，跟踪，运行状况检查和身份验证。它也适用于分布式计算的最后一英里，以将设备，移动应用程序和浏览器连接到后端服务。</p></blockquote><h2 id="安装protocol-buffer-编译器"><a href="#安装protocol-buffer-编译器" class="headerlink" title="安装protocol buffer 编译器"></a>安装protocol buffer 编译器</h2><p>mac：</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>protobuf</code></pre></div><p>其他系统可以尝试编译安装</p><ul><li><a href="https://github.com/protocolbuffers/protobuf">protocolbuffers/protobuf</a></li></ul><h2 id="安装gprc"><a href="#安装gprc" class="headerlink" title="安装gprc"></a>安装gprc</h2><div class="code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">go</span> <span class="hljs-built_in">get</span> -u google.golang.org/grpc</code></pre></div><h2 id="安装protoc-gen-go插件"><a href="#安装protoc-gen-go插件" class="headerlink" title="安装protoc-gen-go插件"></a>安装protoc-gen-go插件</h2><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -<span class="hljs-keyword">u</span> github.<span class="hljs-keyword">com</span>/golang/protobuf/protoc-gen-<span class="hljs-keyword">go</span></code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>新建hello目录，进入后执行：</p><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">protoc</span> --<span class="hljs-comment">proto_path</span> <span class="hljs-comment">hello/</span> --<span class="hljs-comment">go_out=plugins=grpc:hello</span> <span class="hljs-comment">hello</span><span class="hljs-string">.</span><span class="hljs-comment">proto</span></code></pre></div><p>会看到hello目录下生成了hello.pb.go文件。</p><p>当然，其中的 <code>hello.proto</code> 是预先自定义在hello文件夹下的，如：</p><div class="code-wrapper"><pre><code class="hljs awk">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;  <span class="hljs-regexp">//</span>语法声明package hello; <span class="hljs-regexp">//</span>包名<span class="hljs-regexp">//</span> 定义服务service Greeter &#123;  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;&#125;<span class="hljs-regexp">//</span> 请求数据格式message HelloRequest &#123;  string name = <span class="hljs-number">1</span>;&#125;<span class="hljs-regexp">//</span> 响应数据格式message HelloReply &#123;  string message = <span class="hljs-number">1</span>;&#125;</code></pre></div><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>新建server目录，<br>golang例子代码来自：<a href="https://github.com/grpc/grpc-go/tree/master/examples/helloworld">https://github.com/grpc/grpc-go/tree/master/examples/helloworld</a></p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// main.go</span><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;net&quot;</span><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span>pb <span class="hljs-string">&quot;local.com/sai/game/grpc/hello&quot;</span>)<span class="hljs-keyword">const</span> (port = <span class="hljs-string">&quot;:50051&quot;</span>)<span class="hljs-comment">// server is used to implement helloworld.GreeterServer.</span><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;pb.UnimplementedGreeterServer&#125;<span class="hljs-comment">// SayHello implements helloworld.GreeterServer</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span> <span class="hljs-title">SayHello</span><span class="hljs-params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="hljs-params">(*pb.HelloReply, error)</span></span> &#123;log.Printf(<span class="hljs-string">&quot;Received: %v&quot;</span>, in.GetName())<span class="hljs-keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="hljs-string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;lis, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, port)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;log.Fatalf(<span class="hljs-string">&quot;failed to listen: %v&quot;</span>, err)&#125;s := grpc.NewServer()pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)<span class="hljs-keyword">if</span> err := s.Serve(lis); err != <span class="hljs-literal">nil</span> &#123;log.Fatalf(<span class="hljs-string">&quot;failed to serve: %v&quot;</span>, err)&#125;&#125;</code></pre></div><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><h3 id="go-client"><a href="#go-client" class="headerlink" title="go client"></a>go client</h3><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">// client.go</span>package <span class="hljs-selector-tag">main</span>import (<span class="hljs-string">&quot;context&quot;</span><span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;time&quot;</span><span class="hljs-string">&quot;google.golang.org/grpc&quot;</span>pb <span class="hljs-string">&quot;local.com/sai/game/grpc/hello&quot;</span>)const (<span class="hljs-selector-tag">address</span>     = <span class="hljs-string">&quot;127.0.0.1:50051&quot;</span>defaultName = <span class="hljs-string">&quot;13sai&quot;</span>)func <span class="hljs-selector-tag">main</span>() &#123;<span class="hljs-comment">// Set up a connection to the server.</span>conn, err := grpc<span class="hljs-selector-class">.Dial</span>(<span class="hljs-selector-tag">address</span>, grpc<span class="hljs-selector-class">.WithInsecure</span>(), grpc<span class="hljs-selector-class">.WithBlock</span>())<span class="hljs-keyword">if</span> err != nil &#123;log<span class="hljs-selector-class">.Fatalf</span>(<span class="hljs-string">&quot;did not connect: %v&quot;</span>, err)&#125;defer conn<span class="hljs-selector-class">.Close</span>()c := pb<span class="hljs-selector-class">.NewGreeterClient</span>(conn)<span class="hljs-comment">// Contact the server and print out its response.</span>name := defaultName<span class="hljs-keyword">if</span> len(os.Args) &gt; <span class="hljs-number">1</span> &#123;name = os<span class="hljs-selector-class">.Args</span><span class="hljs-selector-attr">[1]</span>&#125;ctx, cancel := context<span class="hljs-selector-class">.WithTimeout</span>(context<span class="hljs-selector-class">.Background</span>(), <span class="hljs-selector-tag">time</span>.Second)defer cancel()r, err := c<span class="hljs-selector-class">.SayHello</span>(ctx, &amp;pb.HelloRequest&#123;Name: name&#125;)<span class="hljs-keyword">if</span> err != nil &#123;log<span class="hljs-selector-class">.Fatalf</span>(<span class="hljs-string">&quot;could not greet: %v&quot;</span>, err)&#125;log<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;Greeting: %s&quot;</span>, r<span class="hljs-selector-class">.GetMessage</span>())&#125;`</code></pre></div><h3 id="php-client"><a href="#php-client" class="headerlink" title="php client"></a>php client</h3><h4 id="扩展安装"><a href="#扩展安装" class="headerlink" title="扩展安装"></a>扩展安装</h4><ul><li><a href="http://pecl.php.net/package/gRPC">grpc扩展下载</a></li><li><a href="http://pecl.php.net/package/protobuf">profo</a></li></ul><p>下载安装合适版本的扩展即可，记得别忘记在php.ini中加入：</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=grpc.so<span class="hljs-attr">extension</span>=protobuf.so</code></pre></div><h4 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h4><div class="code-wrapper"><pre><code class="hljs routeros">protoc <span class="hljs-attribute">--php_out</span>=client hello/hello.proto</code></pre></div><p>会看到client目录下生成了GPBMetadata和Hello两个目录。</p><p>如果你对grpc相对较熟练，可以直接进行代码编写：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">Grpc</span>\<span class="hljs-title">BaseStub</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$hostname</span>, <span class="hljs-variable">$opts</span>, <span class="hljs-variable">$channel</span> = <span class="hljs-literal">null</span></span>) </span>&#123;        <span class="hljs-built_in">parent</span>::__construct(<span class="hljs-variable">$hostname</span>, <span class="hljs-variable">$opts</span>, <span class="hljs-variable">$channel</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * rpc SayHello(HelloRequest) returns (HelloReply) &#123;&#125;</span><span class="hljs-comment">     * 方法名尽量和 (gprc 定义 Greeter 服务)的方法一样</span><span class="hljs-comment">     * 用于请求和响应该服务</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayHello</span>(<span class="hljs-params">\Hello\HelloRequest <span class="hljs-variable">$argument</span></span>)</span>&#123;        <span class="hljs-comment">// (/hello.Greeter/SayHello) 是请求服务端那个服务和方法，基本和 proto 文件定义一样</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_simpleRequest(<span class="hljs-string">&#x27;/hello.Greeter/SayHello&#x27;</span>,            <span class="hljs-variable">$argument</span>,            [<span class="hljs-string">&#x27;\Hello\HelloReply&#x27;</span>, <span class="hljs-string">&#x27;decode&#x27;</span>]            );    &#125;&#125;<span class="hljs-comment">//用于连接 服务端</span><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> \Client(<span class="hljs-string">&#x27;127.0.0.1:50051&#x27;</span>, [    <span class="hljs-string">&#x27;credentials&#x27;</span> =&gt; Grpc\ChannelCredentials::createInsecure()]);<span class="hljs-comment">//实例化 TestRequest 请求类</span><span class="hljs-variable">$request</span> = <span class="hljs-keyword">new</span> \Hello\HelloRequest();<span class="hljs-variable">$request</span>-&gt;setName(<span class="hljs-string">&quot;fairy&quot;</span>);<span class="hljs-comment">//调用远程服务</span><span class="hljs-variable">$get</span> = <span class="hljs-variable">$client</span>-&gt;SayHello(<span class="hljs-variable">$request</span>)-&gt;wait();<span class="hljs-comment">//返回数组</span><span class="hljs-comment">//$reply 是 TestReply 对象</span><span class="hljs-comment">//$status 是数组</span><span class="hljs-keyword">list</span>(<span class="hljs-variable">$reply</span>, <span class="hljs-variable">$status</span>) = <span class="hljs-variable">$get</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$reply</span>-&gt;getMessage().PHP_EOL;<span class="hljs-comment">// print_r($client-&gt;SayHello($request));</span></code></pre></div><p>当然，也可以使用grpc_php_plugin插件生成。</p><ul><li><a href="https://github.com/grpc/grpc/tree/master/src/php">grpc-php</a></li><li></li></ul><h4 id="grpc-php-plugin插件"><a href="#grpc-php-plugin插件" class="headerlink" title="grpc_php_plugin插件"></a>grpc_php_plugin插件</h4><p><a href="https://gitee.com/mirrors/grpc.git">clone太慢可以使用码云</a></p><div class="code-wrapper"><pre><code class="hljs reasonml">git clone -b <span class="hljs-constructor">$(<span class="hljs-params">curl</span> -L <span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">grpc</span>.<span class="hljs-params">io</span><span class="hljs-operator">/</span><span class="hljs-params">release</span>)</span> https:<span class="hljs-comment">//github.com/grpc/grpc</span>cd grpc#这一步很慢，暂未找到什么好方法git submodule update --initmake grpc_php_plugin</code></pre></div><p>新建php-client，再来自动生成：</p><div class="code-wrapper"><pre><code class="hljs awk">protoc -I=.<span class="hljs-regexp">/hello hello.proto --php_out=./</span>php-client<span class="hljs-regexp">/ --grpc_out=php-client/</span> --plugin=protoc-gen-grpc=<span class="hljs-regexp">/Users/</span>wangzetao<span class="hljs-regexp">/www/g</span>rpc1<span class="hljs-regexp">/bins/</span>opt/grpc_php_plugin</code></pre></div><p>会发现比上面自动生成多了一个GreeterClient.php</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// client.php</span><span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>;<span class="hljs-comment">//用于连接 服务端</span><span class="hljs-variable">$client</span> = <span class="hljs-keyword">new</span> \Hello\GreeterClient(<span class="hljs-string">&#x27;127.0.0.1:50051&#x27;</span>, [    <span class="hljs-string">&#x27;credentials&#x27;</span> =&gt; Grpc\ChannelCredentials::createInsecure()]);<span class="hljs-comment">//实例化 TestRequest 请求类</span><span class="hljs-variable">$request</span> = <span class="hljs-keyword">new</span> \Hello\HelloRequest();<span class="hljs-variable">$request</span>-&gt;setName(<span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//调用远程服务</span><span class="hljs-variable">$get</span> = <span class="hljs-variable">$client</span>-&gt;SayHello(<span class="hljs-variable">$request</span>)-&gt;wait();<span class="hljs-comment">//返回数组</span><span class="hljs-comment">//$status 是数组</span><span class="hljs-keyword">list</span>(<span class="hljs-variable">$reply</span>, <span class="hljs-variable">$status</span>) = <span class="hljs-variable">$get</span>;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$reply</span>-&gt;getMessage().PHP_EOL;<span class="hljs-comment">// print_r($client-&gt;SayHello($request));</span></code></pre></div><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><blockquote><p>go run grpc/server/main.go</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/201912/19/41489/lqX1HT2biY.jpg!large" alt="grpc"></p><blockquote><p>go run grpc/client/main.go</p><p>go run grpc/client/client.php</p><p>go run grpc/client/php-client.php</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/201912/19/41489/TwzBk5D5gU.jpg!large" alt="grpc"></p><p>grpc初体验完成了，本次只是小小的使用了一下子，后续感兴趣的话可以深入学习一下。文中如有错误，欢迎指出交流。</p><hr><p>技术文章也发布在自己的公众号【爱好历史的程序员】，欢迎扫码关注，谢谢！</p><p><img src="https://upload-images.jianshu.io/upload_images/8857285-075d6cd5c9d002b6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="爱好历史的程序员"></p>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gRPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装gogs</title>
    <link href="/2019/12/08/214/"/>
    <url>/2019/12/08/214/</url>
    
    <content type="html"><![CDATA[<blockquote><p>docker pull gogs/gogs</p></blockquote><blockquote><p>docker run -itd –name=gogs1 -p 10022:22 -p 10023:3000  gogs/gogs</p></blockquote><p>浏览器输入<a href="http://127.0.0.1:10023/">http://127.0.0.1:10023/</a></p><p><img src="/img/gogs-install.jpg" alt="面板"></p><p>主要修改的参数是</p><ul><li>应用 URL</li><li>数据库用户密码</li><li>管理员信息</li></ul><p>如果你有其他修改，自行修改即可。</p><p>点击立即安装按钮，按理说会跳到3000端口地址，你换成10023就好了。</p><p><img src="/img/gogs-login.jpg" alt="登录"></p><p>然后你就可以自行创建，开始gogs之旅了。</p><p><img src="/img/gogs-project" alt="project"></p><blockquote><p>另外，配置文件在容器的/data/gogs/conf/app.ini。</p></blockquote><h1 id="详细配置文件手册（来自github）"><a href="#详细配置文件手册（来自github）" class="headerlink" title="详细配置文件手册（来自github）"></a>详细配置文件手册（来自github）</h1><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>APP_NAME</code></td><td>应用名称，可以改成您的组织或公司名称</td></tr><tr><td><code>RUN_USER</code></td><td>运行应用的用户名称，我们建议您使用 <code>git</code>，但如果您在个人计算机上运行 Gogs，请修改为您的系统用户名称。如果没有正确设置这个值，很可能导致您的应用崩溃</td></tr><tr><td><code>RUN_MODE</code></td><td>鉴于性能和其它考虑，建议在部署环境下修改为 <code>prod</code> 模式。在您完成安装操作时，该值也会被设置为 <code>prod</code></td></tr></tbody></table><h3 id="服务器-server"><a href="#服务器-server" class="headerlink" title="服务器 (server)"></a>服务器 (<code>server</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>PROTOCOL</code></td><td><code>http</code> 或 <code>https</code></td></tr><tr><td><code>DOMAIN</code></td><td>服务器域名</td></tr><tr><td><code>ROOT_URL</code></td><td>公开的完整 URL 路径</td></tr><tr><td><code>HTTP_ADDR</code></td><td>应用 HTTP 监听地址</td></tr><tr><td><code>HTTP_PORT</code></td><td>应用 HTTP 监听端口号</td></tr><tr><td><code>UNIX_SOCKET_PERMISSION</code></td><td>Unix 套接字文件的权限</td></tr><tr><td><code>LOCAL_ROOT_URL</code></td><td>用于 Gogs 工作进程（如：SSH）回访应用的本地（DMZ）URL，一般情况下请保持默认值，除非您的 SSH 服务器节点与 HTTP 并不是同一个节点入口</td></tr><tr><td><code>DISABLE_SSH</code></td><td>当 SSH 功能不可用时可以禁用</td></tr><tr><td><code>START_SSH_SERVER</code></td><td>启用该选项来启动内置 SSH 服务器</td></tr><tr><td><code>SSH_DOMAIN</code></td><td>允许公用网络访问 SSH 的域名</td></tr><tr><td><code>SSH_PORT</code></td><td>SSH 端口号，如果不为 <code>22</code> 的话可以在此修改</td></tr><tr><td><code>SSH_LISTEN_HOST</code></td><td>内置 SSH 服务器监听的地址</td></tr><tr><td><code>SSH_LISTEN_PORT</code></td><td>内置 SSH 服务器监听的端口</td></tr><tr><td><code>SSH_ROOT_PATH</code></td><td>SSH 根目录，一般为 <code>~/.ssh</code>，但必须填写为 <code>/home/git/.ssh</code></td></tr><tr><td><code>REWRITE_AUTHORIZED_KEYS_AT_START</code></td><td>激活该选项以在应用启动时自动重写 <code>authorized_keys</code> 文件，该选项在使用内置 SSH 服务器时将会被自动禁用</td></tr><tr><td><code>SSH_KEY_TEST_PATH</code></td><td>用于测试 SSH 公钥的临时目录</td></tr><tr><td><code>SSH_KEYGEN_PATH</code></td><td><code>ssh-keygen</code> 程序的路径，默认为 <code>ssh-keygen</code> 即通过系统路径查找</td></tr><tr><td><code>MINIMUM_KEY_SIZE_CHECK</code></td><td>指定不同类型的公钥的最小密钥大小</td></tr><tr><td><code>OFFLINE_MODE</code></td><td>激活该选项来禁止从 CDN 获取静态资源，同时 Gravatar 服务也将被自动禁用</td></tr><tr><td><code>DISABLE_ROUTER_LOG</code></td><td>激活该选项来禁止打印路由日志</td></tr><tr><td><code>CERT_FILE</code></td><td>HTTPS 授权文件路径</td></tr><tr><td><code>KEY_FILE</code></td><td>HTTPS 的密钥文件路径</td></tr><tr><td><code>STATIC_ROOT_PATH</code></td><td>模板文件和静态文件的上级目录，默认为应用二进制所在的位置</td></tr><tr><td><code>APP_DATA_PATH</code></td><td>应用内部数据的存放目录</td></tr><tr><td><code>ENABLE_GZIP</code></td><td>激活该选项来启用应用级别 GZIP 支持</td></tr><tr><td><code>LANDING_PAGE</code></td><td>未登录用户的默认首页，可以是 <code>home</code> 或 <code>explore</code>（探索页）</td></tr></tbody></table><h3 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库 (repository)"></a>仓库 (<code>repository</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ROOT</code></td><td>用户仓库存储根目录，必须为绝对路径，默认为 <code>~/&lt;user name&gt;/gogs-repositories</code></td></tr><tr><td><code>SCRIPT_TYPE</code></td><td>系统脚本类型，一般情况下均为 <code>bash</code>，但有些用户反应只能使用 <code>sh</code></td></tr><tr><td><code>ANSI_CHARSET</code></td><td>当遇到无法识别的字符集时使用的默认字符集</td></tr><tr><td><code>FORCE_PRIVATE</code></td><td>强制要求所有新建的仓库都是私有的</td></tr><tr><td><code>MAX_CREATION_LIMIT</code></td><td>全局默认的每个用户可创建创建仓库上限，<code>-1</code> 表示无限制</td></tr><tr><td><code>PREFERRED_LICENSES</code></td><td>建议用户首选的授权类型</td></tr><tr><td><code>DISABLE_HTTP_GIT</code></td><td>激活该选项来禁止用户通过 HTTP 对 Git 仓库进行交互操作，即用户只能通过 SSH 操作</td></tr><tr><td><code>ENABLE_LOCAL_PATH_MIGRATION</code></td><td>激活该选项来启用本地路径迁移仓库功能。启动后默认只有管理员可以使用，普通用户必须经由管理员授权</td></tr><tr><td><code>ENABLE_RAW_FILE_RENDER_MODE</code></td><td>激活该选项来启用在查看原始数据时对页面进行真实渲染，例如渲染实际的 HTML 页面，有潜在安全隐患</td></tr></tbody></table><h4 id="仓库-编辑器-repository-editor"><a href="#仓库-编辑器-repository-editor" class="headerlink" title="仓库 - 编辑器 (repository.editor)"></a>仓库 - 编辑器 (<code>repository.editor</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>LINE_WRAP_EXTENSIONS</code></td><td>需要显示为行包装的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：<code>.txt,</code></td></tr></tbody></table><h4 id="仓库-文件上传-repository-upload"><a href="#仓库-文件上传-repository-upload" class="headerlink" title="仓库 - 文件上传 (repository.upload)"></a>仓库 - 文件上传 (<code>repository.upload</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>激活该选项来启用仓库文件上传功能</td></tr><tr><td><code>TEMP_PATH</code></td><td>文件上传的临时存放目录</td></tr><tr><td><code>ALLOWED_TYPES</code></td><td>允许上传的文件类型（例如：”image/jpeg|image/png”），留空表示允许上传任意类型的文件</td></tr><tr><td><code>FILE_MAX_SIZE</code></td><td>单个上传的文件的最大体积，以 MB 为单位</td></tr><tr><td><code>MAX_FILES</code></td><td>单次同时上传的最多文件个数</td></tr></tbody></table><h4 id="版本发布-附件-release-attachment"><a href="#版本发布-附件-release-attachment" class="headerlink" title="版本发布 - 附件 (release.attachment)"></a>版本发布 - 附件 (<code>release.attachment</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>激活该选项来启用版本发布附件功能</td></tr><tr><td><code>PATH</code></td><td>存放附件的路径</td></tr><tr><td><code>ALLOWED_TYPES</code></td><td>允许上传的 MIME 类型，例如 “image/jpeg|image/png”，使用 <code>*/*</code> 允许所有类型的文件</td></tr><tr><td><code>MAX_SIZE</code></td><td>最大允许上传的附件体积，单位为 MB，例如 <code>32</code></td></tr><tr><td><code>MAX_FILES</code></td><td>最大允许一次性上传的附件个数，例如 <code>10</code></td></tr></tbody></table><h3 id="Markdown-markdown"><a href="#Markdown-markdown" class="headerlink" title="Markdown (markdown)"></a>Markdown (<code>markdown</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLE_HARD_LINE_BREAK</code></td><td>指示是否启用硬性换行扩展</td></tr><tr><td><code>CUSTOM_URL_SCHEMES</code></td><td>允许被解析为链接的自定义 URL 方案，例如 <code>git</code>（用于 <code>git://</code>）和<code>magnet</code>（用于 <code>magnet://</code>）</td></tr><tr><td><code>FILE_EXTENSIONS</code></td><td>需要被渲染为 Markdown 格式的文件名后缀，通过逗号分隔。如果是无后缀名的文件，则单独放置一个逗号，例如：<code>.markdown,</code></td></tr></tbody></table><h3 id="Smartypants-smartypants"><a href="#Smartypants-smartypants" class="headerlink" title="Smartypants (smartypants)"></a>Smartypants (<code>smartypants</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>指示是否启用 Smartypants 扩展</td></tr></tbody></table><h3 id="HTTP-http"><a href="#HTTP-http" class="headerlink" title="HTTP (http)"></a>HTTP (<code>http</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ACCESS_CONTROL_ALLOW_ORIGIN</code></td><td>头信息 <code>Access-Control-Allow-Origin</code> 的自定义值，默认为空，即不响应此头信息</td></tr></tbody></table><h3 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库 (database)"></a>数据库 (<code>database</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>DB_TYPE</code></td><td>数据库类型，可以是 <code>mysql</code>、<code>postgres</code>、<code>mssql</code> 或 <code>sqlite3</code></td></tr><tr><td><code>HOST</code></td><td>数据库主机地址与端口</td></tr><tr><td><code>NAME</code></td><td>数据库名称</td></tr><tr><td><code>USER</code></td><td>数据库用户名</td></tr><tr><td><code>PASSWD</code></td><td>数据库用户密码</td></tr><tr><td><code>SSL_MODE</code></td><td>仅限 PostgreSQL 使用</td></tr><tr><td><code>PATH</code></td><td>仅限 SQLite3 使用，数据库文件路径</td></tr></tbody></table><h3 id="应用管理-admin"><a href="#应用管理-admin" class="headerlink" title="应用管理 (admin)"></a>应用管理 (<code>admin</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>DISABLE_REGULAR_ORG_CREATION</code></td><td>激活该选项来禁止普通用户（非管理员）创建组织</td></tr></tbody></table><h3 id="安全-security"><a href="#安全-security" class="headerlink" title="安全 (security)"></a>安全 (<code>security</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>INSTALL_LOCK</code></td><td>用于指示是否允许访问安装页面（该页面可以设置管理员帐号，因此该选项非常重要）</td></tr><tr><td><code>SECRET_KEY</code></td><td>全局的加密密钥，<strong>务必修改该值以确保您的服务器安全</strong>（会在每次安装时自动生成随机字符串）</td></tr><tr><td><code>LOGIN_REMEMBER_DAYS</code></td><td>记住登录的天数</td></tr><tr><td><code>COOKIE_USERNAME</code></td><td>记录用户名的 Cookie 名称</td></tr><tr><td><code>COOKIE_REMEMBER_NAME</code></td><td>记录用户自动登录信息的 Cookie 名称</td></tr><tr><td><code>REVERSE_PROXY_AUTHENTICATION_USER</code></td><td>反向代理认证用户的 Header 字段名</td></tr></tbody></table><h3 id="服务-service"><a href="#服务-service" class="headerlink" title="服务 (service)"></a>服务 (<code>service</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ACTIVE_CODE_LIVE_MINUTES</code></td><td>激活码的有效期，单位为分钟</td></tr><tr><td><code>RESET_PASSWD_CODE_LIVE_MINUTES</code></td><td>重置密码的有效期，单位为分钟</td></tr><tr><td><code>REGISTER_EMAIL_CONFIRM</code></td><td>激活该选项来要求注册用户必须验证邮箱，要求已启用 <code>Mailer</code></td></tr><tr><td><code>DISABLE_REGISTRATION</code></td><td>激活该选项来禁止用户注册功能，只能由管理员创建帐号</td></tr><tr><td><code>SHOW_REGISTRATION_BUTTON</code></td><td>用于指示是否显示注册按钮</td></tr><tr><td><code>REQUIRE_SIGNIN_VIEW</code></td><td>激活该选项来要求用户必须登录才能浏览任何页面</td></tr><tr><td><code>ENABLE_CACHE_AVATAR</code></td><td>激活该选项来缓存 Gravatar 的头像</td></tr><tr><td><code>ENABLE_NOTIFY_MAIL</code></td><td>激活该选项来发送通知邮件给关注者，例如创建 issue 时，要求已启用 <code>Mailer</code></td></tr><tr><td><code>ENABLE_REVERSE_PROXY_AUTHENTICATION</code></td><td>激活该选项来开启反向代理用户认证，请从 <a href="https://github.com/gogs/gogs/issues/165">#165</a> 了解更多信息</td></tr><tr><td><code>ENABLE_REVERSE_PROXY_AUTO_REGISTRATION</code></td><td>激活该选项来开启反向代理用户认证的自动注册功能</td></tr><tr><td><code>DISABLE_MINIMUM_KEY_SIZE_CHECK</code></td><td>激活该选项来禁止检查响应类型的密钥最小长度</td></tr><tr><td><code>ENABLE_CAPTCHA</code></td><td>激活该选项以在用户注册时要求输入验证码</td></tr></tbody></table><h3 id="Web-钩子-webhook"><a href="#Web-钩子-webhook" class="headerlink" title="Web 钩子 (webhook)"></a>Web 钩子 (<code>webhook</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>TYPES</code></td><td>启动的 Web 钩子类型，可以是 <code>gogs</code>、<code>slack</code>、<code>discord</code>或<code>dingtalk</code></td></tr><tr><td><code>QUEUE_LENGTH</code></td><td>Web钩子队列长度，如果发现部分Webhook未能成功触发，可考虑增加该值</td></tr><tr><td><code>DELIVER_TIMEOUT</code></td><td>发送通知的超时时间，以秒为单位</td></tr><tr><td><code>SKIP_TLS_VERIFY</code></td><td>指示是否允许向具有非信任证书的地址发送通知</td></tr><tr><td><code>PAGING_NUM</code></td><td>Web 钩子历史页面每页显示记录条数</td></tr></tbody></table><h3 id="邮件-mailer"><a href="#邮件-mailer" class="headerlink" title="邮件 (mailer)"></a>邮件 (<code>mailer</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>启用该选项以激活邮件服务</td></tr><tr><td><code>SUBJECT_PREFIX</code></td><td>邮件标题的前缀</td></tr><tr><td><code>HOST</code></td><td>SMTP 主机地址与端口</td></tr><tr><td><code>DISABLE_HELO</code></td><td>禁用 HELO 操作</td></tr><tr><td><code>HELO_HOSTNAME</code></td><td>HELO 操作的自定义主机名</td></tr><tr><td><code>SKIP_VERIFY</code></td><td>不验证自签发证书的有效性</td></tr><tr><td><code>FROM</code></td><td>邮箱的来自地址，遵循 RFC 5322规范，可以是一个单纯的邮箱地址或者 <code>&quot;名字&quot; &lt;email@example.com&gt;</code> 的形式</td></tr><tr><td><code>USER</code></td><td>邮箱用户名</td></tr><tr><td><code>PASSWD</code></td><td>邮箱密码</td></tr><tr><td><code>USE_PLAIN_TEXT</code></td><td>使用 <code>text/plain</code> 作为邮件内容格式</td></tr></tbody></table><p>备注：Gogs 仅支持使用 STARTTLS 的 SMTP 协议</p><h3 id="缓存-cache"><a href="#缓存-cache" class="headerlink" title="缓存 (cache)"></a>缓存 (<code>cache</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ADAPTER</code></td><td>缓存引擎适配器，可以为 <code>memory</code>、<code>redis</code> 或 <code>memcache</code>。如果您使用 <code>redis</code> 或 <code>memcache</code>，请确保使用 <code>-tags</code> 选项重新构建所有依赖，例如：<code>go build -tags=&#39;redis&#39;</code></td></tr><tr><td><code>INTERVAL</code></td><td>仅限内存缓存使用，GC 周期，单位为秒</td></tr><tr><td><code>HOST</code></td><td>仅限 redis 和 memcache 使用，主机地址和端口号</td></tr><tr><td>-</td><td>Redis：<code>network=tcp,addr=127.0.0.1:6379,password=macaron,db=0,pool_size=100,idle_timeout=180</code></td></tr><tr><td>-</td><td>Memache：<code>127.0.0.1:9090;127.0.0.1:9091</code></td></tr></tbody></table><h3 id="会话-session"><a href="#会话-session" class="headerlink" title="会话 (session)"></a>会话 (<code>session</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>PROVIDER</code></td><td>Session 引擎提供者，可以是 <code>memory</code>、<code>file</code>、<code>redis</code> 或 <code>mysql</code></td></tr><tr><td><code>PROVIDER_CONFIG</code></td><td>如果提供者为 file，则为文件根目录；如果为其它提供者，则为主机地址和端口号</td></tr><tr><td><code>COOKIE_SECURE</code></td><td>激活该选项以要求所有 session 操作均通过 HTTPS</td></tr><tr><td><code>GC_INTERVAL_TIME</code></td><td>GC 周期，单位为秒</td></tr></tbody></table><h3 id="图片-picture"><a href="#图片-picture" class="headerlink" title="图片 (picture)"></a>图片 (<code>picture</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>AVATAR_UPLOAD_PATH</code></td><td>存放用户上传头像的目录</td></tr><tr><td><code>GRAVATAR_SOURCE</code></td><td>可以是 <code>gravatar</code>、<code>duoshuo</code> 或任何 URL，例如：<code>http://cn.gravatar.com/avatar/</code></td></tr><tr><td><code>DISABLE_GRAVATAR</code></td><td>激活该选项来仅使用本地头像</td></tr><tr><td><code>ENABLE_FEDERATED_AVATAR</code></td><td>激活该选项来启用 Federated 头像服务（<a href="http://www.libravatar.org),当/">http://www.libravatar.org），当</a> Gravatar 被禁用时此选项无法生效</td></tr></tbody></table><h3 id="附件-attachment"><a href="#附件-attachment" class="headerlink" title="附件 (attachment)"></a>附件 (<code>attachment</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>激活该选项以允许用户上传附件</td></tr><tr><td><code>PATH</code></td><td>存放附件的路径</td></tr><tr><td><code>ALLOWED_TYPES</code></td><td>允许上传的 MIME 类型，例如 “image/jpeg|image/png”，使用 <code>*/*</code> 允许所有类型的文件</td></tr><tr><td><code>MAX_SIZE</code></td><td>最大允许上传的附件体积，单位为 MB，例如 <code>4</code></td></tr><tr><td><code>MAX_FILES</code></td><td>最大允许一次性上传的附件个数，例如 <code>5</code></td></tr></tbody></table><h3 id="时间-time"><a href="#时间-time" class="headerlink" title="时间 (time)"></a>时间 (<code>time</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>FORMAT</code></td><td>指定日期的输出格式，默认为 RFC1123，其它可选的格式为 ANSIC、UnixDate、RubyDate、RFC822、RFC822Z、RFC850、RFC1123、RFC1123Z、RFC3339、RFC3339Nano、Kitchen、Stamp、StampMilli、StampMicro 和 StampNano。访问 <a href="http://golang.org/pkg/time/#pkg-constants">http://golang.org/pkg/time/#pkg-constants</a> 查看详情</td></tr></tbody></table><h3 id="日志-log"><a href="#日志-log" class="headerlink" title="日志 (log)"></a>日志 (<code>log</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ROOT_PATH</code></td><td>日志文件的根目录</td></tr><tr><td><code>MODE</code></td><td>日志记录模式，默认为 <code>console</code>。如果想要开启多模式，请使用逗号分割，例如：<code>&quot;console, file&quot;</code></td></tr><tr><td><code>LEVEL</code></td><td>基本日志级别，默认为 <code>Trace</code></td></tr></tbody></table><h4 id="日志-控制台-log-console"><a href="#日志-控制台-log-console" class="headerlink" title="日志 - 控制台 (log.console)"></a>日志 - 控制台 (<code>log.console</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>LEVEL</code></td><td>控制台日志级别，留空则继承父值</td></tr></tbody></table><h4 id="日志-文件-log-file"><a href="#日志-文件-log-file" class="headerlink" title="日志 - 文件 (log.file)"></a>日志 - 文件 (<code>log.file</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>LEVEL</code></td><td>文件日志级别，留空则继承父值</td></tr><tr><td><code>LOG_ROTATE</code></td><td>激活该选项以启用日志文件自转</td></tr><tr><td><code>DAILY_ROTATE</code></td><td>激活该选项以进行日常自转</td></tr><tr><td><code>MAX_SIZE_SHIFT</code></td><td>自转需要达到的最大文件体积，使用位左移，默认为 28 即 1 &lt;&lt; 28，表示 256MB</td></tr><tr><td><code>MAX_LINES</code></td><td>自转需要达到的最大文件行数，默认为 <code>1000000</code></td></tr><tr><td><code>MAX_DAYS</code></td><td>保留自转文件的最长期限，默认为 <code>7</code> 天后删除</td></tr></tbody></table><h4 id="日志-Slack-log-slack"><a href="#日志-Slack-log-slack" class="headerlink" title="日志 - Slack (log.slack)"></a>日志 - Slack (<code>log.slack</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>LEVEL</code></td><td>Slack 日志级别，留空则继承父值</td></tr><tr><td><code>URL</code></td><td>Slack Web 钩子 URL</td></tr></tbody></table><h4 id="日志-Discord-log-discord"><a href="#日志-Discord-log-discord" class="headerlink" title="日志 - Discord (log.discord)"></a>日志 - Discord (<code>log.discord</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>LEVEL</code></td><td>Discord 日志级别，留空则继承父值</td></tr><tr><td><code>URL</code></td><td>Discord Web 钩子 URL</td></tr><tr><td><code>USERNAME</code></td><td>在 Web 钩子中显示的用户名</td></tr></tbody></table><h3 id="Cron-cron"><a href="#Cron-cron" class="headerlink" title="Cron (cron)"></a>Cron (<code>cron</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>激活该选项以允许周期性运行 Cron 任务</td></tr><tr><td><code>RUN_AT_START</code></td><td>激活该选项以允许在启动时执行 Cron 任务</td></tr></tbody></table><h4 id="Cron-更新镜像-cron-update-mirrors"><a href="#Cron-更新镜像-cron-update-mirrors" class="headerlink" title="Cron - 更新镜像 (cron.update_mirrors)"></a>Cron - 更新镜像 (<code>cron.update_mirrors</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>SCHEDULE</code></td><td>定时更新仓库镜像的 Cron 语法，例如：<code>@every 1h</code></td></tr></tbody></table><h4 id="Cron-仓库健康检查-cron-repo-health-check"><a href="#Cron-仓库健康检查-cron-repo-health-check" class="headerlink" title="Cron - 仓库健康检查 (cron.repo_health_check)"></a>Cron - 仓库健康检查 (<code>cron.repo_health_check</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>SCHEDULE</code></td><td>定时进行仓库健康检查的 Cron 语法，例如：<code>@every 24h</code></td></tr><tr><td><code>TIMEOUT</code></td><td>仓库健康检查超时的定义语法，例如：<code>60s</code></td></tr><tr><td><code>ARGS</code></td><td><code>git fsck</code> 命令的参数，例如：<code>--unreachable --tags</code></td></tr></tbody></table><h4 id="Cron-仓库统计检查-cron-check-repo-stats"><a href="#Cron-仓库统计检查-cron-check-repo-stats" class="headerlink" title="Cron - 仓库统计检查 (cron.check_repo_stats)"></a>Cron - 仓库统计检查 (<code>cron.check_repo_stats</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>RUN_AT_START</code></td><td>激活该选项以在启动时执行仓库统计检查</td></tr><tr><td><code>SCHEDULE</code></td><td>定时进行仓库统计检查的 Cron 语法，例如：<code>@every 24h</code></td></tr></tbody></table><h4 id="Cron-仓库归档清理-cron-repo-archive-cleanup"><a href="#Cron-仓库归档清理-cron-repo-archive-cleanup" class="headerlink" title="Cron - 仓库归档清理 (cron.repo_archive_cleanup)"></a>Cron - 仓库归档清理 (<code>cron.repo_archive_cleanup</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>RUN_AT_START</code></td><td>激活该选项以在启动时执行仓库归档清理</td></tr><tr><td><code>SCHEDULE</code></td><td>定时进行仓库归档清理的 Cron 语法，例如：<code>@every 24h</code></td></tr><tr><td><code>OLDER_THAN</code></td><td>仓库归档的文件有效期，过期的归档将被清理，例如：<code>24h</code></td></tr></tbody></table><h3 id="Git-git"><a href="#Git-git" class="headerlink" title="Git (git)"></a>Git (<code>git</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>DISABLE_DIFF_HIGHLIGHT</code></td><td>激活该选项以禁用行内差异高亮</td></tr><tr><td><code>MAX_GIT_DIFF_LINES</code></td><td>差异对比页面单个文件显示的最大行数</td></tr><tr><td><code>MAX_GIT_DIFF_LINE_CHARACTERS</code></td><td>差异对比页面单行显示的最大字符数</td></tr><tr><td><code>MAX_GIT_DIFF_FILES</code></td><td>差异对比页面文件显示的最多个数</td></tr><tr><td><code>GC_ARGS</code></td><td><code>git gc</code> 命令的参数，例如：<code>--aggressive --auto</code></td></tr></tbody></table><h4 id="Git-超时-git-timeout"><a href="#Git-超时-git-timeout" class="headerlink" title="Git - 超时 (git.timeout)"></a>Git - 超时 (<code>git.timeout</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>MIGRATE</code></td><td>仓库迁移操作超时，默认为 <code>600</code> 秒</td></tr><tr><td><code>MIRROR</code></td><td>仓库镜像同步操作超时，默认为 <code>300</code> 秒</td></tr><tr><td><code>CLONE</code></td><td>仓库克隆操作超时，默认为 <code>300</code> 秒</td></tr><tr><td><code>PULL</code></td><td>仓库拉取操作超时，默认为 <code>300</code> 秒</td></tr><tr><td><code>GC</code></td><td>仓库垃圾回收操作超时，默认为 <code>60</code> 秒</td></tr></tbody></table><h3 id="UI-ui"><a href="#UI-ui" class="headerlink" title="UI (ui)"></a>UI (<code>ui</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>EXPLORE_PAGING_NUM</code></td><td>探索页面每页显示仓库的数量</td></tr><tr><td><code>ISSUE_PAGING_NUM</code></td><td>每页显示工单（Issue）的数量（应用到所有以列表形式显示工单的页面）</td></tr><tr><td><code>FEED_MAX_COMMIT_NUM</code></td><td>一条最新活动中显示代码提交（Commit）的最大数量</td></tr><tr><td><code>THEME_COLOR_META_TAG</code></td><td>被用于 Android &gt;= 5.0 版本 “theme-color” 标记的值，无效的值将被忽略并使用默认值（<a href="https://developers.google.com/web/updates/2014/11/Support-for-theme-color-in-Chrome-39-for-Android">查看详情</a>）</td></tr><tr><td><code>MAX_DISPLAY_FILE_SIZE</code></td><td>显示到页面的最大文件体积（Byte）</td></tr></tbody></table><h4 id="UI-Admin-ui-admin"><a href="#UI-Admin-ui-admin" class="headerlink" title="UI - Admin (ui.admin)"></a>UI - Admin (<code>ui.admin</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>USER_PAGING_NUM</code></td><td>用户管理页面每页显示记录条数</td></tr><tr><td><code>REPO_PAGING_NUM</code></td><td>仓库管理页面每页显示记录条数</td></tr><tr><td><code>NOTICE_PAGING_NUM</code></td><td>系统提示管理页面每页显示记录条数</td></tr><tr><td><code>ORG_PAGING_NUM</code></td><td>组织管理页面每页显示记录条数</td></tr></tbody></table><h4 id="Prometheus-prometheus"><a href="#Prometheus-prometheus" class="headerlink" title="Prometheus (prometheus)"></a>Prometheus (<code>prometheus</code>)</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>ENABLED</code></td><td>激活该选项以启用 Prometheus 监控信息，默认为 <code>true</code></td></tr><tr><td><code>ENABLE_BASIC_AUTH</code></td><td>激活该选项以启用 HTTP 基本认证保护监控信息数据，默认为 <code>false</code></td></tr><tr><td><code>BASIC_AUTH_USERNAME</code></td><td>HTTP 基本认证的用户名</td></tr><tr><td><code>BASIC_AUTH_PASSWORD</code></td><td>HTTP 基本认证的密码</td></tr></tbody></table><h3 id="其他-other"><a href="#其他-other" class="headerlink" title="其他 (other)"></a>其他 (<code>other</code>)</h3><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>SHOW_FOOTER_BRANDING</code></td><td>激活该选项以在页脚显示 Gogs 推广信息</td></tr><tr><td><code>SHOW_FOOTER_VERSION</code></td><td>激活该选项以在页脚显示 Gogs 版本信息</td></tr><tr><td><code>SHOW_FOOTER_TEMPLATE_LOAD_TIME</code></td><td>激活该选项以在页脚显示 Gogs 模板加载时间</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>CI</tag>
      
      <tag>gogs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用consul+nginx-upsync实现动态负载</title>
    <link href="/2019/12/01/212/"/>
    <url>/2019/12/01/212/</url>
    
    <content type="html"><![CDATA[<p>这是前一段时间学习的课程上面的，自己实际操作了一下，详细操作及说明如下。</p><hr><p>如果Nginx遇到大流量和高负载，修改配置文件重启可能并不总是那么方便，因为恢复Nginx并重载配置会进一步增加系统负载，并很可能暂时降低性能。而一个个修改配置文件也是很容易出错和费时间的操作。</p><p>这时候不妨试试consul+nginx-upsync-module实现Nginx的动态负载。</p><h2 id="nginx-upsync-module"><a href="#nginx-upsync-module" class="headerlink" title="nginx-upsync-module"></a>nginx-upsync-module</h2><p>nginx-upsync-module 提供了动态的负载均衡，它可以从consul或etcd同步upstreams，动态修改后端服务器属性（weight，max_fails，down…），而不需要重新加载nginx。这样我们通过它实现平滑伸缩，而不严重地影响性能。</p><h4 id="利用docker安装"><a href="#利用docker安装" class="headerlink" title="利用docker安装"></a>利用docker安装</h4><p>我已经基于centos7构建了一个镜像 13sai/nginx-lua-upsync ，你可以使用下面的命令启动一个容器</p><blockquote><p>docker run -itd –name=nginx-upsync -p 8008:80 -p 9501:9501 -p 9502:9502 -p 9503:9503 -p 8500:8500 13sai/nginx-lua-upsync</p></blockquote><p>当然，你也可以不使用docker自行搭建，添加nginx-upsync-module模块可以参考<a href="https://learnku.com/articles/36567">nginx模块lua模块</a>。</p><ul><li><a href="https://github.com/weibocom/nginx-upsync-module#installation">nginx-upsync-module的git地址</a></li></ul><h4 id="进入容器配置"><a href="#进入容器配置" class="headerlink" title="进入容器配置"></a>进入容器配置</h4><blockquote><p>docker exec -it nginx-upsync /bin/bash</p></blockquote><blockquote><p>cd /usr/local/nginx/conf</p></blockquote><blockquote><p>echo “server host.docker.internal:9501 weight=1 fail_timeout=10 max_fails=3;” &gt;&gt; servers.conf</p></blockquote><blockquote><p>vi nginx.conf</p></blockquote> <div class="code-wrapper"><pre><code class="hljs awk"> <span class="hljs-comment">#nginx.conf 主要配置</span> ...  upstream <span class="hljs-number">13</span>sai&#123;    upsync <span class="hljs-number">192.168</span>.<span class="hljs-number">65.2</span>:<span class="hljs-number">8500</span><span class="hljs-regexp">/v1/</span>kv<span class="hljs-regexp">/upstreams/</span>test-server upsync_timeout=<span class="hljs-number">6</span>m upsync_interval=<span class="hljs-number">500</span>ms upsync_type=consul strong_dependency=off;    upsync_dump_path <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/servers.conf;    include <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/servers.conf;&#125;server &#123;    listen       <span class="hljs-number">80</span>;    location / &#123;proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">13</span>sai;    &#125;    ...    &#125;...</code></pre></div><h4 id="upsync语法说明"><a href="#upsync语法说明" class="headerlink" title="upsync语法说明"></a>upsync语法说明</h4><div class="code-wrapper"><pre><code class="hljs routeros">语法：syntax: upsync <span class="hljs-variable">$consul</span>/etcd.api.com:<span class="hljs-variable">$port</span>/v1/kv/upstreams/<span class="hljs-variable">$upstream_name</span>/ [<span class="hljs-attribute">upsync_type</span>=consul/etcd] [<span class="hljs-attribute">upsync_interval</span>=second/minutes] [<span class="hljs-attribute">upsync_timeout</span>=second/minutes] [<span class="hljs-attribute">strong_dependency</span>=off/on]默认值：无，如果省略参数，则默认参数为upsync_interval = 5s upsync_timeout = 6m strong_dependency = off描述：从 consul/etcd 中拉取upstreamsupsync 定义从consul/etcd拉取最新的upstream信息并存到本地的操作upsync_timeout 定义从consul/etcd拉取配置的超时时间upsync_interval 定义从consul/etc拉取配置的间隔时间upsync_type 定义使用配置服务类型strong_dependency 启动时是否强制依赖配置服务器，如果配置为on,则拉取失败，nginx同样会启用失败upsync_dump_path 定义从consul/etcd拉取配置后持久化到的本地的文件路径，这样即使 consul/etcd出问题了，本地同样会有备份文件</code></pre></div><blockquote><p>注意下面这个文件必须要有，文件路径和名称可以自定义，nginx-upsync-module会将负载信息缓存到此文件，否则Nginx启动会报错。</p></blockquote><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment">#servers.conf，192.168.x.xxx是我的宿主机ip</span><span class="hljs-built_in"></span><span class="hljs-built_in">server </span>192.168.x.xxx:9501 <span class="hljs-attribute">weight</span>=20 <span class="hljs-attribute">max_fails</span>=1 <span class="hljs-attribute">fail_timeout</span>=5s;</code></pre></div><p>重启nginx</p><blockquote><p>/usr/local/nginx/sbin/nginx -t</p></blockquote><blockquote><p>/usr/local/nginx/sbin/nginx -s reload</p></blockquote><p>这里虽然我们还未启动consul，但没有什么影响，upsync会去拉取，也必然会失败，servers.conf就不会更新，Nginx的error日志会有信息。</p><h2 id="利用swoole启动3个http服务"><a href="#利用swoole启动3个http服务" class="headerlink" title="利用swoole启动3个http服务"></a>利用swoole启动3个http服务</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 可启动3个server，端口分别为9501，9502，9503，输出也做对应修改</span><span class="hljs-variable">$http</span> = <span class="hljs-keyword">new</span> Swoole\Http\Server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9501</span>);<span class="hljs-variable">$http</span>-&gt;on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-variable">$response</span></span>) </span>&#123;    <span class="hljs-variable">$response</span>-&gt;end(<span class="hljs-string">&quot;9501&quot;</span>);&#125;);</code></pre></div><h2 id="consul安装"><a href="#consul安装" class="headerlink" title="consul安装"></a>consul安装</h2><blockquote><p>这里consul只做一个kv存储，我自己也是第一次用，就不去做过多介绍了。</p></blockquote><p><a href="https://www.consul.io/downloads.html">下载地址</a></p><p>解压到你需要的目录，主要也就是一个consul可执行文件。（这里我装在我的电脑，而不是刚才的docker容器）</p><p>命令可看文档：<a href="https://book-consul-guide.vnzmi.com/">Consul 简介和快速入门</a></p><h4 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h4><blockquote><p>nohup ./consul agent -dev &amp;</p></blockquote><p>为了方便，我们也没有启动集群，生产环境建议使用consul集群。</p><h4 id="UI查看"><a href="#UI查看" class="headerlink" title="UI查看"></a>UI查看</h4><blockquote><p><a href="http://127.0.0.1:8500/">http://127.0.0.1:8500/</a></p></blockquote><h4 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h4><blockquote><p>./consul members</p></blockquote><blockquote><p>curl 127.0.0.1:8500/v1/catalog/nodes</p></blockquote><h4 id="查看kv值"><a href="#查看kv值" class="headerlink" title="查看kv值"></a>查看kv值</h4><blockquote><p>curl -v <a href="http://127.0.0.1:8500/v1/kv//?recurse">http://127.0.0.1:8500/v1/kv/\?recurse</a></p></blockquote><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><blockquote><p>curl -X PUT -d ‘{“weight”:20,”max_fails”:2,”fail_timeout”:5}’ <a href="http://127.0.0.1:8500/v1/kv/upstreams/test-server/192.168.x.xxx:9502">http://127.0.0.1:8500/v1/kv/upstreams/test-server/192.168.x.xxx:9502</a></p></blockquote><p>此处192.168.x.xxx是因为我创建的docker容器的宿主机ip。</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>curl -X DELETE <a href="http://127.0.0.1:8500/v1/kv/upstreams/test-server/192.168.x.xxx:9502">http://127.0.0.1:8500/v1/kv/upstreams/test-server/192.168.x.xxx:9502</a></p></blockquote><hr><p>我们可以通过添加和删除来测试，查看<a href="http://127.0.0.1:8008/%E6%9D%A5%E6%9F%A5%E7%9C%8B%E8%BE%93%E5%87%BA%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%9C%8BNginx%E9%87%8C%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6servers.conf%EF%BC%8C%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E4%BD%A0%E6%93%8D%E4%BD%9Cconsul%EF%BC%8C%E4%BC%9A%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98Nginx%E7%9A%84upstream%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%AE%9E%E7%8E%B0%E4%BA%86Nginx%E7%9A%84%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E3%80%82">http://127.0.0.1:8008/来查看输出，也可以看看Nginx里的配置文件servers.conf，你会看到你操作consul，会动态改变Nginx的upstream，这样就实现了Nginx的动态扩容。</a></p><hr><p>对consul和docker的学习还不够深入，文中如有错误，欢迎指正交流。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>consul</tag>
      
      <tag>SLB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx配置常用参数</title>
    <link href="/2019/11/22/Nginx6/"/>
    <url>/2019/11/22/Nginx6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近在全面学习Nginx，当作笔记了，如有错误，欢迎指出或深入交流。</p></blockquote><h2 id="主模块"><a href="#主模块" class="headerlink" title="主模块"></a>主模块</h2><div class="code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 配置用户或者组，默认为nobody nobody。</span><span class="hljs-meta">#user www www;  </span> #Nginx开启的worker进程数，建议为CPU的核数<span class="hljs-meta">#worker_processes 2; </span><span class="hljs-meta">#指定nginx进程运行文件存放地址</span><span class="hljs-meta">#pid /nginx/pid/nginx.pid;</span><span class="hljs-meta">#指定日志路径，级别。这个设置可以放入全局块、http块、server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span>error_log log/error.log debug; <span class="hljs-meta">#可以在任意地方使用include指令实现配置文件的包含，类似于apache中的include方法，可减少主配置文件长度。</span>include vhosts<span class="hljs-comment">/*.conf;</span></code></pre></div><h2 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h2><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">events</span> &#123;    <span class="hljs-comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span>    <span class="hljs-attribute">accept_mutex</span> <span class="hljs-literal">on</span>;         <span class="hljs-comment">#默认: 500ms 如果一个进程没有互斥锁，它将延迟至少多长时间。默认情况下，延迟是500ms 。</span>    <span class="hljs-attribute">accept_mutex_delay</span> <span class="hljs-number">100ms</span>;         <span class="hljs-comment">#设置一个进程是否同时接受多个网络连接，默认为off</span>    <span class="hljs-attribute">multi_accept</span> <span class="hljs-literal">on</span>;        <span class="hljs-comment">#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport，不建议设置，nginx会自行选择</span>    <span class="hljs-comment">#use epoll;</span>        <span class="hljs-comment">#最大连接数，默认为512</span>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;&#125;</code></pre></div><h2 id="http部分"><a href="#http部分" class="headerlink" title="http部分"></a>http部分</h2><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;    <span class="hljs-comment">#文件扩展名与文件类型映射表</span>    <span class="hljs-attribute">include</span>       mime.types;        <span class="hljs-comment"># 默认文件类型，默认为text/plain</span>    <span class="hljs-attribute">default_type</span>  application/octet-stream;         <span class="hljs-comment">#取消服务日志 </span>    <span class="hljs-comment">#access_log off; </span>        <span class="hljs-comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;           <span class="hljs-comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span>    <span class="hljs-attribute">sendfile_max_chunk</span> <span class="hljs-number">100k</span>;          <span class="hljs-comment">#连接超时时间，默认为75s，可以在http，server，location块。</span>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;          <span class="hljs-comment">#开启gzip资源压缩</span>    <span class="hljs-attribute">gzip</span>  <span class="hljs-literal">on</span>;         <span class="hljs-comment"># 负载均衡，详细可看了一篇文章：https://learnku.com/articles/36737</span>    <span class="hljs-attribute">upstream</span> blog &#123;           <span class="hljs-attribute">server</span> <span class="hljs-number">192.167.20.19:8081</span>;        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.10.121:8080</span> weight=<span class="hljs-number">5</span>;    &#125;        <span class="hljs-comment">#设定请求缓冲</span>    <span class="hljs-attribute">client_header_buffer_size</span>    <span class="hljs-number">128k</span>;    <span class="hljs-attribute">large_client_header_buffers</span>  <span class="hljs-number">4</span> <span class="hljs-number">128k</span>;        <span class="hljs-comment">#上传文件的大小限制  默认1m</span>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">8m</span>;    <span class="hljs-section">server</span> &#123;        <span class="hljs-comment">#单连接请求上限次数。</span>        <span class="hljs-attribute">keepalive_requests</span> <span class="hljs-number">120</span>;                <span class="hljs-comment">#监听端口</span>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;                   <span class="hljs-comment">#监听地址</span>        <span class="hljs-attribute">server_name</span>  blog.13sai.com;                  <span class="hljs-comment">#设定日志格式</span>        <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;                              <span class="hljs-attribute">access_log</span>  /data/logs/access.log  main;                <span class="hljs-comment"># 根目录</span>        <span class="hljs-attribute">root</span> /www/web/public;                 <span class="hljs-comment"># 定义错误提示页面</span>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;                        <span class="hljs-attribute">location</span> /static/ &#123;            <span class="hljs-comment">#root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。</span>            <span class="hljs-comment">#root的处理结果是：root路径＋location路径</span>            <span class="hljs-comment">#alias的处理结果是：使用alias路径替换location路径</span>            <span class="hljs-attribute">alias</span> /www/static/;                        <span class="hljs-comment">#过期30天，静态文件不怎么更新，过期可以设大一点,如果频繁更新，则可以设置得小一点。</span>            <span class="hljs-attribute">expires</span> <span class="hljs-number">30d</span>;        &#125;                <span class="hljs-comment"># 处理php请求到fpm端口</span>        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;            <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;            <span class="hljs-attribute">fastcgi_index</span>  index.php;            <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;            <span class="hljs-attribute">include</span>        fastcgi_params;        &#125;                <span class="hljs-attribute">location</span> / &#123;            <span class="hljs-attribute">proxy_set_header</span> Host $host;            <span class="hljs-attribute">proxy_set_header</span>  X-Real-IP  $remote_addr;            <span class="hljs-attribute">proxy_pass</span>  http://blog;  <span class="hljs-comment">#请求转向blog 定义的服务器列表 </span>        &#125;                <span class="hljs-comment">#禁止访问文件</span>        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /.git</span> &#123;            <span class="hljs-attribute">deny</span> all;            <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-comment">#允许的ip </span>        &#125;    &#125;&#125;</code></pre></div><h2 id="部分参数详细说明"><a href="#部分参数详细说明" class="headerlink" title="部分参数详细说明"></a>部分参数详细说明</h2><h4 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h4><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>首先选择所有字符串完全匹配的server_name，如 blog<span class="hljs-number">.13</span>sai.com 。<span class="hljs-number">2.</span>其次选择通配符在前面的server_name，如 *<span class="hljs-number">.13</span>sai.com。<span class="hljs-number">3.</span>再次选择通配符在后面的server_name，如www<span class="hljs-number">.13</span>sai.* 。 <span class="hljs-number">4.</span>最后选择使用正则表达式才匹配的server_name，如 ~^\.sai\.com$如果都不匹配<span class="hljs-number">1</span>、优先选择<span class="hljs-keyword">listen</span>配置项后有<span class="hljs-keyword">default</span>或default_server的 <span class="hljs-number">2</span>、找到匹配<span class="hljs-keyword">listen</span>端口的第一个<span class="hljs-keyword">server</span>块</code></pre></div><h4 id="location"><a href="#location" class="headerlink" title="location"></a>location</h4><div class="code-wrapper"><pre><code class="hljs nim">location语法: location[=|~|~*|^~|@]/uri/<span class="hljs-meta">&#123;...&#125;</span>配置块: server location会尝试根据用户请求中的<span class="hljs-type">URI</span>来匹配上面的/uri表达式，如果可以匹配，就选择 location&#123;&#125;块中的配置来处理用户请求。</code></pre></div><p>location表达式类型</p><div class="code-wrapper"><pre><code class="hljs asciidoc">~ 表示执行一个正则匹配，区分大小写;~* 表示执行一个正则匹配，不区分大小写;^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location; <span class="hljs-section">= 进行普通字符精确匹配。也就是完全匹配;</span>@ 它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</code></pre></div><p>优先级:</p><ul><li>等号类型(=)的优先级最高。一旦匹配成功，则不再查找其他匹配项 </li><li>前缀普通匹配(^~)优先级次之。不支持正则表达式。使用前缀匹配，如果有多个location匹配的话，则使用表达式最长的那个 </li><li>正则表达式类型(~ ~*)的优先级次之。一旦匹配成功，则不再查找其他匹配项 </li><li>常规字符串匹配，如果有多个location匹配的话，则使用表达式最长的那个</li></ul><blockquote><p>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location <del>,</del>* 正则顺序) &gt; (location 部分起始路径)</p></blockquote><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><div class="code-wrapper"><pre><code class="hljs oxygene">语法:return code [text] return code URL;return URL;配置块:server，location，<span class="hljs-keyword">if</span>该指令用于结束规则的执行并返回状态吗给客户端。状态码包括:<span class="hljs-number">204</span>(No Content)、<span class="hljs-number">400</span>(Bad Request)、<span class="hljs-number">402</span>(Payment Required)、<span class="hljs-number">403</span>(Forbidden) <span class="hljs-number">404</span>(<span class="hljs-keyword">Not</span> Found)、<span class="hljs-number">405</span>(<span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">Not</span> <span class="hljs-title">Allowed</span>)、</span><span class="hljs-function">406<span class="hljs-params">(<span class="hljs-keyword">Not</span> Acceptable)</span>、 </span><span class="hljs-function">408<span class="hljs-params">(Request Timeout)</span>、</span><span class="hljs-function">410<span class="hljs-params">(Gone)</span>、</span><span class="hljs-function">411<span class="hljs-params">(Length Required)</span>、</span><span class="hljs-function">413<span class="hljs-params">(Request Entity Too Large)</span>、</span><span class="hljs-function">416<span class="hljs-params">(Requested Range <span class="hljs-keyword">Not</span> Satisfiable)</span>、 500<span class="hljs-params">(Internal Server Error)</span>、</span><span class="hljs-function">501<span class="hljs-params">(<span class="hljs-keyword">Not</span> Implemented)</span>、</span><span class="hljs-function">502<span class="hljs-params">(Bad Gateway)</span>、 </span><span class="hljs-function">503<span class="hljs-params">(Service Unavailable)</span></span><span class="hljs-function">504<span class="hljs-params">(Gateway Timeout)</span>。</span><span class="hljs-function"></span><span class="hljs-function">例如，示例，如果访问的<span class="hljs-title">URL</span>以.<span class="hljs-title">sh</span> .<span class="hljs-title">bash</span> 结尾，返回状态码403 </span><span class="hljs-function"><span class="hljs-title">location</span> ~ .*\.<span class="hljs-params">(sh|bash)</span>?$ <span class="hljs-comment">&#123;</span></span><span class="hljs-comment"><span class="hljs-function">return 403;</span></span><span class="hljs-comment"><span class="hljs-function">&#125;</span></span></code></pre></div><h4 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h4><div class="code-wrapper"><pre><code class="hljs pgsql">执行顺序：<span class="hljs-number">1.</span> 执行<span class="hljs-keyword">server</span>块的rewrite指令(这里的块指的是<span class="hljs-keyword">server</span>关键字后&#123;&#125;包围的区域，其它xx块类似)<span class="hljs-number">2.</span> 执行<span class="hljs-keyword">location</span>匹配<span class="hljs-number">3.</span> 执行选定的<span class="hljs-keyword">location</span>中的rewrite指令如果其中某步URI被重写，则重新循环执行<span class="hljs-number">1</span><span class="hljs-number">-3</span>，直到找到真实存在的文件如果循环超过<span class="hljs-number">10</span>次，则返回<span class="hljs-number">500</span> <span class="hljs-type">Internal</span> <span class="hljs-keyword">Server</span> Error错误语法:rewrite regex replacement [flag]; 默认值:—配置块:<span class="hljs-keyword">server</span>, <span class="hljs-keyword">location</span>, <span class="hljs-keyword">if</span>rewrite是实现URL重写的关键指令，根据regex(正则表达式)部分内容，重定向到replacement，结尾是flag标记。 正则:perl兼容正则表达式语句进行规则匹配替代内容:将正则匹配的内容替换成replacementflag标记:rewrite支持的flag标记</code></pre></div><h6 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h6><div class="code-wrapper"><pre><code class="hljs llvm">语法：if(condition)&#123;...&#125;默认值：无配置块：server<span class="hljs-punctuation">,</span>location对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行。if条件(conditon)可以是如下任何内容:一个变量名；<span class="hljs-keyword">false</span>如果这个变量是空字符串或者以<span class="hljs-number">0</span>开始的字符串；使用<span class="hljs-operator">=</span> <span class="hljs-punctuation">,</span>!<span class="hljs-operator">=</span> 比较的一个变量和字符串是用~， ~*与正则表达式匹配的变量，如果这个正则表达式中包含&#125;，<span class="hljs-comment">;则整个表达式需要用&quot; 或&#x27; 包围</span>使用-f ，<span class="hljs-title">!-f</span> 检查一个文件是否存在使用-d<span class="hljs-punctuation">,</span> <span class="hljs-title">!-d</span> 检查一个目录是否存在使用-e ，<span class="hljs-title">!-e</span> 检查一个文件、目录、符号链接是否存在使用-<span class="hljs-keyword">x</span> ， <span class="hljs-title">!-x</span> 检查一个文件是否可执行</code></pre></div><h6 id="if实例"><a href="#if实例" class="headerlink" title="if实例"></a>if实例</h6><div class="code-wrapper"><pre><code class="hljs coq"><span class="hljs-keyword">if</span> ($http_user_agent~*(mobile|<span class="hljs-type">nokia</span>|<span class="hljs-type">iphone</span>|<span class="hljs-type">ipad</span>|<span class="hljs-type">android</span>|<span class="hljs-type">samsung</span>|<span class="hljs-type">htc</span>|<span class="hljs-type">blackberry</span>)) &#123;    <span class="hljs-built_in">rewrite</span> ^.+ /mobile last; ＃跳转到手机站&#125;<span class="hljs-keyword">if</span> ($request_method = POST) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">405</span>;&#125;<span class="hljs-keyword">if</span> ($slow) &#123;    limit_rate <span class="hljs-number">10</span>k;&#125;<span class="hljs-keyword">if</span> ($invalid_referer) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">403</span>;&#125;</code></pre></div><h6 id="last-amp-break"><a href="#last-amp-break" class="headerlink" title="last &amp; break"></a>last &amp; break</h6><div class="code-wrapper"><pre><code class="hljs crmsh">（<span class="hljs-number">1</span>）last 和 break 当出现在<span class="hljs-keyword">location</span> <span class="hljs-title">之外时，两者的作用是一致的没有任何差异。</span><span class="hljs-title">注意一点就是，他们会跳过所有的在他们之后的rewrite</span> 模块中的指令，去选择自己匹配的<span class="hljs-keyword">location</span><span class="hljs-title">（2</span>）last 和 break 当出现在<span class="hljs-keyword">location</span> <span class="hljs-title">内部时，两者就存在了差异</span><span class="hljs-title">-- last</span>: 使用了last 指令，rewrite 后会跳出<span class="hljs-keyword">location</span> <span class="hljs-title">作用域，重新开始再走一次刚刚的行为</span><span class="hljs-title">-- break</span>: 使用了break 指令，rewrite后不会跳出<span class="hljs-keyword">location</span> <span class="hljs-title">作用域。它的生命也在这个location</span>中终结。解释通俗易懂：last：        重新将rewrite后的地址在server标签中执行break：        将rewrite后的地址在当前location标签中执行</code></pre></div><h6 id="permanent-amp-redirect"><a href="#permanent-amp-redirect" class="headerlink" title="permanent &amp; redirect:"></a>permanent &amp; redirect:</h6><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">permanent</span>: 永久性重定向。请求日志中的状态码为<span class="hljs-number">301</span><span class="hljs-attribute">redirect</span>:临时重定向。请求日志中的状态码为<span class="hljs-number">302</span></code></pre></div><p>从实现功能的角度上去看，permanent 和 redirect 是一样的。不存在好坏。也不存在什么性能上的问题。但是对seo会有影响，这里要根据需要做出选择<br>在 permanent 和 redirect  中提到了 状态码 301 和 302。 </p><p>记住：last 和 break 想对于的访问日志的请求状态码为200</p><p>当你打开一个网页，同时打开debug 模式时，会发现301 和 302 时的行为是这样的。</p><p>第一个请求301 或者 302 后，浏览器重新获取了一个新的URL ，然后会对这个新的URL 重新进行访问。所以当你配置的是permanent 和 redirect ,你对一个URL 的访问请求，落到服务器上至少为2次；而当你配置了last 或者是break 时，你最终的URL 确定下来后，不会将这个URL返回给浏览器，而是将其扔给了fastcgi_pass或者是proxy_pass指令去处理。请求一个URL ，落到服务器上的次数就为1次。</p><p>注意：配置last 在跨域的时候效果和redirect一致，都是返回302状态码，请求地址也发生改变</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h4 id="估算并发"><a href="#估算并发" class="headerlink" title="估算并发"></a>估算并发</h4><p>nginx作为http服务器的时候：</p><div class="code-wrapper"><pre><code class="hljs">max_clients = worker_processes * worker_connections/2</code></pre></div><p>nginx作为反向代理服务器的时候：</p><div class="code-wrapper"><pre><code class="hljs">max_clients = worker_processes * worker_connections/4  </code></pre></div><h4 id="限制每个IP的并发连接数"><a href="#限制每个IP的并发连接数" class="headerlink" title="限制每个IP的并发连接数"></a>限制每个IP的并发连接数</h4><p>demo:定义一个叫“two”的记录区，总容量为 10M（超过大小将请求失败，以变量 $binary_remote_addr 作为会话的判断基准（即一个地址一个会话）。 限制 /download/ 目录下，一个会话只能进行一个连接。 简单点，就是限制 /download/ 目录下，一个IP只能发起一个连接，多过一个，一律503。</p><div class="code-wrapper"><pre><code class="hljs routeros">http &#123;    <span class="hljs-built_in">..</span>.    limit_conn_zone <span class="hljs-variable">$binary_remote_addr</span> <span class="hljs-attribute">zone</span>=two:10m;   <span class="hljs-built_in"> server </span>&#123;        <span class="hljs-built_in">..</span>.                location /download &#123;            limit_conn   two  1;        &#125;    &#125;&#125;</code></pre></div><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>demo:定义一个叫“one”的记录区，占用空间大小为10m（超过大小将请求失败），平均处理的请求频率不能超过每秒一次，也可以设置分钟速率</p><div class="code-wrapper"><pre><code class="hljs routeros">http &#123;    <span class="hljs-built_in">..</span>.            limit_req_zone  <span class="hljs-variable">$binary_remote_addr</span>  <span class="hljs-attribute">zone</span>=one:10m  <span class="hljs-attribute">rate</span>=1r/s;       <span class="hljs-built_in"> server </span>&#123;        <span class="hljs-built_in">..</span>.                location / &#123;            #缓存区队列<span class="hljs-attribute">burst</span>=5个,nodelay表示不延期(超过的请求失败)，即每秒最多可处理rate+burst个,同时处理rate个。            limit_req <span class="hljs-attribute">zone</span>=one <span class="hljs-attribute">burst</span>=5 nodelay;         &#125;    &#125;&#125;</code></pre></div><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><div class="code-wrapper"><pre><code class="hljs php">http&#123;    ...        <span class="hljs-comment">#判断客户端的ip地址是否在白名单列表当中,如果返回为0,则在白名单列表当中,否则返回为1</span>    geo <span class="hljs-variable">$whiteIpList</span> &#123;        <span class="hljs-keyword">default</span>  <span class="hljs-number">1</span>;        <span class="hljs-number">118.24</span>.<span class="hljs-number">109.254</span> <span class="hljs-number">0</span>;        <span class="hljs-number">47.98</span>.<span class="hljs-number">147.0</span>/<span class="hljs-number">24</span> <span class="hljs-number">1</span>;        <span class="hljs-comment">#可以引入一些白名单配置</span>        <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;whiteIP.conf&#x27;</span>    &#125;        <span class="hljs-comment">#如果不在白名单之内,返回客户端的二进制的ip地址</span>    map <span class="hljs-variable">$whiteIpList</span>  <span class="hljs-variable">$limit</span> &#123;        <span class="hljs-keyword">default</span>  <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-number">1</span>   <span class="hljs-variable">$binary_remote_addr</span>;        <span class="hljs-number">0</span>   <span class="hljs-string">&quot;&quot;</span>;    &#125;        <span class="hljs-comment">#如果返回的是空字符串那么速率限制会失效</span>    limit_req_zone <span class="hljs-variable">$limit</span> zone=test:<span class="hljs-number">2</span>m rate=<span class="hljs-number">1</span>r/m;        ...&#125;</code></pre></div><h4 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h4><div class="code-wrapper"><pre><code class="hljs coq">http &#123;    ...    server &#123;        ...                location ~* \.(gif|<span class="hljs-type">jpg</span>|<span class="hljs-type">png</span>|<span class="hljs-type">swf</span>|<span class="hljs-type">flv</span>)$ &#123;            valid_referers none blocked *<span class="hljs-number">.13</span>sai.com;            <span class="hljs-keyword">if</span> ($invalid_referer) &#123;                <span class="hljs-built_in">rewrite</span> ^/ blog<span class="hljs-number">.13</span>sai.com            &#125;        &#125;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx代理缓存</title>
    <link href="/2019/11/22/Nginx1/"/>
    <url>/2019/11/22/Nginx1/</url>
    
    <content type="html"><![CDATA[<p>Nginx的缓存可以简单分成web缓存和代理缓存，本篇文章主要介绍代理缓存。</p><h2 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h2><p>Nginx提供了expires、etag、if-modified-since指令来实现浏览器缓存控制。</p><p>这个配置比较简单，一般可以缓存一些js、css等静态文件。</p><p>对于这几个不想做过多说明，大家可以看两张图，简单理解下。</p><p><img src="https://cdn.learnku.com/uploads/images/201911/19/41489/ZEbgycTmrL.png!/fw/1240" alt="浏览器缓存"></p><p><img src="https://cdn.learnku.com/uploads/images/201911/20/41489/Vo6VBgbiUr.png!/fw/1240" alt="Nginx 代理缓存"></p><h2 id="代理缓存"><a href="#代理缓存" class="headerlink" title="代理缓存"></a>代理缓存</h2><p>代理缓存主要用到proxy模块中的proxy_cache。我们来看一个demo。</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> 13sai&#123;    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:9501</span> weight=<span class="hljs-number">10</span>;&#125;<span class="hljs-comment">#自定义缓存目录,缓存文件大小</span><span class="hljs-attribute">proxy_cache_path</span>  /usr/local/etc/nginx/cache  levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span>  keys_zone=sai_cache:<span class="hljs-number">10m</span>  max_size=<span class="hljs-number">200m</span> inactive=<span class="hljs-number">10m</span>  use_temp_path=<span class="hljs-literal">off</span>;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;    <span class="hljs-attribute">server_name</span>  nginx-t.com;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> http_503;        <span class="hljs-attribute">proxy_pass</span> http://13sai;        <span class="hljs-comment">#启用缓存sai_cache</span>        <span class="hljs-attribute">proxy_cache</span> sai_cache;         <span class="hljs-comment">#定义如何生成缓存的键</span>        <span class="hljs-attribute">proxy_cache_key</span> $scheme$proxy_host$uri$is_args$args;        <span class="hljs-comment">#针对多种请求方法缓存，默认GET HEAD</span>        <span class="hljs-attribute">proxy_cache_methods</span> GET HEAD POST;         <span class="hljs-comment">#为不同的响应状态码设置不同的缓存时间。</span>        <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">302</span> <span class="hljs-number">10m</span>;        <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">404</span>      <span class="hljs-number">1m</span>;        <span class="hljs-comment">#设置响应被缓存的最小请求次数,最少2次才会缓存</span>        <span class="hljs-attribute">proxy_cache_min_uses</span> <span class="hljs-number">1</span>;        <span class="hljs-comment">#开启此功能时，对于相同的请求，同时只允许一个请求发往后端</span>        <span class="hljs-attribute">proxy_cache_lock</span> <span class="hljs-literal">on</span>;         <span class="hljs-comment">#为proxy_cache_lock指令设置锁的超时5s</span>        <span class="hljs-attribute">proxy_cache_lock_timeout</span> <span class="hljs-number">5s</span>;        <span class="hljs-comment">#忽略服务器不缓存的要求</span>        <span class="hljs-attribute">proxy_ignore_headers</span> Cache-Control;     &#125;    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;    <span class="hljs-attribute">location</span> = /50x.html &#123;    &#125;&#125;</code></pre></div><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// server1.php</span><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$http</span> = <span class="hljs-keyword">new</span> Swoole\Http\Server(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9501</span>);<span class="hljs-variable">$http</span>-&gt;on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-variable">$response</span></span>) </span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no cache&quot;</span>.PHP_EOL;    <span class="hljs-variable">$response</span>-&gt;end(<span class="hljs-string">&quot;&lt;h1&gt;9501&lt;/h1&gt;&quot;</span>);&#125;);<span class="hljs-variable">$http</span>-&gt;start();</code></pre></div><blockquote><p>php server1.php #查看控制台输出</p></blockquote><p>发送get和post请求</p><blockquote><p>ab -n10 -c10 <a href="http://nginx-t.com/v/=get">http://nginx-t.com/v\=get</a></p></blockquote><blockquote><p>ab -p ‘data.json’ -n10 -c10 <a href="http://nginx-t.com/v/=post">http://nginx-t.com/v\=post</a></p></blockquote><p>重复提交几次put请求</p><blockquote><p>curl -X PUT <a href="http://nginx-t.com/v/=put">http://nginx-t.com/v\=put</a> </p></blockquote><p>下面是我的测试结果截图（为了方便查看，我在get和post请求之前敲了几个空行）</p><p><img src="https://cdn.learnku.com/uploads/images/201911/20/41489/StGI2M5SyZ.png!/fw/1240" alt="Nginx 缓存"></p><p>下面说明几个参数：</p><h4 id="proxy-cache-path"><a href="#proxy-cache-path" class="headerlink" title="proxy_cache_path"></a>proxy_cache_path</h4><div class="code-wrapper"><pre><code class="hljs routeros">语法:proxy_cache_path path [<span class="hljs-attribute">levels</span>=levels] <span class="hljs-attribute">keys_zone</span>=name:size [<span class="hljs-attribute">inactive</span>=time] [<span class="hljs-attribute">max_size</span>=size] [<span class="hljs-attribute">loader_files</span>=number] [<span class="hljs-attribute">loader_sleep</span>=time] [<span class="hljs-attribute">loader_threshold</span>=time];默认值:—上下文:http</code></pre></div><ul><li>path：缓存数据是保存在文件中的，缓存的键和文件名都是在代理URL上执行MD5的结果。</li><li>levels：定义了缓存的层次结构 <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#当levels=1:2时，表示是两级目录，1和2表示用1位和2位16进制来命名目录名称。在此例中，第一级目录用1位16进制命名，如b；第二级目录用2位16进制命名，如2c。所以此例中一级目录有16个，二级目录有16*16=256个：</span><span class="hljs-attribute">cache</span>/b/<span class="hljs-number">2</span>c/c<span class="hljs-number">75</span>ad<span class="hljs-number">5</span>e<span class="hljs-number">343</span>f<span class="hljs-number">042</span>f<span class="hljs-number">52</span>e<span class="hljs-number">875343425</span>e<span class="hljs-number">51</span>b</code></pre></div></li><li>key_zone:在共享内存中设置一块存储区域来存放缓存的key和metadata(类似使用次数)，这样nginx可以快速判断一个request是否命中或者未命中缓 存，1m可以存储8000个key，10m可以存储80000个key。</li><li>max_size:最大cache空间，如果不指定，会使用掉所有disk space，如果超过max_size参数设置的最大值，使用LRU算法移除缓存数据</li><li>inactive:未被访问文件在缓存中保留时间，默认是10分钟。指定时间内未被访问的缓存文件将被删除。</li><li>loader_files:每次最多加载的数量</li><li>loader_sleeps:每次加载的延时</li><li>loader_threshold:指定每次加载执行的时间</li></ul><h4 id="proxy-cache-lock"><a href="#proxy-cache-lock" class="headerlink" title="proxy_cache_lock"></a>proxy_cache_lock</h4><p>开启此功能时，对于相同的请求，同时只允许一个请求发往后端，并根据proxy_cache_key指令的设置在缓存中植入一个新条目。其他请求相同条目的请求将一直等待，直到缓存中出现相应的内容，或者锁在proxy_cache_lock_timeout指令设置的超时后被释放。</p><h4 id="proxy-cache-valid"><a href="#proxy-cache-valid" class="headerlink" title="proxy_cache_valid"></a>proxy_cache_valid</h4><p>如果仅仅指定了time，</p><blockquote><p>proxy_cache_valid 5m;</p></blockquote><p>那么只有状态码为200、300和302的响应会被缓存。</p><p>如果使用了any参数，那么就可以缓存任何响应：</p><blockquote><p>proxy_cache_valid any 1m;</p></blockquote><h4 id="proxy-ignore-headers"><a href="#proxy-ignore-headers" class="headerlink" title="proxy_ignore_headers"></a>proxy_ignore_headers</h4><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">语法:proxy_ignore_headers field ...;</span><span class="hljs-section">默认值:—</span><span class="hljs-section">上下文:http, server, location</span></code></pre></div><p>不处理后端服务器返回的指定响应头。下面的响应头可以被设置： “X-Accel-Redirect”，“X-Accel-Expires”，“X-Accel-Limit-Rate” ，“X-Accel-Buffering” ， “X-Accel-Charset”，“Expires”，“Cache-Control”，和“Set-Cookie” 。</p><blockquote><p>此参数不建议设置，原则上这些缓存应当后端代码处理。</p></blockquote><h4 id="proxy-cache-use-stale"><a href="#proxy-cache-use-stale" class="headerlink" title="proxy_cache_use_stale"></a>proxy_cache_use_stale</h4><div class="code-wrapper"><pre><code class="hljs coq">语法:proxy_cache_use_stale error | <span class="hljs-type">timeout</span> | <span class="hljs-type">invalid_header</span> | <span class="hljs-type">updating</span> | <span class="hljs-type">http_500</span> | <span class="hljs-type">http_502</span> | <span class="hljs-type">http_503</span> | <span class="hljs-type">http_504</span> | <span class="hljs-type">http_404</span> | <span class="hljs-type">off</span> ...;默认值:proxy_cache_use_stale off;上下文:http, server, location</code></pre></div><p>如果后端服务器出现状况，nginx是可以使用过期的响应缓存的。这条指令就是定义何种条件下允许开启此机制。这条指令的参数与proxy_next_upstream指令的参数相同。</p><h4 id="proxy-cache-bypass与proxy-no-cache"><a href="#proxy-cache-bypass与proxy-no-cache" class="headerlink" title="proxy_cache_bypass与proxy_no_cache"></a>proxy_cache_bypass与proxy_no_cache</h4><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">语法:proxy_cache_bypass string ...;</span><span class="hljs-section">默认值:—</span><span class="hljs-section">上下文:http, server, location</span></code></pre></div><p>定义nginx不从缓存取响应的条件。如果至少一个字符串条件非空而且非“0”，nginx就不会从缓存中去取响应：</p><div class="code-wrapper"><pre><code class="hljs autoit">proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment<span class="hljs-comment">;</span>proxy_cache_bypass $http_pragma    $http_authorization<span class="hljs-comment">;</span></code></pre></div><p>本指令可和与proxy_no_cache一起使用。</p><div class="code-wrapper"><pre><code class="hljs makefile"><span class="hljs-section">语法:proxy_no_cache string ...;</span><span class="hljs-section">默认值:—</span><span class="hljs-section">上下文:http, server, location</span></code></pre></div><p>定义nginx不将响应写入缓存的条件。如果至少一个字符串条件非空而且非“0”，nginx就不将响应存入缓存：</p><div class="code-wrapper"><pre><code class="hljs autoit">proxy_no_cache $cookie_nocache $arg_nocache$arg_comment<span class="hljs-comment">;</span>proxy_no_cache $http_pragma    $http_authorization<span class="hljs-comment">;</span></code></pre></div><h4 id="proxy-cache-methods"><a href="#proxy-cache-methods" class="headerlink" title="proxy_cache_methods"></a>proxy_cache_methods</h4><p>该指令用于设置缓存哪些HTTP方法,默认缓存HTTP GET/HEAD方法,不缓存HTTP POST 方法。</p><p>有了代理缓存，那么清除缓存如何操作呢？</p><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><ol><li>删除缓存目录的文件</li><li>使用ngx_cache_purge模块，<a href="https://www.cnblogs.com/Eivll0m/p/4921829.html">可查看这篇文章Nginx缓存配置及nginx ngx_cache_purge模块的使用</a></li></ol><p>推荐第二种方法。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx内嵌变量</title>
    <link href="/2019/11/22/Nginx5/"/>
    <url>/2019/11/22/Nginx5/</url>
    
    <content type="html"><![CDATA[<p>Nginx内嵌变量是非常常用的，记录下备查。</p><p>Nginx内嵌变量由 <code>ngx_http_core_module</code> 模块支持，变量名与Apache服务器对应，这些变量可以表示客户端的请求头字段，诸如<code>$http_user_agent</code>、<code>$http_cookie</code>等等。 nginx也支持其他变量：</p><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>$arg_name</td><td>请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name，如/index.php?www=<a href="http://www.13sai.com,可以用$arg_www就是www.13sai.com/">www.13sai.com，可以用$arg_www就是www.13sai.com</a></td></tr><tr><td>$args</td><td>请求中的参数值</td></tr><tr><td>$binary_remote_addr</td><td>客户端地址的二进制形式, 固定长度为4个字节</td></tr><tr><td>$body_bytes_sent</td><td>传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容</td></tr><tr><td>$bytes_sent</td><td>传输给客户端的字节数</td></tr><tr><td>$connection</td><td>TCP连接的序列号</td></tr><tr><td>$connection_requests</td><td>TCP连接当前的请求数量</td></tr><tr><td>$content_length</td><td>“Content-Length” 请求头字段</td></tr><tr><td>$content_type</td><td>“Content-Type” 请求头字段</td></tr><tr><td>$cookie_name</td><td>cookie名称</td></tr><tr><td>$document_root</td><td>当前请求的文档根目录或别名</td></tr><tr><td>$document_uri</td><td>同 $uri</td></tr><tr><td>$host</td><td>优先级如下：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名</td></tr><tr><td>$hostname</td><td>主机名</td></tr><tr><td>$http_name</td><td>匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取http请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。</td></tr><tr><td>$https</td><td>如果开启了SSL安全模式，值为“on”，否则为空字符串。</td></tr><tr><td>$is_args</td><td>如果请求中有参数，值为“?”，否则为空字符串。</td></tr><tr><td>$limit_rate</td><td>用于设置响应的速度限制，详见 limit_rate。</td></tr><tr><td>$msec</td><td>当前的Unix时间戳 (1.3.9, 1.2.6)</td></tr><tr><td>$nginx_version</td><td>nginx版本</td></tr><tr><td>$pid</td><td>工作进程的PID</td></tr><tr><td>$pipe</td><td>如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)</td></tr><tr><td>$proxy_protocol_addr</td><td>获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)</td></tr><tr><td>$query_string</td><td>同 $args，然而 $query_string是只读的不会改变</td></tr><tr><td>$realpath_root</td><td>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。</td></tr><tr><td>$remote_addr</td><td>客户端地址</td></tr><tr><td>$remote_port</td><td>客户端端口</td></tr><tr><td>$remote_user</td><td>用于HTTP基础认证服务的用户名</td></tr><tr><td>$request</td><td>代表客户端的请求地址</td></tr><tr><td>$request_body</td><td>客户端的请求主体,此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。</td></tr><tr><td>$request_body_file</td><td>请求正文的临时文件名。处理完成时，临时文件将被删除。 如果希望总是将请求正文写入文件，需要开启client_body_in_file_only。 如果在被代理的请求或FastCGI请求中传递临时文件名，就应该禁止传递请求正文本身。 使用proxy_pass_request_body off指令 和fastcgi_pass_request_body off指令 分别禁止在代理和FastCGI中传递请求正文。</td></tr><tr><td>$request_completion</td><td>如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。</td></tr><tr><td>$request_filename</td><td>当前连接请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td>$request_length</td><td>请求的长度 (包括请求的地址, http请求头和请求主体)</td></tr><tr><td>$request_method</td><td>HTTP请求方法，通常为“GET”或“POST”</td></tr><tr><td>$request_time</td><td>处理客户端请求使用的时间; 从读取客户端的第一个字节开始计时。</td></tr><tr><td>$request_uri</td><td>这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/sai/test.php?arg=www”。</td></tr><tr><td>$scheme</td><td>请求使用的Web协议, “http” 或 “https”</td></tr><tr><td>$sent_http_name</td><td>可以设置任意http响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。</td></tr><tr><td>$server_addr</td><td>服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中。</td></tr><tr><td>$server_name</td><td>服务器名</td></tr><tr><td>$server_port</td><td>服务器端口</td></tr><tr><td>$server_protocol</td><td>服务器的HTTP版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1”</td></tr><tr><td>$status</td><td>HTTP响应代码</td></tr><tr><td>$time_iso8601</td><td>服务器时间的ISO 8610格式</td></tr><tr><td>$time_local</td><td>服务器时间（LOG Format 格式） ，nginx处理完成打印日志的时间，不是请求发出的时间</td></tr><tr><td>$uri</td><td>请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</td></tr></tbody></table><p>apache服务器变量可看<a href="https://blog.csdn.net/litwhy/article/details/70893084">[备忘] apache服务端变量</a></p><p>参考：</p><ul><li><a href="http://tengine.taobao.org/nginx_docs/cn/docs/http/ngx_http_core_module.html#variables">中文文档</a></li></ul><p>Nginx 相关文章：</p><ul><li><a href="http://github.13sai.com/2019/11/18/203/">Nginx 负载均衡</a></li><li><a href="https://learnku.com/articles/36567">Nginx 添加 lua 模块</a></li><li><a href="https://learnku.com/articles/36768">Nginx 配置常用参数，看这一篇就够了</a></li><li><a href="https://learnku.com/articles/36857">Nginx 代理缓存</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx添加lua-nginx模块</title>
    <link href="/2019/11/20/Nginx9/"/>
    <url>/2019/11/20/Nginx9/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ngx_lua是Nginx的一个模块，将Lua嵌入到Nginx中，从而可以使用Lua来编写脚本，这样就可以使用Lua编写应用脚本，部署到Nginx中运行，即Nginx变成了一个Web容器；这样开发人员就可以使用Lua语言开发高性能Web应用了。</p></blockquote><h2 id="安装lua"><a href="#安装lua" class="headerlink" title="安装lua"></a>安装lua</h2><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://luajit.org/download/LuaJIT-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span>.tar.gz <span class="hljs-attribute">tar</span> -zxvf LuaJIT-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span>.tar.gz<span class="hljs-attribute">cd</span> LuaJIT-<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span><span class="hljs-attribute">make</span> &amp;&amp; make install PREFIX=/usr/local/LuaJIT</code></pre></div><h2 id="etc-profile加入"><a href="#etc-profile加入" class="headerlink" title="etc/profile加入"></a>etc/profile加入</h2><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># lua</span>export LUAJIT_LIB=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/LuaJIT/</span>lib export LUAJIT_INC=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/LuaJIT/i</span>nclude/luajit-<span class="hljs-number">2.0</span></code></pre></div><blockquote><p>source etc/profile</p></blockquote><h2 id="下载ngx-devel-kit模块"><a href="#下载ngx-devel-kit模块" class="headerlink" title="下载ngx_devel_kit模块"></a>下载ngx_devel_kit模块</h2><div class="code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/simpl/</span>ngx_devel_kit<span class="hljs-regexp">/archive/</span>v0.<span class="hljs-number">3.0</span>.tar.gz</code></pre></div><blockquote><p>NDK(nginx development kit)模块是一个拓展nginx服务器核心功能的模块，第三方模块开发可以基于它来快速实现。 NDK提供函数和宏处理一些基本任务， 减轻第三方模块开发的代码量</p></blockquote><h2 id="下载lua-nginx-module模块"><a href="#下载lua-nginx-module模块" class="headerlink" title="下载lua-nginx-module模块"></a>下载lua-nginx-module模块</h2><div class="code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/openresty/</span>lua-nginx-module<span class="hljs-regexp">/archive/</span>v0.<span class="hljs-number">10.9</span>rc7.tar.gz</code></pre></div><p> lua-nginx-module 模块使nginx中能直接运行lua</p><h2 id="查看原始编译"><a href="#查看原始编译" class="headerlink" title="查看原始编译"></a>查看原始编译</h2><blockquote><p>nginx -V</p></blockquote><div class="code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">如：</span><span class="hljs-comment">configure</span> <span class="hljs-comment">arguments:</span> --<span class="hljs-comment">user=www</span> --<span class="hljs-comment">group=www</span> --<span class="hljs-comment">prefix=/usr/local/nginx</span> --<span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">http_stub_status_module</span> --<span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">http_ssl_module</span> --<span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">http_gzip_static_module</span> --<span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">http_sub_module</span> --<span class="hljs-comment">with</span><span class="hljs-literal">-</span><span class="hljs-comment">http_v2_module</span></code></pre></div><p>进入nginx原始目录：</p><div class="code-wrapper"><pre><code class="hljs javascript">./configure --user=www --group=www --prefix=<span class="hljs-regexp">/usr/</span>local/nginx --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-http_ssl_module --<span class="hljs-keyword">with</span>-http_gzip_static_module --<span class="hljs-keyword">with</span>-http_sub_module --<span class="hljs-keyword">with</span>-http_v2_module --add-<span class="hljs-built_in">module</span>=<span class="hljs-regexp">/root/</span>lua-nginx-<span class="hljs-built_in">module</span>-<span class="hljs-number">0.10</span>.9rc7/ --add-<span class="hljs-built_in">module</span>=<span class="hljs-regexp">/root/</span>ngx_devel_kit-<span class="hljs-number">0.3</span><span class="hljs-number">.0</span></code></pre></div><p>只make，不执行make install。</p><p>编译报错应该就是lua环境变量不对。</p><div class="code-wrapper"><pre><code class="hljs stata">nginx -V 命令报错./nginx: <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading shared libraries: libluajit-5.1.<span class="hljs-keyword">so</span>.2: cannot <span class="hljs-keyword">open</span> shared object <span class="hljs-keyword">file</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory解决：echo <span class="hljs-string">&quot;/usr/local/LuaJIT/lib&quot;</span> &gt;&gt; /etc/ld.<span class="hljs-keyword">so</span>.<span class="hljs-keyword">conf</span>ldconfig</code></pre></div><p>成功之后可以nginx -V查看，无报错即可。</p><p>把原来的nginx备份为nginx_old</p><p>cp objs/nginx到原来的nginx并覆盖。</p><p>在编译目录执行</p><blockquote><p>make upgrade</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/201911/18/41489/SNDXytBYrH.png!large" alt="Nginx 添加 lua 模块"></p><p>测试：</p><div class="code-wrapper"><pre><code class="hljs ceylon">server&#123;    ...    location /lua &#123;        <span class="hljs-keyword">default</span><span class="hljs-number">_</span>type <span class="hljs-string">&#x27;text/html&#x27;</span>;        content<span class="hljs-number">_</span><span class="hljs-meta">by</span><span class="hljs-number">_</span>lua <span class="hljs-string">&#x27;</span><span class="hljs-string">                ngx.say(&quot;hello, lua!&quot;)</span><span class="hljs-string">        &#x27;</span>;    &#125;    ...&#125;</code></pre></div><p>浏览器打开：</p><blockquote><p><a href="http://blog.13sai.com/lua">http://blog.13sai.com/lua</a></p></blockquote><p>可以看到hello, lua!</p><p>此安装方法也适用于Nginx其他module安装。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git回退远程分支版本</title>
    <link href="/2019/10/29/201/"/>
    <url>/2019/10/29/201/</url>
    
    <content type="html"><![CDATA[<p> 偶尔会有代码提交错误，又提交到远程分支了，怎么回退呢？</p><h3 id="强制回退"><a href="#强制回退" class="headerlink" title="强制回退"></a>强制回退</h3><div class="code-wrapper"><pre><code class="hljs git"># 查看日志，找到对应的commit idgit loggit reset --hard 回退的版本idgit push -f origin 分支名</code></pre></div><p>这样回退是清除了回退的版本id之后的提交，连日志都没有了。</p><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><div class="code-wrapper"><pre><code class="hljs git"># 查看日志，找到对应的commit idgit loggit reset --soft 回退的版本idgit commit</code></pre></div><p>这样回退是改回回退的版本id之后的提交，日志仍然存在。</p>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php+nginx上传文件413</title>
    <link href="/2019/10/09/200/"/>
    <url>/2019/10/09/200/</url>
    
    <content type="html"><![CDATA[<p>最近在项目中上传文件的时候，上传出错，返回413 Request Entity Too Large</p><p>解决方法：（具体大小视业务而定）</p><ol><li>以下代码加入 nginx.conf 文件中的 http{ … } 块中</li></ol><blockquote><p>client_max_body_size 32M;  </p></blockquote><ol start="2"><li>PHP 设置上传大小 </li></ol><p>打开php.ini 文件中 修改以下几个参数</p><div class="code-wrapper"><pre><code class="hljs sh">memory_limit = 32Mupload_max_filesize = 8Mpost_max_size = 16M</code></pre></div><p>重启nginx，fpm即可。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php生成器yield</title>
    <link href="/2019/09/20/199/"/>
    <url>/2019/09/20/199/</url>
    
    <content type="html"><![CDATA[<p>一个生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成器可以yield生成许多它所需要的值。</p><p>生成器提供了一种更容易的方法来实现简单的对象迭代，相比较定义类实现 Iterator 接口的方式，性能开销和复杂性大大降低。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xrange</span>(<span class="hljs-params"><span class="hljs-variable">$start</span>, <span class="hljs-variable">$limit</span>, <span class="hljs-variable">$step</span> = <span class="hljs-number">1</span></span>) </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$start</span> &lt; <span class="hljs-variable">$limit</span>) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$step</span> &lt;= <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">LogicException</span>(<span class="hljs-string">&#x27;Step must be +ve&#x27;</span>);        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-variable">$start</span>; <span class="hljs-variable">$i</span> &lt;= <span class="hljs-variable">$limit</span>; <span class="hljs-variable">$i</span> += <span class="hljs-variable">$step</span>) &#123;            <span class="hljs-keyword">yield</span> <span class="hljs-variable">$i</span>;        &#125;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$step</span> &gt;= <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">LogicException</span>(<span class="hljs-string">&#x27;Step must be -ve&#x27;</span>);        &#125;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-variable">$start</span>; <span class="hljs-variable">$i</span> &gt;= <span class="hljs-variable">$limit</span>; <span class="hljs-variable">$i</span> += <span class="hljs-variable">$step</span>) &#123;            <span class="hljs-keyword">yield</span> <span class="hljs-variable">$i</span>;        &#125;    &#125;&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * 注意下面range()和xrange()输出的结果是一样的。</span><span class="hljs-comment"> */</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Single digit odd numbers from range():  &#x27;</span>;<span class="hljs-keyword">foreach</span> (range(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$number</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$number</span> &quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Single digit odd numbers from xrange(): &#x27;</span>;<span class="hljs-keyword">foreach</span> (xrange(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$number</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$number</span> &quot;</span>;&#125;<span class="hljs-comment">// 输出内容</span>Single digit odd numbers <span class="hljs-keyword">from</span> range():  <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>Single digit odd numbers <span class="hljs-keyword">from</span> xrange(): <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span></code></pre></div><p>集合laravel与业务（更新uv）的例子：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 数据修复</span><span class="hljs-comment"> * Author: sai</span><span class="hljs-comment"> * Date: 2019/9/19</span><span class="hljs-comment"> */</span><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Commands</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Models</span>\<span class="hljs-title">StatisticModel</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Command</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">DB</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Facades</span>\<span class="hljs-title">Redis</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataStatistic</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Command</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * The name and signature of the console command.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$signature</span> = <span class="hljs-string">&#x27;DataStatistic&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * The console command description.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$description</span> = <span class="hljs-string">&#x27;DataStatistic&#x27;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Create a new command instance.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">parent</span>::__construct();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseStr</span>(<span class="hljs-params">...<span class="hljs-variable">$param</span></span>)</span>&#123;        <span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$param</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;            <span class="hljs-comment">//处理数组</span>            <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$value</span>)) &#123;                <span class="hljs-variable">$value</span> = md5(json_encode(<span class="hljs-variable">$value</span>));            &#125;            <span class="hljs-variable">$str</span> .= <span class="hljs-variable">$value</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">// 单独输出到updateChapter.log文件</span>        \Log::useFiles(storage_path().<span class="hljs-string">&#x27;/logs/data.log&#x27;</span>);        <span class="hljs-variable">$iTime</span> = time();        \Log::info(<span class="hljs-string">&#x27;start&#x27;</span>, [<span class="hljs-string">&#x27;timestamp&#x27;</span> =&gt; <span class="hljs-variable">$iTime</span>]);        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$ret</span> =  <span class="hljs-keyword">$this</span>-&gt;traverse();        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ret</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>) &#123;            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$v</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;                <span class="hljs-variable">$key</span> = <span class="hljs-keyword">$this</span>-&gt;parseStr(<span class="hljs-string">&#x27;wx:&#x27;</span>, <span class="hljs-variable">$value</span>-&gt;wx_id);                <span class="hljs-variable">$count</span> = (<span class="hljs-keyword">int</span>) Redis::pfcount(<span class="hljs-variable">$key</span>);                <span class="hljs-comment">// redis里的uv更大时更新，并记录更新前后数据</span>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &gt; <span class="hljs-variable">$value</span>-&gt;uv) &#123;                    \Log::info(<span class="hljs-string">&#x27;update id:&#x27;</span>.<span class="hljs-variable">$value</span>-&gt;id, [<span class="hljs-variable">$value</span>-&gt;uv =&gt; <span class="hljs-variable">$count</span>]);                    <span class="hljs-variable">$i</span>++;                    (<span class="hljs-keyword">new</span> StatisticModel([<span class="hljs-string">&#x27;hash_id&#x27;</span> =&gt; <span class="hljs-variable">$value</span>-&gt;wx_id]))-&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-variable">$value</span>-&gt;id)-&gt;update([<span class="hljs-string">&#x27;uv&#x27;</span> =&gt; <span class="hljs-variable">$count</span>, <span class="hljs-string">&#x27;update_time&#x27;</span> =&gt; <span class="hljs-variable">$iTime</span>]);                &#125;            &#125;        &#125;        <span class="hljs-comment">// 记录更新时间与数量</span>        \Log::info(<span class="hljs-string">&#x27;end&#x27;</span>, [<span class="hljs-string">&#x27;timestamp&#x27;</span>=&gt;time(), <span class="hljs-string">&#x27;count&#x27;</span> =&gt; <span class="hljs-variable">$i</span>,<span class="hljs-string">&#x27;interval&#x27;</span> =&gt; time() - <span class="hljs-variable">$iTime</span>]);        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">traverse</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$page</span> = <span class="hljs-number">3000</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">6</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$count</span> = DB::table(<span class="hljs-string">&#x27;wx_statistics_&#x27;</span>.<span class="hljs-variable">$i</span>)-&gt;count();            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> &lt; <span class="hljs-number">1</span>) &#123;                <span class="hljs-comment">// 记录进度</span>                \Log::info(<span class="hljs-string">&#x27;update schedule&#x27;</span>, [<span class="hljs-string">&#x27;table success&#x27;</span> =&gt; <span class="hljs-variable">$i</span>]);                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-variable">$num</span> = ceil(<span class="hljs-variable">$count</span>/<span class="hljs-variable">$page</span>);            <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; <span class="hljs-variable">$num</span>; <span class="hljs-variable">$j</span>++) &#123;                <span class="hljs-variable">$ret</span> = DB::table(<span class="hljs-string">&#x27;wx_statistics_&#x27;</span>.<span class="hljs-variable">$i</span>)                    -&gt;select([<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;wx_id&#x27;</span>, <span class="hljs-string">&#x27;uv&#x27;</span>])                    -&gt;orderBy(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;asc&#x27;</span>)                    -&gt;skip(<span class="hljs-variable">$j</span>*<span class="hljs-variable">$page</span>)                    -&gt;take(<span class="hljs-variable">$page</span>)                    -&gt;get()                    -&gt;toArray();                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$ret</span>)) &#123;                    <span class="hljs-keyword">continue</span>;                &#125;                <span class="hljs-keyword">yield</span> <span class="hljs-variable">$ret</span>;            &#125;            \Log::info(<span class="hljs-string">&#x27;update schedule&#x27;</span>, [<span class="hljs-string">&#x27;table success&#x27;</span> =&gt; <span class="hljs-variable">$i</span>]);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过mysqlbinlog恢复误操作清空的表</title>
    <link href="/2019/09/08/198/"/>
    <url>/2019/09/08/198/</url>
    
    <content type="html"><![CDATA[<p> 昨天晚上朋友说数据库误删了，没有备份能不能恢复，我一愣，突然想到之前我们遇到过的问题，便问他是否开启了binlog。</p><blockquote><p>show variables like log_bin;</p></blockquote><p>如果现实log_bin是ON，就说明打开了。</p><p>值得庆幸，他们的生产数据库开了binlog。然后跟他说了下这个可以恢复，让他们去操作一下。结果那边问我能不能操作，我说可以。</p><p>操作：</p><ol><li><p>找到存放binlog的目录</p><blockquote><p>mysqlbinlog mysql-bin.000011 &gt; bak.log</p></blockquote></li><li><p>找到删除的语句时间</p></li><li><p>导出sql</p><blockquote><p>mysqlbinlog –stop-datetime=”2019-09-07 17:30:31”  mysql-bin.000011 &gt;all.sql</p></blockquote></li></ol><p>stop-datetime应该是误删操作前一刻时间。</p><p>下载all.sql倒入本地数据库，导出误删表，倒入生产数据库。</p><ol start="4"><li>检测生产数据库，无异常即可</li></ol><p>反思：</p><ol><li>导出sql时应该指定数据库</li></ol><blockquote><p>mysqlbinlog –stop-datetime=”2019-09-07 17:30:31” –database=test mysql-bin.000893 &gt;all.sql</p></blockquote><ol start="2"><li>数据库重要数据尽量一天一备份，然后开启binlog，为了减少硬盘空间占用，设置expire_logs_days</li><li>生产数据库不使用root用户，新建用户，限制drop，truncate等危险操作权限</li></ol><p><a href="https://dev.mysql.com/doc/refman/5.6/en/mysqlbinlog.html">mysqlbin</a></p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql分页重复</title>
    <link href="/2019/09/04/197/"/>
    <url>/2019/09/04/197/</url>
    
    <content type="html"><![CDATA[<p> 之前在项目中做分页时，发现第二页和第三页出现了系统的数据，查了下数据总数没变，发现是order相同导致的。</p><p>解决方案：<br>在排序在最后加入主键排序</p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel默认分页带参</title>
    <link href="/2019/09/02/196/"/>
    <url>/2019/09/02/196/</url>
    
    <content type="html"><![CDATA[<p> 默认的laravel分页是只带分页参数的，那么如何加入其它参数呢？比如搜索项。</p><ol><li>后端带参</li></ol><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$list</span> = <span class="hljs-variable">$model</span>::paginate(<span class="hljs-number">2</span>);<span class="hljs-variable">$list</span>-&gt;appends([      name=&gt;<span class="hljs-variable">$name</span>,      city=&gt;<span class="hljs-variable">$city</span>,])-&gt;render();<span class="hljs-keyword">return</span> view(admin, [      <span class="hljs-keyword">list</span> =&gt; <span class="hljs-variable">$list</span>]);<span class="hljs-comment">// blade使用&#123;&#123; $list-&gt;links() &#125;&#125;</span></code></pre></div><ol start="2"><li>前端带参</li></ol><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$list</span> = <span class="hljs-variable">$model</span>::paginate(<span class="hljs-number">2</span>);<span class="hljs-keyword">return</span> view(admin.apply.apply, [      <span class="hljs-keyword">list</span> =&gt; <span class="hljs-variable">$list</span>,      name =&gt; <span class="hljs-variable">$name</span>,      city =&gt; <span class="hljs-variable">$city</span>]);<span class="hljs-comment">//前端</span>&#123;&#123; <span class="hljs-variable">$list</span>-&gt;appends([name=&gt;<span class="hljs-variable">$name</span>, city =&gt; <span class="hljs-variable">$city</span>])-&gt;links() &#125;&#125;</code></pre></div><p>两种方法均可！</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习go遇到的一些问题和概念汇总</title>
    <link href="/2019/08/25/195/"/>
    <url>/2019/08/25/195/</url>
    
    <content type="html"><![CDATA[<h4 id="go-get安装x-sys失败的解决"><a href="#go-get安装x-sys失败的解决" class="headerlink" title="go get安装x/sys失败的解决"></a>go get安装x/sys失败的解决</h4><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// $GOPATH这段地址请自行修改，下载到goroot和gopath对应位置即可，不同系统略有不同</span>git clone https:<span class="hljs-comment">//github.com/golang/net.git $GOPATH/src/github.com/golang/net</span>git clone https:<span class="hljs-comment">//github.com/golang/sys.git $GOPATH/src/github.com/golang/sys</span>git clone https:<span class="hljs-comment">//github.com/golang/tools.git $GOPATH/src/github.com/golang/tools</span>ln -s $GOPATH/src/github.com/golang $GOPATH/src/golang.org/x</code></pre></div><blockquote><p>go get命令安装golang.org比较慢的话，一般都可以在github.com找到对应的package，下载后放到对应的目录即可</p></blockquote><h4 id="go的环境变量设置"><a href="#go的环境变量设置" class="headerlink" title="go的环境变量设置"></a>go的环境变量设置</h4><p>在/etc/profile最下面加入以下代码：</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-comment"># 可自行改成你的目录</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GO_INSTALL_DIR</span>=<span class="hljs-variable">$HOME</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOROOT</span>=<span class="hljs-variable">$GO_INSTALL_DIR</span>/go<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPATH</span>=<span class="hljs-variable">$HOME</span>/mygo<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$GOPATH</span>/bin:$PATH:$GO_INSTALL_DIR/go/bin</code></pre></div><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><blockquote><p>import _  执行init函数，但不需要包所有函数</p></blockquote><blockquote><p>import .  解决循环依赖问题</p></blockquote><h3 id="amp-和"><a href="#amp-和" class="headerlink" title="&amp;和*"></a>&amp;和*</h3><blockquote><p>&amp;符号的意思是对变量取地址，如：变量a的地址是&amp;a<br><em>符号的意思是对指针取值，</em>和聽&amp;聽可以互相抵消,同时注意，*&amp;可以抵消掉，但&amp;*是不可以抵消的</p></blockquote><h3 id="切片容量"><a href="#切片容量" class="headerlink" title="切片容量"></a>切片容量</h3><blockquote><p>容量当做成总长度减去左指针走过的元素值</p></blockquote><div class="code-wrapper"><pre><code class="hljs">一旦一个切片无法容纳更多的元素，Go语言就会想办法扩容。但它并不会改变原来的切片，而是会生成一个容量更大的切片，然后将把原有的元素和新元素一并拷贝到新切片中。在一般的情况下，你可以简单地认为新切片的容量（以下简称新容量）将会是原切片容量（以下简称原容量）的2倍。但是，当原切片的长度（以下简称原长度）大于或等于1024时，Go语言将会以原容量的1.25倍作为新容量的基准（以下新容量基准）。新容量基准会被调整（不断地与1.25相乘），直到结果不小于原长度与要追加的元素数量之和（以下简称新长度）。最终，新容量往往会比新长度大一些，当然，相等也是可能的。另外，如果我们一次追加的元素过多，以至于使新长度比原容量的2倍还要大，那么新容量就会以新长度为基准。</code></pre></div><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><blockquote><p>在Go语言中，没有特别的关键字来声明一个方法、函数或者类型是否为公开的，Go语言提供的是以大小写的方式进行区分的，如果一个类型的名字是以大写开头，那么其他包就可以访问；如果以小写开头，其他包就不能访问。</p></blockquote><h3 id="go的并发"><a href="#go的并发" class="headerlink" title="go的并发"></a>go的并发</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>进程</td><td>一个程序对应一个独立程序空间</td></tr><tr><td>线程</td><td>一个执行空间，一个进程可以有多个线程</td></tr><tr><td>逻辑处理器</td><td>执行创建的goroutine，绑定一个线程</td></tr><tr><td>调度器</td><td>Go运行时中的，分配goroutine给不同的逻辑处理器</td></tr><tr><td>全局运行队列</td><td>所有刚创建的goroutine都会放到这里</td></tr><tr><td>本地运行队列</td><td>逻辑处理器的goroutine队列</td></tr></tbody></table><blockquote><p>并发的概念和并行不一样，并行指的是在不同的物理处理器上同时执行不同的代码片段，并行可以同时做很多事情，而并发是同时管理很多事情，因为操作系统和硬件的总资源比较少，所以并发的效果要比并行好的多，使用较少的资源做更多的事情，也是Go语言提倡的。</p></blockquote><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><div class="code-wrapper"><pre><code class="hljs go">h:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)通道类型和Map这些类型一样，可以使用内置的<span class="hljs-built_in">make</span>函数声明初始化，这里我们初始化了一个<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>类型的通道，所以我们只能往这个通道里发送<span class="hljs-keyword">int</span>类型的数据，当然接收也只能是<span class="hljs-keyword">int</span>类型的数据。我们知道，通道是用于在goroutine之间通信的，它具有发送和接收两个操作，而且这两个操作的运算符都是&lt;-。ch &lt;- <span class="hljs-number">2</span> <span class="hljs-comment">//发送数值2给这个通道</span>x:=&lt;-ch <span class="hljs-comment">//从通道里读取值，并把读取的值赋值给x变量</span>&lt;-ch <span class="hljs-comment">//从通道里读取值，然后忽略</span>看例子，慢慢理解发送和接收的用法。发送操作&lt;-在通道的后面，看箭头方向，表示把数值<span class="hljs-number">2</span>发送到通道ch里；接收操作&lt;-在通道的前面，而且是一个一元操作符，看箭头方向，表示从通道ch里读取数据。读取的数据可以赋值给一个变量，也可以忽略。通道我们还可以使用内置的<span class="hljs-built_in">close</span>函数关闭。<span class="hljs-built_in">close</span>(ch)</code></pre></div><h3 id="无缓冲的通道"><a href="#无缓冲的通道" class="headerlink" title="无缓冲的通道"></a>无缓冲的通道</h3><p>无缓冲的通道指的是通道的大小为0，也就是说，这种类型的通道在接收前没有能力保存任何值，它要求发送goroutine和接收goroutine同时准备好，才可以完成发送和接收操作。</p><p>从上面无缓冲的通道定义来看，发送goroutine和接收gouroutine必须是同步的，同时准备后，如果没有同时准备好的话，先执行的操作就会阻塞等待，直到另一个相对应的操作准备好为止。这种无缓冲的通道我们也称之为同步通道。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;            <span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span> = <span class="hljs-number">0</span>            <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;                sum += i            &#125;            ch &lt;- sum    &#125;()    fmt.Println(&lt;-ch)&#125;</code></pre></div><h3 id="有缓冲的通道"><a href="#有缓冲的通道" class="headerlink" title="有缓冲的通道"></a>有缓冲的通道</h3><p>有缓冲通道，其实是一个队列，这个队列的最大容量就是我们使用make函数创建通道时，通过第二个参数指定的。</p><p>ch := make(chan int, 3)<br>这里创建容量为3的，有缓冲的通道。对于有缓冲的通道，向其发送操作就是向队列的尾部插入元素，接收操作则是从队列的头部删除元素，并返回这个刚刚删除的元素。</p><p>当队列满的时候，发送操作会阻塞；当队列空的时候，接受操作会阻塞。有缓冲的通道，不要求发送和接收操作时同步的，相反可以解耦发送和接收操作。</p><p>想知道通道的容量以及里面有几个元素数据怎么办？其实和map一样，使用cap和len函数就可以了。</p><div class="code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">cap</span><span class="hljs-params">(ch)</span></span><span class="hljs-function"><span class="hljs-title">len</span><span class="hljs-params">(ch)</span></span></code></pre></div><p>cap函数返回通道的最大容量，len函数返回现在通道里有几个元素。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mirroredQuery</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;    responses := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>, <span class="hljs-number">3</span>)    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;asia.gopl.io&quot;</span>) &#125;()    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;europe.gopl.io&quot;</span>) &#125;()        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; responses &lt;- request(<span class="hljs-string">&quot;americas.gopl.io&quot;</span>) &#125;()        <span class="hljs-keyword">return</span> &lt;-responses <span class="hljs-comment">// return the quickest response</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">request</span><span class="hljs-params">(hostname <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(response <span class="hljs-keyword">string</span>)</span></span> &#123; <span class="hljs-comment">/* ... */</span> &#125;</code></pre></div><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><p>有时候，我们有一些特殊场景，比如限制一个通道只可以接收，但是不能发送；有时候限制一个通道只能发送，但是不能接收，这种通道我们称为单向通道。这个在生产者消费者很实用。</p><p>定义单向通道也很简单，只需要在定义的时候，带上&lt;-即可。</p><div class="code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">var</span> send <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span> <span class="hljs-comment">//只能发送</span><span class="hljs-keyword">var</span> receive &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span> <span class="hljs-comment">//只能接收</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用jenkins发布代码</title>
    <link href="/2019/07/31/194/"/>
    <url>/2019/07/31/194/</url>
    
    <content type="html"><![CDATA[<h3 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h3><div class="code-wrapper"><pre><code class="hljs livescript">docker run <span class="hljs-string">\</span>  -u root <span class="hljs-string">\</span>  --rm <span class="hljs-string">\</span>  -d <span class="hljs-string">\</span>  -p <span class="hljs-number">8090</span>:<span class="hljs-number">8080</span> <span class="hljs-string">\</span>  -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span> <span class="hljs-string">\</span>  -v jenkins-data:/<span class="hljs-keyword">var</span>/jenkins_home <span class="hljs-string">\</span>  -v /<span class="hljs-keyword">var</span>/run/docker.sock:/<span class="hljs-keyword">var</span>/run/docker.sock <span class="hljs-string">\</span>  jenkinsci/blueocean</code></pre></div><p>进入容器查看密码：</p><blockquote><p>docker exec -it 6d1a7f988069 /bin/bash</p></blockquote><p>密码存储路径 </p><blockquote><p>/var/jenkins_home/secrets/initialAdminPassword</p></blockquote><h3 id="jenkins关联git，拉取无需密码验证"><a href="#jenkins关联git，拉取无需密码验证" class="headerlink" title="jenkins关联git，拉取无需密码验证"></a>jenkins关联git，拉取无需密码验证</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 产生公钥与私钥对.ssh-keygen<span class="hljs-regexp">//</span> 用ssh-copy-id将公钥复制到远程机器中(gitlab等)ssh-copy-id -i .ssh/id_rsa.pub  git@xxx.com</code></pre></div><h3 id="jenkins关联代码服务器，同步无需密码验证"><a href="#jenkins关联代码服务器，同步无需密码验证" class="headerlink" title="jenkins关联代码服务器，同步无需密码验证"></a>jenkins关联代码服务器，同步无需密码验证</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 尽量使用内网ipscp -p .ssh<span class="hljs-regexp">/id_rsa.pub www@172.17.158.15:/</span>home<span class="hljs-regexp">/www/</span>.ssh/authorized_keys</code></pre></div><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ol><li>选择自由风格项目</li><li>Source Code Management填写git地址</li><li>Build执行shell脚本</li></ol><p>shell demo</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;BUILD_USER&#125;</span>SOURCE_DIR=/var/jenkins_home/workspace/<span class="hljs-variable">$&#123;JOB_NAME&#125;</span>/DEST_DIR=/usr/<span class="hljs-built_in">local</span>/nginx/html/jenkinsREMOTE_IP=172.17.158.15scp -r  <span class="hljs-variable">$SOURCE_DIR</span> www@<span class="hljs-variable">$REMOTE_IP</span>:<span class="hljs-variable">$DEST_DIR</span></code></pre></div><h3 id="保存后点击构建。"><a href="#保存后点击构建。" class="headerlink" title="保存后点击构建。"></a>保存后点击构建。</h3><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>jenkins拉取git代码jenkins服务器，scp同步代码到代码服务器。</p><p>易出错点：</p><ol><li>服务器目录权限问题</li><li>git拉取ssh验证</li><li>目录</li></ol><p>构建时可查看Console Output信息，能看出哪一步错误，然后处理即可。</p>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx日志按日配置</title>
    <link href="/2019/07/23/Nginx8/"/>
    <url>/2019/07/23/Nginx8/</url>
    
    <content type="html"><![CDATA[<p>老实说，我觉得nginx没有日志按日配置功能缺失有点费解，不过我们可以通过代码实现。<br>配置如下：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ($time_iso8601 <span class="hljs-regexp">~ &quot;^(\d</span>&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&quot;) &#123;    <span class="hljs-attribute">set</span> $day <span class="hljs-variable">$1</span><span class="hljs-variable">$2</span><span class="hljs-variable">$3</span>;&#125;<span class="hljs-attribute">access_log</span> logs/access-$day.log main;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua+nginx实现黑名单禁止访问</title>
    <link href="/2019/07/16/192/"/>
    <url>/2019/07/16/192/</url>
    
    <content type="html"><![CDATA[<p>lua是可以很好地和Nginx配合使用的，去在代码之前做一些处理，这里我们力求简单，省去安装，使用OpenResty（基于 Nginx 与 Lua 的高性能 Web 平台）</p><ul><li><a href="http://openresty.org/cn/">OpenResty地址</a></li></ul><p>我是在windows7电脑上测试使用，主要配置代码如下：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 分配内存，根据业务量</span><span class="hljs-attribute">lua_shared_dict</span> ip_blacklist <span class="hljs-number">1m</span>;<span class="hljs-section">server</span> &#123;    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;    <span class="hljs-attribute">server_name</span>  localhost;    <span class="hljs-attribute">root</span>   E:/www/web/test;    <span class="hljs-attribute">access_log</span>  logs/host.access.log ;    <span class="hljs-attribute">error_log</span>  logs/host.<span class="hljs-literal">error</span>.log;    <span class="hljs-attribute">location</span> / &#123;        <span class="hljs-attribute">access_by_lua_file</span> ../lua/black.lua;        <span class="hljs-attribute">index</span>  index.html index.htm;    &#125;        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;    <span class="hljs-attribute">location</span> = /50x.html &#123;        <span class="hljs-attribute">root</span>   html;    &#125;        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;     <span class="hljs-comment"># 指定lua文件</span>        <span class="hljs-attribute">access_by_lua_file</span> <span class="hljs-string">&quot;D:\openresty-1.15.8.1-win64/lua/black.lua&quot;</span>;        <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;        <span class="hljs-attribute">fastcgi_index</span>  index.php;        <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        <span class="hljs-attribute">include</span>        fastcgi_params;    &#125;&#125;</code></pre></div><p>black.lua</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">local</span> redis_host    = &quot;127.0.0.1&quot; <span class="hljs-comment">-- 这里一定是redis的IP地址</span><span class="hljs-keyword">local</span> redis_port    = &quot;6379&quot;<span class="hljs-comment">-- 连接超时时间，单位ms，不建议设置太高</span><span class="hljs-keyword">local</span> redis_connection_timeout = <span class="hljs-number">1000</span><span class="hljs-keyword">local</span> redis_key  = &quot;ip_blacklist&quot;<span class="hljs-comment">-- 缓存时间，单位s</span><span class="hljs-keyword">local</span> cache_ttl  = <span class="hljs-number">100</span><span class="hljs-comment">-- 以上是配置</span><span class="hljs-keyword">local</span> ip                = ngx.var.remote_addr<span class="hljs-keyword">local</span> ip_blacklist      = ngx.shared.ip_blacklist<span class="hljs-keyword">local</span> last_update_time  = ip_blacklist:<span class="hljs-keyword">get</span>(&quot;last_update_time&quot;);<span class="hljs-comment">-- 当缓存时间到期更新blacklist</span><span class="hljs-keyword">if</span> last_update_time == nil <span class="hljs-keyword">or</span> last_update_time &lt; ( ngx.now() - cache_ttl ) <span class="hljs-keyword">then</span>  <span class="hljs-keyword">local</span> redis = require &quot;resty.redis&quot;;  <span class="hljs-keyword">local</span> red = redis:<span class="hljs-built_in">new</span>();  red:set_timeout(redis_connect_timeout);  <span class="hljs-keyword">local</span> ok, err = red:<span class="hljs-keyword">connect</span>(redis_host, redis_port);  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span>    ngx.say(&quot;redis connect failed: &quot;, err)    ngx.log(ngx.<span class="hljs-keyword">DEBUG</span>, &quot;Redis connection error while retrieving ip_blacklist: &quot; .. err);    <span class="hljs-keyword">return</span> ngx.<span class="hljs-keyword">exit</span>(ngx.HTTP_INTERNAL_SERVER_ERROR)  <span class="hljs-keyword">else</span>    <span class="hljs-comment">-- local res, err = red:auth(&quot;foobared&quot;) -- 配置redis的密码，我测试未设置密码，代码注释</span>    <span class="hljs-comment">--if not res then</span>        <span class="hljs-comment">--ngx.say(&quot;redis auth is error: &quot;, err)</span>        <span class="hljs-comment">--return</span>    <span class="hljs-comment">--end</span>    red:<span class="hljs-keyword">select</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">-- 设置redis的db</span>    <span class="hljs-keyword">local</span> new_ip_blacklist, err = red:smembers(redis_key);    <span class="hljs-keyword">if</span> err <span class="hljs-keyword">then</span>      ngx.log(ngx.<span class="hljs-keyword">DEBUG</span>, &quot;Redis read error while retrieving ip_blacklist: &quot; .. err);    <span class="hljs-keyword">else</span>      <span class="hljs-comment">-- 情况本地存储</span>      ip_blacklist:flush_all();      <span class="hljs-keyword">for</span> <span class="hljs-keyword">index</span>, banned_ip <span class="hljs-keyword">in</span> ipairs(new_ip_blacklist) <span class="hljs-keyword">do</span>        ip_blacklist:<span class="hljs-keyword">set</span>(banned_ip, <span class="hljs-keyword">true</span>);      <span class="hljs-keyword">end</span>      <span class="hljs-comment">-- 更新时间</span>      ip_blacklist:<span class="hljs-keyword">set</span>(&quot;last_update_time&quot;, ngx.now());    <span class="hljs-keyword">end</span>  <span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-keyword">if</span> ip_blacklist:<span class="hljs-keyword">get</span>(ip) <span class="hljs-keyword">then</span>  <span class="hljs-comment">--ngx.say(ip)</span>  ngx.log(ngx.<span class="hljs-keyword">DEBUG</span>, &quot;Banned IP detected and refused access: &quot; .. ip);  <span class="hljs-keyword">return</span> ngx.<span class="hljs-keyword">exit</span>(ngx.HTTP_FORBIDDEN);<span class="hljs-keyword">end</span></code></pre></div><p>完成。</p><p>当然了，这只是个基础版本，你可以让这个禁止访问功能更强大，比如增加可疑ip写入，比如增加ip限流等等。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel管理日志</title>
    <link href="/2019/07/04/191/"/>
    <url>/2019/07/04/191/</url>
    
    <content type="html"><![CDATA[<p>日志是很重要的东西，那么如何配置能让Laravel更好管理和查看呢？</p><ol><li>按日查看<br>设置简单，在.env加入APP_LOG=daily，另外可定义最大日志保存天数<br>在配置文件config/app.php中添加如下代码：<div class="code-wrapper"><pre><code class="hljs language">log_max_files=&gt;30</code></pre></div></li></ol><ol start="2"><li>收集重要日志<div class="code-wrapper"><pre><code class="hljs language">Log::useFiles(storage_path(logs/important.log));// 按日，存储30天的Log::useDailyFiles(storage_path(logs/importantDaily.log, 30));</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速找到php.ini文件位置</title>
    <link href="/2019/06/27/190/"/>
    <url>/2019/06/27/190/</url>
    
    <content type="html"><![CDATA[<p> 现在服务器装多个版本php很常见，那么如何快速找到php.ini文件位置呢？</p><ol><li>phpinfo()</li><li>php -i | grep php.ini </li><li>find / -name php.ini</li><li>php –ini</li></ol>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel模板渲染的问题</title>
    <link href="/2019/05/22/189/"/>
    <url>/2019/05/22/189/</url>
    
    <content type="html"><![CDATA[<h2 id="1-laravel模板变量符更改"><a href="#1-laravel模板变量符更改" class="headerlink" title="1. laravel模板变量符更改"></a>1. laravel模板变量符更改</h2><p>前几天改版时，前后端分离，前端使用了art-template，刚好有和Laravel默认的变量符号，就发现了点问题。</p><p>解决方法：</p><ol><li>前端修改art-template的符号，防止和Laravel冲突；</li><li>修改Laravel模板变量符-双大括号</li></ol><p>可以在控制器调用view方法之前加入</p><div class="code-wrapper"><pre><code class="hljs lua">Blade::setContentTags(<span class="hljs-string">[[, ]]</span>);Blade::setEscapedContentTags(&#123;[@, @]&#125;);</code></pre></div><p>便可以用{[@, @]}替代原来的双大括号。</p><hr><h2 id="2-加载html不使用blade模板引擎"><a href="#2-加载html不使用blade模板引擎" class="headerlink" title="2. 加载html不使用blade模板引擎"></a>2. 加载html不使用blade模板引擎</h2><p>除了这个还有一个问题，比如前后端分离的时候，我只想加载html，不需要渲染替换，这时候怎么办呢？</p><div class="code-wrapper"><pre><code class="hljs pgsql">Route::<span class="hljs-keyword">get</span>(/, <span class="hljs-keyword">function</span> () &#123;        \<span class="hljs-keyword">View</span>::addExtension(html, php);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">view</span>()-&gt;file(<span class="hljs-keyword">index</span>.html);//注意此处路径是<span class="hljs-built_in">public</span>&#125;);</code></pre></div><p>就这样加载就ok 了。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透与布隆过滤器</title>
    <link href="/2019/05/21/188/"/>
    <url>/2019/05/21/188/</url>
    
    <content type="html"><![CDATA[<p> 缓存现在在web领域应用广泛，相信大部分开发人员都会用到，然而你遇见过缓存穿透吗？</p><p>什么是缓存穿透？</p><blockquote><p>缓存穿透是指查询一个根本不存在的数据，缓存层和存储层都不会命中，但是出于容错的考虑，如果从存储层查不到数据则不写入缓存层。<br>简单说，就查询一个不存在的key，因为没有缓存，就会去数据库查询，从而达到穿透缓存。增大数据库压力的险恶目的。</p></blockquote><p>一般来说，不是恶意操作，正常来说，不会遇到这样的问题，然而，怕的就是一些险恶用心的攻击者。那么，我们如何有效处理这种问题呢？</p><p>简单想一下，如果我们把有效的key集合起来，查询之前我们先判断一下查询的key是否在集合中，如果不在，直接打回去，让你调皮。这个问题不就解决了吗？</p><p>但是，如果真的先把所有key组成集合，那这个存储占用的内存太大了，当有1亿个key，那存储空间也是相当可观的，有点太过浪费了。</p><p>为了不浪费，我跟你说，有一个小玩意叫“布隆过滤器”，它能帮你节省空间，节省钱。</p><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。<br>按上面的问题，我们可以把所有的key通过特定的算法，存储到这种二进制向量中，我们来看网上的一张图。</p><p>我们可以通过三个哈希算法将w存储到二进制向量，当查询w是否存在时，我们可以再通过这三个算法，如果算法算出来所在的位置均为1，则表示w可能存在（注意是可能存在），否则一定不存在。（这个很好理解，我就不做说明了）</p><p>说了这么多，我们来尝试下代码。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Author: sai</span><span class="hljs-comment"> * Date: 2019/5/17</span><span class="hljs-comment"> * Time: 14:10</span><span class="hljs-comment"> * 代码来自网络，有改动</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BloomFilterHash</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 由Justin Sobel编写的按位散列函数</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">JSHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$hash</span> = <span class="hljs-number">1315423911</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> ^= ((<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">5</span>) + ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) + (<span class="hljs-variable">$hash</span> &gt;&gt; <span class="hljs-number">2</span>));        &#125;<span class="hljs-comment">//        var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 该哈希算法基于AT＆T贝尔实验室的Peter J. Weinberger的工作。</span><span class="hljs-comment">     * Aho Sethi和Ulman编写的“编译器（原理，技术和工具）”一书建议使用采用此特定算法中的散列方法的散列函数。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PJWHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$bitsInUnsignedInt</span> = <span class="hljs-number">4</span> * <span class="hljs-number">8</span>; <span class="hljs-comment">//（unsigned int）（sizeof（unsigned int）* 8）;</span>        <span class="hljs-variable">$threeQuarters</span> = (<span class="hljs-variable">$bitsInUnsignedInt</span> * <span class="hljs-number">3</span>) / <span class="hljs-number">4</span>;        <span class="hljs-variable">$oneEighth</span> = <span class="hljs-variable">$bitsInUnsignedInt</span> / <span class="hljs-number">8</span>;        <span class="hljs-variable">$highBits</span> = <span class="hljs-number">0xFFFFFFFF</span> &lt;&lt; (<span class="hljs-keyword">int</span>) (<span class="hljs-variable">$bitsInUnsignedInt</span> - <span class="hljs-variable">$oneEighth</span>);        <span class="hljs-variable">$hash</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$test</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-variable">$hash</span> &lt;&lt; (<span class="hljs-keyword">int</span>) (<span class="hljs-variable">$oneEighth</span>)) + ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]); &#125; <span class="hljs-variable">$test</span> = <span class="hljs-variable">$hash</span> &amp; <span class="hljs-variable">$highBits</span>; <span class="hljs-keyword">if</span> (<span class="hljs-variable">$test</span> != <span class="hljs-number">0</span>) &#123; <span class="hljs-variable">$hash</span> = ((<span class="hljs-variable">$hash</span> ^ (<span class="hljs-variable">$test</span> &gt;&gt; (<span class="hljs-keyword">int</span>)(<span class="hljs-variable">$threeQuarters</span>))) &amp; (~<span class="hljs-variable">$highBits</span>));    &#125;<span class="hljs-comment">//    var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 类似于PJW Hash功能，但针对32位处理器进行了调整。它是基于UNIX的系统上的widley使用哈希函数。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ELFHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$hash</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">4</span>) + ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]); <span class="hljs-variable">$x</span> = <span class="hljs-variable">$hash</span> &amp; <span class="hljs-number">0xF0000000</span>; <span class="hljs-keyword">if</span> (<span class="hljs-variable">$x</span> != <span class="hljs-number">0</span>) &#123; <span class="hljs-variable">$hash</span> ^= (<span class="hljs-variable">$x</span> &gt;&gt; <span class="hljs-number">24</span>);            &#125;            <span class="hljs-variable">$hash</span> &amp;= ~<span class="hljs-variable">$x</span>;        &#125;<span class="hljs-comment">//        var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 这个哈希函数来自Brian Kernighan和Dennis Ritchie的书“The C Programming Language”。</span><span class="hljs-comment">     * 它是一个简单的哈希函数，使用一组奇怪的可能种子，它们都构成了31 .... 31 ... 31等模式，它似乎与DJB哈希函数非常相似。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BKDRHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$seed</span> = <span class="hljs-number">131</span>;  <span class="hljs-comment"># 31 131 1313 13131 131313 etc..</span>        <span class="hljs-variable">$hash</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-keyword">int</span>) ((<span class="hljs-variable">$hash</span> * <span class="hljs-variable">$seed</span>) + ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]));        &#125;<span class="hljs-comment">//        var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 这是在开源SDBM项目中使用的首选算法。</span><span class="hljs-comment">     * 哈希函数似乎对许多不同的数据集具有良好的总体分布。它似乎适用于数据集中元素的MSB存在高差异的情况。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SDBMHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$hash</span> = <span class="hljs-number">0</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-keyword">int</span>) (ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) + (<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">6</span>) + (<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">16</span>) - <span class="hljs-variable">$hash</span>);        &#125;<span class="hljs-comment">//        var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 由Daniel J. Bernstein教授制作的算法，首先在usenet新闻组comp.lang.c上向世界展示。</span><span class="hljs-comment">     * 它是有史以来发布的最有效的哈希函数之一。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DJBHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$hash</span> = <span class="hljs-number">5381</span>;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-keyword">int</span>) ((<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">5</span>) + <span class="hljs-variable">$hash</span>) + ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]);        &#125;        var_dump((<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>);<span class="hljs-keyword">die</span>;        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Donald E. Knuth在“计算机编程艺术第3卷”中提出的算法，主题是排序和搜索第6.4章。</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DEKHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-variable">$hash</span> = <span class="hljs-variable">$len</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-keyword">int</span>) ((<span class="hljs-variable">$hash</span> &lt;&lt; <span class="hljs-number">5</span>) ^ (<span class="hljs-variable">$hash</span> &gt;&gt; <span class="hljs-number">27</span>)) ^ ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]);        &#125;<span class="hljs-comment">//        var_dump((int)($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 参考 http://www.isthe.com/chongo/tech/comp/fnv/</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FNVHash</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span> = <span class="hljs-literal">null</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$prime</span> = <span class="hljs-number">16777619</span>; <span class="hljs-comment">//32位的prime 2^24 + 2^8 + 0x93 = 16777619</span>        <span class="hljs-variable">$hash</span> = <span class="hljs-number">2166136261</span>; <span class="hljs-comment">//32位的offset</span>        <span class="hljs-variable">$len</span> || <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;            <span class="hljs-variable">$hash</span> = (<span class="hljs-keyword">int</span>) (<span class="hljs-variable">$hash</span> * <span class="hljs-variable">$prime</span>) % <span class="hljs-number">0xFFFFFFFF</span>;            <span class="hljs-variable">$hash</span> ^= ord(<span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]);        &#125;<span class="hljs-comment">//        var_dump(($hash % 0xFFFFFFFF) &amp; 0xFFFFFFFF);die;</span>        <span class="hljs-keyword">return</span> (<span class="hljs-variable">$hash</span> % <span class="hljs-number">0xFFFFFFFF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 使用redis实现的布隆过滤器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BloomFilterRedis</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 需要使用一个方法来定义bucket的名字</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bucket</span>;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$hashFunction</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">$this</span>-&gt;bucket || !<span class="hljs-keyword">$this</span>-&gt;hashFunction) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;需要定义bucket和hashFunction&quot;</span>, <span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">$this</span>-&gt;Hash = <span class="hljs-keyword">new</span> BloomFilterHash;        <span class="hljs-keyword">$this</span>-&gt;Redis = <span class="hljs-built_in">self</span>::getRedis(); <span class="hljs-comment">//假设这里你已经连接好了</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRedis</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();        <span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>, <span class="hljs-number">6379</span>);<span class="hljs-comment">//        $redis-&gt;auth(13sai666.);</span><span class="hljs-comment">//        var_dump($redis-&gt;info(SERVER));die;</span>        <span class="hljs-variable">$redis</span>-&gt;select(<span class="hljs-number">7</span>);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$redis</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 添加到集合中</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;hashFunction <span class="hljs-keyword">as</span> <span class="hljs-variable">$function</span>) &#123;            <span class="hljs-variable">$hash</span> = <span class="hljs-keyword">$this</span>-&gt;Hash-&gt;<span class="hljs-variable">$function</span>(<span class="hljs-variable">$string</span>);            <span class="hljs-keyword">$this</span>-&gt;Redis-&gt;setBit(<span class="hljs-keyword">$this</span>-&gt;bucket, <span class="hljs-variable">$hash</span>, <span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询是否存在, 存在的一定会存在, 不存在有一定几率会误判</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exists</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-variable">$pipe</span> = <span class="hljs-keyword">$this</span>-&gt;Redis-&gt;multi();        <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$string</span>);        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;hashFunction <span class="hljs-keyword">as</span> <span class="hljs-variable">$function</span>) &#123;            <span class="hljs-variable">$hash</span> = <span class="hljs-keyword">$this</span>-&gt;Hash-&gt;<span class="hljs-variable">$function</span>(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$len</span>);            <span class="hljs-variable">$pipe</span> = <span class="hljs-variable">$pipe</span>-&gt;getBit(<span class="hljs-keyword">$this</span>-&gt;bucket, <span class="hljs-variable">$hash</span>);        &#125;        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$pipe</span>-&gt;exec();<span class="hljs-comment">//        var_dump($res);</span>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$res</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$bit</span>) &#123;            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$bit</span> == <span class="hljs-number">0</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 重复内容过滤器</span><span class="hljs-comment"> * 该布隆过滤器总位数为2^32位, 判断条数为2^30条. hash函数最优为3个.(能够容忍最多的hash函数个数)</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 注意, 在存储的数据量到2^30条时候, 误判率会急剧增加, 因此需要定时判断过滤器中的位为1的的数量是否超过50%, 超过则需要清空.</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilteRepeatedComments</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BloomFilterRedis</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 表示判断重复内容的过滤器</span><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> string</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bucket</span> = bulong;    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$hashFunction</span> = [FNVHash, JSHash, ELFHash];&#125;</code></pre></div><p>可以调用测试下，</p><div class="code-wrapper"><pre><code class="hljs coffeescript">var_dump(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> FilteRepeatedComments())</span>-&gt;</span>add(abc)); //<span class="hljs-literal">true</span>var_dump(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> FilteRepeatedComments())</span>-&gt;</span>add(bcd));//<span class="hljs-literal">true</span>var_dump(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> FilteRepeatedComments())</span>-&gt;</span>add(dfg));//<span class="hljs-literal">true</span>var_dump(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> FilteRepeatedComments())</span>-&gt;</span>exists(dfg));//<span class="hljs-literal">true</span>var_dump(<span class="hljs-function"><span class="hljs-params">(<span class="hljs-keyword">new</span> FilteRepeatedComments())</span>-&gt;</span>exists(dgg));//<span class="hljs-literal">false</span></code></pre></div><p>简单的测试通过！</p><p>当然，应用时需要进行更多的测试。</p><p>那么这个叫“布隆过滤器”的东东真有那么好用？</p><p>我相信，你应该可以看出来，这是有误判率的，另外删除也是困难的。</p><p>具体误判推导过程，可以参考：</p><p><a href="http://imhuchao.com/1271.html">布隆过滤器(bloom filter)介绍以及php和redis实现布隆过滤器实现方法</a></p><p><a href="https://www.cnblogs.com/Jack47/p/bloom_filter_intro.html">布隆过滤器简介</a></p><p>应用场景：</p><ul><li>垃圾邮件过滤</li><li>爬虫的url过滤</li><li>防止缓存击穿</li></ul><p>好了，就介绍到这里啦！</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次输入验证码总是失败</title>
    <link href="/2019/04/30/187/"/>
    <url>/2019/04/30/187/</url>
    
    <content type="html"><![CDATA[<p>上周网站改版时，表单提交遇到一个问题，就是输入图片验证码，第一次总是失败，即便输入无误，照样失败，第二次就能正常验证了。</p><p>分析原因：</p><ol><li>session不同步</li><li>模板渲染的问题</li><li>验证码图片生成问题</li></ol><p>第一个，如果session不同步，按理说，点击刷新后应该也会失败。<br>第二个，原来的未出现这个问题，按理说也不会是这个原因。<br>第三个，修改下js代码，待页面渲染完成后再加载图片，试验无效。</p><p>打开调试器，发现有两张图片加载失败，是路径问题，修改后提交测试，发现验证码问题没了。</p><p>没了？？？<br>what？？？<br>why？？？</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的top命令详解</title>
    <link href="/2019/04/26/186/"/>
    <url>/2019/04/26/186/</url>
    
    <content type="html"><![CDATA[<p> top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，常用于服务端性能分析。</p><p><img src="/images/qiniu/1556243283000.png" alt="top"></p><p>统计信息区前五行是系统整体的统计信息。具体如下：</p><div class="code-wrapper"><pre><code class="hljs x86asm">第一行服务器运行信息：<span class="hljs-number">09</span>:<span class="hljs-number">46</span>:<span class="hljs-number">41</span>    当前时间<span class="hljs-meta">up</span> 71days，<span class="hljs-number">16</span>:<span class="hljs-number">51</span>    系统运行时间，格式为天，时:分<span class="hljs-number">2</span> users    当前登录用户数load average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>, <span class="hljs-number">0.00</span>    系统负载，即任务队列的平均长度。三个数值分别为 <span class="hljs-number">1</span>分钟、<span class="hljs-number">5</span>分钟、<span class="hljs-number">15</span>分钟前到现在的平均值。 第二行为进程信息Tasks:total 进程总数running 正在运行的进程数sleeping 睡眠的进程数stopped 停止的进程数zombie 僵尸进程数第三行<span class="hljs-meta">CPU</span>信息<span class="hljs-meta">Cpu</span>(s): <span class="hljs-number">0.5</span>% us 用户空间占用<span class="hljs-meta">CPU</span>百分比<span class="hljs-number">0.3</span>% sy 内核空间占用<span class="hljs-meta">CPU</span>百分比<span class="hljs-number">0.0</span>% ni 用户进程空间内改变过优先级的进程占用<span class="hljs-meta">CPU</span>百分比<span class="hljs-number">99.0</span>% id 空闲<span class="hljs-meta">CPU</span>百分比<span class="hljs-number">0.0</span>% wa 等待输入输出的<span class="hljs-meta">CPU</span>时间百分比<span class="hljs-number">0.2</span>%hi：硬件<span class="hljs-meta">CPU</span>中断占用百分比<span class="hljs-number">0.0</span>%si：软中断占用百分比<span class="hljs-number">0.0</span>%st：虚拟机占用百分比 第四行Mem内存信息:8189652k total    物理内存总量7885740k used    使用的物理内存总量303912k free    空闲内存总量566272k buffers    用作内核缓存的内存量第五行swap交换分区信息: 4194300k total    交换区总量15544k used    使用的交换区总量4178756k free    空闲交换区总量1318852k cached    缓存的交换区总量，即可用交换区内存</code></pre></div><p>当然，也推荐使用其他运行分析可视化工具，如htop，功能相比top更为强大。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试技术问题汇总</title>
    <link href="/2019/04/16/185/"/>
    <url>/2019/04/16/185/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><a href="https://www.cnblogs.com/LiuChunfu/p/8052890.html">rpm和yum的区别</a></li><li><a href="http://man.linuxde.net/">Linux命令大全</a></li></ul><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><ul><li><a href="http://doc.redisfans.com/topic/persistence.html">redis持久化</a></li><li><a href="http://www.cnblogs.com/mrhgw/p/6278619.html">redis数据类型详解</a></li></ul><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><ul><li><a href="https://www.cnblogs.com/annsshadow/p/5037667.html">mysql执行过程</a></li><li><a href="https://www.cnblogs.com/kevingrace/p/5685355.html">mysql存储引擎</a></li></ul><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ul><li><a href="https://juejin.im/post/5bc9e3bde51d4517f86e7352">nginx健康监测</a></li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><a href="https://www.cnblogs.com/studyLog-share/p/4691250.html">面向对象</a></li><li><a href="https://www.cnblogs.com/fanchangfa/p/4158046.html">this,self和parent</a></li></ul><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><ul><li>如何设计一个框架？</li><li>你用过的框架对比看看优缺点？</li><li>mysql连接池有了解吗？如何实现？</li><li>php-fpm配置pm为static和dynamic的区别？</li><li>说说代码重构的思路？</li><li>印象比较深刻的项目或者技术点？</li><li>最近在看的技术书籍？</li></ul><p>暂时想到的就这些，后续会补充思路等。</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置根据url指向不同的目录</title>
    <link href="/2019/04/16/Nginx7/"/>
    <url>/2019/04/16/Nginx7/</url>
    
    <content type="html"><![CDATA[<p>前几日，把老项目做前后端分离的时候，因为后台还是保留，前台做成前后端分离，遇到的一个需求。</p><p>老项目php版本5.6，新接口考虑使用php7.0，于是考虑根据url做nginx配置。</p><p>思路一：根据url区分php版本，再根据版本指向对应的root目录。<br>主要配置如下：</p><div class="code-wrapper"><pre><code class="hljs awk">server &#123;    listen       <span class="hljs-number">80</span>;    server_name  old.com;    root <span class="hljs-regexp">/data/</span>www/old;    location / &#123;        index index.html index.htm index.php;    try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$query_string</span>;    &#125;    location <span class="hljs-regexp">/api/</span> &#123;        root <span class="hljs-regexp">/data/</span>www/new;        index index.html index.htm index.php;        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$query_string</span>&amp;php=<span class="hljs-number">7</span>;    &#125;    location ~ \.php$ &#123;        <span class="hljs-comment"># 9000端口对应php-fpm5.6 , 9001端口对应php-fpm7.0</span>        fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$args</span> ~* <span class="hljs-string">&quot;php=7&quot;</span>)&#123;                root <span class="hljs-regexp">/data/</span>www/new;            fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9001</span>;        &#125;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;        include        fastcgi_params;    &#125;    ...&#125;</code></pre></div><p>试验成功，只是总感觉别扭，因为在query_string后面加入php=7不那么优雅，对吧？而且如果有人习惯获取所有的query_string而不做处理，很容易引起问题。</p><p>思路二：根据url转发到另一个端口，另一个server监听此端口。<br>主要配置如下：</p><div class="code-wrapper"><pre><code class="hljs awk">server &#123;    listen <span class="hljs-number">80</span>;    server_name  old.com;    root <span class="hljs-regexp">/data/</span>www/old;    location / &#123;        index  index.html index.htm index.php;        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$query_string</span>;    &#125;    location <span class="hljs-regexp">/api/</span> &#123;        proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8009</span>;    &#125;    location ~ \.php$ &#123;        <span class="hljs-comment"># 9000端口对应php-fpm5.6 </span>        fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;        include        fastcgi_params;    &#125;        ...&#125;server &#123;    listen <span class="hljs-number">8080</span>;    root <span class="hljs-regexp">/data/</span>www/new;    location / &#123;        index  index.html index.htm index.php;        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$query_string</span>;    &#125;    location ~ \.php$ &#123;        <span class="hljs-comment"># 9001端口对应php-fpm7.0</span>        fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9001</span>;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;        include        fastcgi_params;    &#125;    ...&#125;</code></pre></div><p>相比第一个这个只会多占用个端口，但优雅多了！</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的elasticsearch尝试</title>
    <link href="/2019/04/10/183/"/>
    <url>/2019/04/10/183/</url>
    
    <content type="html"><![CDATA[<p>环境：windows7 64位</p><p>ElasticSearch（后面简称es）基于java，所以务必先安装java，java安装省略，建议安装最新的稳定版。</p><h2 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h2><p><a href="https://www.elastic.co/downloads/elasticsearch">es下载</a></p><p>解压后进入目录，启动bin/elasticsearch.bat</p><p>访问：</p><blockquote><p><a href="http://localhost:9200/">http://localhost:9200/</a></p></blockquote><p>可以看到一些信息，版本等，就表明已经安装病启动成功！</p><h3 id="安装HEAD插件"><a href="#安装HEAD插件" class="headerlink" title="安装HEAD插件"></a>安装HEAD插件</h3><blockquote><p>git clone git://github.com/mobz/elasticsearch-head.git<br>cd elasticsearch-head<br>npm install<br>npm run start</p></blockquote><p>浏览器打开， <a href="http://localhost:9100/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%88%9A%E5%BC%80%E5%90%AF%E5%8A%A8%E7%9A%84ES%E5%AE%9E%E4%BE%8B%E3%80%82">http://localhost:9100/，可以看到刚开启动的ES实例。</a></p><h3 id="伪集群"><a href="#伪集群" class="headerlink" title="伪集群"></a>伪集群</h3><p>打开config下得elasticsearch.yml</p><p>加入以下配置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 自定义配置</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">sai_es</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">es0</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span></code></pre></div><p>复制es文件夹到es1,es2,修改配置:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">es1:</span><span class="hljs-comment"># 自定义配置</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">sai_es</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">es1</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">false</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;127.0.0.1&quot;</span>]<span class="hljs-attr">es2:</span><span class="hljs-comment"># 自定义配置</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">sai_es</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">es2</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">false</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;127.0.0.1&quot;</span>]</code></pre></div><p>注意，此时要保证es1，es2下面data目录为空，否则启动时会因为冲突id连接不上es0。</p><p>然后启动es1，es2，通过head插件，我们可以看到集群搭建完成！sai_es集群下有3个实例：es0，es1，es2。</p><p>集群搭建成功！</p>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis集群配置</title>
    <link href="/2019/03/29/182/"/>
    <url>/2019/03/29/182/</url>
    
    <content type="html"><![CDATA[<blockquote><p>环境：centos7.5，redis5.0.0</p></blockquote><p>下载安装在合适的目录，我是安装在/usr/local/redis-5.0.0下，过程比较简单，不赘述了。</p><p>同级下新建cluster，拷贝redis.conf文件进来，生成4个文件redis_2001.conf、redis_2002.conf、redis_2003.conf、redis_2004.conf，修改对应配置。</p><p>主要配置如下</p><div class="code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 端口号</span>port <span class="hljs-number">2001</span><span class="hljs-meta"># 后台启动</span>daemonize yes<span class="hljs-meta"># 开启集群</span>cluster-enabled yes<span class="hljs-meta"># 集群节点配置文件</span>cluster-config-file nodes<span class="hljs-number">-2001.</span>conf<span class="hljs-meta"># 进程pid的文件位置</span>pidfile /<span class="hljs-keyword">var</span>/run/redis<span class="hljs-number">-2001.</span>pid<span class="hljs-meta"># 持久化配置</span><span class="hljs-meta"># 开启aof</span>appendonly yes<span class="hljs-meta"># aof文件路径</span>appendfilename <span class="hljs-string">&quot;appendonly-2001.aof&quot;</span><span class="hljs-meta"># rdb文件路径</span>dbfilename dump<span class="hljs-number">-2001.</span>rdb</code></pre></div><p>启动redis，</p><div class="code-wrapper"><pre><code class="hljs pgsql">redis-<span class="hljs-keyword">server</span> <span class="hljs-keyword">cluster</span>/redis<span class="hljs-number">-2001.</span>confredis-<span class="hljs-keyword">server</span> <span class="hljs-keyword">cluster</span>/redis<span class="hljs-number">-2002.</span>confredis-<span class="hljs-keyword">server</span> <span class="hljs-keyword">cluster</span>/redis<span class="hljs-number">-2003.</span>confredis-<span class="hljs-keyword">server</span> <span class="hljs-keyword">cluster</span>/redis<span class="hljs-number">-2004.</span>conf</code></pre></div><p>连接构建redis集群</p><blockquote><p>./redis-trib.rb create –replicas 1 127.0.0.1:2001 127.0.0.1:2002  127.0.0.1:2003 127.0.0.1:2004</p></blockquote><p>抛出警告：</p><blockquote><p>WARNING: redis-trib.rb is not longer available!</p></blockquote><p>5.0版本抛弃了redis-trib。</p><p>按照提示执行：</p><blockquote><p>redis-cli –cluster create 127.0.0.1:2001 127.0.0.1:2002 127.0.0.1:2003 127.0.0.1:2004 –cluster-replicas 1</p></blockquote><p>错误输出如下：</p><div class="code-wrapper"><pre><code class="hljs xquery">*** ERROR: Invalid configuration <span class="hljs-keyword">for</span> cluster creation.*** Redis Cluster requires <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span> <span class="hljs-number">3</span> master nodes.*** This <span class="hljs-literal">is</span><span class="hljs-built_in"> not</span> possible with <span class="hljs-number">4</span> nodes <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> replicas per <span class="hljs-type">node</span>.*** At <span class="hljs-keyword">least</span> <span class="hljs-number">6</span> nodes are required.</code></pre></div><p>因为是单机测试而已，去掉复制</p><blockquote><p>redis-cli –cluster create 127.0.0.1:2001 127.0.0.1:2002 127.0.0.1:2003 127.0.0.1:2004</p></blockquote><p>然后有个保存配置的确认，yes之后成功！</p><div class="code-wrapper"><pre><code class="hljs prolog">[<span class="hljs-symbol">OK</span>] <span class="hljs-symbol">All</span> nodes agree about slots configuration.&gt;&gt;&gt; <span class="hljs-symbol">Check</span> for open slots...&gt;&gt;&gt; <span class="hljs-symbol">Check</span> slots coverage...[<span class="hljs-symbol">OK</span>] <span class="hljs-symbol">All</span> <span class="hljs-number">16384</span> slots covered.</code></pre></div><p>进入客户端</p><blockquote><p>redis-cli -p 2001</p></blockquote><p>查看节点</p><blockquote><p>cluster nodes</p></blockquote><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">90a734c7716a00060584acb82cb3dd7e437a5459</span> <span class="hljs-number">127.0.0.1:2003</span>@<span class="hljs-number">12003</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1541042930063</span> <span class="hljs-number">3</span> connected <span class="hljs-number">8192</span>-<span class="hljs-number">12287</span><span class="hljs-attribute">7ac1fab72c275ba9549a9da71245fdd29a3920a6</span> <span class="hljs-number">127.0.0.1:2002</span>@<span class="hljs-number">12002</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1541042930563</span> <span class="hljs-number">2</span> connected <span class="hljs-number">4096</span>-<span class="hljs-number">8191</span><span class="hljs-attribute">490035c372472798a224b6d00c249d8b41508b78</span> <span class="hljs-number">127.0.0.1:2001</span>@<span class="hljs-number">12001</span> myself,master - <span class="hljs-number">0</span> <span class="hljs-number">1541042928000</span> <span class="hljs-number">1</span> connected <span class="hljs-number">0</span>-<span class="hljs-number">4095</span><span class="hljs-attribute">9101d285b991c6dcb086cf3da4cd0eae7777ece0</span> <span class="hljs-number">127.0.0.1:2004</span>@<span class="hljs-number">12004</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1541042929563</span> <span class="hljs-number">4</span> connected <span class="hljs-number">12288</span>-<span class="hljs-number">16383</span></code></pre></div><p>可以看出集群已搭建成功！</p><p>对应的php可以使用predis操作redis，当然\Redis也足够好用了,up to u。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php小试rabbitmq</title>
    <link href="/2019/03/29/181/"/>
    <url>/2019/03/29/181/</url>
    
    <content type="html"><![CDATA[<blockquote><p>RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</p></blockquote><h3 id="1-安装："><a href="#1-安装：" class="headerlink" title="1. 安装："></a>1. 安装：</h3><p>windows安装十分简单，印象中装的过程几乎无障碍，忽略。</p><p>centos7安装过程如下：</p><p>依赖安装</p><blockquote><p>yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel socat</p></blockquote><p>安装erlang，务必在下面的地址下载，之前在官网下载，安装总是有问题，浪费了大把时间。</p><div class="code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dl.bintray.com<span class="hljs-regexp">/rabbitmq/</span>rpm<span class="hljs-regexp">/erlang/</span><span class="hljs-number">20</span><span class="hljs-regexp">/el/</span><span class="hljs-number">7</span>/</code></pre></div><p>官网下载rabiitmq，rpm安装</p><blockquote><p>rpm -ivh (rpm包)</p></blockquote><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>启动rabbitmq</p><blockquote><p>/bin/systemctl start rabbitmq-server.service</p></blockquote><p>片刻之后，可以查看状态是否active</p><blockquote><p>bin/systemctl status rabbitmq-server.service</p></blockquote><blockquote><p>cp rabbitmq.config.example /etc/rabbitmq/<br>cd /etc/rabbitmq/<br>mv rabbitmq.config.example rabbitmq.config</p></blockquote><p>修改成你想要的配置，然后重启。</p><h3 id="3-UI"><a href="#3-UI" class="headerlink" title="3. UI"></a>3. UI</h3><p>启动</p><blockquote><p>rabbitmq-plugins enable rabbitmq_management</p></blockquote><p>然后根据配置打开界面</p><p>安全性问题，可以禁止外部guest访问，新建账户</p><blockquote><p>rabbitmqctl add_user 13sai 12345678<br>rabbitmqctl set_user_tags 13sai administrator</p></blockquote><p>并修改配置：</p><blockquote><p>{loopback_users, [&lt;&lt;”guest”&gt;&gt;]}</p></blockquote><p>重启rabbitmq服务。</p><h3 id="4-简单实例"><a href="#4-简单实例" class="headerlink" title="4. 简单实例"></a>4. 简单实例</h3><p>生产者：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by PhpStorm.</span><span class="hljs-comment"> * User: 13sai</span><span class="hljs-comment"> * Date: 2018/11/5</span><span class="hljs-comment"> * Time: 10:39</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 配置信息</span><span class="hljs-variable">$config</span> = [    host =&gt; localhost,    port =&gt; <span class="hljs-number">5672</span>,    login =&gt; sai,    password =&gt; <span class="hljs-number">123456</span>,    vhost=&gt;/];<span class="hljs-variable">$exName</span> = changes; <span class="hljs-comment">//交换机名</span><span class="hljs-variable">$route</span> = key; <span class="hljs-comment">//路由key</span><span class="hljs-comment">// 创建连接和channel</span><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> AMQPConnection(<span class="hljs-variable">$config</span>);<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>-&gt;connect()) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败&quot;</span>);&#125;<span class="hljs-variable">$channel</span> = <span class="hljs-keyword">new</span> AMQPChannel(<span class="hljs-variable">$conn</span>);<span class="hljs-comment">//消息内容</span><span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;消息测试&quot;</span>;<span class="hljs-comment">//创建交换机</span><span class="hljs-variable">$ex</span> = <span class="hljs-keyword">new</span> AMQPExchange(<span class="hljs-variable">$channel</span>);<span class="hljs-variable">$ex</span>-&gt;setName(<span class="hljs-variable">$exName</span>);<span class="hljs-comment">//发送消息，注意持久化也要设置[delivery_mode =&gt; AMQP_DURABLE]</span><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">5</span>; <span class="hljs-variable">$i</span>++)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Send Message:&quot;</span>.<span class="hljs-variable">$ex</span>-&gt;publish(<span class="hljs-variable">$i</span>.:.<span class="hljs-variable">$message</span>, <span class="hljs-variable">$route</span>, AMQP_DURABLE, [delivery_mode =&gt; AMQP_DURABLE]).<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span>;&#125;<span class="hljs-variable">$conn</span>-&gt;disconnect();</code></pre></div><p>消费者：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by PhpStorm.</span><span class="hljs-comment"> * User: 13sai</span><span class="hljs-comment"> * Date: 2018/11/5</span><span class="hljs-comment"> * Time: 10:39</span><span class="hljs-comment"> */</span><span class="hljs-variable">$config</span> = [    host =&gt; localhost,    port =&gt; <span class="hljs-number">5672</span>,    login =&gt; sai,    password =&gt; <span class="hljs-number">123456</span>,    vhost=&gt;/];<span class="hljs-variable">$exName</span> = changes; <span class="hljs-comment">//交换机名</span><span class="hljs-variable">$queueMame</span> = queue1; <span class="hljs-comment">//队列名</span><span class="hljs-variable">$route</span> = key; <span class="hljs-comment">//路由key</span><span class="hljs-comment">// 创建连接和channel</span><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> AMQPConnection(<span class="hljs-variable">$config</span>);<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>-&gt;connect()) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败&quot;</span>);&#125;<span class="hljs-variable">$channel</span> = <span class="hljs-keyword">new</span> AMQPChannel(<span class="hljs-variable">$conn</span>);<span class="hljs-comment">// 创建交换机</span><span class="hljs-variable">$ex</span> = <span class="hljs-keyword">new</span> AMQPExchange(<span class="hljs-variable">$channel</span>);<span class="hljs-variable">$ex</span>-&gt;setName(<span class="hljs-variable">$exName</span>);<span class="hljs-variable">$ex</span>-&gt;setType(AMQP_EX_TYPE_DIRECT); <span class="hljs-comment">//direct类型</span><span class="hljs-variable">$ex</span>-&gt;setFlags(AMQP_DURABLE); <span class="hljs-comment">//持久化，很重要</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Exchange Status:&quot;</span>.<span class="hljs-variable">$ex</span>-&gt;declare().<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span>;<span class="hljs-comment">// 创建队列</span><span class="hljs-variable">$queue</span> = <span class="hljs-keyword">new</span> AMQPQueue(<span class="hljs-variable">$channel</span>);<span class="hljs-variable">$queue</span>-&gt;setName(<span class="hljs-variable">$queueMame</span>);<span class="hljs-variable">$queue</span>-&gt;setFlags(AMQP_DURABLE); <span class="hljs-comment">//持久化</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Message Total:&quot;</span>.<span class="hljs-variable">$queue</span>-&gt;declare().<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span>;<span class="hljs-comment">//绑定交换机与队列，并指定路由键</span><span class="hljs-keyword">echo</span> Queue Bind: .<span class="hljs-variable">$queue</span>-&gt;bind(<span class="hljs-variable">$exName</span>, <span class="hljs-variable">$route</span>).<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span>;<span class="hljs-comment">//阻塞模式接收消息</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Message:</span><span class="hljs-string">&quot;</span>;<span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>)&#123;    <span class="hljs-variable">$queue</span>-&gt;consume(processMessage);&#125;<span class="hljs-variable">$conn</span>-&gt;disconnect();<span class="hljs-comment">/**</span><span class="hljs-comment"> * 消费回调函数</span><span class="hljs-comment"> * 处理消息</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processMessage</span>(<span class="hljs-params"><span class="hljs-variable">$envelope</span>, <span class="hljs-variable">$queue</span></span>) </span>&#123;    <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$envelope</span>-&gt;getBody();    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>.<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;</span>; <span class="hljs-comment">//处理消息</span>    <span class="hljs-variable">$queue</span>-&gt;ack(<span class="hljs-variable">$envelope</span>-&gt;getDeliveryTag()); <span class="hljs-comment">//手动发送ACK应答</span>&#125;</code></pre></div><p>花了些时间，不过弄出来还是感觉不错的。</p>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LNMP设置开机自启动</title>
    <link href="/2019/03/29/180/"/>
    <url>/2019/03/29/180/</url>
    
    <content type="html"><![CDATA[<p>有时候服务器需要重启，但重启各种程序需要启动是个麻烦的事情，我们尝试配置开机自启动。</p><p>环境：centos 7.5</p><p>我的版本跟低版本有多不同，不能通过chkconfig add命令加入，我们可以进入目录</p><blockquote><p>/lib/systemd/system</p></blockquote><p>依次新建</p><div class="code-wrapper"><pre><code class="hljs gradle"><span class="hljs-comment">// mysqld.service</span>[Unit]<span class="hljs-keyword">Description</span>=mysqlAfter=network.target[Service]Type=forkingExecStart=<span class="hljs-regexp">/usr/</span>bin/mysql.serverExecReload=<span class="hljs-regexp">/bin/</span>systemctl restart mysqld.serviceExecStop=<span class="hljs-regexp">/bin/</span>systemctl stop mysqld.servicePrivateTmp=<span class="hljs-keyword">true</span>[Install]WantedBy=multi-user.target----------<span class="hljs-comment">//nginx.service</span>[Unit]<span class="hljs-keyword">Description</span>=nginxAfter=network.target[Service]Type=forkingExecStart=<span class="hljs-regexp">/usr/</span>bin/nginxExecReload=<span class="hljs-regexp">/usr/</span>bin/nginx -s reloadExecStop=<span class="hljs-regexp">/usr/</span>bin/nginx -s quitPrivateTmp=<span class="hljs-keyword">true</span>[Install]WantedBy=multi-user.target----------<span class="hljs-comment">// php-fpm.service</span>[Unit]<span class="hljs-keyword">Description</span>=php-fpmAfter=network.target[Service]Type=forkingExecStart=<span class="hljs-regexp">/usr/</span>bin/php-fpmExecReload=ps -ef|<span class="hljs-keyword">grep</span> php-fpm|awk -F   &#123;<span class="hljs-keyword">print</span> &#125;|xargs kill -USR2ExecStop=ps -ef|<span class="hljs-keyword">grep</span> php-fpm|awk -F   &#123;<span class="hljs-keyword">print</span> &#125;|xargs kill -<span class="hljs-keyword">INT</span>PrivateTmp=<span class="hljs-keyword">true</span>[Install]WantedBy=multi-user.target----------<span class="hljs-comment">// redis.service</span>[Unit]<span class="hljs-keyword">Description</span>=redisAfter=network.target[Service]Type=forkingExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/redis-server /u</span>sr<span class="hljs-regexp">/local/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">0</span>/redis.confExecStop=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis-5.0.0/</span>redis-cli shutdownPrivateTmp=<span class="hljs-keyword">true</span>[Install]WantedBy=multi-user.target</code></pre></div><blockquote><p>ExecStart,ExecStop,ExecReload各有不同，自行修改</p></blockquote><p>并且systemctl enable启动。</p><blockquote><p>reboot</p></blockquote><p>测试一下。</p><p>脚本说明</p><div class="code-wrapper"><pre><code class="hljs asciidoc">主要有以下三部分[unit] :定义与Unit类型无关的通用选项；用于提供unit的描述信息、 unit行为及依赖关系等[Service]：与特定类型相关的专用选项；此处为Service类型[Install]：定义由“ systemctl enable”以及&quot;systemctl disable“命令在实现服务启用或禁用时用到的一些选项<span class="hljs-code">----------</span><span class="hljs-code">Service参数</span><span class="hljs-code"></span><span class="hljs-code">EnvironmentFile：环境配置文件</span><span class="hljs-code">ExecStart：指明启动unit要运行命令或脚本的绝对路径</span><span class="hljs-code">ExecStartPre： ExecStart前运行</span><span class="hljs-code">ExecStartPost： ExecStart后运行</span><span class="hljs-code">ExecRsload: 重启当前服务时执行的命令</span><span class="hljs-code">ExecStopPost：停止当前服务之后执行的命令</span><span class="hljs-code">ExecStartSec：自动重启当前服务间隔的秒数</span><span class="hljs-code">ExecStop：指明停止unit要运行的命令或脚本</span><span class="hljs-code">Restart：当设定Restart=1时，则当次daemon服务意外终止后，会再次自动启动此服务。</span><span class="hljs-code">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数。</span><span class="hljs-code">Environment：指定环境变量。</span><span class="hljs-code"></span><span class="hljs-code"></span><span class="hljs-code">----------</span>Install参数：Alias：别名，可使用systemctl command Alias.serviceRequiredBy：被哪些units所依赖，强依赖WantedBy：被哪些units所依赖，弱依赖Also：安装本服务的时候还要安装别的相关服务</code></pre></div><p>更多请看：<br><a href="https://www.jianshu.com/p/92208194d700">在linux下创建自定义服务</a><br><a href="http://blog.51cto.com/gavin0/2156626">linux中的unit的配置文件</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于mycat实现读写分离</title>
    <link href="/2019/01/12/177/"/>
    <url>/2019/01/12/177/</url>
    
    <content type="html"><![CDATA[<blockquote><p>mysql中间件，分库分表，读写分离。</p></blockquote><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li>centos7.4</li><li>mysql5.7</li></ul><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="http://dl.mycat.io/">下载地址</a></p><p>解压到你喜欢的目录。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>./bin/mycat start</p></blockquote><blockquote><p>tips:建议修改配置文件时bak下原配置文件。</p></blockquote><p>秒启动，尝试修改配置(conf/wrapper.conf)，保存后发现mycat进程没有了。</p><p>猜测是OOM kill了，查看系统日志，貌似无mycat异常。</p><blockquote><p>dmesg | tail -20</p></blockquote><p>查看logs目录下日志，应该是内存不足。（心疼ecs1cpu1g的配置）</p><p>修改conf/wrapper.conf</p><div class="code-wrapper"><pre><code class="hljs pgsql"># Java Additional Parameters<span class="hljs-meta">#wrapper.java.additional.1=</span><span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.1</span>=-DMYCAT_HOME=.<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.2</span>=-<span class="hljs-keyword">server</span><span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.3</span>=-XX:MaxPermSize=<span class="hljs-number">64</span>M<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.4</span>=-XX:+AggressiveOpts<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.5</span>=-XX:MaxDirectMemorySize=<span class="hljs-number">256</span>M<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.6</span>=-Dcom.sun.management.jmxremote<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.7</span>=-Dcom.sun.management.jmxremote.port=<span class="hljs-number">1984</span><span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.8</span>=-Dcom.sun.management.jmxremote.authenticate=<span class="hljs-keyword">false</span><span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.9</span>=-Dcom.sun.management.jmxremote.ssl=<span class="hljs-keyword">false</span><span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.10</span>=-Xmx512M<span class="hljs-keyword">wrapper</span>.java.additional<span class="hljs-number">.11</span>=-Xms512M</code></pre></div><p>重新启动，成功，进程也没有被kill，但内存已经80%左右了。</p><p>关闭ecs云监控缩减内存占用，调低mysql占用内存缓冲区。</p><p>开启3306,3307端口的mysql实例，增加mycat数据库，并配置master-slave，设置好所需账号密码权限。</p><p>关注下内存占用，约85%，还能撑住。</p><p>关闭mycat。</p><p>server.xml主要修改，数据库，账号密码。</p><div class="code-wrapper"><pre><code class="hljs applescript">&lt;user <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;<span class="hljs-number">123456</span>&lt;/<span class="hljs-keyword">property</span>&gt;&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;sai&lt;/<span class="hljs-keyword">property</span>&gt;&lt;/user&gt;</code></pre></div><p>sai为逻辑库，可自行配置。</p><p>schema.xml主要修改</p><div class="code-wrapper"><pre><code class="hljs xml">// sai对应server.xml配置<span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sai&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;company&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;global&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span>// localhost3306对应dataHost的name，database是真实的数据库<span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost3306&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;mycat&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost3306&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><span class="hljs-tag">  <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;2&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>show slave status<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span>// 读（3307）写（3306）实例<span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;127.0.1:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span></span><span class="hljs-tag">   <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;111111&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- can have multi read hosts --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostS2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;127.0.1:3307&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;111111&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">balance指的负载均衡类型，目前的取值有4种：</span><span class="hljs-keyword"></span><span class="hljs-number">0</span>, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。<span class="hljs-number">1</span>，全部的readHost与stand <span class="hljs-keyword">by </span>writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;<span class="hljs-built_in">S1</span>，M2-&gt;<span class="hljs-built_in">S2</span>，并且M1与 M2互为主备)，正常情况下，M2,<span class="hljs-built_in">S1</span>,<span class="hljs-built_in">S2</span>都参与select语句的负载均衡。<span class="hljs-number">2</span>，所有读操作都随机的在writeHost、readhost上分发。<span class="hljs-number">3</span>，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力<span class="hljs-keyword">switchType指的是切换的模式，目前的取值也有4种：</span><span class="hljs-keyword"></span>-<span class="hljs-number">1</span>， 表示不自动切换<span class="hljs-number">1</span>， 默认值，表示自动切换，<span class="hljs-number">1</span>.<span class="hljs-number">5</span>版本后丢弃<span class="hljs-number">2</span> ，基于MySQL主从同步的状态决定是否切换,心跳语句为 <span class="hljs-keyword">show </span>slave status</code></pre></div><p>启动。</p><blockquote><p> mysql -h127.0.0.1 -uroot -P8066 -p</p></blockquote><p>输入密码进入，切换sai</p><p>默认端口8066，mysql执行下语句，</p><blockquote><p>INSERT INTO <code>company</code> VALUES (1, 13sai);</p></blockquote><blockquote><p>select * from company;</p></blockquote><p>mysql实例已经开启了查询日志，查看日志，读写分离了。</p><h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><ol><li>假如表很多，配置不是得晕死</li><li>最近发现很多好用的中间件底层都是java，考虑要不要入坑。</li></ol>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何恢复误删的数据库</title>
    <link href="/2019/01/11/176/"/>
    <url>/2019/01/11/176/</url>
    
    <content type="html"><![CDATA[<p> 前段时间，某开发人员误删了一个数据库，导致我们的服务，最后是恢复了，过程我并不清楚，但引起了我的兴趣。因为误操作真的是很难避免的，开发人员那么多，一个不小心，就可能影响了其他人的使用，所以慎重操作，最好能禁用一些操作，比如drop！</p><p>那么如何来恢复呢？</p><p>如果有备份的话，当然去寻找最新的，然后恢复，如果不在意新增的数据，那么这样就足够了。</p><p>来看一下备份，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">// 备份某个数据库某些表</span>mysqldump [options] db_name [tbl_name ...] &gt; bak.sql<span class="hljs-comment">// 备份多个数据库</span>mysqldump [options] --databases db_name ...&gt; bak.sql<span class="hljs-comment">// 备份所有数据库</span>mysqldump [options] --all-databases&gt; bak.sql</code></pre></div><p>个人建议单个备份，好独立操作。</p><p>了解更多请看：<br><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html">mysqldump</a></p><p>恢复操作（以单个数据库为例）</p><blockquote><p>mysql -h127.0.0.1 -uroot -p del &lt; bak.sql</p></blockquote><p>操作是不是很简单？</p><p>那么如果没有备份怎么办呢？</p><p>第二种操作前提是开启了binlog，通过log恢复。</p><p>误删后可以保存下binlog</p><blockquote><p>mysqlbinlog mysql-bin.000011 &gt; del.log</p></blockquote><p>打开文件，去掉drop操作并保存。</p><blockquote><p>mysql -h127.0.0.1 -uroot -p &lt;del.log</p></blockquote><p>当然，比较建议通过dump全备份操作，然后找出备份到drop的pos。</p><p>通过mysqlbinlog 的start-position和stop-position生成sql后恢复。这里就不赘述了。</p><p>有兴趣可以看看<a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlbinlog.html">mysqlbinlog</a></p><p>好了，就说到这里，希望对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql高可用探讨（读写分离）</title>
    <link href="/2018/12/30/175/"/>
    <url>/2018/12/30/175/</url>
    
    <content type="html"><![CDATA[<p> 上一篇我们聊到TP做读写分离的底层实现，相对来说，其实思路是清晰简单的，但这些其实都是基于数据库已经做到了主从配置。</p><p>如果你不知道，可以<a href="https://github.com/13sai/saiNote/blob/master/sql/Mysql%E4%B8%BB%E4%BB%8E%E5%AE%9E%E6%88%98.md">mysql主从实战</a></p><p>建议给从库单独开个账号只授权读的权限，而不是设置slave为read_only（我配置了，but没啥用）</p><p>但我们稍微深入思考一下，PHP框架里有做到高可用吗？加入从库其中一个挂了，照着TP的思路，依旧有可能去这个从库读取数据，这是我们不能接受的。</p><p>一主一从甚至一主多从的架构显然只能满足读写性能，而不能保证服务的高可用。我们知道任何一个服务挂掉的可能性都是存在的，我们说的高可用只能是尽可能小的避免整个服务挂掉的可能。由此你应该能想到多主多从，这个仅仅文章里的配置是完成不了的，PHP框架也是检测不了的。</p><p>我觉得PHP框架来做读写分离是不科学的，因为增加了代码的复杂度，我认为这些应该交给数据库来做，或者数据库中间件来做，各司其职吗。</p><p>我不知道是不是很多人会想到mysql_proxy，然而官方已经不推荐使用了，推荐使用mysql_router，有在自己的ECS上尝试了一下，配置相对还是简单的，没测试性能，但确实实现了一定程度的高可用。</p><p>当然你也可以去使用变形虫等中间件，他们的功能相比mysql_router更为强大。</p><blockquote><p>此篇没有干货，只是纯技术探讨，我不过是在南京南站，没事码码字罢了！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP读写分离的内部实现</title>
    <link href="/2018/12/17/174/"/>
    <url>/2018/12/17/174/</url>
    
    <content type="html"><![CDATA[<blockquote><p>分析的版本是TP3.2.3</p></blockquote><p>此版本已经支持mysql数据库读写分离，配置比较简单，具体可看<a href="http://document.thinkphp.cn/manual_3_2.html#distributed_database">分布式数据库支持</a></p><p>我们尝试分析下源码实现：</p><p>不妨先yy一下，在写操作和读操作时区分开数据库连接分别连接master和slave。</p><p>我们可以看见Model.class.php的db初始化</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">db</span>(<span class="hljs-params"><span class="hljs-variable">$linkNum</span> = , <span class="hljs-variable">$config</span> = , <span class="hljs-variable">$force</span> = <span class="hljs-literal">false</span></span>) </span>&#123;  <span class="hljs-keyword">if</span> ( === <span class="hljs-variable">$linkNum</span> &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;db) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;db;  &#125;    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span> ( <span class="hljs-keyword">$this</span>-&gt;_db [<span class="hljs-variable">$linkNum</span>] ) || <span class="hljs-variable">$force</span>) &#123;    <span class="hljs-comment">// 创建一个新的实例</span>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span> ( <span class="hljs-variable">$config</span> ) &amp;&amp; is_string ( <span class="hljs-variable">$config</span> ) &amp;&amp; <span class="hljs-literal">false</span> === strpos ( <span class="hljs-variable">$config</span>, / )) &#123; <span class="hljs-comment">// 支持读取配置参数</span>      <span class="hljs-variable">$config</span> = C ( <span class="hljs-variable">$config</span> );    &#125;    <span class="hljs-keyword">$this</span>-&gt;_db [<span class="hljs-variable">$linkNum</span>] = Db::getInstance ( <span class="hljs-variable">$config</span> );  &#125; <span class="hljs-keyword">elseif</span> (<span class="hljs-literal">NULL</span> === <span class="hljs-variable">$config</span>) &#123;    <span class="hljs-keyword">$this</span>-&gt;_db [<span class="hljs-variable">$linkNum</span>]-&gt;close (); <span class="hljs-comment">// 关闭数据库连接</span>    <span class="hljs-keyword">unset</span> ( <span class="hljs-keyword">$this</span>-&gt;_db [<span class="hljs-variable">$linkNum</span>] );    <span class="hljs-keyword">return</span>;  &#125;    <span class="hljs-comment">// 切换数据库连接</span>  <span class="hljs-keyword">$this</span>-&gt;db = <span class="hljs-keyword">$this</span>-&gt;_db [<span class="hljs-variable">$linkNum</span>];  <span class="hljs-keyword">$this</span>-&gt;_after_db ();  <span class="hljs-comment">// 字段检测</span>  <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span> ( <span class="hljs-keyword">$this</span>-&gt;name ) &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;autoCheckFields)    <span class="hljs-keyword">$this</span>-&gt;_checkTableInfo ();  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;&#125;</code></pre></div><p>接着看DB单例，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"><span class="hljs-variable">$config</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;  <span class="hljs-variable">$md5</span> = md5 ( serialize ( <span class="hljs-variable">$config</span> ) );  <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span> ( <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> [<span class="hljs-variable">$md5</span>] )) &#123;    <span class="hljs-comment">// 解析连接参数 支持数组和字符串</span>    <span class="hljs-variable">$options</span> = <span class="hljs-built_in">self</span>::parseConfig ( <span class="hljs-variable">$config</span> );    <span class="hljs-comment">// 兼容mysqli</span>    <span class="hljs-keyword">if</span> (mysqli == <span class="hljs-variable">$options</span> [type])      <span class="hljs-variable">$options</span> [type] = mysql;      <span class="hljs-comment">// 如果采用lite方式 仅支持原生SQL 包括query和execute方法</span>    <span class="hljs-variable">$class</span> = <span class="hljs-variable">$options</span> [lite] ? ThinkDbLite : Think\Db\Driver\ . ucwords ( strtolower ( <span class="hljs-variable">$options</span> [type] ) );    <span class="hljs-keyword">if</span> (class_exists ( <span class="hljs-variable">$class</span> )) &#123;      <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> [<span class="hljs-variable">$md5</span>] = <span class="hljs-keyword">new</span> <span class="hljs-variable">$class</span> ( <span class="hljs-variable">$options</span> );    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-comment">// 类没有定义</span>      E ( L ( _NO_DB_DRIVER_ ) . :  . <span class="hljs-variable">$class</span> );    &#125;  &#125;  <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span> [<span class="hljs-variable">$md5</span>];  <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span>;&#125;</code></pre></div><p>接着看见mysql驱动继承了抽象类Driver。</p><p>不妨找两个Model操作读（find）和写(add):</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params"><span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;  ...  <span class="hljs-variable">$resultSet</span> = <span class="hljs-keyword">$this</span>-&gt;db-&gt;select ( <span class="hljs-variable">$options</span> );  ...&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$data</span> = , <span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>), <span class="hljs-variable">$replace</span> = <span class="hljs-literal">false</span></span>) </span>&#123;  ...  <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;db-&gt;insert ( <span class="hljs-variable">$data</span>, <span class="hljs-variable">$options</span>, <span class="hljs-variable">$replace</span> );  ...&#125;</code></pre></div><p>我们只聚焦关键代码select 和insert 。<br>然后去查看数据库驱动类代码：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params"><span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;  ...  <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;query ( <span class="hljs-variable">$sql</span>, ! <span class="hljs-keyword">empty</span> ( <span class="hljs-variable">$options</span> [fetch_sql] ) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> );  ...&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>, <span class="hljs-variable">$options</span> = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>), <span class="hljs-variable">$replace</span> = <span class="hljs-literal">false</span></span>) </span>&#123;  ...  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;execute ( <span class="hljs-variable">$sql</span>, ! <span class="hljs-keyword">empty</span> ( <span class="hljs-variable">$options</span> [fetch_sql] ) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> );&#125;</code></pre></div><p>继续寻根，我们看见</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 执行查询 返回数据集</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$fetchSql</span> = <span class="hljs-literal">false</span></span>) </span>&#123;  <span class="hljs-keyword">$this</span>-&gt;initConnect ( <span class="hljs-literal">false</span> );  ...&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 执行语句</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$fetchSql</span> = <span class="hljs-literal">false</span></span>) </span>&#123;  <span class="hljs-keyword">$this</span>-&gt;initConnect ( <span class="hljs-literal">true</span> );  ...&#125;</code></pre></div><p>我们终于找到了根本，</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 初始化数据库连接</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@access</span> protected</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> boolean $master</span><span class="hljs-comment"> *        主服务器</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment"> */</span><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initConnect</span>(<span class="hljs-params"><span class="hljs-variable">$master</span> = <span class="hljs-literal">true</span></span>) </span>&#123;<span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span> ( <span class="hljs-keyword">$this</span>-&gt;config [deploy] ))<span class="hljs-comment">// 采用分布式数据库</span><span class="hljs-keyword">$this</span>-&gt;_linkID = <span class="hljs-keyword">$this</span>-&gt;multiConnect ( <span class="hljs-variable">$master</span> );<span class="hljs-keyword">else</span> <span class="hljs-comment">// 默认单数据库</span><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">$this</span>-&gt;_linkID)<span class="hljs-keyword">$this</span>-&gt;_linkID = <span class="hljs-keyword">$this</span>-&gt;connect ();&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 连接分布式服务器</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@access</span> protected</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> boolean $master</span><span class="hljs-comment"> *        主服务器</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> void</span><span class="hljs-comment"> */</span><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiConnect</span>(<span class="hljs-params"><span class="hljs-variable">$master</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<span class="hljs-comment">// 分布式数据库配置解析</span><span class="hljs-variable">$_config</span> [username] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [username] );<span class="hljs-variable">$_config</span> [password] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [password] );<span class="hljs-variable">$_config</span> [hostname] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [hostname] );<span class="hljs-variable">$_config</span> [hostport] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [hostport] );<span class="hljs-variable">$_config</span> [database] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [database] );<span class="hljs-variable">$_config</span> [dsn] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [dsn] );<span class="hljs-variable">$_config</span> [charset] = explode ( ,, <span class="hljs-keyword">$this</span>-&gt;config [charset] );<span class="hljs-variable">$m</span> = floor ( mt_rand ( <span class="hljs-number">0</span>, <span class="hljs-keyword">$this</span>-&gt;config [master_num] - <span class="hljs-number">1</span> ) );<span class="hljs-comment">// 数据库读写是否分离</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;config [rw_separate]) &#123;<span class="hljs-comment">// 主从式采用读写分离</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$master</span>)<span class="hljs-comment">// 主服务器写入</span><span class="hljs-variable">$r</span> = <span class="hljs-variable">$m</span>;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span> (is_numeric ( <span class="hljs-keyword">$this</span>-&gt;config [slave_no] )) &#123; <span class="hljs-comment">// 指定服务器读</span><span class="hljs-variable">$r</span> = <span class="hljs-keyword">$this</span>-&gt;config [slave_no];&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 读操作连接从服务器</span><span class="hljs-variable">$r</span> = floor ( mt_rand ( <span class="hljs-keyword">$this</span>-&gt;config [master_num], count ( <span class="hljs-variable">$_config</span> [hostname] ) - <span class="hljs-number">1</span> ) ); <span class="hljs-comment">// 每次随机连接的数据库</span>&#125;&#125;&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 读写操作不区分服务器</span><span class="hljs-variable">$r</span> = floor ( mt_rand ( <span class="hljs-number">0</span>, count ( <span class="hljs-variable">$_config</span> [hostname] ) - <span class="hljs-number">1</span> ) ); <span class="hljs-comment">// 每次随机连接的数据库</span>&#125;<span class="hljs-keyword">if</span> (<span class="hljs-variable">$m</span> != <span class="hljs-variable">$r</span>) &#123;<span class="hljs-variable">$db_master</span> = <span class="hljs-keyword">array</span> (username =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [username] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [username] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [username] [<span class="hljs-number">0</span>],password =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [password] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [password] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [password] [<span class="hljs-number">0</span>],hostname =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-number">0</span>],hostport =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-number">0</span>],database =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [database] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [database] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [database] [<span class="hljs-number">0</span>],dsn =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-number">0</span>],charset =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-variable">$m</span>] ) ? <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-variable">$m</span>] : <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-number">0</span>] );&#125;<span class="hljs-variable">$db_config</span> = <span class="hljs-keyword">array</span> (username =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [username] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [username] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [username] [<span class="hljs-number">0</span>],password =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [password] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [password] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [password] [<span class="hljs-number">0</span>],hostname =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [hostname] [<span class="hljs-number">0</span>],hostport =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [hostport] [<span class="hljs-number">0</span>],database =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [database] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [database] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [database] [<span class="hljs-number">0</span>],dsn =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [dsn] [<span class="hljs-number">0</span>],charset =&gt; <span class="hljs-keyword">isset</span> ( <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-variable">$r</span>] ) ? <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-variable">$r</span>] : <span class="hljs-variable">$_config</span> [charset] [<span class="hljs-number">0</span>] );<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;connect ( <span class="hljs-variable">$db_config</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$r</span> == <span class="hljs-variable">$m</span> ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$db_master</span> );&#125;</code></pre></div><p>其实就是通过传入initConnect来区分读写操作，并根据配置去连接操作。</p><p>今天分析就到这里了，其实与我们yy的基本一致。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php合成图片</title>
    <link href="/2018/12/13/172/"/>
    <url>/2018/12/13/172/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by PhpStorm.</span><span class="hljs-comment"> * User: 13sai</span><span class="hljs-comment"> * Date: 2018/12/7</span><span class="hljs-comment"> */</span>header(<span class="hljs-string">&quot;Content-type: image/png&quot;</span>);<span class="hljs-comment">//ob_clean();</span><span class="hljs-comment">//</span><span class="hljs-variable">$path_2</span> = D:workdata/<span class="hljs-number">2</span>.png;<span class="hljs-variable">$path_1</span> = D:workdata/<span class="hljs-number">1</span>.png;<span class="hljs-variable">$info2</span> = getimagesize(<span class="hljs-variable">$path_2</span>);<span class="hljs-variable">$info1</span> = getimagesize(<span class="hljs-variable">$path_1</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getImage</span>(<span class="hljs-params"><span class="hljs-variable">$ext</span>, <span class="hljs-variable">$img</span></span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$ext</span>) &#123;        <span class="hljs-keyword">case</span> png :            <span class="hljs-variable">$ret</span> = imagecreatefrompng(<span class="hljs-variable">$img</span>);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> jpeg:            <span class="hljs-variable">$ret</span> = imagecreatefromjpeg(<span class="hljs-variable">$img</span>);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> gif:            <span class="hljs-variable">$ret</span> = imagecreatefromgif(<span class="hljs-variable">$img</span>);            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">Exception</span>(不能识别的图片格式);            <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>??;&#125;<span class="hljs-comment">//获取图片扩展名</span><span class="hljs-variable">$type1</span> = image_type_to_extension(<span class="hljs-variable">$info1</span>[<span class="hljs-number">2</span>],<span class="hljs-literal">false</span>);<span class="hljs-variable">$type2</span> = image_type_to_extension(<span class="hljs-variable">$info2</span>[<span class="hljs-number">2</span>],<span class="hljs-literal">false</span>);<span class="hljs-variable">$image_1</span> = getImage(<span class="hljs-variable">$type1</span>, <span class="hljs-variable">$path_1</span>);<span class="hljs-variable">$image_2</span> = getImage(<span class="hljs-variable">$type2</span>, <span class="hljs-variable">$path_2</span>);imagecopy( <span class="hljs-variable">$image_1</span>, <span class="hljs-variable">$image_2</span>, <span class="hljs-number">50</span>, <span class="hljs-number">70</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$info2</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$info2</span>[<span class="hljs-number">1</span>] );<span class="hljs-comment">// 输出</span>imagepng(<span class="hljs-variable">$image_1</span>, D:picscompose.png);imagedestroy(<span class="hljs-variable">$image_1</span>);imagedestroy(<span class="hljs-variable">$image_2</span>);</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swoole发邮件</title>
    <link href="/2018/11/29/171/"/>
    <url>/2018/11/29/171/</url>
    
    <content type="html"><![CDATA[<p>Swoole：面向生产环境的 PHP 异步网络通信引擎</p><p>很早就知道了swoole，但一直没有实际用到生产中，最近在重构博客，就想着做点东西，先swoole发邮件练练手。</p><p>回顾下发邮件，我们使用PHPMailer来发送。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by PhpStorm.</span><span class="hljs-comment"> * User: 13sai</span><span class="hljs-comment"> * Date: 2018/11/29</span><span class="hljs-comment"> * Time: 11:16</span><span class="hljs-comment"> */</span><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;../vendor/autoload.php&#x27;</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>;<span class="hljs-keyword">use</span> <span class="hljs-title">PHPMailer</span>\<span class="hljs-title">PHPMailer</span>\<span class="hljs-title">Exception</span>;<span class="hljs-variable">$mail</span> = <span class="hljs-keyword">new</span> PHPMailer(<span class="hljs-literal">true</span>);<span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">//Server settings</span>    <span class="hljs-comment">// $mail-&gt;SMTPDebug = 2;                                 // Enable verbose debug output</span>    <span class="hljs-variable">$mail</span>-&gt;isSMTP();                                      <span class="hljs-comment">// Set mailer to use SMTP</span>    <span class="hljs-variable">$mail</span>-&gt;Host = <span class="hljs-string">&#x27;smtp.163.com&#x27;</span>;  <span class="hljs-comment">// Specify main and backup SMTP servers</span>    <span class="hljs-variable">$mail</span>-&gt;SMTPAuth = <span class="hljs-literal">true</span>;                               <span class="hljs-comment">// Enable SMTP authentication</span>    <span class="hljs-variable">$mail</span>-&gt;Username = <span class="hljs-string">&#x27;sai@163.com&#x27;</span>;                 <span class="hljs-comment">// SMTP username</span>    <span class="hljs-variable">$mail</span>-&gt;Password = <span class="hljs-string">&#x27;*&#x27;</span>;                           <span class="hljs-comment">// SMTP password</span>    <span class="hljs-variable">$mail</span>-&gt;SMTPSecure = <span class="hljs-string">&#x27;tls&#x27;</span>;                            <span class="hljs-comment">// Enable TLS encryption, ssl also accepted</span>    <span class="hljs-variable">$mail</span>-&gt;Port = <span class="hljs-number">25</span>;                                    <span class="hljs-comment">// TCP port to connect to</span>    <span class="hljs-comment">//收件人</span>    <span class="hljs-variable">$mail</span>-&gt;setFrom(<span class="hljs-string">&#x27;sai@163.com&#x27;</span>, <span class="hljs-string">&#x27;13sai&#x27;</span>);    <span class="hljs-variable">$mail</span>-&gt;addAddress(<span class="hljs-string">&#x27;957042781@qq.com&#x27;</span>);               <span class="hljs-comment">// Name is optional</span>    <span class="hljs-variable">$mail</span>-&gt;addReplyTo(<span class="hljs-string">&#x27;957042781@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Information&#x27;</span>);<span class="hljs-comment">//    $mail-&gt;addCC(&#x27;cc@example.com&#x27;);</span><span class="hljs-comment">//    $mail-&gt;addBCC(&#x27;bcc@example.com&#x27;);</span>    <span class="hljs-comment">//附件</span>    <span class="hljs-variable">$mail</span>-&gt;addAttachment(<span class="hljs-string">&#x27;/var/file.tar.gz&#x27;</span>);         <span class="hljs-comment">// Add attachments</span>    <span class="hljs-variable">$mail</span>-&gt;addAttachment(<span class="hljs-string">&#x27;/tmp/image.jpg&#x27;</span>, <span class="hljs-string">&#x27;new.jpg&#x27;</span>);    <span class="hljs-comment">// Optional name</span>    <span class="hljs-comment">//html</span>    <span class="hljs-variable">$mail</span>-&gt;isHTML(<span class="hljs-literal">true</span>);                               <span class="hljs-variable">$mail</span>-&gt;Subject = <span class="hljs-string">&#x27;Here is the subject&#x27;</span>;    <span class="hljs-variable">$mail</span>-&gt;Body    = <span class="hljs-string">&#x27;This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;&#x27;</span>;    <span class="hljs-variable">$mail</span>-&gt;AltBody = <span class="hljs-string">&#x27;This is the body in plain text for non-HTML mail clients&#x27;</span>;    <span class="hljs-variable">$mail</span>-&gt;send();    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Message has been sent&#x27;</span>;&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Message could not be sent.&#x27;</span>;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Mailer Error: &#x27;</span> . <span class="hljs-variable">$mail</span>-&gt;ErrorInfo;&#125;</code></pre></div><p>运行发送，收到邮件。</p><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><div class="code-wrapper"><pre><code class="hljs perl">&lt;?php/**  Created by PhpStorm.  User: <span class="hljs-number">13</span>sai  Date: <span class="hljs-number">2018</span>/<span class="hljs-number">11</span>/<span class="hljs-number">29</span>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">06</span>/<span class="hljs-keyword">require</span> dirname(DIR).<span class="hljs-string">&#x27;/vendor/autoload.php&#x27;</span>;<span class="hljs-keyword">use</span> PHPMailer\PHPMailer\PHPMailer;<span class="hljs-keyword">use</span> PHPMailer\PHPMailer\Exception;class Mailer&#123;    protected $server;    protected $host = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;    protected $port = <span class="hljs-number">9502</span>;    <span class="hljs-regexp">//</span> 进程名称    protected $taskName = <span class="hljs-string">&#x27;swooleMailer&#x27;</span>;    <span class="hljs-regexp">//</span> PID路径    protected $pidPath = <span class="hljs-string">&#x27;/run/swooleMail.pid&#x27;</span>;    <span class="hljs-regexp">//</span> 设置运行时参数    protected $options = [        <span class="hljs-string">&#x27;worker_num&#x27;</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-regexp">//</span>worker进程数,一般设置为CPU数的<span class="hljs-number">1</span>-<span class="hljs-number">4</span>倍        <span class="hljs-string">&#x27;daemonize&#x27;</span> =&gt; true, <span class="hljs-regexp">//</span>启用守护进程        <span class="hljs-string">&#x27;log_file&#x27;</span> =&gt; <span class="hljs-string">&#x27;/data/logs/swoole.log&#x27;</span>, <span class="hljs-regexp">//</span>指定swoole错误日志文件        <span class="hljs-string">&#x27;log_level&#x27;</span> =&gt; <span class="hljs-number">0</span>, <span class="hljs-regexp">//</span>日志级别 范围是<span class="hljs-number">0</span>-<span class="hljs-number">5</span>，<span class="hljs-number">0</span>-DEBUG，<span class="hljs-number">1</span>-TRACE，<span class="hljs-number">2</span>-INFO，<span class="hljs-number">3</span>-NOTICE，<span class="hljs-number">4</span>-WARNING，<span class="hljs-number">5</span>-ERROR        <span class="hljs-string">&#x27;dispatch_mode&#x27;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-regexp">//</span>数据包分发策略,<span class="hljs-number">1</span>-轮询模式        <span class="hljs-string">&#x27;task_worker_num&#x27;</span> =&gt; <span class="hljs-number">4</span>, <span class="hljs-regexp">//</span>task进程的数量        <span class="hljs-string">&#x27;task_ipc_mode&#x27;</span> =&gt; <span class="hljs-number">3</span>, <span class="hljs-regexp">//</span>使用消息队列通信，并设置为争抢模式        //<span class="hljs-string">&#x27;heartbeat_idle_time&#x27;</span> =&gt; <span class="hljs-number">600</span>, <span class="hljs-regexp">//</span>一个连接如果<span class="hljs-number">600</span>秒内未向服务器发送任何数据，此连接将被强制关闭        //<span class="hljs-string">&#x27;heartbeat_check_interval&#x27;</span> =&gt; <span class="hljs-number">60</span>, <span class="hljs-regexp">//</span>启用心跳检测，每隔<span class="hljs-number">60</span>s轮循一次    ];    <span class="hljs-regexp">//</span> 邮件服务器配置    protected $mailConfig = [        <span class="hljs-string">&#x27;smtp_host&#x27;</span> =&gt; <span class="hljs-string">&#x27;smtp.163.com&#x27;</span>,        <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;sai0556@163.com&#x27;</span>,        <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;xmw1015&#x27;</span>,<span class="hljs-regexp">//</span> SMTP 密码/口令        <span class="hljs-string">&#x27;secure&#x27;</span> =&gt; <span class="hljs-string">&#x27;ssl&#x27;</span>, <span class="hljs-regexp">//</span>Enable TLS encryption, ssl also accepted        <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">465</span>, <span class="hljs-regexp">//</span> tcp邮件服务器端口    ];    public function __construct($mailConfig, $options = [])    &#123;        <span class="hljs-regexp">//</span> 构建Server对象，监听端口        $this-&gt;server = new swoole_server($this-&gt;host, $this-&gt;port);        <span class="hljs-keyword">if</span> (!empty($options)) &#123;            $this-&gt;options = array_merge($this-&gt;options, $options);        &#125;        $this-&gt;server-&gt;set($this-&gt;options);        $this-&gt;mailConfig = $mailConfig;        <span class="hljs-regexp">//</span> 注册事件        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Start&#x27;</span>, [$this, <span class="hljs-string">&#x27;onStart&#x27;</span>]);        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Connect&#x27;</span>, [$this, <span class="hljs-string">&#x27;onConnect&#x27;</span>]);        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Receive&#x27;</span>, [$this, <span class="hljs-string">&#x27;onReceive&#x27;</span>]);        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Task&#x27;</span>, [$this, <span class="hljs-string">&#x27;onTask&#x27;</span>]);        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Finish&#x27;</span>, [$this, <span class="hljs-string">&#x27;onFinish&#x27;</span>]);        $this-&gt;server-&gt;on(<span class="hljs-string">&#x27;Close&#x27;</span>, [$this, <span class="hljs-string">&#x27;onClose&#x27;</span>]);        <span class="hljs-regexp">//</span> 启动服务        //$this-&gt;server-&gt;start();    &#125;    protected function init()    &#123;        <span class="hljs-regexp">//</span>    &#125;    public function start()    &#123;        <span class="hljs-regexp">//</span> Run worker        $this-&gt;server-&gt;start();    &#125;    public function onStart($server)    &#123;        <span class="hljs-regexp">//</span> 设置进程名        cli_set_process_title($this-&gt;taskName);        <span class="hljs-regexp">//</span>记录进程id,脚本实现自动重启        $pid = <span class="hljs-string">&quot;&#123;$server-&gt;master_pid&#125;</span><span class="hljs-string">&#123;$server-&gt;manager_pid&#125;&quot;</span>;        file_put_contents($this-&gt;pidPath, $pid);    &#125;    //监听连接进入事件    public function onConnect($server, $fd, $from_id)    &#123;        $server-&gt;<span class="hljs-keyword">send</span>($fd, <span class="hljs-string">&quot;Hello &#123;$fd&#125;!&quot;</span> );    &#125;    // 监听数据接收事件    public function onReceive(swoole_server $server, $fd, $from_id, $data)    &#123;        $res[<span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-string">&#x27;success&#x27;</span>;        $server-&gt;<span class="hljs-keyword">send</span>($fd, json_encode($res)); <span class="hljs-regexp">//</span> 同步返回消息给客户端        $server-&gt;task($data);  <span class="hljs-regexp">//</span> 执行异步任务    &#125;    /*      @param $server swoole_server swoole_server对象      @param $task_id <span class="hljs-keyword">int</span> 任务id      @param $from_id <span class="hljs-keyword">int</span> 投递任务的worker_id      @param $data string 投递的数据     /    public function onTask(swoole_server $server, $task_id, $from_id, $data)    &#123;        $res[<span class="hljs-string">&#x27;result&#x27;</span>] = <span class="hljs-string">&#x27;failed&#x27;</span>;        $req = json_decode($data, true);        $action = $req[<span class="hljs-string">&#x27;action&#x27;</span>];        echo date(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>).<span class="hljs-string">&quot; onTask: [&quot;</span>.$action.<span class="hljs-string">&quot;].</span><span class="hljs-string">&quot;</span>;        switch ($action) &#123;            case <span class="hljs-string">&#x27;sendMail&#x27;</span>: <span class="hljs-regexp">//</span>发送单个邮件                $mailData = [                    <span class="hljs-string">&#x27;emailAddress&#x27;</span> =&gt; $req[<span class="hljs-string">&#x27;to&#x27;</span>], <span class="hljs-regexp">//</span>接收方，改成自己的邮箱可以测试接收邮件                    <span class="hljs-string">&#x27;subject&#x27;</span> =&gt; $req[<span class="hljs-string">&#x27;subject&#x27;</span>],                    <span class="hljs-string">&#x27;body&#x27;</span> =&gt; $req[<span class="hljs-string">&#x27;body&#x27;</span>],                ];                $this-&gt;sendMail($mailData);                <span class="hljs-keyword">break</span>;            default:                <span class="hljs-keyword">break</span>;        &#125;    &#125;    /*      @param $server swoole_server swoole_server对象      @param $task_id <span class="hljs-keyword">int</span> 任务id      @param $data string 任务返回的数据     *<span class="hljs-regexp">/</span><span class="hljs-regexp">    public function onFinish(swoole_server $server, $task_id, $data)</span><span class="hljs-regexp">    &#123;</span><span class="hljs-regexp">        /</span><span class="hljs-regexp">/</span><span class="hljs-regexp">    &#125;</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">    /</span><span class="hljs-regexp">/ 监听连接关闭事件</span><span class="hljs-regexp">    public function onClose($server, $fd, $from_id) &#123;</span><span class="hljs-regexp">        echo &quot;Client &#123;$fd&#125; close connection</span><span class="hljs-regexp">&quot;;</span><span class="hljs-regexp">    &#125;</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">    public function stop()</span><span class="hljs-regexp">    &#123;</span><span class="hljs-regexp">        $this-&gt;server-&gt;stop();</span><span class="hljs-regexp">    &#125;</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">    private function sendMail($mailData = [])</span><span class="hljs-regexp">    &#123;</span><span class="hljs-regexp">        $mail = new PHPMailer(true);</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">        try &#123;</span><span class="hljs-regexp">            $mailConfig = $this-&gt;mailConfig;</span><span class="hljs-regexp">            $mail-&gt;isSMTP();                                   /</span><span class="hljs-regexp">/ TCP port to connect to</span><span class="hljs-regexp">            $mail-&gt;Host = $mailConfig[&#x27;smtp_host&#x27;];  /</span><span class="hljs-regexp">/ SMTP服务</span><span class="hljs-regexp">            $mail-&gt;SMTPAuth = true;                  /</span><span class="hljs-regexp">/ Enable SMTP authentication</span><span class="hljs-regexp">            $mail-&gt;Username = $mailConfig[&#x27;username&#x27;];    /</span><span class="hljs-regexp">/ SMTP 用户名</span><span class="hljs-regexp">            $mail-&gt;Password = $mailConfig[&#x27;password&#x27;];     /</span><span class="hljs-regexp">/ SMTP 密码/</span>口令            $mail-&gt;SMTPSecure = $mailConfig[<span class="hljs-string">&#x27;secure&#x27;</span>];     <span class="hljs-regexp">//</span> Enable TLS encryption, ssl also accepted            $mail-&gt;Port = $mailConfig[<span class="hljs-string">&#x27;port&#x27;</span>];    <span class="hljs-regexp">//</span> TCP 端口            //Recipients            $mail-&gt;setFrom(<span class="hljs-string">&#x27;sai0556@163.com&#x27;</span>, <span class="hljs-string">&#x27;13sai&#x27;</span>);            $mail-&gt;addAddress(<span class="hljs-string">&#x27;957042781@qq.com&#x27;</span>);               <span class="hljs-regexp">//</span> Name is optional            $mail-&gt;addReplyTo(<span class="hljs-string">&#x27;957042781@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Information&#x27;</span>);            <span class="hljs-regexp">//</span>Content            $mail-&gt;isHTML(true);                                  <span class="hljs-regexp">//</span> Set email <span class="hljs-keyword">format</span> to HTML            $mail-&gt;Subject = <span class="hljs-string">&#x27;Here is the subject&#x27;</span>;            $mail-&gt;Body    = <span class="hljs-string">&#x27;This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;&#x27;</span>;            $mail-&gt;AltBody = <span class="hljs-string">&#x27;This is the body in plain text for non-HTML mail clients&#x27;</span>;            $mail-&gt;<span class="hljs-keyword">send</span>();            echo <span class="hljs-string">&#x27;Message has been sent&#x27;</span>;        &#125; catch (Exception $e) &#123;            echo <span class="hljs-string">&#x27;Message could not be sent.&#x27;</span>;            echo <span class="hljs-string">&#x27;Mailer Error: &#x27;</span> . $mail-&gt;ErrorInfo;        &#125;        try &#123;            $mailConfig = $this-&gt;mailConfig;            $mail-&gt;isSMTP();   <span class="hljs-regexp">//</span> Set mailer to <span class="hljs-keyword">use</span> SMTP            $mail-&gt;Host = $mailConfig[<span class="hljs-string">&#x27;smtp_host&#x27;</span>];  <span class="hljs-regexp">//</span> SMTP服务            $mail-&gt;SMTPAuth = true;                  <span class="hljs-regexp">//</span> Enable SMTP authentication            $mail-&gt;Username = $mailConfig[<span class="hljs-string">&#x27;username&#x27;</span>];    <span class="hljs-regexp">//</span> SMTP 用户名            $mail-&gt;Password = $mailConfig[<span class="hljs-string">&#x27;password&#x27;</span>];     <span class="hljs-regexp">//</span> SMTP 密码/口令            $mail-&gt;SMTPSecure = $mailConfig[<span class="hljs-string">&#x27;secure&#x27;</span>];     <span class="hljs-regexp">//</span> Enable TLS encryption, ssl also accepted            $mail-&gt;Port = $mailConfig[<span class="hljs-string">&#x27;port&#x27;</span>];    <span class="hljs-regexp">//</span> TCP 端口            $mail-&gt;CharSet  = <span class="hljs-string">&quot;UTF-8&quot;</span>; <span class="hljs-regexp">//</span>字符集            $mail-&gt;setFrom($mailConfig[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-string">&#x27;13sai&#x27;</span>); <span class="hljs-regexp">//</span>发件人地址，名称            $mail-&gt;addAddress($mailData[<span class="hljs-string">&#x27;emailAddress&#x27;</span>], <span class="hljs-string">&#x27;亲&#x27;</span>);     <span class="hljs-regexp">//</span> 收件人地址和名称            //$mail-&gt;addCC(<span class="hljs-string">&#x27;hellowebanet@163.com&#x27;</span>); <span class="hljs-regexp">//</span> 抄送            <span class="hljs-keyword">if</span> (isset($mailData[<span class="hljs-string">&#x27;attach&#x27;</span>])) &#123;                $mail-&gt;addAttachment($mailData[<span class="hljs-string">&#x27;attach&#x27;</span>]);         <span class="hljs-regexp">//</span> 添加附件            &#125;            //$mail-&gt;addAttachment(<span class="hljs-string">&#x27;/tmp/image.jpg&#x27;</span>, <span class="hljs-string">&#x27;new.jpg&#x27;</span>);    <span class="hljs-regexp">//</span> Optional name            //Content            $mail-&gt;isHTML(true);                                  <span class="hljs-regexp">//</span> Set email <span class="hljs-keyword">format</span> to HTML            $mail-&gt;Subject = $mailData[<span class="hljs-string">&#x27;subject&#x27;</span>];            $mail-&gt;Body    = $mailData[<span class="hljs-string">&#x27;body&#x27;</span>];            $mail-&gt;<span class="hljs-keyword">send</span>();            <span class="hljs-keyword">return</span> true;        &#125; catch (\Exception $e) &#123;            echo <span class="hljs-string">&#x27;Message could not be sent. Mailer Error: &#x27;</span>. $mail-&gt;ErrorInfo;            <span class="hljs-keyword">return</span> false;        &#125;    &#125;&#125;</code></pre></div><h2 id="服务："><a href="#服务：" class="headerlink" title="服务："></a>服务：</h2><div class="code-wrapper"><pre><code class="hljs awk">&lt;?php/*  Created by PhpStorm.  User: <span class="hljs-number">13</span>sai  Date: <span class="hljs-number">2018</span><span class="hljs-regexp">/11/</span><span class="hljs-number">29</span>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">09</span> /require DIR . <span class="hljs-string">&#x27;/Mailer.php&#x27;</span>;<span class="hljs-variable">$config</span> = [    <span class="hljs-string">&#x27;smtp_host&#x27;</span> =&gt; <span class="hljs-string">&#x27;smtp.163.com&#x27;</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;sai@163.com&#x27;</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;secure&#x27;</span> =&gt; <span class="hljs-string">&#x27;ssl&#x27;</span>,    <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-number">465</span>];<span class="hljs-variable">$server</span> = new Mailer(<span class="hljs-variable">$config</span>);<span class="hljs-variable">$server</span>-&gt;start();</code></pre></div><h2 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h2><div class="code-wrapper"><pre><code class="hljs perl">&lt;?php/**  Created by PhpStorm.  User: <span class="hljs-number">13</span>sai  Date: <span class="hljs-number">2018</span>/<span class="hljs-number">11</span>/<span class="hljs-number">29</span>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">14</span> /class Client&#123;    private $client;    public function __construct() &#123;        $this-&gt;client = new swoole_client(SWOOLE_SOCK_TCP);    &#125;    public function <span class="hljs-keyword">send</span>() &#123;        <span class="hljs-keyword">if</span>( !$this-&gt;client-&gt;<span class="hljs-keyword">connect</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9502</span> , <span class="hljs-number">1</span>) ) &#123;            echo <span class="hljs-string">&quot;Error: &#123;$this-&gt;client-&gt;errMsg&#125;[&#123;$this-&gt;client-&gt;errCode&#125;]</span><span class="hljs-string">&quot;</span>;        &#125;        $action = <span class="hljs-string">&#x27;sendMail&#x27;</span>;        $time = <span class="hljs-keyword">time</span>();        $data = [            <span class="hljs-string">&#x27;action&#x27;</span> =&gt; $action,            <span class="hljs-string">&#x27;to&#x27;</span> =&gt; <span class="hljs-string">&#x27;957042781@qq.com&#x27;</span>,            <span class="hljs-string">&#x27;subject&#x27;</span> =&gt; <span class="hljs-string">&#x27;wow&#x27;</span>,            <span class="hljs-string">&#x27;body&#x27;</span> =&gt; <span class="hljs-string">&#x27;hello, 13sai!&#x27;</span>        ];        $msg = json_encode($data);        $this-&gt;client-&gt;<span class="hljs-keyword">send</span>( $msg );        $message = $this-&gt;client-&gt;<span class="hljs-keyword">recv</span>();        echo <span class="hljs-string">&quot;Get Message From Server:&#123;$message&#125;</span><span class="hljs-string">&quot;</span>;    &#125;&#125;$client = new Client();$client-&gt;<span class="hljs-keyword">send</span>();</code></pre></div><p>测试通过！</p><p>注意：</p><p>此处我用了25端口，部署到Linux时上发送邮件发不出去，把PHPMailer的错误说明查了个遍，wrong，端口改为465，使用ssl发送，ok！</p><p>心累。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>swoole</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx健康检查</title>
    <link href="/2018/10/19/Nginx4/"/>
    <url>/2018/10/19/Nginx4/</url>
    
    <content type="html"><![CDATA[<p>面试被问到健康检测，自己不了解，便有了下文。</p><p>当项目访问量比较大时，我们经常使用nginx做负载均衡。</p><p>如下：</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><span class="hljs-section">http</span> &#123;    <span class="hljs-comment">#设定mime类型,类型由mime.type文件定义</span>    <span class="hljs-attribute">include</span>             /etc/nginx/mime.types;    <span class="hljs-attribute">default_type</span>    application/octet-stream;    <span class="hljs-comment">#设定日志格式</span>    <span class="hljs-attribute">access_log</span>        /var/log/nginx/access.log;    <span class="hljs-comment">#省略上文有的一些配置节点</span>    <span class="hljs-comment">#。。。。。。。。。。</span>    <span class="hljs-comment">#设定负载均衡的服务器列表</span>    <span class="hljs-attribute">upstream</span> sai&#123;        <span class="hljs-comment">#weigth参数表示权值，权值越高被分配到的几率越大</span>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.1:3128</span> weight=<span class="hljs-number">5</span>;        <span class="hljs-comment">#本机上的Squid开启3128端口,不是必须要squid</span>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.2:80</span>    weight=<span class="hljs-number">1</span>;        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.8.3:80</span>    weight=<span class="hljs-number">6</span>;    &#125;            <span class="hljs-comment">#第一个虚拟服务器</span>    <span class="hljs-section">server</span> &#123;        <span class="hljs-comment">#侦听192.168.8.x的80端口</span>        <span class="hljs-attribute">listen</span>             <span class="hljs-number">80</span>;        <span class="hljs-attribute">server_name</span>    www.13sai.com;        <span class="hljs-comment">#对aspx后缀的进行负载均衡请求</span>        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.php$</span> &#123;            <span class="hljs-comment">#定义服务器的默认网站根目录位置</span>            <span class="hljs-attribute">root</span>     /root;             <span class="hljs-comment">#定义首页索引文件的名称</span>            <span class="hljs-attribute">index</span> index.php index.html index.htm;                        <span class="hljs-comment">#请求转向mysvr 定义的服务器列表</span>            <span class="hljs-attribute">proxy_pass</span>    http://sai;            <span class="hljs-comment">#以下是一些反向代理的配置可删除.</span>            <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;            <span class="hljs-comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>            <span class="hljs-attribute">proxy_set_header</span> Host $host;            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;            <span class="hljs-comment">#允许客户端请求的最大单文件字节数</span>            <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">10m</span>;             <span class="hljs-comment">#缓冲区代理缓冲用户端请求的最大字节数，</span>            <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">128k</span>;            <span class="hljs-comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span>            <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">90</span>;            <span class="hljs-comment">#连接成功后，后端服务器响应时间(代理接收超时)</span>            <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">90</span>;            <span class="hljs-comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>            <span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">4k</span>;            <span class="hljs-comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span>            <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;            <span class="hljs-comment">#高负荷下缓冲大小（proxy_buffers*2）</span>            <span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">64k</span>;             <span class="hljs-comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span>            <span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;            &#125;    &#125;&#125;</code></pre></div><p>这是nginx中文网上的一个实例（有删改），这样处理分发服务器，我们加入了三台机器，保证了项目的负载量。</p><p>然而，我们常常忽略另一件事，就是健康检查。（好吧，其实我也忽略了这个问题，面试被问到，一脸懵！！！）</p><p>何为健康监测？</p><p>假如我们加入的3台机器中有一台因为其他原因挂掉了，但分发的服务器是不知道的，依旧正常分发请求，必然就导致部分用户访问失败，这是很严重的问题，那么这个时候就需要用到健康检查了。</p><p>下面我们介绍两种健康检查：</p><p><strong>被动检查：</strong></p><blockquote><p>如果 Nginx 在 10 秒内有 2 个请求发送失败或没有接收到响应，则标记服务器为不可用</p></blockquote><div class="code-wrapper"><pre><code class="hljs routeros">upstream sai&#123;   <span class="hljs-built_in"> server </span>192.168.8.1:3128  <span class="hljs-attribute">max_fails</span>=2 <span class="hljs-attribute">fail_timeout</span>=10s <span class="hljs-attribute">weight</span>=5;   <span class="hljs-built_in"> server </span>192.168.8.2:80    <span class="hljs-attribute">max_fails</span>=2 <span class="hljs-attribute">fail_timeout</span>=10s <span class="hljs-attribute">weight</span>=1;   <span class="hljs-built_in"> server </span>192.168.8.3:80    <span class="hljs-attribute">max_fails</span>=2 <span class="hljs-attribute">fail_timeout</span>=10s <span class="hljs-attribute">weight</span>=6;&#125;Copy</code></pre></div><p><strong>主动检查：</strong></p><p>需要先开启health_check</p><div class="code-wrapper"><pre><code class="hljs nix">upstream sai&#123;    zone sai <span class="hljs-number">64</span>k;    server <span class="hljs-number">192.168</span>.<span class="hljs-number">8.1</span>:<span class="hljs-number">3128</span>  <span class="hljs-attr">max_fails=2</span> <span class="hljs-attr">fail_timeout=10s</span> <span class="hljs-attr">weight=5;</span>    server <span class="hljs-number">192.168</span>.<span class="hljs-number">8.2</span>:<span class="hljs-number">80</span>    <span class="hljs-attr">max_fails=2</span> <span class="hljs-attr">fail_timeout=10s</span> <span class="hljs-attr">weight=1;</span>    server <span class="hljs-number">192.168</span>.<span class="hljs-number">8.3</span>:<span class="hljs-number">80</span>    <span class="hljs-attr">max_fails=2</span> <span class="hljs-attr">fail_timeout=10s</span> <span class="hljs-attr">weight=6;</span>&#125;location ~ .*.php$ &#123;    <span class="hljs-comment">#其他省略</span>    …    proxy_pass http://sai;    health_check <span class="hljs-attr">interval=10</span> <span class="hljs-attr">fails=3</span> <span class="hljs-attr">passes=2;</span>    <span class="hljs-comment"># 也可以使用此种，指定特定接口 health_check uri=/some/path;</span>&#125;Copy</code></pre></div><p>配置起来还是比较简单的。</p><h3 id="proxy-next-upstream"><a href="#proxy-next-upstream" class="headerlink" title="proxy_next_upstream"></a>proxy_next_upstream</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 开启proxy_next_upstream </span>proxy_next_upstream onupstream proxy_web&#123;      server <span class="hljs-number">192.168</span>.<span class="hljs-number">1.120</span>:<span class="hljs-number">7851</span> weight=<span class="hljs-number">2</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">100</span>s;      server <span class="hljs-number">192.168</span>.<span class="hljs-number">1.121</span>:<span class="hljs-number">7851</span> weight=<span class="hljs-number">2</span>  max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">100</span>s;&#125;server &#123;    listen <span class="hljs-number">80</span>;    server_name blog.<span class="hljs-number">13</span>sai.com;    root /www;    index index.html;    location /sys  &#123;        proxy_pass http:<span class="hljs-regexp">//</span>proxy_web;        proxy_set_header Host <span class="hljs-variable">$host</span>;        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<span class="hljs-regexp">//</span> <span class="hljs-number">502</span>,<span class="hljs-number">404</span>,error自动代理到下一个server    proxy_next_upstream http_502 http_504 error timeout invalid_header;     &#125;&#125;</code></pre></div><p>如要了解更多可以查看nginx手册：</p><p><a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/http-health-check/">nginx健康监测</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小型商城商品模块设计</title>
    <link href="/2018/08/31/168/"/>
    <url>/2018/08/31/168/</url>
    
    <content type="html"><![CDATA[ <p>最近有做到类商城小型项目，主要负责商品模块，便分享下商品模块设计思路。</p><p></p><p>主要分为5个表：</p><p><img src="/upload/ueditor/image/20180831/1535709806381306.png" title="1535709806381306.png" alt="tables.png"/></p><p><br/></p><p>商品作为主表，与规格表、属性表、sku表直接关联。</p><p><br/></p><p>ER关系图如下：</p><p><img src="/upload/ueditor/image/20180831/1535709873417019.png" title="1535709873417019.png" alt="er.png"/></p><p><br/></p><p>SQL语句如下：</p><div class="code-wrapper"><pre class="brush:sql;toolbar:false">--&nbsp;------------------------------&nbsp;Table&nbsp;structure&nbsp;for&nbsp;goods--&nbsp;----------------------------DROP&nbsp;TABLE&nbsp;IF&nbsp;EXISTS&nbsp;`goods`;CREATE&nbsp;TABLE&nbsp;`goods`&nbsp;&nbsp;(&nbsp;&nbsp;`id`&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;AUTO_INCREMENT,&nbsp;&nbsp;`mid`&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;店铺id&#39;,&nbsp;&nbsp;`goods_sn`&nbsp;varchar(128)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NULL&nbsp;DEFAULT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;商品编码&#39;,&nbsp;&nbsp;`title`&nbsp;varchar(128)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL,&nbsp;&nbsp;`main_pic`&nbsp;varchar(255)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;商品主图&#39;,&nbsp;&nbsp;`pics`&nbsp;varchar(1024)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;图集&#39;,&nbsp;&nbsp;`cate_id`&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;分类id&#39;,&nbsp;&nbsp;`outer_price`&nbsp;decimal(10,&nbsp;2)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0.00&nbsp;COMMENT&nbsp;&#39;外部价格&nbsp;单位：元&#39;,&nbsp;&nbsp;`inner_price`&nbsp;decimal(10,&nbsp;2)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0.00&nbsp;COMMENT&nbsp;&#39;价格&nbsp;单位：元&#39;,&nbsp;&nbsp;`description`&nbsp;text&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NULL,&nbsp;&nbsp;`is_delete`&nbsp;tinyint(1)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;0&nbsp;正常&nbsp;1&nbsp;删除&#39;,&nbsp;&nbsp;`status`&nbsp;tinyint(2)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;4&nbsp;COMMENT&nbsp;&#39;2审核，3上架，4店铺下架，5平台下架，6拒绝上架&#39;,&nbsp;&nbsp;`create_at`&nbsp;timestamp(0)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;CURRENT_TIMESTAMP&nbsp;COMMENT&nbsp;&#39;添加时间&#39;,&nbsp;&nbsp;`update_at`&nbsp;timestamp(0)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;CURRENT_TIMESTAMP&nbsp;ON&nbsp;UPDATE&nbsp;CURRENT_TIMESTAMP(0)&nbsp;COMMENT&nbsp;&#39;更新时间&#39;,&nbsp;&nbsp;`stock_num`&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;库存&#39;,&nbsp;&nbsp;`sale_num`&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;销量&#39;,&nbsp;&nbsp;`sku_type`&nbsp;tinyint(1)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;2&nbsp;COMMENT&nbsp;&#39;1:&nbsp;单规格&nbsp;2：多规格&#39;,&nbsp;&nbsp;`item_url`&nbsp;varchar(512)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;&nbsp;COMMENT&nbsp;&#39;商品链接&#39;,&nbsp;&nbsp;`sell_out`&nbsp;tinyint(1)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;已卖光&#39;,&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(`id`)&nbsp;USING&nbsp;BTREE,&nbsp;&nbsp;INDEX&nbsp;`shop_id`(`mid`)&nbsp;USING&nbsp;BTREE,&nbsp;&nbsp;INDEX&nbsp;`cate_id`(`cate_id`)&nbsp;USING&nbsp;BTREE,&nbsp;&nbsp;CONSTRAINT&nbsp;`cate_id`&nbsp;FOREIGN&nbsp;KEY&nbsp;(`cate_id`)&nbsp;REFERENCES&nbsp;`goods_category`&nbsp;(`id`)&nbsp;ON&nbsp;DELETE&nbsp;RESTRICT&nbsp;ON&nbsp;UPDATE&nbsp;RESTRICT)&nbsp;ENGINE&nbsp;=&nbsp;InnoDB&nbsp;AUTO_INCREMENT&nbsp;=&nbsp;1&nbsp;CHARACTER&nbsp;SET&nbsp;=&nbsp;utf8&nbsp;COLLATE&nbsp;=&nbsp;utf8_general_ci&nbsp;COMMENT&nbsp;=&nbsp;&#39;商品表&#39;&nbsp;ROW_FORMAT&nbsp;=&nbsp;Dynamic;<p>–&nbsp;—————————-<br>–&nbsp;Table&nbsp;structure&nbsp;for&nbsp;goods_attr_key<br>–&nbsp;—————————-<br>DROP&nbsp;TABLE&nbsp;IF&nbsp;EXISTS&nbsp;<code>goods_attr_key</code>;<br>CREATE&nbsp;TABLE&nbsp;<code>goods_attr_key</code>&nbsp;&nbsp;(<br>&nbsp;&nbsp;<code>id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;AUTO_INCREMENT,<br>&nbsp;&nbsp;<code>goods_id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;商品id&#39;,<br>&nbsp;&nbsp;<code>attr</code>&nbsp;varchar(50)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(<code>id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;INDEX&nbsp;<code>goods_id</code>(<code>goods_id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;CONSTRAINT&nbsp;<code>goods_id</code>&nbsp;FOREIGN&nbsp;KEY&nbsp;(<code>goods_id</code>)&nbsp;REFERENCES&nbsp;<code>goods</code>&nbsp;(<code>id</code>)&nbsp;ON&nbsp;DELETE&nbsp;RESTRICT&nbsp;ON&nbsp;UPDATE&nbsp;RESTRICT<br>)&nbsp;ENGINE&nbsp;=&nbsp;InnoDB&nbsp;AUTO_INCREMENT&nbsp;=&nbsp;1&nbsp;CHARACTER&nbsp;SET&nbsp;=&nbsp;utf8&nbsp;COLLATE&nbsp;=&nbsp;utf8_general_ci&nbsp;COMMENT&nbsp;=&nbsp;&#39;商品规格&#39;&nbsp;ROW_FORMAT&nbsp;=&nbsp;Dynamic;</p><p>–&nbsp;—————————-<br>–&nbsp;Table&nbsp;structure&nbsp;for&nbsp;goods_attr_value<br>–&nbsp;—————————-<br>DROP&nbsp;TABLE&nbsp;IF&nbsp;EXISTS&nbsp;<code>goods_attr_value</code>;<br>CREATE&nbsp;TABLE&nbsp;<code>goods_attr_value</code>&nbsp;&nbsp;(<br>&nbsp;&nbsp;<code>id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;AUTO_INCREMENT,<br>&nbsp;&nbsp;<code>attr_id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;属性项目id&#39;,<br>&nbsp;&nbsp;<code>attr_name</code>&nbsp;varchar(50)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;<code>goods_id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;商品id&#39;,<br>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(<code>id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;INDEX&nbsp;<code>goods_id</code>(<code>goods_id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;INDEX&nbsp;<code>attr_id</code>(<code>attr_id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;CONSTRAINT&nbsp;<code>val_goods_id</code>&nbsp;FOREIGN&nbsp;KEY&nbsp;(<code>goods_id</code>)&nbsp;REFERENCES&nbsp;<code>goods</code>&nbsp;(<code>id</code>)&nbsp;ON&nbsp;DELETE&nbsp;RESTRICT&nbsp;ON&nbsp;UPDATE&nbsp;RESTRICT,<br>&nbsp;&nbsp;CONSTRAINT&nbsp;<code>attr_id</code>&nbsp;FOREIGN&nbsp;KEY&nbsp;(<code>attr_id</code>)&nbsp;REFERENCES&nbsp;<code>goods_attr_key</code>&nbsp;(<code>id</code>)&nbsp;ON&nbsp;DELETE&nbsp;RESTRICT&nbsp;ON&nbsp;UPDATE&nbsp;RESTRICT<br>)&nbsp;ENGINE&nbsp;=&nbsp;InnoDB&nbsp;AUTO_INCREMENT&nbsp;=&nbsp;1&nbsp;CHARACTER&nbsp;SET&nbsp;=&nbsp;utf8&nbsp;COLLATE&nbsp;=&nbsp;utf8_general_ci&nbsp;COMMENT&nbsp;=&nbsp;&#39;商品属性&#39;&nbsp;ROW_FORMAT&nbsp;=&nbsp;Dynamic;</p><p>–&nbsp;—————————-<br>–&nbsp;Table&nbsp;structure&nbsp;for&nbsp;goods_category<br>–&nbsp;—————————-<br>DROP&nbsp;TABLE&nbsp;IF&nbsp;EXISTS&nbsp;<code>goods_category</code>;<br>CREATE&nbsp;TABLE&nbsp;<code>goods_category</code>&nbsp;&nbsp;(<br>&nbsp;&nbsp;<code>id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;AUTO_INCREMENT,<br>&nbsp;&nbsp;<code>parent_id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;父级id&#39;,<br>&nbsp;&nbsp;<code>cate_name</code>&nbsp;varchar(128)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;分类名称&#39;,<br>&nbsp;&nbsp;<code>sort</code>&nbsp;tinyint(4)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;排序&#39;,<br>&nbsp;&nbsp;<code>create_at</code>&nbsp;timestamp(0)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;CURRENT_TIMESTAMP&nbsp;COMMENT&nbsp;&#39;创建时间&#39;,<br>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(<code>id</code>)&nbsp;USING&nbsp;BTREE<br>)&nbsp;ENGINE&nbsp;=&nbsp;InnoDB&nbsp;AUTO_INCREMENT&nbsp;=&nbsp;1&nbsp;CHARACTER&nbsp;SET&nbsp;=&nbsp;utf8&nbsp;COLLATE&nbsp;=&nbsp;utf8_general_ci&nbsp;COMMENT&nbsp;=&nbsp;&#39;商品分类&#39;&nbsp;ROW_FORMAT&nbsp;=&nbsp;Dynamic;</p><p>–&nbsp;—————————-<br>–&nbsp;Table&nbsp;structure&nbsp;for&nbsp;goods_sku<br>–&nbsp;—————————-<br>DROP&nbsp;TABLE&nbsp;IF&nbsp;EXISTS&nbsp;<code>goods_sku</code>;<br>CREATE&nbsp;TABLE&nbsp;<code>goods_sku</code>&nbsp;&nbsp;(<br>&nbsp;&nbsp;<code>id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;AUTO_INCREMENT,<br>&nbsp;&nbsp;<code>goods_id</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;商品id&#39;,<br>&nbsp;&nbsp;<code>mid</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;店铺id&#39;,<br>&nbsp;&nbsp;<code>attr_ids</code>&nbsp;varchar(512)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;&nbsp;COMMENT&nbsp;&#39;规格集合&#39;,<br>&nbsp;&nbsp;<code>attr_names</code>&nbsp;varchar(512)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;&#39;&#39;&nbsp;COMMENT&nbsp;&#39;属性集合&#39;,<br>&nbsp;&nbsp;<code>goods_sku_sn</code>&nbsp;varchar(64)&nbsp;CHARACTER&nbsp;SET&nbsp;utf8&nbsp;COLLATE&nbsp;utf8_general_ci&nbsp;NOT&nbsp;NULL&nbsp;COMMENT&nbsp;&#39;商品sku编码&#39;,<br>&nbsp;&nbsp;<code>outer_price</code>&nbsp;decimal(10,&nbsp;2)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0.00&nbsp;COMMENT&nbsp;&#39;外部价格&nbsp;单位：元&#39;,<br>&nbsp;&nbsp;<code>inner_price</code>&nbsp;decimal(10,&nbsp;2)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0.00&nbsp;COMMENT&nbsp;&#39;价格&nbsp;单位：元&#39;,<br>&nbsp;&nbsp;<code>stock_num</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;可用库存&#39;,<br>&nbsp;&nbsp;<code>dj_stock_num</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;冻结库存&#39;,<br>&nbsp;&nbsp;<code>sale_num</code>&nbsp;int(11)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;0&nbsp;COMMENT&nbsp;&#39;销量&#39;,<br>&nbsp;&nbsp;<code>create_at</code>&nbsp;timestamp(0)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;CURRENT_TIMESTAMP&nbsp;COMMENT&nbsp;&#39;添加时间&#39;,<br>&nbsp;&nbsp;<code>update_at</code>&nbsp;timestamp(0)&nbsp;NOT&nbsp;NULL&nbsp;DEFAULT&nbsp;CURRENT_TIMESTAMP&nbsp;ON&nbsp;UPDATE&nbsp;CURRENT_TIMESTAMP(0)&nbsp;COMMENT&nbsp;&#39;更新时间&#39;,<br>&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(<code>id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;INDEX&nbsp;<code>goods_id</code>(<code>goods_id</code>)&nbsp;USING&nbsp;BTREE,<br>&nbsp;&nbsp;CONSTRAINT&nbsp;<code>goods_id_sku</code>&nbsp;FOREIGN&nbsp;KEY&nbsp;(<code>goods_id</code>)&nbsp;REFERENCES&nbsp;<code>goods</code>&nbsp;(<code>id</code>)&nbsp;ON&nbsp;DELETE&nbsp;RESTRICT&nbsp;ON&nbsp;UPDATE&nbsp;RESTRICT<br>)&nbsp;ENGINE&nbsp;=&nbsp;InnoDB&nbsp;AUTO_INCREMENT&nbsp;=&nbsp;1&nbsp;CHARACTER&nbsp;SET&nbsp;=&nbsp;utf8&nbsp;COLLATE&nbsp;=&nbsp;utf8_general_ci&nbsp;COMMENT&nbsp;=&nbsp;&#39;商品sku&#39;&nbsp;ROW_FORMAT&nbsp;=&nbsp;Dynamic;</pre></div><p>字段都有备注，就不一样说明了。<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于redis的秒杀</title>
    <link href="/2018/08/09/165/"/>
    <url>/2018/08/09/165/</url>
    
    <content type="html"><![CDATA[<p>随着电商业务的发展，秒杀是个十分常见的场景，今天我们来利用redis实现一个简单的秒杀系统。</p><p>假定我们有一个商品id为1，秒杀数量是5。</p><p>一般场景：</p><div class="code-wrapper"><pre><code class="hljs zephir">include <span class="hljs-string">&#x27;db.php&#x27;</span>;$db = <span class="hljs-keyword">new</span> db([    <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,    <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>,    <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;www.13sai.com&#x27;</span>,    <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;13sai&#x27;</span>,    <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;*&#x27;</span>,    <span class="hljs-string">&#x27;charset&#x27;</span> =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>]);$stock_num= $db-&gt;get(<span class="hljs-string">&#x27;goods&#x27;</span>, <span class="hljs-string">&#x27;stock_num&#x27;</span>, [<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">1</span>]);<span class="hljs-comment">// 检测库存</span><span class="hljs-keyword">if</span> ($stock_num&gt; <span class="hljs-number">0</span>) &#123;    sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">//模拟真实环境</span>    $db-&gt;update(<span class="hljs-string">&#x27;goods&#x27;</span>, [<span class="hljs-string">&quot;stock_num[-]&quot;</span> =&gt; <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">1</span>]);    print_r(<span class="hljs-string">&#x27;ok&#x27;</span>)&#125; <span class="hljs-keyword">else</span> &#123;    print_r(<span class="hljs-string">&#x27;sorry&#x27;</span>)&#125;</code></pre></div><p>我们尝试模拟高并发场景，使用ab压测工具，</p><blockquote><p>ab -n 500 -c 500 <a href="http://www.13sai.com/test/miaosha.php">http://www.13sai.com/test/miaosha.php</a></p></blockquote><p>运行后发现库存stock_num很可能已经变成负数了，出现了超卖问题。</p><p>引入redis</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">//实例化redis</span><span class="hljs-variable">$redis</span> = <span class="hljs-keyword">new</span> Redis();<span class="hljs-comment">//连接</span><span class="hljs-variable">$redis</span>-&gt;connect(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">6379</span>);<span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;sale&#x27;</span>;<span class="hljs-comment">//检测是否连接成功</span><span class="hljs-comment">// echo &quot;Server is running: &quot; . $redis-&gt;ping();</span><span class="hljs-variable">$redis</span>-&gt;setnx(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>);<span class="hljs-variable">$redis</span>-&gt;watch(<span class="hljs-variable">$key</span>); <span class="hljs-comment">//监测一个key的值是否被更改</span><span class="hljs-variable">$sale_num</span> = <span class="hljs-variable">$redis</span>-&gt;get(<span class="hljs-variable">$key</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">$sale_num</span> &gt; <span class="hljs-number">4</span>) &#123;    <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-variable">$redis</span>-&gt;multi(); <span class="hljs-comment">//标记事务</span><span class="hljs-variable">$redis</span>-&gt;incr(<span class="hljs-variable">$key</span>);  <span class="hljs-comment">//销量+1</span>sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">//模拟真实环境</span><span class="hljs-variable">$ret</span> = <span class="hljs-variable">$redis</span>-&gt;exec(); <span class="hljs-comment">// 事务块内所有命令的返回值，按命令执行的先后顺序排列。</span><span class="hljs-keyword">if</span> (<span class="hljs-variable">$ret</span>) &#123;    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;db.php&#x27;</span>;    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> db([        <span class="hljs-string">&#x27;database_type&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,        <span class="hljs-string">&#x27;database_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>,        <span class="hljs-string">&#x27;server&#x27;</span> =&gt; <span class="hljs-string">&#x27;www.13sai.com&amp;#39;,</span><span class="hljs-string">        &#x27;</span>username<span class="hljs-string">&#x27; =&gt; &#x27;</span><span class="hljs-number">13</span>sai<span class="hljs-string">&#x27;,</span><span class="hljs-string">        &#x27;</span>password<span class="hljs-string">&#x27; =&gt; &#x27;</span>*<span class="hljs-string">&#x27;,</span><span class="hljs-string">        &#x27;</span>charset<span class="hljs-string">&#x27; =&gt; &#x27;</span>utf8<span class="hljs-string">&#x27;</span><span class="hljs-string">    ]);</span><span class="hljs-string">    $db-&gt;update(&#x27;</span>goods<span class="hljs-string">&#x27;, [&quot;stock_num[-]&quot; =&gt; 1], [&#x27;</span>id<span class="hljs-string">&#x27; =&gt; 1]);</span><span class="hljs-string">&#125;</span></code></pre></div><p>重新增加库存到5，多次测试，发现库存并无出现负数情况，测试通过。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LNMP环境搭建</title>
    <link href="/2018/07/29/164/"/>
    <url>/2018/07/29/164/</url>
    
    <content type="html"><![CDATA[<p>最近公司有新项目上线，新买了服务器，便需要搭建环境，便实操了一下。</p><h2 id="lnmp包装"><a href="#lnmp包装" class="headerlink" title="lnmp包装"></a>lnmp包装</h2><p>lnmp的安装时比较轻松的，一行代码，</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://soft.vpser.net/lnmp/lnmp<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.tar.gz -cO lnmp<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.tar.gz &amp;&amp; tar zxf lnmp<span class="hljs-number">1</span>.<span class="hljs-number">5</span>.tar.gz &amp;&amp; cd lnmp<span class="hljs-number">1</span>.<span class="hljs-number">5</span> &amp;&amp; ./install.sh lnmp</code></pre></div><p>然后会提示你选择的nginx版本，输入mysql密码，php版本，选择之后坐等安装，大概需要半个小时。</p><p>如果显示Nginx: OK，MySQL: OK，PHP: OK。就表示安装成功了。</p><h2 id="扩展安装（以redis扩展为例）"><a href="#扩展安装（以redis扩展为例）" class="headerlink" title="扩展安装（以redis扩展为例）"></a>扩展安装（以redis扩展为例）</h2><div class="code-wrapper"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>codeload.github.com<span class="hljs-regexp">/phpredis/</span>phpredis<span class="hljs-regexp">/zip/</span>develop -O phpredis.zipunzip phpredis.zipcd /phpredis-develop<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>bin<span class="hljs-regexp">/phpize./</span>configure --with-php-config=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span>bin/php-configmake &amp;&amp; make install   <span class="hljs-regexp">//</span>编译安装</code></pre></div><p>在php.ini中加入</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">extension</span>=redis.so</code></pre></div><p>重启php-fpm，通过<code>php -m</code>命令查看</p> <p>最近公司有新项目上线，新买了服务器，便需要搭建环境，便实操了一下。</p><p><br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>lnmp包装</p><p><br/></p></li></ol><p>lnmp的安装时比较轻松的，一行代码，<br/></p><div class="code-wrapper"><pre class="brush:as3;toolbar:false">wget&nbsp;http://soft.vpser.net/lnmp/lnmp1.5.tar.gz&nbsp;-cO&nbsp;lnmp1.5.tar.gz&nbsp;&amp;&amp;&nbsp;tar&nbsp;zxf&nbsp;lnmp1.5.tar.gz&nbsp;&amp;&amp;&nbsp;cd&nbsp;lnmp1.5&nbsp;&amp;&amp;&nbsp;./install.sh&nbsp;lnmp</pre></div><p>然后会提示你选择的nginx版本，输入mysql密码，php版本，选择之后坐等安装，大概需要半个小时。<br/></p><p><br/></p><p>如果显示Nginx: OK，MySQL: OK，PHP: OK。</p><p>就表示安装成功了。</p><p><br/></p><p>2. 扩展安装（以redis扩展为例）</p><div class="code-wrapper"><pre class="brush:php;toolbar:false;">wget&nbsp;https://codeload.github.com/phpredis/phpredis/zip/develop&nbsp;-O&nbsp;phpredis.zipunzip&nbsp;phpredis.zipcd&nbsp;/phpredis-develop/usr/local/php/bin/phpize./configure&nbsp;--with-php-config=/usr/local/php/bin/php-configmake&nbsp;&amp;&amp;&nbsp;make&nbsp;install&nbsp;&nbsp;&nbsp;//编译安装</pre></div><p>在php.ini中加入</p><div class="code-wrapper"><pre class="brush:bash;toolbar:false">extension=redis.so</pre></div><p>重启php-fpm，通过php -m命令查看。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LNMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个关于Linux的问题</title>
    <link href="/2018/07/06/163/"/>
    <url>/2018/07/06/163/</url>
    
    <content type="html"><![CDATA[<p>最近有点忙，一会下班，也不想敲代码了，写写前段时间遇到的两个关于Linux的问题。虽然两个问题都是同事解决的，但有必要分享一下。</p><h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><blockquote><p>OOM killer（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗大量内存的进程，为了防止内存耗尽而内核会把该进程杀掉。</p></blockquote><p>起因：导出相当大的数据时导致内存溢出的问题，服务器负载很大，然后OOM这个进程每次就把我导出的进程干趴下了。</p><h3 id="文件最大打开数"><a href="#文件最大打开数" class="headerlink" title="文件最大打开数"></a>文件最大打开数</h3><div class="code-wrapper"><pre><code class="hljs awk">ulimit -n  <span class="hljs-regexp">//</span>查看文件最大打开数lsof |wc -l  <span class="hljs-regexp">//</span>当前文件打开数量</code></pre></div><p>起因：守护进程里有个程序，一直在fopen，导致文件打开数过大，服务器挂掉了。</p><p>解决方案比较简单，就不赘述了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP两个好用的函数处理函数</title>
    <link href="/2018/06/13/161/"/>
    <url>/2018/06/13/161/</url>
    
    <content type="html"><![CDATA[ <h3 style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;">call_user_func — 把第一个参数作为回调函数调用</h3><div class="code-wrapper"><pre style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">demo:<p>function&nbsp;increment($var)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;hello&nbsp;&#39;.$var;<br>}<br>$a&nbsp;=&nbsp;&#39;13sai&#39;;<br>call_user_func(&#39;increment&#39;,&nbsp;$a);</p><p>class&nbsp;A<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;increment($var)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;hello&nbsp;&#39;.$var;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</p><p>$a&nbsp;=&nbsp;&#39;world&#39;;<br>call_user_func([(new&nbsp;A()),&nbsp;&#39;increment&#39;],&nbsp;$a);</pre></div><h3 style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;"><a id="user-content-call_user_func_array--调用回调函数并把一个数组参数作为回调函数的参数" class="anchor" aria-hidden="true" href="https://github.com/13sai/saiNote/blob/master/PHP/PHP%E4%B8%A4%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.md#call_user_func_array--%E8%B0%83%E7%94%A8%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%B9%B6%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%8F%82%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none; float: left; padding-right: 4px; margin-left: -20px; line-height: 1;"><svg class="octicon octicon-link" viewbox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数</h3><div class="code-wrapper"><pre style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">&lt;?php<br>function&nbsp;foobar($arg,&nbsp;$arg2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<strong>FUNCTION</strong>,&nbsp;&quot;&nbsp;got&nbsp;$arg&nbsp;and&nbsp;$arg2<br>&quot;;<br>}<br>class&nbsp;foo&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;bar($arg,&nbsp;$arg2)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;<strong>METHOD</strong>,&nbsp;&quot;&nbsp;got&nbsp;$arg&nbsp;and&nbsp;$arg2<br>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</p><p>//&nbsp;Call&nbsp;the&nbsp;foobar()&nbsp;function&nbsp;with&nbsp;2&nbsp;arguments<br>call_user_func_array(&quot;foobar&quot;,&nbsp;array(&quot;one&quot;,&nbsp;&quot;two&quot;));</p><p>//&nbsp;Call&nbsp;the&nbsp;$foo-&gt;bar()&nbsp;method&nbsp;with&nbsp;2&nbsp;arguments<br>$foo&nbsp;=&nbsp;new&nbsp;foo;<br>call_user_func_array(array($foo,&nbsp;&quot;bar&quot;),&nbsp;array(&quot;three&quot;,&nbsp;&quot;four&quot;));</pre></div><blockquote style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">说到这里，可以看看可变参数函数(5.6+)</p></blockquote><div class="code-wrapper"><pre style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">&lt;?php<br>function&nbsp;sum(...$numbers)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;$acc&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($numbers&nbsp;as&nbsp;$n)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$acc&nbsp;+=&nbsp;$n;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$acc;<br>}</p><p>echo&nbsp;sum(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5);</pre></div><hr style="box-sizing: content-box; height: 0.25em; margin: 24px 0px; background: rgb(225, 228, 232); border: 0px; padding: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;"/><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;">重点来了，当可变参数长度函数遇上call_user_func_array</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;; white-space: normal;">试想，我们希望传入不定长度参数，而参数又只是数组。那么你可以这么做：</p><div class="code-wrapper"><pre style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-top: 0px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46); margin-bottom: 0px !important;">function&nbsp;sum(...$numbers)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;$acc&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($numbers&nbsp;as&nbsp;$n)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$acc&nbsp;+=&nbsp;$n;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$acc;<br>}</p><p>print_r(call_user_func_array(&quot;sum&quot;,&nbsp;[7,8,9,10]));</pre></div><p><code style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; padding: 0px; margin: 0px; background: transparent; border-radius: 3px; word-break: normal; border: 0px; display: inline; overflow: visible; line-height: inherit; word-wrap: normal;"><br/></code></p><p>好了，that&#39;s all!<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于大表查询最后几页过慢的原因</title>
    <link href="/2018/05/31/157/"/>
    <url>/2018/05/31/157/</url>
    
    <content type="html"><![CDATA[<p>mysql数据量很大使用limit查询最后几页很慢，你知道原因么？</p><p>我们不妨先来看看几条查询语句与结果。</p><div class="code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">9900000</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">limit</span> <span class="hljs-number">9900000</span>,<span class="hljs-number">10</span>;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> b.id <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">9900000</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> b); //子查询</code></pre></div><hr><div class="code-wrapper"><pre><code class="hljs pgsql">[<span class="hljs-keyword">SQL</span>]<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">9900000</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;受影响的行: <span class="hljs-number">0</span>时间: <span class="hljs-number">0.019</span>s[<span class="hljs-keyword">SQL</span>]<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">limit</span> <span class="hljs-number">9900000</span>,<span class="hljs-number">10</span>;受影响的行: <span class="hljs-number">0</span>时间: <span class="hljs-number">1.147</span>s[<span class="hljs-keyword">SQL</span>]<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> b.id <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> test_user <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">9900000</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> b);受影响的行: <span class="hljs-number">0</span>时间: <span class="hljs-number">0.001</span>s</code></pre></div><p>其实，原因就在于：</p><blockquote><p>limit10000,20的意思扫描满足条件的10020行，扔掉前面的10000行，返回最后的20行，问题就在这里。</p></blockquote><p>解决方案：</p><ol><li>过一半数据采用倒序查询</li><li>运用子查询</li></ol>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayAccess（数组式访问）接口</title>
    <link href="/2018/05/09/154/"/>
    <url>/2018/05/09/154/</url>
    
    <content type="html"><![CDATA[ <blockquote data-source-line="1" style="box-sizing: border-box; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">ArrayAccess提供像访问数组一样访问对象的能力的接口。</p></blockquote><p data-source-line="3" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">具体有一下几个方法：</p><div class="code-wrapper"><pre data-source-line="4" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">ArrayAccess&nbsp;{/*&nbsp;方法&nbsp;*/abstract&nbsp;public&nbsp;boolean&nbsp;offsetExists&nbsp;(&nbsp;mixed&nbsp;$offset&nbsp;)abstract&nbsp;public&nbsp;mixed&nbsp;offsetGet&nbsp;(&nbsp;mixed&nbsp;$offset&nbsp;)abstract&nbsp;public&nbsp;void&nbsp;offsetSet&nbsp;(&nbsp;mixed&nbsp;$offset&nbsp;,&nbsp;mixed&nbsp;$value&nbsp;)abstract&nbsp;public&nbsp;void&nbsp;offsetUnset&nbsp;(&nbsp;mixed&nbsp;$offset&nbsp;)}</pre></div><p data-source-line="13" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">文档看手册&nbsp;<a href="http://php.net/manual/zh/class.arrayaccess.php" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;">ArrayAccess（数组式访问）接口</a></p><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">调用情况看实例：</p><div class="code-wrapper"><pre data-source-line="18" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">&lt;?php/**&nbsp;*&nbsp;@author&nbsp;13sai&nbsp;*/class&nbsp;TestAccess&nbsp;implements&nbsp;ArrayAccess&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$data&nbsp;=&nbsp;[];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__get($key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(__METHOD__);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$this-&gt;data[$key];&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__set($key,$value)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(__METHOD__);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data[$key]&nbsp;=&nbsp;$value;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__isset($key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(__METHOD__);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isset($this-&gt;data[$key]);&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__unset($key)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(__METHOD__);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unset($this-&gt;data[$key]);&nbsp;&nbsp;&nbsp;&nbsp;}<p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;offsetSet($offset,$value)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(<strong>METHOD</strong>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(is_null($offset))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data[]&nbsp;=&nbsp;$value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data[$offset]&nbsp;=&nbsp;$value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;offsetGet($offset)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(<strong>METHOD</strong>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$this-&gt;offsetExists($offset)&nbsp;?&nbsp;$this-&gt;data[$offset]&nbsp;:&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;offsetExists($offset)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(<strong>METHOD</strong>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isset($this-&gt;data[$offset]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;offsetUnset($offset)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print_r(<strong>METHOD</strong>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($this-&gt;offsetExists($offset))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unset($this-&gt;data[$offset]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>$animal&nbsp;=&nbsp;new&nbsp;TestAccess();<br>echo(&#39;&lt;br&gt;1.&#39;);<br>var_dump(empty($animal-&gt;dog));</p><p>echo(&#39;&lt;br&gt;2.&#39;);<br>var_dump(empty($animal[&#39;pig&#39;]));</p><p>echo(&#39;&lt;br&gt;3.&#39;);<br>$animal-&gt;dog&nbsp;=&nbsp;&#39;dog&#39;;</p><p>echo(&#39;&lt;br&gt;4.&#39;);<br>$animal[&#39;pig&#39;]&nbsp;=&nbsp;&#39;pig&#39;;</p><p>echo(&#39;&lt;br&gt;13.&#39;);<br>var_dump(empty($animal-&gt;dog));</p><p>echo(&#39;&lt;br&gt;14.&#39;);<br>var_dump(empty($animal[&#39;pig&#39;]));</p><p>echo(&#39;&lt;br&gt;5.&#39;);<br>var_dump(isset($animal-&gt;dog));</p><p>echo(&#39;&lt;br&gt;6.&#39;);<br>var_dump(isset($animal[&#39;pig&#39;]));</p><p>echo(&#39;&lt;br&gt;7.&#39;);<br>var_dump($animal-&gt;pig);</p><p>echo(&#39;&lt;br&gt;8.&#39;);<br>var_dump($animal[&#39;dog&#39;]);</p><p>echo(&#39;&lt;br&gt;9.&#39;);<br>unset($animal[&#39;dog&#39;]);</p><p>echo(&#39;&lt;br&gt;10.&#39;);<br>unset($animal-&gt;pig);</p><p>echo(&#39;&lt;br&gt;11.&#39;);<br>var_dump($animal[&#39;pig&#39;]);</p><p>echo(&#39;&lt;br&gt;12.&#39;);<br>var_dump($animal-&gt;dog);</pre></div><p data-source-line="121" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">输出调用可运行，一看便知！</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">1.TestAccess::__isset<br>D:\project    estccess.php:126:boolean&nbsp;true</p><p>2.TestAccess::offsetExists<br>D:\project    estccess.php:129:boolean&nbsp;true</p><p>3.TestAccess::__set<br>4.TestAccess::offsetSet<br>13.TestAccess::__issetTestAccess::__get<br>D:\project    estccess.php:139:boolean&nbsp;false</p><p>14.TestAccess::offsetExistsTestAccess::offsetGetTestAccess::offsetExists<br>D:\project    estccess.php:142:boolean&nbsp;false</p><p>5.TestAccess::__isset<br>D:\project    estccess.php:145:boolean&nbsp;true</p><p>6.TestAccess::offsetExists<br>D:\project    estccess.php:148:boolean&nbsp;true</p><p>7.TestAccess::__get<br>D:\project    estccess.php:151:string&nbsp;&#39;pig&#39;&nbsp;(length=3)</p><p>8.TestAccess::offsetGetTestAccess::offsetExists<br>D:\project    estccess.php:154:string&nbsp;&#39;dog&#39;&nbsp;(length=3)</p><p>9.TestAccess::offsetUnsetTestAccess::offsetExists<br>10.TestAccess::__unset<br>11.TestAccess::offsetGetTestAccess::offsetExists<br>D:\project    estccess.php:163:null</p><p>12.TestAccess::__get<br>(&nbsp;!&nbsp;)&nbsp;Notice:&nbsp;Undefined&nbsp;index:&nbsp;dog&nbsp;in&nbsp;D:\project    estccess.php&nbsp;on&nbsp;line&nbsp;26<br>Call&nbsp;Stack</p><h1 id="Time-Memory-Function-Location"><a href="#Time-Memory-Function-Location" class="headerlink" title="Time    Memory    Function    Location"></a>Time    Memory    Function    Location</h1><p>1    0.2010    384480    {main}(&nbsp;)    …ccess.php:0<br>2    0.2010    385368    TestAccess-&gt;__get(&nbsp;string(3)&nbsp;)    …ccess.php:166<br>&nbsp;D:\project    estccess.php:166:null</pre></div><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git解决总要输入密码的问题</title>
    <link href="/2018/05/09/153/"/>
    <url>/2018/05/09/153/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;">之前每次pull和push总要输入密码，繁琐。操作两步，解决问题！</p><ol data-source-line="4" style="box-sizing: border-box; padding-left: 2em; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>生成公钥</p></li></ol><div class="code-wrapper"><pre data-source-line="5" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">cd&nbsp;~/.sshssh-keygen&nbsp;-t&nbsp;rsa&nbsp;-C&nbsp;&quot;注释&quot;</pre></div><ol start="2" data-source-line="10" style="box-sizing: border-box; padding-left: 2em; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>拷贝公钥到远程主机</p></li></ol><blockquote data-source-line="11" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">ssh-copy-id&nbsp;<a href="mailto:git@xxx.com" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;">git@xxx.com</a></p></blockquote><p data-source-line="14" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255); margin-bottom: 0px !important;">ok！</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql触发器</title>
    <link href="/2018/04/18/152/"/>
    <url>/2018/04/18/152/</url>
    
    <content type="html"><![CDATA[<p>去年年底做新功能时考虑使用触发器，来聊聊触发器。</p><p>触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。</p><div class="code-wrapper"><pre><code class="sql">DELIMITER;;//定义结束符CREATE TRIGGER `updateData` AFTER UPDATE ON `buyer` FOR EACH ROW begin    set @phone = right(new.phone,11); // 取手机号    set @main_id = (select id from main where u_id = new.u_id); // 从表main取id    set @new_last_trade_time = IF( UNIX_TIMESTAMP(new.last_trade_time) &amp;gt; @old_last_trade_time, UNIX_TIMESTAMP(new.last_trade_time), @old_last_trade_time);    set @add_trade_count = (new.trade_count - old.trade_count);    set @add_trade_amount = (new.trade_amount - old.trade_amount);    // 更新操作    update member set         trade_count=trade_count+@add_trade_count,        trade_amount=trade_amount+@add_trade_amount,        last_trade_time=@new_last_trade_time      where main_id = @main_id and phone = @phone;end;;DELIMITER ;性能问题：通过测试，若我每秒钟向数据库中插入700条左右的告警信息，此时若使用触发器，每秒中只会插入数据库中50左右，若不开启触发器，那么700条全部可以插入数据库中。（来自网络）</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php的redis操作</title>
    <link href="/2018/03/22/151/"/>
    <url>/2018/03/22/151/</url>
    
    <content type="html"><![CDATA[ <p><strong>1. 连接redis</strong></p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php&nbsp;&nbsp;&nbsp;&nbsp;$redis&nbsp;=&nbsp;new&nbsp;Redis();&nbsp;&nbsp;&nbsp;&nbsp;$redis-&gt;connect(&#39;127.0.0.1&#39;,&nbsp;6379);&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Connection&nbsp;to&nbsp;server&nbsp;sucessfully&quot;;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Server&nbsp;is&nbsp;running:&nbsp;&quot;.$redis-&gt;ping();&nbsp;?&gt;</pre></div><p><br/></p><p><strong>2. String 类型操作</strong></p><div class="code-wrapper"><pre class="brush:php;toolbar:false">$redis-&gt;set(&#39;key&#39;,&#39;TK&#39;);$redis-&gt;set(&#39;number&#39;,&#39;1&#39;);$redis-&gt;setex(&#39;key&#39;,5,&#39;TK&#39;);&nbsp;//设置有效期为5秒的键值$redis-&gt;psetex(&#39;key&#39;,5000,&#39;TK&#39;);&nbsp;//设置有效期为5000毫秒(同5秒)的键值$redis-&gt;setnx(&#39;key&#39;,&#39;XK&#39;);&nbsp;//若键值存在返回false&nbsp;不存在返回true$redis-&gt;delete(&#39;key&#39;);&nbsp;删除键值&nbsp;可以传入数组&nbsp;array(&#39;key1&#39;,&#39;key2&#39;)删除多个键$redis-&gt;getSet(&#39;key&#39;,&#39;XK&#39;);&nbsp;//将键key的值设置为XK，&nbsp;并返回这个键值原来的值TK<p>$ret&nbsp;=&nbsp;$redis-&gt;multi()&nbsp;&nbsp;//批量事务处理,不保证处理数据的原子性<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;set(&#39;key1&#39;,&nbsp;&#39;val1&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;get(&#39;key1&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;setnx(&#39;key&#39;,&nbsp;&#39;val2&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;get(&#39;key2&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;exec();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>$redis-&gt;watch(&#39;key&#39;);&nbsp;&nbsp;&nbsp;//&nbsp;监控键key&nbsp;是否被其他客户端修改<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果KEY在调用watch()和exec()之间被修改，exec失败<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>$redis-&gt;subscribe(array(&#39;chan-1&#39;,&nbsp;&#39;chan-2&#39;,&nbsp;&#39;chan-3&#39;),&nbsp;&#39;f&#39;);&nbsp;//&nbsp;subscribe&nbsp;to&nbsp;3&nbsp;chans</p><p>$redis-&gt;publish(&#39;chan-1&#39;,&nbsp;&#39;hello,&nbsp;world!&#39;);&nbsp;//&nbsp;send&nbsp;message.&nbsp;<br>$redis-&gt;exists(&#39;key&#39;);&nbsp;//验证键是否存在，存在返回true<br>$redis-&gt;incr(&#39;number&#39;);&nbsp;//键值加1<br>$redis-&gt;incrby(&#39;number&#39;,-10);&nbsp;//键值加减10<br>$redis-&gt;incrByFloat(&#39;number&#39;,&nbsp;+/-&nbsp;1.5);&nbsp;//键值加减小数<br>$redis-&gt;decr(&#39;number&#39;);&nbsp;//&nbsp;键值减1<br>$redis-&gt;decrBy(&#39;number&#39;,10);&nbsp;//&nbsp;键值减10<br>$mget&nbsp;=&nbsp;$redis-&gt;mget(array(&#39;number&#39;,&#39;key&#39;));&nbsp;//&nbsp;批量获取键值,返回一个数组<br>$redis-&gt;mset(array(&#39;key0&#39;&nbsp;=&gt;&nbsp;&#39;value0&#39;,&nbsp;&#39;key1&#39;&nbsp;=&gt;&nbsp;&#39;value1&#39;));&nbsp;//&nbsp;批量设置键值<br>$redis-&gt;msetnx(array(&#39;key0&#39;&nbsp;=&gt;&nbsp;&#39;value0&#39;,&nbsp;&#39;key1&#39;&nbsp;=&gt;&nbsp;&#39;value1&#39;));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;批量设置键值，类似将setnx()方法批量操作<br>$redis-&gt;append(&#39;key&#39;,&nbsp;&#39;-Smudge&#39;);&nbsp;//原键值TK，将值追加到键值后面，键值为TK-Smudge<br>$redis-&gt;getRange(&#39;key&#39;,&nbsp;0,&nbsp;5);&nbsp;//&nbsp;键值截取从0位置开始到5位置结束<br>$redis-&gt;getRange(&#39;key&#39;,&nbsp;-6,&nbsp;-1);&nbsp;//&nbsp;字符串截取从-6(倒数第6位置)开始到-1(倒数第1位置)结束<br>$redis-&gt;setRange(&#39;key&#39;,&nbsp;0,&nbsp;&#39;Smudge&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;键值中替换字符串，0表示从0位置开始,&nbsp;&nbsp;有多少个字符替换多少位置，其中汉字占2个位置<br>$redis-&gt;strlen(&#39;key&#39;);&nbsp;//键值长度<br>$redis-&gt;getBit(&#39;key&#39;);<br>$redis-&gt;setBit(&#39;key&#39;);</pre></div><p><br/></p><p><br/></p><p><strong>3. 链表操作</strong></p><div class="code-wrapper"><pre class="brush:php;toolbar:false">$redis-&gt;delete(&#39;list-key&#39;);&nbsp;//&nbsp;删除链表<br>$redis-&gt;lPush(&#39;list-key&#39;,&nbsp;&#39;A&#39;);&nbsp;//插入链表头部/左侧，返回链表长度<br>$redis-&gt;rPush(&#39;list-key&#39;,&nbsp;&#39;B&#39;);&nbsp;//插入链表尾部/右侧，返回链表长度<br>$redis-&gt;lPushx(&#39;list-key&#39;,&nbsp;&#39;C&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插入链表头部/左侧,链表不存在返回0，存在即插入成功，返回当前链表长度<br>$redis-&gt;rPushx(&#39;list-key&#39;,&nbsp;&#39;C&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;插入链表尾部/右侧,链表不存在返回0，存在即插入成功，返回当前链表长度<br>$redis-&gt;lPop(&#39;list-key&#39;);&nbsp;//返回LIST顶部（左侧）的VALUE&nbsp;,后入先出(栈)<br>$redis-&gt;rPop(&#39;list-key&#39;);&nbsp;//返回LIST尾部（右侧）的VALUE&nbsp;,先入先出（队列）<br>$redis-&gt;blPop();<br>$redis-&gt;brPop();<br>$redis-&gt;lSize(&#39;list-key&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果是链表则返回链表长度，空链表返回0&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;若不是链表或者不为空，则返回false&nbsp;,判断非链表&nbsp;&quot;&nbsp;===&nbsp;false&nbsp;&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>$redis-&gt;lGet(&#39;list-key&#39;,-1);&nbsp;//&nbsp;通过索引获取链表元素&nbsp;0获取左侧一个&nbsp;&nbsp;-1获取最后一个<br>$redis-&gt;lSet(&#39;list-key&#39;,&nbsp;0,&nbsp;&#39;X&#39;);&nbsp;//0位置元素替换为&nbsp;X<br>$redis-&gt;lRange(&#39;list-key&#39;,&nbsp;0,&nbsp;3);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//链表截取&nbsp;从0开始&nbsp;3位置结束&nbsp;，结束位置为-1&nbsp;获取开始位置之后的全部<br>$redis-&gt;lTrim(&#39;list-key&#39;,&nbsp;0,&nbsp;1);&nbsp;//&nbsp;截取链表(不可逆)&nbsp;从0索引开始&nbsp;1索引结束&nbsp;<br>$redis-&gt;lRem(&#39;list-key&#39;,&nbsp;&#39;C&#39;,&nbsp;2);&nbsp;//链表从左开始删除元素2个C<br>$redis-&gt;lInsert(&#39;list-key&#39;,&nbsp;Redis::BEFORE,&nbsp;&#39;C&#39;,&nbsp;&#39;X&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在C元素前面插入X&nbsp;&nbsp;,&nbsp;Redis::AfTER(表示后面插入)&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;链表不存在则插入失败&nbsp;返回0&nbsp;若元素不存在返回-1<br>$redis-&gt;rpoplpush(&#39;list-key&#39;,&nbsp;&#39;list-key2&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//从源LIST的最后弹出一个元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;并且把这个元素从目标LIST的顶部（左侧）压入目标LIST。&nbsp;<br>$redis-&gt;brpoplpush();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//rpoplpush的阻塞版本，这个版本有第三个参数用于设置阻塞时间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即如果源LIST为空，那么可以阻塞监听timeout的时间，如果有元素了则执行操作。</pre></div><p><br/></p><p><strong>4. 无序类型</strong></p><div class="code-wrapper"><pre class="brush:bash;toolbar:false">set无序集合&nbsp;不允许出现重复的元素&nbsp;服务端可以实现多个&nbsp;集合操作<br>$redis-&gt;sMembers(&#39;key&#39;);&nbsp;//获取容器key中所有元素<br>$redis-&gt;sAdd(&#39;key&#39;&nbsp;,&nbsp;&#39;TK&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;(从左侧插入,最后插入的元素在0位置),集合中已经存在TK&nbsp;则返回false&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不存在添加成功&nbsp;返回true<br>$redis-&gt;sRem(&#39;key&#39;&nbsp;,&nbsp;&#39;TK&#39;);&nbsp;//&nbsp;移除容器中的TK<br>$redis-&gt;sMove(&#39;key&#39;,&#39;key1&#39;,&#39;TK&#39;);&nbsp;//将容易key中的元素TK&nbsp;移动到容器key1&nbsp;&nbsp;操作成功返回TRUE<br>$redis-&gt;sIsMember(&#39;key&#39;,&#39;TK&#39;);&nbsp;//检查VALUE是否是SET容器中的成员<br>$redis-&gt;sCard(&#39;key&#39;);&nbsp;//返回SET容器的成员数<br>$redis-&gt;sPop(&#39;key&#39;);&nbsp;//随机返回容器中一个元素，并移除该元素<br>$redis-&gt;sRandMember(&#39;key&#39;);//随机返回容器中一个元素，不移除该元素<br>$redis-&gt;sInter(&#39;key&#39;,&#39;key1&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回两个集合的交集&nbsp;没有交集返回一个空数组，若参数只有一个集合，则返回集合对应的完整的数组<br>$redis-&gt;sInterStore(&#39;store&#39;,&#39;key&#39;,&#39;key1&#39;);&nbsp;//将集合key和集合key1的交集&nbsp;存入容器store&nbsp;成功返回1<br>$redis-&gt;sUnion(&#39;key&#39;,&#39;key1&#39;);&nbsp;//集合key和集合key1的并集&nbsp;&nbsp;注意即使多个集合有相同元素&nbsp;只保留一个<br>$redis-&gt;sUnionStore(&#39;store&#39;,&#39;key&#39;,&#39;key1&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//集合key和集合key1的并集保存在集合store中,&nbsp;&nbsp;注意即使多个集合有相同元素&nbsp;只保留一个<br>$redis-&gt;sDiff(&#39;key&#39;,&#39;key1&#39;,&#39;key2&#39;);&nbsp;//返回数组，该数组元素是存在于key集合而不存在于集合key1&nbsp;key2</pre></div><p><br/></p><p><br/></p><p><strong>5. Zset数据类型</strong></p><div class="code-wrapper"><pre class="brush:php;toolbar:false"><strong>(stored&nbsp;set)&nbsp;和&nbsp;set&nbsp;一样是字符串的集合，不同的是每个元素都会关联一个&nbsp;double&nbsp;类型的&nbsp;score<br>redis的list类型其实就是一个每个子元素都是string类型的双向链表。</strong><br>$redis-&gt;zAdd(&#39;tkey&#39;,&nbsp;1,&nbsp;&#39;A&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;插入集合tkey中，A元素关联一个分数，插入成功返回1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时集合元素不可以重复,&nbsp;如果元素已经存在返回&nbsp;0<br>$redis-&gt;zRange(&#39;tkey&#39;,0,-1);&nbsp;//&nbsp;获取集合元素，从0位置&nbsp;到&nbsp;-1&nbsp;位置<br>$redis-&gt;zRange(&#39;tkey&#39;,0,-1,&nbsp;true);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取集合元素，从0位置&nbsp;到&nbsp;-1&nbsp;位置,&nbsp;返回一个关联数组&nbsp;带分数&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array([A]&nbsp;=&gt;&nbsp;0.01,[B]&nbsp;=&gt;&nbsp;0.02,[D]&nbsp;=&gt;&nbsp;0.03)&nbsp;其中小数来自zAdd方法第二个参数<br>$redis-&gt;zDelete(&#39;tkey&#39;,&nbsp;&#39;B&#39;);&nbsp;//&nbsp;移除集合tkey中元素B&nbsp;&nbsp;成功返回1&nbsp;失败返回&nbsp;0<br>$redis-&gt;zRevRange(&#39;tkey&#39;,&nbsp;0,&nbsp;-1);&nbsp;//&nbsp;获取集合元素，从0位置&nbsp;到&nbsp;-1&nbsp;位置，数组按照score降序处理<br>$redis-&gt;zRevRange(&#39;tkey&#39;,&nbsp;0,&nbsp;-1,true);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取集合元素，从0位置&nbsp;到&nbsp;-1&nbsp;位置，数组按照score降序处理&nbsp;返回score关联数组<br>$redis-&gt;zRangeByScore(&#39;tkey&#39;,&nbsp;0,&nbsp;0.2,array(&#39;withscores&#39;&nbsp;=&gt;&nbsp;true));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取几个tkey中score在区间[0,0.2]元素&nbsp;,score由低到高排序,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元素具有相同的score，那么会按照字典顺序排列&nbsp;,&nbsp;withscores&nbsp;控制返回关联数组<br>$redis-&gt;zRangeByScore(&#39;tkey&#39;,&nbsp;0.1,&nbsp;0.36,&nbsp;array(&#39;withscores&#39;&nbsp;=&gt;&nbsp;TRUE,&nbsp;&#39;limit&#39;&nbsp;=&gt;&nbsp;array(0,&nbsp;1)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//其中limit中&nbsp;0和1&nbsp;表示取符合条件集合中&nbsp;从0位置开始，向后扫描1个&nbsp;返回关联数组<br>$redis-&gt;zCount(&#39;tkey&#39;,&nbsp;2,&nbsp;10);&nbsp;//&nbsp;获取tkey中score在区间[2,&nbsp;10]元素的个数<br>$redis-&gt;zRemRangeByScore(&#39;tkey&#39;,&nbsp;1,&nbsp;3);&nbsp;//&nbsp;移除tkey中score在区间<a href="%E5%90%AB%E8%BE%B9%E7%95%8C">1,&nbsp;3</a>的元素<br>$redis-&gt;zRemRangeByRank(&#39;tkey&#39;,&nbsp;0,&nbsp;1);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//默认元素score是递增的，移除tkey中元素&nbsp;从0开始到-1位置结束<br>$redis-&gt;zSize(&#39;tkey&#39;);&nbsp;&nbsp;//返回存储在key对应的有序集合中的元素的个数<br>$redis-&gt;zScore(&#39;tkey&#39;,&nbsp;&#39;A&#39;);&nbsp;//&nbsp;返回集合tkey中元素A的score值<br>$redis-&gt;zRank(&#39;tkey&#39;,&nbsp;&#39;A&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回集合tkey中元素A的索引值&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z集合中元素按照score从低到高进行排列&nbsp;，即最低的score&nbsp;index索引为0<br>$redis-&gt;zIncrBy(&#39;tkey&#39;,&nbsp;2.5,&nbsp;&#39;A&#39;);&nbsp;//&nbsp;将集合tkey中元素A的score值&nbsp;加&nbsp;2.5<br>$redis-&gt;zUnion(&#39;union&#39;,&nbsp;array(&#39;tkey&#39;,&nbsp;&#39;tkey1&#39;));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将集合tkey和集合tkey1元素合并于集合union&nbsp;,&nbsp;并且新集合中元素不能重复<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回新集合的元素个数，&nbsp;如果元素A在tkey和tkey1都存在，则合并后的元素A的score相加<br>$redis-&gt;zUnion(&#39;ko2&#39;,&nbsp;array(&#39;k1&#39;,&nbsp;&#39;k2&#39;),&nbsp;array(5,&nbsp;2));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;集合k1和集合k2并集于k02&nbsp;，array(5,1)中元素的个数与子集合对应，然后&nbsp;5&nbsp;对应k1&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k1每个元素score都要乘以5&nbsp;，同理1对应k2，k2每个元素score乘以1&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后元素按照递增排序，默认相同的元素score(SUM)相加<br>$redis-&gt;zUnion(&#39;ko2&#39;,&nbsp;array(&#39;k1&#39;,&nbsp;&#39;k2&#39;),&nbsp;array(10,&nbsp;2),&#39;MAX&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;各个子集乘以因子之后，元素按照递增排序，相同的元素的score取最大值(MAX)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以设置MIN&nbsp;取最小值<br>$redis-&gt;zInter(&#39;ko1&#39;,&nbsp;array(&#39;k1&#39;,&nbsp;&#39;k2&#39;));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;集合k1和集合k2取交集于k01&nbsp;，且按照score值递增排序<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果集合元素相同，则新集合中的元素的score值相加<br>$redis-&gt;zInter(&#39;ko1&#39;,&nbsp;array(&#39;k1&#39;,&nbsp;&#39;k2&#39;),&nbsp;array(5,&nbsp;1));&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//集合k1和集合k2取交集于k01&nbsp;，array(5,1)中元素的个数与子集合对应，然后&nbsp;5&nbsp;对应k1&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k1每个元素score都要乘以5&nbsp;，同理1对应k2，k2每个元素score乘以1&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;，然后元素score按照递增排序，默认相同的元素score(SUM)相加<br>$redis-&gt;zInter(&#39;ko1&#39;,&nbsp;array(&#39;k1&#39;,&nbsp;&#39;k2&#39;),&nbsp;array(5,&nbsp;1),&#39;MAX&#39;);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;各个子集乘以因子之后，元素score按照递增排序，相同的元素score取最大值(MAX)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也可以设置MIN&nbsp;取最小值</pre></div><p><strong><br/></strong></p><p><strong>6. Hash数据类型</strong></p><p>redis hash是一个string类型的field和value的映射表.它的添加，删除操作都是O(1)（平均）.hash特别适合用于存储对象。</p><p><br/></p><div class="code-wrapper"><pre class="brush:php;toolbar:false">$redis-&gt;hSet(&#39;h&#39;,&nbsp;&#39;name&#39;,&nbsp;&#39;TK&#39;);&nbsp;//&nbsp;在h表中&nbsp;添加name字段&nbsp;value为TK<br>$redis-&gt;hSetNx(&#39;h&#39;,&nbsp;&#39;name&#39;,&nbsp;&#39;TK&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在h表中&nbsp;添加name字段&nbsp;value为TK&nbsp;如果字段name的value存在返回false&nbsp;否则返回&nbsp;true<br>$redis-&gt;hGet(&#39;h&#39;,&nbsp;&#39;name&#39;);&nbsp;//&nbsp;获取h表中name字段value<br>$redis-&gt;hLen(&#39;h&#39;);&nbsp;//&nbsp;获取h表长度即字段的个数<br>$redis-&gt;hDel(&#39;h&#39;,&#39;email&#39;);&nbsp;//&nbsp;删除h表中email&nbsp;字段<br>$redis-&gt;hKeys(&#39;h&#39;);&nbsp;//&nbsp;获取h表中所有字段<br>$redis-&gt;hVals(&#39;h&#39;);&nbsp;//&nbsp;获取h表中所有字段value<br>$redis-&gt;hGetAll(&#39;h&#39;);&nbsp;//&nbsp;获取h表中所有字段和value&nbsp;返回一个关联数组(字段为键值)<br>$redis-&gt;hExists(&#39;h&#39;,&nbsp;&#39;email&#39;);&nbsp;//判断email&nbsp;字段是否存在与表h&nbsp;不存在返回false<br>$redis-&gt;hSet(&#39;h&#39;,&nbsp;&#39;age&#39;,&nbsp;28);<br>$redis-&gt;hIncrBy(&#39;h&#39;,&nbsp;&#39;age&#39;,&nbsp;-2);&nbsp;<br>&nbsp;//&nbsp;设置h表中age字段value加(-2)&nbsp;如果value是个非数值&nbsp;则返回false&nbsp;否则，返回操作后的value<br>$redis-&gt;hIncrByFloat(&#39;h&#39;,&nbsp;&#39;age&#39;,&nbsp;-0.33);&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;设置h表中age字段value加(-2.6)&nbsp;如果value是个非数值&nbsp;则返回false&nbsp;否则<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回操作后的value(小数点保留15位)<br>$redis-&gt;hMset(&#39;h&#39;,&nbsp;array(&#39;score&#39;&nbsp;=&gt;&nbsp;&#39;80&#39;,&nbsp;&#39;salary&#39;&nbsp;=&gt;&nbsp;2000));&nbsp;//&nbsp;表h&nbsp;批量设置字段和value<br>$redis-&gt;hMGet(&#39;h&#39;,&nbsp;array(&#39;score&#39;,&#39;salary&#39;));&nbsp;//&nbsp;表h&nbsp;批量获取字段的value</pre></div><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见mysql</title>
    <link href="/2018/03/19/150/"/>
    <url>/2018/03/19/150/</url>
    
    <content type="html"><![CDATA[<blockquote><p>常用的sql语句，方便查询。</p></blockquote><h2 id="一、用户管理："><a href="#一、用户管理：" class="headerlink" title="一、用户管理："></a>一、用户管理：</h2><h4 id="1、新建用户："><a href="#1、新建用户：" class="headerlink" title="1、新建用户："></a>1、新建用户：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> name IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;ssapdrow&#x27;</span>;</code></pre></div><h4 id="2、更改密码："><a href="#2、更改密码：" class="headerlink" title="2、更改密码："></a>2、更改密码：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> PASSWORD <span class="hljs-keyword">FOR</span> name<span class="hljs-operator">=</span>PASSWORD(<span class="hljs-string">&#x27;fdddfd&#x27;</span>);</code></pre></div><h4 id="3、权限管理"><a href="#3、权限管理" class="headerlink" title="3、权限管理"></a>3、权限管理</h4><div class="code-wrapper"><pre><code class="hljs sql"># 查看name用户权限<span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> name;# 给name用户db_name数据库的所有权限<span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> db_name.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> name;# <span class="hljs-keyword">GRANT</span>的反操作，去除权限<span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> db_name.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> name;</code></pre></div><h2 id="二、数据库操作："><a href="#二、数据库操作：" class="headerlink" title="二、数据库操作："></a>二、数据库操作：</h2><h4 id="1、查看数据库："><a href="#1、查看数据库：" class="headerlink" title="1、查看数据库："></a>1、查看数据库：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;</code></pre></div><h4 id="2、创建数据库："><a href="#2、创建数据库：" class="headerlink" title="2、创建数据库："></a>2、创建数据库：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_name;</code></pre></div><h4 id="3、使用数据库："><a href="#3、使用数据库：" class="headerlink" title="3、使用数据库："></a>3、使用数据库：</h4><div class="code-wrapper"><pre><code class="hljs sql">USE db_name;</code></pre></div><h4 id="4、删除数据库："><a href="#4、删除数据库：" class="headerlink" title="4、删除数据库："></a>4、删除数据库：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE db_name;</code></pre></div><h2 id="三、创建表："><a href="#三、创建表：" class="headerlink" title="三、创建表："></a>三、创建表：</h2><h4 id="1、创建表："><a href="#1、创建表：" class="headerlink" title="1、创建表："></a>1、创建表：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> table_name(    id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>score TINYINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,    <span class="hljs-keyword">PRIMARY</span> KEY(id))ENGINE<span class="hljs-operator">=</span>InnoDB　<span class="hljs-keyword">DEFAULT</span> charset<span class="hljs-operator">=</span>utf8;</code></pre></div><h4 id="2、复制表："><a href="#2、复制表：" class="headerlink" title="2、复制表："></a>2、复制表：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_name2 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_name;</code></pre></div><p>或者部分复制：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb_name2 <span class="hljs-keyword">SELECT</span> id,name <span class="hljs-keyword">FROM</span> tb_name;</code></pre></div><h4 id="3、创建临时表："><a href="#3、创建临时表：" class="headerlink" title="3、创建临时表："></a>3、创建临时表：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> TEMPORARY <span class="hljs-keyword">TABLE</span> tb_name(这里和创建普通表一样);</code></pre></div><h4 id="4、查看数据库中可用的表："><a href="#4、查看数据库中可用的表：" class="headerlink" title="4、查看数据库中可用的表："></a>4、查看数据库中可用的表：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;</code></pre></div><h4 id="5、查看表的结构："><a href="#5、查看表的结构：" class="headerlink" title="5、查看表的结构："></a>5、查看表的结构：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DESCRIBE</span> tb_name;</code></pre></div><p>也可以使用：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> COLUMNS <span class="hljs-keyword">in</span> tb_name;</code></pre></div><h4 id="6、删除表："><a href="#6、删除表：" class="headerlink" title="6、删除表："></a>6、删除表：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> tb_name <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_name;</code></pre></div><p>实例：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> tb_name;</code></pre></div><h4 id="7、表重命名："><a href="#7、表重命名：" class="headerlink" title="7、表重命名："></a>7、表重命名：</h4><div class="code-wrapper"><pre><code class="hljs sql">RENAME <span class="hljs-keyword">TABLE</span> name_old <span class="hljs-keyword">TO</span> name_new;</code></pre></div><p>还可以使用：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name_old RENAME name_new;</code></pre></div><h2 id="四、修改表："><a href="#四、修改表：" class="headerlink" title="四、修改表："></a>四、修改表：</h2><h4 id="1、更改表结构："><a href="#1、更改表结构：" class="headerlink" title="1、更改表结构："></a>1、更改表结构：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_name <span class="hljs-keyword">ADD</span>[CHANGE,RENAME,<span class="hljs-keyword">DROP</span>] ...要更改的内容...</code></pre></div><p>实例：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> address <span class="hljs-type">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_name <span class="hljs-keyword">DROP</span> address;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_name CHANGE score grade <span class="hljs-type">SMALLINT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;</code></pre></div><p>当然，如果不修改字段名，更建议MODIFY，而不是CHANGE</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tb_name MODIFY score <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>);</code></pre></div><h2 id="五、插入数据："><a href="#五、插入数据：" class="headerlink" title="五、插入数据："></a>五、插入数据：</h2><h4 id="1、插入数据："><a href="#1、插入数据：" class="headerlink" title="1、插入数据："></a>1、插入数据：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb_name(id,name,score)<span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">140</span>),(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;张四&#x27;</span>,<span class="hljs-number">178</span>),(<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;张五&#x27;</span>,<span class="hljs-number">134</span>);</code></pre></div><p>这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。</p><h4 id="2、插入检索出来的数据："><a href="#2、插入检索出来的数据：" class="headerlink" title="2、插入检索出来的数据："></a>2、插入检索出来的数据：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tb_name(name,score) <span class="hljs-keyword">SELECT</span> name,score <span class="hljs-keyword">FROM</span> tb_name2;</code></pre></div><h2 id="六、更新数据："><a href="#六、更新数据：" class="headerlink" title="六、更新数据："></a>六、更新数据：</h2><h4 id="1、指定更新数据："><a href="#1、指定更新数据：" class="headerlink" title="1、指定更新数据："></a>1、指定更新数据：</h4><div class="code-wrapper"><pre><code class="hljs sql">UPDATE tb_name <span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span><span class="hljs-number">189</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>; UPDATE tablename <span class="hljs-keyword">SET</span> columnName<span class="hljs-operator">=</span>NewValue [ <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span> ]</code></pre></div><h2 id="七、删除数据："><a href="#七、删除数据：" class="headerlink" title="七、删除数据："></a>七、删除数据：</h2><h4 id="1、删除数据："><a href="#1、删除数据：" class="headerlink" title="1、删除数据："></a>1、删除数据：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> tb_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>;</code></pre></div><h2 id="八、条件控制："><a href="#八、条件控制：" class="headerlink" title="八、条件控制："></a>八、条件控制：</h2><h4 id="1、WHERE-语句："><a href="#1、WHERE-语句：" class="headerlink" title="1、WHERE 语句："></a>1、WHERE 语句：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>;</code></pre></div><h4 id="2、HAVING-语句："><a href="#2、HAVING-语句：" class="headerlink" title="2、HAVING 语句："></a>2、HAVING 语句：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_name <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span></code></pre></div><h4 id="3、相关条件控制符"><a href="#3、相关条件控制符" class="headerlink" title="3、相关条件控制符"></a>3、相关条件控制符</h4><p> =、&gt;、&lt;、&lt;&gt;、IN(1,2,3……)、BETWEEN a AND b、NOT AND 、OR Like()用法中 % 为匹配任意、 _ 匹配一个字符（可以是汉字） IS NULL 空值检测</p><h2 id="九、MySQL的正则表达式："><a href="#九、MySQL的正则表达式：" class="headerlink" title="九、MySQL的正则表达式："></a>九、MySQL的正则表达式：</h2><h4 id="1、Mysql支持REGEXP的正则表达式："><a href="#1、Mysql支持REGEXP的正则表达式：" class="headerlink" title="1、Mysql支持REGEXP的正则表达式："></a>1、Mysql支持REGEXP的正则表达式：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_name <span class="hljs-keyword">WHERE</span> name REGEXP <span class="hljs-string">&#x27;[1]&#x27;</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>找出以A<span class="hljs-operator">-</span>D 为开头的name</code></pre></div><h4 id="2、特殊字符需要转义。"><a href="#2、特殊字符需要转义。" class="headerlink" title="2、特殊字符需要转义。"></a>2、特殊字符需要转义。</h4><h2 id="十、MySQL的一些函数："><a href="#十、MySQL的一些函数：" class="headerlink" title="十、MySQL的一些函数："></a>十、MySQL的一些函数：</h2><h4 id="1、字符串链接——CONCAT"><a href="#1、字符串链接——CONCAT" class="headerlink" title="1、字符串链接——CONCAT()"></a>1、字符串链接——CONCAT()</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(name,<span class="hljs-string">&#x27;=&gt;&#x27;</span>,score) <span class="hljs-keyword">FROM</span> tb_name</code></pre></div><h4 id="2、数学函数：-AVG、SUM、MAX、MIN、COUNT；"><a href="#2、数学函数：-AVG、SUM、MAX、MIN、COUNT；" class="headerlink" title="2、数学函数： AVG、SUM、MAX、MIN、COUNT；"></a>2、数学函数： AVG、SUM、MAX、MIN、COUNT；</h4><h4 id="3、文本处理函数：-TRIM、LOCATE、UPPER、LOWER、SUBSTRING"><a href="#3、文本处理函数：-TRIM、LOCATE、UPPER、LOWER、SUBSTRING" class="headerlink" title="3、文本处理函数： TRIM、LOCATE、UPPER、LOWER、SUBSTRING"></a>3、文本处理函数： TRIM、LOCATE、UPPER、LOWER、SUBSTRING</h4><h4 id="4、运算符：-、-、-、"><a href="#4、运算符：-、-、-、" class="headerlink" title="4、运算符： +、-、*、"></a>4、运算符： +、-、*、</h4><h4 id="5、时间函数：-DATE-、CURTIME-、DAY-、YEAR-、NOW-…"><a href="#5、时间函数：-DATE-、CURTIME-、DAY-、YEAR-、NOW-…" class="headerlink" title="5、时间函数： DATE()、CURTIME()、DAY()、YEAR()、NOW()….."></a>5、时间函数： DATE()、CURTIME()、DAY()、YEAR()、NOW()…..</h4><h2 id="十一、分组查询："><a href="#十一、分组查询：" class="headerlink" title="十一、分组查询："></a>十一、分组查询：</h2><h4 id="1、分组查询可以按照指定的列进行分组："><a href="#1、分组查询可以按照指定的列进行分组：" class="headerlink" title="1、分组查询可以按照指定的列进行分组："></a>1、分组查询可以按照指定的列进行分组：</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>() <span class="hljs-keyword">FROM</span> tb_name <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>()<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;</code></pre></div><h4 id="2、条件使用Having；"><a href="#2、条件使用Having；" class="headerlink" title="2、条件使用Having；"></a>2、条件使用Having；</h4><h4 id="3、ORDER-BY-排序"><a href="#3、ORDER-BY-排序" class="headerlink" title="3、ORDER BY 排序"></a>3、ORDER BY 排序</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">DESC</span><span class="hljs-operator">|</span><span class="hljs-keyword">ASC</span>　<span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>按数据的降序和升序排列</code></pre></div><h2 id="十二、索引相关"><a href="#十二、索引相关" class="headerlink" title="十二、索引相关"></a>十二、索引相关</h2><h4 id="1、添加PRIMARY-KEY（主键索引）"><a href="#1、添加PRIMARY-KEY（主键索引）" class="headerlink" title="1、添加PRIMARY KEY（主键索引）"></a>1、添加PRIMARY KEY（主键索引）</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY ( <span class="hljs-keyword">column</span> )</code></pre></div><h4 id="2、-添加UNIQUE-唯一索引"><a href="#2、-添加UNIQUE-唯一索引" class="headerlink" title="2、 添加UNIQUE(唯一索引)"></a>2、 添加UNIQUE(唯一索引)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> ( <span class="hljs-keyword">column</span> )</code></pre></div><h4 id="3、添加INDEX-普通索引"><a href="#3、添加INDEX-普通索引" class="headerlink" title="3、添加INDEX(普通索引)"></a>3、添加INDEX(普通索引)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> INDEX index_name ( <span class="hljs-keyword">column</span> )</code></pre></div><h4 id="4、添加FULLTEXT-全文索引"><a href="#4、添加FULLTEXT-全文索引" class="headerlink" title="4、添加FULLTEXT(全文索引)"></a>4、添加FULLTEXT(全文索引)</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> FULLTEXT ( <span class="hljs-keyword">column</span>)</code></pre></div><h4 id="5、添加联合索引"><a href="#5、添加联合索引" class="headerlink" title="5、添加联合索引"></a>5、添加联合索引</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> INDEX index_name ( column1, column2, column3 )</code></pre></div><h4 id="6、查询索引"><a href="#6、查询索引" class="headerlink" title="6、查询索引"></a>6、查询索引</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> table_name;</code></pre></div><h4 id="7、删除索引"><a href="#7、删除索引" class="headerlink" title="7、删除索引"></a>7、删除索引</h4><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index index_name <span class="hljs-keyword">on</span> table_name ; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> index index_name ; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key ;</code></pre></div><h3 id="查看当前所有的数据库和索引大小"><a href="#查看当前所有的数据库和索引大小" class="headerlink" title="查看当前所有的数据库和索引大小"></a>查看当前所有的数据库和索引大小</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_schema, concat(<span class="hljs-keyword">truncate</span>(<span class="hljs-built_in">sum</span>(data_length)<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27; mb&#x27;</span>) <span class="hljs-keyword">as</span> data_size,concat(<span class="hljs-keyword">truncate</span>(<span class="hljs-built_in">sum</span>(index_length)<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;mb&#x27;</span>) <span class="hljs-keyword">as</span> index_size<span class="hljs-keyword">from</span> information_schema.tables<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> table_schema<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> data_length <span class="hljs-keyword">desc</span>;</code></pre></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="查看当前某个数据库和数据库下所有的表的大小"><a href="#查看当前某个数据库和数据库下所有的表的大小" class="headerlink" title="查看当前某个数据库和数据库下所有的表的大小"></a>查看当前某个数据库和数据库下所有的表的大小</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name, concat(<span class="hljs-keyword">truncate</span>(data_length<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27; mb&#x27;</span>) <span class="hljs-keyword">as</span> data_size,concat(<span class="hljs-keyword">truncate</span>(index_length<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>,<span class="hljs-number">2</span>),<span class="hljs-string">&#x27; mb&#x27;</span>) <span class="hljs-keyword">as</span> index_size<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;mysql&#x27;</span><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> table_name<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> data_length <span class="hljs-keyword">desc</span>;</code></pre></div><h3 id="查看mysql连接数"><a href="#查看mysql连接数" class="headerlink" title="查看mysql连接数"></a>查看mysql连接数</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">full</span> processlist;</code></pre></div><h3 id="按月统计"><a href="#按月统计" class="headerlink" title="按月统计"></a>按月统计</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(money),<span class="hljs-keyword">LEFT</span>(created_at, <span class="hljs-number">7</span>) <span class="hljs-keyword">from</span> sale  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">LEFT</span>(created_at, <span class="hljs-number">7</span>);</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iconv的小毛病</title>
    <link href="/2018/03/08/149/"/>
    <url>/2018/03/08/149/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-top: 0px !important;">最近做csv导出，本地测试ok，发布到线上总是导出失败，同事追根溯源，找出是一导出进程就被Linux干掉了，然后改代码，分片导出，线上还是失败。</p><p data-source-line="3" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">最后同事说是转码的问题，去掉iconv转码，发布，成功！</p><p data-source-line="5" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">然而，下载的csv用office打开就尴尬了，中文乱码，最后据说是此函数有bug，改为mb_convert_encoding 函数，成功！</p><p data-source-line="8" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">看看php手册说明：</p><h3 id="iconv" data-source-line="10" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal;"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB7b5613161bb2a7cd7f9c3db9c2bddc18#iconv" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;"></a>iconv</h3><p data-source-line="12" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">将字符串 str 从 in_charset 转换编码到 out_charset。</p><blockquote data-source-line="14" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )</p></blockquote><h5 id="参数" data-source-line="17" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal;"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB7b5613161bb2a7cd7f9c3db9c2bddc18#%E5%8F%82%E6%95%B0" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;"></a>参数</h5><p data-source-line="18" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">in_charset 输入的字符集。</p><p data-source-line="21" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">out_charset 输出的字符集。</p><blockquote data-source-line="24" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">如果你在 out_charset 后添加了字符串 //TRANSLIT，将启用转写（transliteration）功能。这个意思是，当一个字符不能被目标字符集所表示时，它可以通过一个或多个形似的字符来近似表达。 如果你添加了字符串 //IGNORE，不能以目标字符集表达的字符将被默默丢弃。 否则，会导致一个 E_NOTICE并返回 FALSE。</p></blockquote><p data-source-line="26" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">Caution</p><blockquote data-source-line="27" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">//TRANSLIT 运行细节高度依赖于系统的 iconv() 实现（参见 ICONV_IMPL）。 据悉，某些系统上的实现会直接忽略 //TRANSLIT，所以转换也有可能失败，out_charset 会是不合格的。</p></blockquote><p data-source-line="29" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">str 要转换的字符串。</p><h5 id="返回值" data-source-line="32" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal;"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB7b5613161bb2a7cd7f9c3db9c2bddc18#%E8%BF%94%E5%9B%9E%E5%80%BC" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;"></a>返回值</h5><p data-source-line="33" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">返回转换后的字符串， 或者在失败时返回 FALSE。</p><h5 id="更新日志" data-source-line="35" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal;"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB7b5613161bb2a7cd7f9c3db9c2bddc18#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;"></a>更新日志</h5><p data-source-line="37" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">5.4.0    这个版本起，字符非法时候会返回 FALSE，除非在输出字符里指定了 //IGNORE 。 在之前版本，它会返回一部分字符串。</p><div class="code-wrapper"><pre data-source-line="40" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">&lt;?php$text&nbsp;=&nbsp;&quot;This&nbsp;is&nbsp;the&nbsp;Euro&nbsp;symbol&nbsp;&#39;€&#39;.&quot;;echo&nbsp;&#39;Original&nbsp;:&nbsp;&#39;,&nbsp;$text,&nbsp;PHP_EOL;echo&nbsp;&#39;TRANSLIT&nbsp;:&nbsp;&#39;,&nbsp;iconv(&quot;UTF-8&quot;,&nbsp;&quot;ISO-8859-1//TRANSLIT&quot;,&nbsp;$text),&nbsp;PHP_EOL;echo&nbsp;&#39;IGNORE&nbsp;&nbsp;&nbsp;:&nbsp;&#39;,&nbsp;iconv(&quot;UTF-8&quot;,&nbsp;&quot;ISO-8859-1//IGNORE&quot;,&nbsp;$text),&nbsp;PHP_EOL;echo&nbsp;&#39;Plain&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&#39;,&nbsp;iconv(&quot;UTF-8&quot;,&nbsp;&quot;ISO-8859-1&quot;,&nbsp;$text),&nbsp;PHP_EOL;?&gt;</pre></div><div class="code-wrapper"><pre data-source-line="53" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46); margin-bottom: 0px !important;">Original&nbsp;:&nbsp;This&nbsp;is&nbsp;the&nbsp;Euro&nbsp;symbol&nbsp;&#39;€&#39;.TRANSLIT&nbsp;:&nbsp;This&nbsp;is&nbsp;the&nbsp;Euro&nbsp;symbol&nbsp;&#39;EUR&#39;.IGNORE&nbsp;&nbsp;&nbsp;:&nbsp;This&nbsp;is&nbsp;the&nbsp;Euro&nbsp;symbol&nbsp;&#39;&#39;.Plain&nbsp;&nbsp;&nbsp;&nbsp;:Notice:&nbsp;iconv():&nbsp;Detected&nbsp;an&nbsp;illegal&nbsp;character&nbsp;in&nbsp;input&nbsp;string&nbsp;in&nbsp;.\iconv-exa</pre></div><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下各文件夹的结构说明及用途介绍</title>
    <link href="/2018/02/27/147/"/>
    <url>/2018/02/27/147/</url>
    
    <content type="html"><![CDATA[<p><strong>linux下各文件夹的结构说明及用途介绍：</strong></p><p>/bin：二进制可执行命令。</p><p>/dev：设备特殊文件。</p><p>/etc：系统管理和配置文件。</p><p>/etc/rc.d：启动的配 置文件和脚本。</p><p>/home：用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示。</p><p>/lib：标准程序设计库，又 叫动态链接共享库，作用类似windows里的.dll文件。</p><p>/sbin：系统管理命令，这 里存放的是系统管理员使用的管理程序。</p><p>/tmp：公用的临时文件存储 点。</p><p>/root：系统管理员的主目 录。</p><p>/mnt：系统提供这个目录是 让用户临时挂载其他的文件系统。</p><p>/lost+found：这个 目录平时是空的，系统非正常关机而留下“无家可归”的文件就在这里。</p><p>/proc：虚拟的目录，是系 统内存的映射。可直接访问这个目录来获取系统信息。</p><p>/var：某些大文件的溢出 区，比方说各种服务的日志文件。</p><p>/usr：最庞大的目录，要用 到的应用程序和文件几乎都在这个目录。其中包含：</p><p>/usr/x11r6：存放x window的目录。</p><p>/usr/bin：众多的应用程序。</p><p>/usr/sbin：超级用户的一些管理程序。</p><p>/usr/doc：linux文档。</p><p>/usr/include：linux下开发和编译应用程序所需要的头文件。</p><p>/usr/lib：常用的动态链接库和软件包的配置文件。</p><p>/usr/man：帮助文档。</p><p>/usr/src：源代码，linux内核的源代码就放在/usr/src/linux 里。</p><p>/usr/local/bin：本地增加的命令。</p><p>/usr/local/lib：本地增加的库根文件系统。</p><p>通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要经常改动，而且包括严格的文件和一个小的 不经常改变的文件系统不容易损坏。除了可能的一个叫/vmlinuz标准的系统引导映像之外，根目录一般不含任何文 件。所有其他文件在根文件系统的子目录中。</p><p><strong>1. /bin目录</strong></p><p>/bin目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些命 令都是二进制文件的可执行程序(bin是binary的简称)，多是系统中重要的系统文件。</p><p><strong>2. /sbin目录</strong></p><p>/sbin目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使 用。</p><p><strong>3. /etc目录</strong></p><p>/etc目录存放着各种系统配置文件，其中包括了用户信息文件/etc/passwd， 系统初始化文件/etc/rc等。linux正是靠这些文件才得以正常地运行。</p><p><strong>4. /root目录</strong></p><p>/root目录是超级用户的目录。</p><p><strong>5. /lib目录</strong></p><p>/lib目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文件。 这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副本，故可以使得可执行文件变得更小，节省空间。</p><p><strong>6. /lib/modules目录</strong></p><p>/lib/modules目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重 新引导系统所需的模块(例如网络和文件系统驱动)。</p><p><strong>7. /dev目录</strong></p><p>/dev目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用户可 以通过访问/dev/mouse来访问鼠标的输入，就像访问其他文件一样。</p><p><strong>8. /tmp目录</strong></p><p>/tmp目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用/var/tmp来 代替/tmp，因为前者可能拥有一个更大的磁盘空间。</p><p><strong>9. /boot目录</strong></p><p>/boot目录存放引导加载器(bootstrap loader)使用的文件，如lilo，核心映像也经常放在这里，而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的 文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在ide硬盘的前1024柱面内。</p><p><strong>10. /mnt目录</strong></p><p>/mnt目录是系统管理员临时安装(mount)文件系统的安装点。程序并不自动支持安装到/mnt 。/mnt下面可以分为许多子目录，例如/mnt/dosa可能是使用 msdos文件系统的软驱，而/mnt/exta可能是使用ext2文件系统的软驱，/mnt/cdrom光 驱等等。</p><p><strong>11. /proc, /usr, /var, /home目录</strong></p><p>其他文件系统的安装点。</p><p>目录树可以分为小的部分，每个部分可以在自己的磁盘或分区上。主要部分是根、/usr 、/var 和 /home 文件系统。每个部分有不同的目的。</p><p>每台机器都有根文件系统，它包含系统引导和使其他文件系统得以mount所必要的文件，根文件系统应该有单用户状态所必须的足够的内容。还应该包括修复损坏 系统、恢复备份等的工具。</p><p>/usr 文件系统包含所有命令、库、man页和其他一般操作中所需的不改变的文件。 </p><p>/usr 不应该有 一般使用中要修改的文件。这样允许此文件系统中的文件通过网络共享，这样可以更有效，因为这样节省了磁盘空间(/usr 很容易是数百兆)，且易于管理 (当升级应用时，只有主/usr 需要改变，而无须改变每台机器) 即使此文件系统在本地盘上，也可以只读mount，以减少系统崩溃时文件系统的损 坏。</p><p>/var 文件系统包含会改变的文件，比如spool目录(mail、news、打印机等用的)， log文件、 formatted manual pages和暂存文件。传统上/var 的所有东西曾在 /usr 下的某个地方，但这样/usr 就不可能只读安装 了。</p><p>/home 文件系统包含用户家目录，即系统上的所有实际数据。一个大的/home 可能要分为若干文件系统，需要在 /home 下加一级名字，如/home/students 、/home/staff 等。</p><p>下面详细介绍：</p><p><strong>/etc文件系统</strong></p><p>/etc目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个程序， 并阅读该程序的man页。许多网络配置文件也在/etc中。</p><ol><li><p>/etc/rc或/etc/rc.d或/etc/rc?.d：启动、或改变运行级时运 行的脚本或脚本的目录。</p></li><li><p>/etc/passwd：用户数据库，其中的域给出了用户名、真实姓名、用户起始目 录、加密口令和用户的其他信息。</p></li><li><p>/etc/fdprm：软盘参数表，用以说明不同的软盘格式。可用setfdprm进 行设置。更多的信息见setfdprm的帮助页。</p></li><li><p>/etc/fstab：指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的swap区的信息。</p></li><li><p>/etc/group：类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。</p></li><li><p>/etc/inittab：init 的配置文件。</p></li><li><p>/etc/issue：包括用户在登录提示符前的输出信息。通常包括系统的一段短说明 或欢迎信息。具体内容由系统管理员确定。</p></li><li><p>/etc/magic：“file”的配置文件。包含不同文件格式的说 明，“file”基于它猜测文件类型。</p></li><li><p>/etc/motd：motd是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。</p></li></ol><p>常用于通告信息，如计划关机时间的警告等。</p><ol start="10"><li><p>/etc/mtab：当前安装的文件系统列表。由脚本(scritp)初始化，并由 mount命令自动更新。当需要一个当前安装的文件系统的列表时使用(例如df命令)。</p></li><li><p>/etc/shadow：在安装了影子(shadow)口令软件的系统上的影子口令 文件。影子口令文件将/etc/passwd文件中的加密口令移动到/etc/shadow中，而后者只对超级用户(root)可读。这使破译口令更困 难，以此增加系统的安全性。</p></li><li><p>/etc/login.defs：login命令的配置文件。</p></li><li><p>/etc/printcap：类似/etc/termcap ，但针对打印机。语法不同。</p></li><li><p>/etc/profile 、/etc/csh.login、/etc/csh.cshrc：登 录或启动时bourne或cshells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。</p></li><li><p>/etc/securetty：确认安全终端，即哪个终端允许超级用户(root) 登录。一般只列出虚拟控制台，这样就不可能(至少很困难)通过调制解调器(modem)或网络闯入系统并得到超级用户特权。</p></li><li><p>/etc/shells：列出可以使用的shell。chsh命令允许用户在本文件 指定范围内改变登录的shell。提供一台机器ftp服务的服务进程ftpd检查用户shell是否列在/etc/shells文件 中，如果不是，将不允许该用户登录。</p></li><li><p>/etc/termcap：终端性能数据库。说明不同的终端用什么“转义序列”控 制。写程序时不直接输出转义序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap中查找要做的工作的 正确序列。这样，多数的程序可以在多数终端上运行。</p></li></ol><p><strong>/dev文件系统</strong></p><p>/dev目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。设备文件在安装时由系 统产生，以后可以用/dev/makedev描述。/dev/makedev.local 是系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准makedev 的一部分)。下面简要介绍/dev下 一些常用文件。</p><ol><li><p>/dev/console：系统控制台，也就是直接和系统连接的监视器。</p></li><li><p>/dev/hd：ide硬盘驱动程序接口。如：/dev/hda指的是第一个硬 盘，had1则是指/dev/hda的第一个分区。如系统中有其他的硬盘，则依次为/dev /hdb、/dev/hdc、. . . . . .；如有多个分区则依次为hda1、hda2 . . . . . .</p></li><li><p>/dev/sd：scsi磁盘驱动程序接口。如系统有scsi硬盘，就不会访问/dev/had， 而会访问/dev/sda。</p></li><li><p>/dev/fd：软驱设备驱动程序。如：/dev/fd0指 系统的第一个软盘，也就是通常所说的a盘，/dev/fd1指第二个软盘，. . . . . .而/dev/fd1 h1440则表示访问驱动器1中的4.5高密盘。</p></li><li><p>/dev/st：scsi磁带驱动器驱动程序。</p></li><li><p>/dev/tty：提供虚拟控制台支持。如：/dev/tty1指 的是系统的第一个虚拟控制台，/dev/tty2则是系统的第二个虚拟控制台。</p></li><li><p>/dev/pty：提供远程登陆伪终端支持。在进行telnet登录时就要用到/dev/pty设 备。</p></li><li><p>/dev/ttys：计算机串行接口，对于dos来说就是“com1”口。</p></li><li><p>/dev/cua：计算机串行接口，与调制解调器一起使用的设备。</p></li><li><p>/dev/null：“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕 上的输出信息隐藏起来时，只要将输出信息输入到/dev/null中即可。</p></li></ol><p><strong>/usr文件系统</strong></p><p>/usr是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr里 的所有文件一般来自linux发行版；本地安装的程序和其他东西在/usr/local下，因为这样可以在升级新版系 统或新发行版时无须重新安装全部程序。/usr目录下的许多内容是可选的，但这些功能会使用户使用系统更加有效。/usr可容纳许多大型的软件包和它们的 配置文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。</p><ol><li><p>/usr/x11r6：包含x window系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，x的文件没有集成到系统中。x window系统是一个功能强大的图形环境，提供了大量的图形工具程序。用户如果对microsoft windows比较熟悉的话，就不会对x window系统感到束手无策了。</p></li><li><p>/usr/x386：类似/usr/x11r6 ，但是是专门给x 11 release 5的。</p></li><li><p>/usr/bin：集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin或/usr/local/bin中。</p></li><li><p>/usr/sbin：包括了根文件系统不必要的系统管理命令，例如多数服务程序。</p></li><li><p>/usr/man、/usr/info、/usr/doc：这些目录包含所有手册页、 gnu信息文档和各种其他文档文件。每个联机手册的“节”都有两个子目录。例如：/usr/man/man1中包含联机手册第一节的源码(没有格式化的原 始文件)，/usr/man/cat1包含第一节已格式化的内容。联机手册分为以下九节：内部命令、系统调用、库函数、设备、文件格式、游戏、宏软件包、 系统管理和核心程序。</p></li><li><p>/usr/include：包含了c语言的头文件，这些文件多以.h结尾，用来描述c 语言程序中用到的数据结构、子过程和常量。为了保持一致性，这实际上应该放在/usr/lib下，但习惯上一直沿用了这 个名字。</p></li><li><p>/usr/lib：包含了程序或子系统的不变的数据文件，包括一些site – wide配置文件。名字lib来源于库(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也有许多程序把配置文件存入其中。</p></li><li><p>/usr/local：本地安装的软件和其他文件放在这里。这与/usr很相似。用户 可能会在这发现一些比较大的软件包，如tex、emacs等。</p></li></ol><p><strong>/var文件系统</strong></p><p>/var包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化或扩充 的。原来/var目录中有些内容是在/usr中的，但为了保持/usr目录的相对稳定，就把那些需要经常改变的目录放到/var中了。每个系统是特定的， 即不通过网络与其他计算机共享。下面列出一些重要的目录(一些不太重要的目录省略了)。</p><ol><li><p>/var/catman：包括了格式化过的帮助(man)页。帮助页的源文件一般存在 /usr/man/catman中；有些man页可能有预格式化的版本，存在/usr/man/cat中。而其他的man页在第一次看时都需要格式化，格 式化完的版本存在/var/man中，这样其他人再看相同的页时就无须等待格式化了。(/var/catman经常被 清除，就像清除临时目录一样。)</p></li><li><p>/var/lib：存放系统正常运行时要改变的文件。</p></li><li><p>/var/local：存放/usr/local中 安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，即使本地安装的程序也会使用其他/var目录，例如/var/lock 。</p></li><li><p>/var/lock：锁定文件。许多程序遵循在/var/lock中 产生一个锁定文件的约定，以用来支持他们正在使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文件。</p></li><li><p>/var/log：各种程序的日志(log)文件，尤其是login (/var/log/wtmplog纪 录所有到系统的登录和注销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不确定地增长，应该定期清除。</p></li><li><p>/var/run：保存在下一次系统引导前有效的关于系统的信息文件。例如，/var/run/utmp包 含当前登录的用户的信息。</p></li><li><p>/var/spool：放置“假脱机(spool)”程序的目录，如mail、 news、打印队列和其他队列工作的目录。每个不同的spool在/var/spool下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。</p></li></ol><p>\8. /var/tmp：比/tmp允许更大的或需要存在较长时间的临时文件。注意系统管理 员可能不允许/var/tmp有很旧的文件。</p><p><strong>/proc文件系统</strong></p><p>/proc文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一个非 常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提供关于系统的信息。下面说明一些最重要的文件和目录(/proc文件系统 在proc man页中有更详细的说明)。</p><ol><li><p>/proc/x：关于进程x的信息目录，这x是这一进程的标识号。每个进程在 /proc下有一个名为自己进程号的目录。</p></li><li><p>/proc/cpuinfo：存放处理器(cpu)的信息，如cpu的类型、制造商、 型号和性能等。</p></li><li><p>/proc/devices：当前运行的核心配置的设备驱动的列表。</p></li><li><p>/proc/dma：显示当前使用的dma通道。</p></li><li><p>/proc/filesystems：核心配置的文件系统信息。</p></li><li><p>/proc/interrupts：显示被占用的中断信息和占用者的信息，以及被占用 的数量。</p></li><li><p>/proc/ioports：当前使用的i/o端口。</p></li><li><p>/proc/kcore：系统物理内存映像。与物理内存大小完全一样，然而实际上没有 占用这么多内存；它仅仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc下没有任何东西占用任何磁盘空间。)</p></li><li><p>/proc/kmsg：核心输出的消息。也会被送到syslog。</p></li><li><p>/proc/ksyms：核心符号表。</p></li><li><p>/proc/loadavg：系统“平均负载”；3个没有意义的指示器指出系统当前 的工作量。</p></li><li><p>/proc/meminfo：各种存储器使用信息，包括物理内存和交换分区 (swap)。</p></li><li><p>/proc/modules：存放当前加载了哪些核心模块信息。</p></li><li><p>/proc/net：网络协议状态信息。</p></li><li><p>/proc/self：存放到查看/proc的 程序的进程目录的符号连接。当2个进程查看/proc时，这将会是不同的连接。这主要便于程序得到它自己的进程目录。</p></li><li><p>/proc/stat：系统的不同状态，例如，系统启动后页面发生错误的次数。</p></li><li><p>/proc/uptime：系统启动的时间长度。</p></li><li><p>/proc/version：核心版本。</p></li></ol><p>/usr/local下一般是你安装软件的目录，这个目录就相当于在windows下的programefiles这个目录 </p><p>/opt这个目录是一些大型软件的安装目录，或者是一些服务程序的安装目录</p><p>举个例子：刚才装的测试版firefox，就可以装到/opt/firefox_beta目录下，/opt/firefox_beta目录下面就包含了运 行firefox所需要的所有文件、库、数据等等。要删除firefox的时候，你只需删除/opt/firefox_beta目录即可，非常简单。</p><p><strong>/usr/local</strong></p><p>这里主要存放那些手动安装的软件，即 不是通过“新立得”或apt-get安装的软件 。 它和/usr目录具有相类似的目录结构 。让软件包管理器来管理/usr目录，而把自定义的脚本(scripts)放到/usr/local目录下面，我想这应该是个不错的主意。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xdebug断点调试安装</title>
    <link href="/2018/01/22/146/"/>
    <url>/2018/01/22/146/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;">安装准备：</p><ol data-source-line="2" style="box-sizing: border-box; padding-left: 2em; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>PHP环境（我使用的是nginx1.12+php7）</p></li><li><p>PHPStorm</p></li></ol><h4 id="1-下载dll扩展放到php目录下ext中" data-source-line="5" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBf33f3927ffaaefed894b748ab22d6e15#1-%E4%B8%8B%E8%BD%BDdll%E6%89%A9%E5%B1%95%E6%94%BE%E5%88%B0php%E7%9B%AE%E5%BD%95%E4%B8%8Bext%E4%B8%AD" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>1. 下载dll扩展放到PHP目录下ext中。</h4><h4 id="2-修改phpini" data-source-line="7" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBf33f3927ffaaefed894b748ab22d6e15#2-%E4%BF%AE%E6%94%B9phpini" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>2. 修改php.ini</h4><div class="code-wrapper"><pre data-source-line="8" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">;注意是zend_extensionzend_extension=php_xdebug.dll;远程地址,指的是连接本php所在服务器的客户端ipxdebug.remote_host=127.0.0.1;远程端口，不要冲突xdebug.remote_port=9999xdebug.remote_handler=dbgpxdebug.collect_vars&nbsp;=&nbsp;Onxdebug.collect_return&nbsp;=&nbsp;Onxdebug.collect_params&nbsp;=&nbsp;On;编辑器名称xdebug.idekey=phpstormxdebug.profiler_output_dir=&quot;D:\wnmp\php-7.0.26    mp�bug&quot;&nbsp;;设定函数调用监测信息的输出文件的路径xdebug.trace_output_dir=&quot;D:\wnmp\php-7.0.26    mp�bug&quot;xdebug.remote_enable&nbsp;=1xdebug.remote_mode&nbsp;=&nbsp;reqxdebug.profiler_enable&nbsp;=&nbsp;offxdebug.profiler_enable_trigger&nbsp;=&nbsp;off;开启远程调试自动xdebug.remote_autostart&nbsp;=&nbsp;On</pre></div><p data-source-line="31" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">配置成功，在phpinfo页面会出现xdebug版本和idekey。</p><h4 id="3-phpstorm配置" data-source-line="34" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBf33f3927ffaaefed894b748ab22d6e15#3-phpstorm%E9%85%8D%E7%BD%AE" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>3. PHPStorm配置</h4><p data-source-line="36" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">settings:</p><div class="code-wrapper"><pre data-source-line="37" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">&gt;&nbsp;Languages&nbsp;&amp;&nbsp;Frameworks&nbsp;→&nbsp;PHP&nbsp;配置对应的interpreter，其实就是设置下PHP&nbsp;executable路径如：D:\wnmp\php-7.0.26\php.exe<p>&gt;&nbsp;Languages&nbsp;&amp;&nbsp;Frameworks&nbsp;→&nbsp;PHP&nbsp;→&nbsp;Debug&nbsp;<br>修改端口</p><p>&gt;&nbsp;Languages&nbsp;&amp;&nbsp;Frameworks&nbsp;→&nbsp;PHP&nbsp;→&nbsp;Debug&nbsp;→&nbsp;DBGp&nbsp;Proxy<br>就是上面php设置的idekey，host，port。</p><p>&gt;&nbsp;Languages&nbsp;&amp;&nbsp;Frameworks&nbsp;→&nbsp;PHP&nbsp;→&nbsp;Servers<br>添加选择Xdebug</pre></div><p data-source-line="55" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">完成后</p><div class="code-wrapper"><pre data-source-line="57" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; word-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">Run&nbsp;→&nbsp;Edit&nbsp;Configuration<br>添加一个PHP&nbsp;web&nbsp;application配置，选择刚才配置的Servers</pre></div><p data-source-line="62" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">这样就完成了！</p><p data-source-line="64" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255); margin-bottom: 0px !important;">run，debug都能直接用起来了。</p><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>debug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis的windows尝试</title>
    <link href="/2018/01/16/145/"/>
    <url>/2018/01/16/145/</url>
    
    <content type="html"><![CDATA[ <p style="box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;"><span style="font-size: 16px;"></span></p><h3 id="下载安装" data-source-line="1" style="white-space: normal; box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; background-color: rgb(255, 255, 255); margin-top: 0px !important;"><span style="color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; background-color: rgb(255, 255, 255);">Redis???</span></h3><p style="box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;"><span style="font-size: 16px;">Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</span></p><h3 id="下载安装" data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;"><br/></h3><h3 id="下载安装" data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;">下载安装</h3><p data-source-line="3" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">github上下载合适版本，建议msi文件下载。</p><blockquote data-source-line="4" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><a href="https://github.com/MicrosoftArchive/redis/releases" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;">https://github.com/MicrosoftArchive/redis/releases</a></p></blockquote><p data-source-line="6" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">一步步安装即可。</p><h3 id="启动redis" data-source-line="8" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB0db1cbc868380c0b161dc0b2244f3af5#%E5%90%AF%E5%8A%A8redis" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>启动redis</h3><p data-source-line="10" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">到达redis安装目录，执行启动命令：</p><blockquote data-source-line="11" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">redis-server --service-start</p></blockquote><p data-source-line="13" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">如果启动失败，报1060，执行以下操作：</p><blockquote data-source-line="14" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">redis-server --service-install redis.windows.conf</p></blockquote><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">成功后再次执行启动命令即可。</p><p data-source-line="18" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">常用命令</p><div class="code-wrapper"><pre data-source-line="19" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">启动服务：redis-server&nbsp;--service-start停止服务：redis-server&nbsp;--service-stop</pre></div><h3 id="安装redis-desktop-manager" data-source-line="25" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB0db1cbc868380c0b161dc0b2244f3af5#%E5%AE%89%E8%A3%85redis-desktop-manager" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>安装redis Desktop manager</h3><p data-source-line="27" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">链接：<a href="https://pan.baidu.com/s/1dL4oHK" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;">https://pan.baidu.com/s/1dL4oHK</a>&nbsp;密码：3v6o</p><p>安装连接本地redis,可以查看redis数据。</p><h3 id="使用redis" data-source-line="32" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEB0db1cbc868380c0b161dc0b2244f3af5#%E4%BD%BF%E7%94%A8redis" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>使用redis</h3><div class="code-wrapper"><pre data-source-line="34" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46); margin-bottom: 0px !important;">&lt;?php$redis&nbsp;=&nbsp;new&nbsp;Redis();$ret&nbsp;=&nbsp;$redis-&gt;connect(&#39;127.0.0.1&#39;,&nbsp;6379);if(!$ret){&nbsp;&nbsp;&nbsp;&nbsp;die(&#39;connect&nbsp;error&#39;);}echo&nbsp;&quot;Connection&nbsp;to&nbsp;server&nbsp;sucessfully!&lt;br&gt;&quot;;//存储数据到列表中$a&nbsp;=&nbsp;$redis-&gt;set(&#39;str&#39;,&#39;wow&#39;);$b&nbsp;=&nbsp;$redis-&gt;get(&#39;str&#39;);$c&nbsp;=&nbsp;$redis-&gt;get(&#39;strwww&#39;);$d&nbsp;=&nbsp;$redis-&gt;delete(&#39;str&#39;);var_dump($a);echo(&quot;&lt;br&gt;&quot;);var_dump($b);echo(&quot;&lt;br&gt;&quot;);var_dump($c);echo(&quot;&lt;br&gt;&quot;);var_dump($d);<hr><p>Connection&nbsp;to&nbsp;server&nbsp;sucessfully!<br>bool(true)&nbsp;<br>string(3)&nbsp;&quot;wow&quot;&nbsp;<br>bool(false)&nbsp;<br>int(1)</pre></div><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神奇的软链接</title>
    <link href="/2018/01/15/144/"/>
    <url>/2018/01/15/144/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是链接？"><a href="#什么是链接？" class="headerlink" title="什么是链接？"></a>什么是链接？</h2><p>链接简单说实际上是一种文件共享的方式，是 POSIX 中的概念，主流文件系统都支持链接文件。</p><h2 id="链接是用来干什么的？"><a href="#链接是用来干什么的？" class="headerlink" title="链接是用来干什么的？"></a>链接是用来干什么的？</h2><p>你可以将链接简单地理解为 Windows 中常见的快捷方式（或是 OS X 中的替身），Linux 中常用它来解决一些库版本的问题，通常也会将一些目录层次较深的文件链接到一个更易访问的目录中。在这些用途上，我们通常会使用到软链接（也称符号链接）。</p><h2 id="软链接和硬链接的区别"><a href="#软链接和硬链接的区别" class="headerlink" title="软链接和硬链接的区别"></a>软链接和硬链接的区别</h2><blockquote><p>硬链接： 与普通文件没什么不同，inode 都指向同一个文件在硬盘中的区块</p></blockquote><blockquote><p>软链接： 保存了其代表的文件的绝对路径，是另外一种文件，在硬盘上有独立的区块，访问时替换自身路径。</p></blockquote><p>具体区别可看这篇文章：<br>``<br><a href="https://www.jianshu.com/p/dde6a01c4094">https://www.jianshu.com/p/dde6a01c4094</a></p><div class="code-wrapper"><pre><code class="hljs clean">## Linux创建命令实例：</code></pre></div><p>ln -s /home/test /testlink</p><div class="code-wrapper"><pre><code class="hljs css">&gt; ln -s <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">b</span> 中的 <span class="hljs-selector-tag">a</span> 就是源文件，<span class="hljs-selector-tag">b</span>是链接文件名,其作用是当进入<span class="hljs-selector-tag">b</span>目录，实际上是链接进入了<span class="hljs-selector-tag">a</span>目录如上面的示例，当我们执行命令 ```cd /testlink/```的时候 实际上是进入了 ```/home/test/```值得注意的是执行命令的时候,应该是<span class="hljs-selector-tag">a</span>目录已经建立，目录<span class="hljs-selector-tag">b</span>没有建立。我最开始操作的是也把<span class="hljs-selector-tag">b</span>目录给建立了，结果就不对了删除软链接：</code></pre></div><p>rm -rf b 注意不是rm -rf b/</p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div><p>ln a b 是建立硬链接</p><div class="code-wrapper"><pre><code class="hljs clean">## window创建命令</code></pre></div><p>MKLINK [[/D] | [/H] | [/J]] Link Target<br>        /D      创建目录符号链接。默认为文件<br>                符号链接。<br>        /H      创建硬链接，而不是符号链接。<br>        /J      创建目录联接。<br>        Link    指定新的符号链接名称。<br>        Target  指定新链接引用的路径<br>                (相对或绝对)。</p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows7搭建php7+nginx+mysql环境</title>
    <link href="/2017/12/22/143/"/>
    <url>/2017/12/22/143/</url>
    
    <content type="html"><![CDATA[ <h3 id="1-下载nginxphp7mysql并放置到你需要的文件夹" data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255); margin-top: 0px !important;">1. 下载nginx，php7，mysql，并放置到你需要的文件夹</h3><h3 id="2-nginx" data-source-line="3" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBccf6632b6fb08986540a0c51bb431ceb#2-nginx" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>2. nginx</h3><p data-source-line="5" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">进入nginx目录，命令行</p><blockquote data-source-line="7" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">start nginx</p></blockquote><p data-source-line="9" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">浏览器进入localhost，会看到welcome to nginx！</p><h3 id="3-配置php" data-source-line="11" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.5em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBccf6632b6fb08986540a0c51bb431ceb#3-%E9%85%8D%E7%BD%AEphp" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>3. 配置php</h3><h4 id="phpini" data-source-line="13" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBccf6632b6fb08986540a0c51bb431ceb#phpini" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>php.ini</h4><blockquote data-source-line="15" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">php.ini-development复制为php.ini</p></blockquote><p data-source-line="17" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">修改</p><div class="code-wrapper"><pre data-source-line="18" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">;这里根据自己的实际情况而定extension_dir&nbsp;=&nbsp;&quot;D:/wnmp/php-7.0.26/ext&quot;;加入扩展：选择需要运行哪些扩展，只需将extension前面的注释去掉，例如：extension=php_mbstring.dllextension=php_exif.dll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;Must&nbsp;be&nbsp;after&nbsp;mbstring&nbsp;as&nbsp;it&nbsp;depends&nbsp;on&nbsp;itextension=php_mysqli.dll</pre></div><h4 id="cgi-设置" data-source-line="33" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBccf6632b6fb08986540a0c51bb431ceb#cgi-%E8%AE%BE%E7%BD%AE" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>CGI 设置</h4><div class="code-wrapper"><pre data-source-line="34" style="box-sizing: border-box; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 12px; margin-top: 0px; margin-bottom: 16px; font-variant-numeric: normal; font-variant-east-asian: normal; font-stretch: normal; line-height: 1.45; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-radius: 3px; color: rgb(36, 41, 46);">enable_dl&nbsp;=&nbsp;Oncgi.force_redirect&nbsp;=&nbsp;0cgi.fix_pathinfo&nbsp;=&nbsp;1fastcgi.impersonate&nbsp;=&nbsp;1cgi.rfc2616_headers&nbsp;=&nbsp;1</pre></div><h4 id="修改nginx配置" data-source-line="43" style="box-sizing: border-box; margin-top: 24px; margin-bottom: 16px; font-size: 1.25em; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"><a class="markdownIt-Anchor" href="https://note.youdao.com/md/?defaultMode=view&fileId=WEBccf6632b6fb08986540a0c51bb431ceb#%E4%BF%AE%E6%94%B9nginx%E9%85%8D%E7%BD%AE" style="box-sizing: border-box; background-color: transparent; color: rgb(3, 102, 214); text-decoration-line: none;"></a>修改nginx配置</h4><p data-source-line="45" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);">打开D:\wnmpginx-1.12.2]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>self和static</title>
    <link href="/2017/12/07/142/"/>
    <url>/2017/12/07/142/</url>
    
    <content type="html"><![CDATA[<blockquote><p>PHP官方也说过，大概是说self调用的就是本身代码片段这个类，而static调用的是从堆内存中提取出来，访问的是当前实例化的那个类，那么 static 代表的就是那个类。</p></blockquote><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span><span class="hljs-class"></span>&#123;      <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;This is class A&quot;</span>;      <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStr</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$str</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;      <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;This is class B&quot;</span>;&#125;B::getStr();<span class="hljs-comment">// 输出This is class A</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span><span class="hljs-class"></span>&#123;      <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;This is class A&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStr</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;              <span class="hljs-keyword">echo</span> <span class="hljs-built_in">static</span>::<span class="hljs-variable">$str</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;      <span class="hljs-keyword">protected</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;This is class B&quot;</span>;&#125;B::getStr();<span class="hljs-comment">// 输出This is class B</span></code></pre></div><h2 id="self-就是这个类，是代码段里面的这个类。"><a href="#self-就是这个类，是代码段里面的这个类。" class="headerlink" title="self - 就是这个类，是代码段里面的这个类。"></a>self - 就是这个类，是代码段里面的这个类。</h2><p>static - PHP 5.3新特性。当前这个类，有点像$this的意思，从堆内存中提取出来，访问的是当前实例化的那个类，那么 static 代表的就是那个类。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><span class="hljs-class"></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSelf</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();    &#125;            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStatic</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>();    &#125;&#125;<span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> A();<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getSelf());<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getStatic());<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSelf2</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();    &#125;            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStatic2</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>();    &#125;&#125;<span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> B();<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getSelf());<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getStatic());<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getSelf2());<span class="hljs-keyword">print</span> get_class(<span class="hljs-variable">$f</span>-&gt;getStatic2());<span class="hljs-comment">// 输出AAABBB</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2017/11/17/141/"/>
    <url>/2017/11/17/141/</url>
    
    <content type="html"><![CDATA[<p>之前没用过git，还在持续踩坑中，后续继续更新。。。。。。</p><hr><h4 id="列出tag"><a href="#列出tag" class="headerlink" title="列出tag"></a>列出tag</h4><blockquote><p>git tag # 在控制台打印出当前仓库的所有tag&gt; git tag -l ‘v0.1.*’ # 搜索符合模式的Tag 打tag</p></blockquote><p>git tag分为两种类型：轻量tag和附注tag。轻量tag是指向提交对象的引用，附注Tag则是仓库中的一个独立对象。建议使用附注Tag。</p><h4 id="创建轻量Tag"><a href="#创建轻量Tag" class="headerlink" title="创建轻量Tag"></a>创建轻量Tag</h4><blockquote><p>git tag v0.1.2-light</p></blockquote><h4 id="创建附注Tag"><a href="#创建附注Tag" class="headerlink" title="创建附注Tag"></a>创建附注Tag</h4><blockquote><p>git tag -a v0.1.2 -m “0.1.2版本”</p></blockquote><p>创建轻量Tag不需要传递参数，直接指定Tag名称即可。</p><p>创建附注Tag时，参数a即annotated的缩写，指定Tag类型，后附Tag名。参数m指定Tag说明，说明信息会保存在Tag对象中。</p><h4 id="切换到Tag"><a href="#切换到Tag" class="headerlink" title="切换到Tag"></a>切换到Tag</h4><p>与切换分支命令相同，用</p><blockquote><p>git checkout [tagname]</p></blockquote><h4 id="查看Tag信息"><a href="#查看Tag信息" class="headerlink" title="查看Tag信息"></a>查看Tag信息</h4><p>用git show命令可以查看Tag的版本信息：</p><blockquote><p>git show v0.1.2</p></blockquote><h4 id="删除Tag"><a href="#删除Tag" class="headerlink" title="删除Tag"></a>删除Tag</h4><p>误打或需要修改Tag时，需要先将Tag删除，再打新Tag。</p><blockquote><p>git tag -d v0.1.2 # 删除Tag</p></blockquote><p>参数d即delete的缩写，意为删除其后指定的Tag。</p><p>给指定的commit打Tag 打Tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取）。</p><h4 id="补打Tag"><a href="#补打Tag" class="headerlink" title="补打Tag"></a>补打Tag</h4><blockquote><p>git tag -a v0.1.1 9fbc3d0</p></blockquote><p>Tag推送到服务器 通常的git push不会将Tag对象提交到git服务器，我们需要进行显式的操作：</p><blockquote><p>git push origin v0.1.2 # 将v0.1.2 Tag提交到git服务器&gt; git push origin –-tags # 将本地所有Tag一次性提交到git服务器</p></blockquote><p>注意：如果想看之前某个Tag状态下的文件，可以这样操作</p><ol><li><p> git tag 查看当前分支下的Tag</p></li><li><p> git checkout v0.21 此时会指向打v0.21 Tag时的代码状态，（但现在处于一个空的分支上）</p></li></ol><h4 id="删除远程分支和tag"><a href="#删除远程分支和tag" class="headerlink" title="删除远程分支和tag"></a>删除远程分支和tag</h4><p>在Git v1.7.0 之后，可以使用这种语法删除远程分支：</p><blockquote><p>git push origin –delete <branchName></p></blockquote><p>删除tag这么用：</p><blockquote><p>git push origin –delete tag <tagname></p></blockquote><p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p><blockquote><p>git push origin :<branchName></p></blockquote><p>这是删除tag的方法，推送一个空tag到远程tag：</p><blockquote><p>git tag -d <tagname>&gt; git push origin :refs/tags/<tagname></p></blockquote><h4 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h4><p>删除远程分支：</p><blockquote><p>git push –delete origin devel</p></blockquote><p>重命名本地分支：</p><blockquote><p>git branch -m devel develop</p></blockquote><p>推送本地分支：</p><blockquote><p>git push origin develop</p></blockquote><h4 id="把本地tag推送到远程"><a href="#把本地tag推送到远程" class="headerlink" title="把本地tag推送到远程"></a>把本地tag推送到远程</h4><blockquote><p>git push –tags # 推送所有tag&gt; git push origin :tag # 推送tag</p></blockquote><p>—— 2017/12/04</p><hr><ol><li> 工作区（Working Directory）</li></ol><p>就是你在电脑里能看到的目录，比如我的git文件夹就是一个工作区。</p><ol><li> 版本库（Repository）</li></ol><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p><ol><li> 暂存区</li></ol><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><blockquote><p>git add把文件添加进去，实际上就是把文件修改添加到暂存区； git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p></blockquote><table data-source-line="20"><thead style="box-sizing: border-box;"><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);" class="firstRow"><th style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">命令</th><th style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">说明</th></tr></thead><tbody style="box-sizing: border-box;"><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git clone</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">克隆</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git branch (分支名)</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">创建分支 -D删除分支</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git checkout (分支名)</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">切换分支 -b创建并切换</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git checkout (文件名)</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">撤销此文件修改</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git add</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">将该文件添加到缓存</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git status</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">查看在你上次提交之后是否有修改</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git commit</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">将缓存区内容添加到仓库中</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git diff</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">来查看执行 git status 的结果的详细信息</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git reset HEAD</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">命令用于取消已缓存的内容</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git rm 文件</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">删除文件-f强制删除</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git mv</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">移动文件</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git merge</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">合并分支</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git fetch</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">从远程获取最新版本到本地</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git push <远程主机名> <本地分支名>:<远程分支名></td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">将本地分支的更新，推送到远程主机</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git push origin --delete test</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">删除远程分支test</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git pull <远程主机名> <远程分支名>:<本地分支名></td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">将远程存储库中的更改合并到本地分支中</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git rebase</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git log</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">命令用于显示提交日志信息。</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git reflog</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">显示每一次命令</td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git revert</td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留</td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);"><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">git reset HEAD <file></td><td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">如果发现错误的将不想暂存的文件被git add进入索引之后，想回退取消，则可以使用</td></tr></tbody></table><h3 id="设置用户名邮箱："><a href="#设置用户名邮箱：" class="headerlink" title="设置用户名邮箱："></a>设置用户名邮箱：</h3><blockquote><p>git config –global user.name “13sai”</p></blockquote><blockquote><p>git config –global user.email “<a href="mailto:&#57;&#53;&#55;&#x30;&#x34;&#x32;&#x37;&#x38;&#49;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#57;&#53;&#55;&#x30;&#x34;&#x32;&#x37;&#x38;&#49;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a>“</p></blockquote><div class="code-wrapper"><pre><code class="hljs vim">fata<span class="hljs-variable">l:</span> No configured push destination.解决：$ git remote <span class="hljs-built_in">add</span> -<span class="hljs-keyword">f</span> -t master -<span class="hljs-keyword">m</span> master origin gi<span class="hljs-variable">t:</span>//example.<span class="hljs-keyword">com</span>/git.git/fata<span class="hljs-variable">l:</span> The current branch test <span class="hljs-built_in">has</span> <span class="hljs-keyword">no</span> upstream branch.解决：git push --<span class="hljs-keyword">set</span>-upstream origin test模仿 git clone，但只跟踪选定的分支$ <span class="hljs-built_in">mkdir</span> project.git$ <span class="hljs-keyword">cd</span> project.git$ git init$ git remote <span class="hljs-built_in">add</span> -<span class="hljs-keyword">f</span> -t master -<span class="hljs-keyword">m</span> master origin gi<span class="hljs-variable">t:</span>//example.<span class="hljs-keyword">com</span>/git.git/$ git merge originfatal：Unable <span class="hljs-keyword">to</span> create <span class="hljs-string">&#x27;E:/project/scrm/.git/index.lock&#x27;</span>: File <span class="hljs-built_in">exists</span>.rm -<span class="hljs-keyword">f</span> ./.git/<span class="hljs-built_in">index</span>.lock</code></pre></div><div class="code-wrapper"><pre><code class="hljs applescript">git <span class="hljs-built_in">log</span>-p 查看差异-n(n为正整数) 查看最近n次的提交<span class="hljs-comment">--pretty    按指定格式显示日志信息,可选项有：oneline,short,medium,full,fuller,email,raw以及format:&lt;string&gt;,默认为medium，可以通过修改配置文件来指定默认的方式。</span>e.g. git <span class="hljs-built_in">log</span> (<span class="hljs-comment">--pretty=)oneline</span><span class="hljs-comment">--stat  列出文件的修改行数</span><span class="hljs-comment">--sortstat      只显示--stat中最后行数修改添加移除的统计</span><span class="hljs-comment">--graph 以简单的图形方式列出提交记录</span><span class="hljs-comment">--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</span><span class="hljs-comment">--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。</span><span class="hljs-comment">--name-only 仅在提交信息后显示已修改的文件清单。</span><span class="hljs-comment">--name-status 显示新增、修改、删除的文件清单。</span></code></pre></div><p>——2017/12/01</p><hr><table ><thead ><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);" class="firstRow">    <th style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        命令    </th>    <th style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        说明    </th></tr></thead><tbody ><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git clone    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        克隆    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git branch (分支名)    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        创建分支 -D删除分支    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git checkout (分支名)    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        切换分支 -b创建并切换    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git add    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        将该文件添加到缓存    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git status    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        查看在你上次提交之后是否有修改    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git commit    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        将缓存区内容添加到仓库中    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git diff    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        来查看执行 git status 的结果的详细信息    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git reset HEAD    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        命令用于取消已缓存的内容    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git rm 文件    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        删除文件-f强制删除    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git mv    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        移动文件    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git merge    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        合并分支    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git fetch    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        从远程获取最新版本到本地    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git push <远程主机名><本地分支名>:<远程分支名>    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        将本地分支的更新，推送到远程主机    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git push origin --delete test    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        删除远程分支test    </td></tr><tr style="box-sizing: border-box; border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git pull <远程主机名><远程分支名>:<本地分支名>    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        将远程存储库中的更改合并到本地分支中    </td></tr><tr style="box-sizing: border-box; background-color: rgb(246, 248, 250); border-top: 1px solid rgb(198, 203, 209);">    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        git rebase    </td>    <td style="box-sizing: border-box; padding: 6px 13px; border-color: rgb(223, 226, 229); word-break: break-all;">        命令在另一个分支基础之上重新应用，用于把一个分支的修改合并到当前分支。    </td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs gams">fatal: <span class="hljs-keyword">No</span> configured push destination.解决：<span class="hljs-symbol">$</span> git remote add -f -t master -m master origin git:<span class="hljs-comment">//example.com/git.git/</span>fatal: The current branch test has <span class="hljs-keyword">no</span> upstream branch.解决：git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin test</span>模仿 git <span class="hljs-comment">clone</span>，但只跟踪选定的分支$ mkdir <span class="hljs-comment">project.git</span>$ cd <span class="hljs-comment">project.git</span>$ git <span class="hljs-comment">init</span>$ git <span class="hljs-comment">remote add -f -t master -m master origin git:</span>//<span class="hljs-comment">example.com</span>/git.git/$ git <span class="hljs-comment">merge origin</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识gulp</title>
    <link href="/2017/11/12/140/"/>
    <url>/2017/11/12/140/</url>
    
    <content type="html"><![CDATA[<p>使用 gulp 之前请安装好node和npm，为了速度，可以使用cnpm。</p><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><blockquote><p>cnpm install gulp -g</p></blockquote><blockquote><p>glup -v // 输入版本，则说明安装成功。</p></blockquote><h2 id="新建package-json"><a href="#新建package-json" class="headerlink" title="新建package.json"></a>新建package.json</h2><div class="code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;sai&quot;</span>,<span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0&quot;</span>,<span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;gulp css!&quot;</span>,<span class="hljs-attr">&quot;author&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;13sai&quot;</span>,<span class="hljs-attr">&quot;email&quot;</span>: <span class="hljs-string">&quot;95742781@qq.com&quot;</span>&#125;,<span class="hljs-attr">&quot;license&quot;</span>: <span class="hljs-string">&quot;MIT&quot;</span>,<span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<span class="hljs-attr">&quot;gulp&quot;</span>: <span class="hljs-string">&quot;^3.9.1&quot;</span>,<span class="hljs-attr">&quot;gulp-minify-css&quot;</span>: <span class="hljs-string">&quot;^1.2.4&quot;</span>&#125;&#125;</code></pre></div><h2 id="本地安装gulp，gulp-minify-css。"><a href="#本地安装gulp，gulp-minify-css。" class="headerlink" title="本地安装gulp，gulp-minify-css。"></a>本地安装gulp，gulp-minify-css。</h2><div class="code-wrapper"><pre><code class="hljs q">cnpm install gulp --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> cnpm install gulp-minify-css --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span></code></pre></div><h2 id="新建gulpfile-js"><a href="#新建gulpfile-js" class="headerlink" title="新建gulpfile.js"></a>新建gulpfile.js</h2><div class="code-wrapper"><pre><code class="hljs awk">var gulp = require(<span class="hljs-string">&#x27;gulp&#x27;</span>),    mincss = require(<span class="hljs-string">&#x27;gulp-minify-css&#x27;</span>);<span class="hljs-regexp">//</span>定义一个sai任务gulp.task(<span class="hljs-string">&#x27;sai&#x27;</span>, <span class="hljs-keyword">function</span> () &#123;    gulp.src(<span class="hljs-string">&#x27;assets/css/*.css&#x27;</span>) <span class="hljs-regexp">//</span>该任务针对的文件        .pipe(mincss()) <span class="hljs-regexp">//</span>该任务调用的模块        .pipe(gulp.dest(<span class="hljs-string">&#x27;assets/mini&#x27;</span>)); <span class="hljs-regexp">//</span>将会在assets/mini下生成css&#125;); gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>,[<span class="hljs-string">&#x27;sai&#x27;</span>]); <span class="hljs-regexp">//</span>定义默认任务</code></pre></div><h2 id="cmd执行gulp"><a href="#cmd执行gulp" class="headerlink" title="cmd执行gulp"></a>cmd执行gulp</h2><blockquote><p>gulp</p></blockquote><p>会看到任务sai开始，完成，这样就完成了gulp压缩css。</p><p>此外，gulp还可以压缩js，img。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gulp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows安装redis扩展</title>
    <link href="/2017/11/07/139/"/>
    <url>/2017/11/07/139/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="2" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-top: 0px !important;">phpinfo查看php对应VC版本</p><p data-source-line="11" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;">下载redis,igbinary</p><blockquote data-source-line="12" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><a href="http://windows.php.net/downloads/pecl/releases/igbinary/" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;">http://windows.php.net/downloads/pecl/releases/igbinary/</a></p></blockquote><blockquote data-source-line="14" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(106, 115, 125); border-left: 0.25em solid rgb(223, 226, 229); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal;"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;"><a href="http://windows.php.net/downloads/pecl/releases/redis/" style="box-sizing: border-box; color: rgb(3, 102, 214); text-decoration-line: none;">http://windows.php.net/downloads/pecl/releases/redis/</a></p></blockquote><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-bottom: 0px !important;">注意下版本与ts，nts分别，这些信息都可以从phpinfo看见。 讲对应dll放入php下面ext。</p><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-bottom: 0px !important;"><br/></p><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-bottom: 0px !important;">4.修改php.ini，增加</p><p><span style="box-sizing: border-box; margin: 0px; padding: 0px; color: rgb(255, 0, 0);">extension=php_igbinary.dll</span></p><p><span style="box-sizing: border-box; margin: 0px; padding: 0px; color: rgb(255, 0, 0);">extension=php_redis.dll</span></p><p><span style="box-sizing: border-box; margin: 0px; padding: 0px; color: rgb(255, 0, 0);"><br/></span></p><p data-source-line="16" style="box-sizing: border-box; margin-top: 0px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, 微软雅黑, &quot;PingFang SC&quot;, Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, SimSun, 宋体, Heiti, 黑体, sans-serif; font-size: 14px; white-space: normal; margin-bottom: 0px !important;">重启服务器，并勾选扩展，搞定！</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVN服务器与web站点代码同步更新</title>
    <link href="/2017/10/09/138/"/>
    <url>/2017/10/09/138/</url>
    
    <content type="html"><![CDATA[<p>因为SVN服务器与web站点代码是放在同一个服务器上的，所以我们尝试来做一个同步更新。</p><p>但是文件上传到SVN版本库后,上传的文件不再以文件原来的格式存储,而是被svn以它自定义的格式压缩成版本库数据,存放在版本库中。</p><p>这样我们就选择使用SVN自带的hooks来做web站点代码更新。</p><p>进入对应版本库下的hooks目录，复制 post-commit.tmpl为post-commit。</p><p>打开，修改代码如下：</p><div class="code-wrapper"><pre><code class="hljs awk">export.UTF-<span class="hljs-number">8</span> REPOS=<span class="hljs-string">&quot;$1&quot;</span> REV=<span class="hljs-string">&quot;$2&quot;</span> SVN_PATH=<span class="hljs-regexp">/usr/</span>bin/svn <span class="hljs-comment">#注意，此处是svn命令目录 </span>WEB_PATH=<span class="hljs-regexp">/web/</span>trunk <span class="hljs-comment">#站点目录 </span>LOG_PATH=<span class="hljs-regexp">/home/</span>svn<span class="hljs-regexp">/trunk/</span>svn.log echo <span class="hljs-string">&quot;##########开始提交 &quot;</span> `date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>` <span class="hljs-string">&#x27;##################&#x27;</span> &gt;&gt; <span class="hljs-variable">$LOG_PATH</span> <span class="hljs-variable">$SVN_PATH</span> update --username <span class="hljs-number">13</span>sai --password <span class="hljs-number">123456</span> <span class="hljs-variable">$WEB_PATH</span> --no-auth-cache &gt;&gt; <span class="hljs-variable">$LOG_PATH</span></code></pre></div><p>记得要修改下post-commit的执行权限，然后测试，如果成功了，那恭喜你！</p>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>svn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux搭建svn服务器</title>
    <link href="/2017/10/09/137/"/>
    <url>/2017/10/09/137/</url>
    
    <content type="html"><![CDATA[<h2 id="环境：centos6-3"><a href="#环境：centos6-3" class="headerlink" title="环境：centos6.3"></a>环境：centos6.3</h2><h3 id="安装svn"><a href="#安装svn" class="headerlink" title="安装svn"></a>安装svn</h3><blockquote><p>yum install subversion</p></blockquote><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><blockquote><p>svnadmin create /home/repo  //文件目录自己设置</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>cd /home/repo/conf    // 进入目录</p></blockquote><p>配置目录下有三个文件</p><div class="code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">authz</span> 权限passwd 账号密码svnserve.conf 版本库配置</code></pre></div><p>编辑用户文件passwd，新增两个用户：admin和guest。</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><span class="hljs-attr">admin</span> = <span class="hljs-number">111111</span><span class="hljs-attr">guest</span> = <span class="hljs-number">123456</span></code></pre></div><p>编辑权限文件authz，用户admin设置可读写权限，guest设置只读权限。</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[/]</span><span class="hljs-attr">admin</span> = rw<span class="hljs-attr">guest</span> = r</code></pre></div><p>编辑svnserve.conf：</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[general]</span><span class="hljs-attr">anon-access</span> = none                     <span class="hljs-comment">#控制非鉴权用户访问版本库的权限</span><span class="hljs-attr">auth-access</span> = write                    <span class="hljs-comment">#控制鉴权用户访问版本库的权限</span><span class="hljs-attr">password-db</span> = passwd                   <span class="hljs-comment">#指定用户名口令文件名</span><span class="hljs-attr">authz-db</span> = authz                       <span class="hljs-comment">#指定权限配置文件名</span><span class="hljs-attr">realm</span> = repo                           <span class="hljs-comment">#指定版本库的认证域，即在登录时提示的认证域名称</span></code></pre></div><h3 id="配置ip，打开3369端口并重启"><a href="#配置ip，打开3369端口并重启" class="headerlink" title="配置ip，打开3369端口并重启"></a>配置ip，打开3369端口并重启</h3><h3 id="启动svn"><a href="#启动svn" class="headerlink" title="启动svn"></a>启动svn</h3><blockquote><p>svnserve -d -r /home/repo</p></blockquote><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3><p>cmd输入svn checkout svn://***/repo，加入提示输入用户名密码，并能用之前账号登录，就表示配置成功。</p><hr><p>如果本地装了类似TortoiseSVN软件，可以新建文件夹，然后checkout，输入用户名密码，测试成功！</p>]]></content>
    
    
    <categories>
      
      <category>CI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SVN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2017/09/30/135/"/>
    <url>/2017/09/30/135/</url>
    
    <content type="html"><![CDATA[<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>用于连接文件并打印到标准输出设备上。</td></tr><tr><td>chmod</td><td>设定文件权限</td></tr><tr><td>diff</td><td>比较文件的差异</td></tr><tr><td>file</td><td>辨识文件类型</td></tr><tr><td>find</td><td>在指定目录下查找文件</td></tr><tr><td>grep</td><td>查找文件里符合条件的字符串</td></tr><tr><td>cd</td><td>切换当前工作目录</td></tr><tr><td>ls</td><td>显示指定工作目录下之内容</td></tr><tr><td>exit</td><td>退出目前的shell</td></tr><tr><td>kill</td><td>删除执行中的程序或工作</td></tr><tr><td>mv</td><td>用来为文件或目录改名、或将文件或目录移入其它位置</td></tr><tr><td>rm</td><td>删除一个文件或者目录 -r递归删除 -f强制删除</td></tr><tr><td>cp</td><td>用于复制文件或目录</td></tr><tr><td>tail</td><td>输出文件尾部内容</td></tr><tr><td>mkdir</td><td>新建目录</td></tr><tr><td>touch</td><td>新建文件</td></tr><tr><td>pwd</td><td>输出当前目录</td></tr></tbody></table><h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>who</td><td>显示在线登陆用户</td></tr><tr><td>whoami</td><td>显示当前操作用户</td></tr><tr><td>ps</td><td>显示当前进程 (process) 的状态</td></tr></tbody></table><p>vim使用</p><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:q</td><td>退出</td></tr><tr><td>:q!</td><td>强制退出</td></tr><tr><td>:wq</td><td>保存并退出</td></tr><tr><td>:set number</td><td>显示行号</td></tr><tr><td>:set nonumber</td><td>隐藏行号</td></tr><tr><td>/sai</td><td>在文档中查找sai 按n跳到下一个，shift+n上一个</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl+r</td><td>重做</td></tr><tr><td>yyp</td><td>复制光标所在行，并粘贴</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>ndd</td><td>n表示大于1的数字，剪切n行</td></tr><tr><td>dw</td><td>从光标处剪切至一个单子/单词的末尾，包括空格</td></tr><tr><td>de</td><td>从光标处剪切至一个单子/单词的末尾，不包括空格</td></tr><tr><td>d$</td><td>从当前光标剪切到行末</td></tr><tr><td>d0</td><td>从当前光标位置（不包括光标位置）剪切之行首</td></tr><tr><td>d3l</td><td>从光标位置（包括光标位置）向右剪切3个字符</td></tr><tr><td>d5G</td><td>将当前行（包括当前行）至第5行（不包括它）剪切</td></tr><tr><td>d3B</td><td>从当前光标位置（不包括光标位置）反向剪切3个单词</td></tr><tr><td>dH</td><td>剪切从当前行至所显示屏幕顶行的全部行</td></tr><tr><td>dM</td><td>剪切从当前行至命令M所指定行的全部行</td></tr><tr><td>dL</td><td>剪切从当前行至所显示屏幕底的全部行</td></tr><tr><td>h</td><td>(左移一个字符←)</td></tr><tr><td>j</td><td>(下一行↓)</td></tr><tr><td>k</td><td>(上一行↑)</td></tr><tr><td>l</td><td>(右移一个字符→)</td></tr><tr><td>ctrl+f</td><td>下翻一屏。</td></tr><tr><td>ctrl+b</td><td>上翻一屏。</td></tr><tr><td>ctrl+d</td><td>下翻半屏。</td></tr><tr><td>ctrl+u</td><td>上翻半屏。</td></tr><tr><td>ctrl+e</td><td>向下滚动一行。</td></tr><tr><td>ctrl+y</td><td>向上滚动一行。</td></tr><tr><td>n%</td><td>到文件n%的位置。</td></tr><tr><td>zz</td><td>将当前行移动到屏幕中央。</td></tr><tr><td>zt</td><td>将当前行移动到屏幕顶端。</td></tr><tr><td>zb</td><td>将当前行移动到屏幕底端。</td></tr></tbody></table><h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>nyy</td><td>n表示大于1的数字，复制n行</td></tr><tr><td>yw</td><td>从光标处复制至一个单子/单词的末尾，包括空格</td></tr><tr><td>ye</td><td>从光标处复制至一个单子/单词的末尾，不包括空格</td></tr><tr><td>y$</td><td>从当前光标复制到行末</td></tr><tr><td>y0</td><td>从当前光标位置（不包括光标位置）复制之行首</td></tr><tr><td>y3l</td><td>从光标位置（包括光标位置）向右复制3个字符</td></tr><tr><td>y5G</td><td>将当前行（包括当前行）至第5行（不包括它）复制</td></tr><tr><td>y3B</td><td>从当前光标位置（不包括光标位置）反向复制3个单词</td></tr></tbody></table><p>——2017/12/26</p><hr><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>cat</td><td>用于连接文件并打印到标准输出设备上。</td></tr><tr><td>chmod</td><td>设定文件权限</td></tr><tr><td>diff</td><td>比较文件的差异</td></tr><tr><td>file</td><td>辨识文件类型</td></tr><tr><td>find</td><td>在指定目录下查找文件</td></tr><tr><td>grep</td><td>查找文件里符合条件的字符串</td></tr><tr><td>cd</td><td>切换当前工作目录</td></tr><tr><td>ls</td><td>显示指定工作目录下之内容</td></tr><tr><td>exit</td><td>退出目前的shell</td></tr><tr><td>kill</td><td>删除执行中的程序或工作</td></tr><tr><td>ps</td><td>显示当前进程 (process) 的状态</td></tr><tr><td>mv</td><td>用来为文件或目录改名、或将文件或目录移入其它位置</td></tr><tr><td>rm</td><td>删除一个文件或者目录</td></tr><tr><td>cp</td><td>用于复制文件或目录</td></tr></tbody></table><p>—–2017/9/30</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识memcache</title>
    <link href="/2017/09/19/134/"/>
    <url>/2017/09/19/134/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Memcached是一个内存缓存系统，而Memcache是php的一个扩展，是php用于操作和管理Memcached的工具。如果安装了Memcached但没有安装Memcache，php无法操控Memcached，但是可以使用命令行来操控Memcached；如果安装了Memcache却没安装Memcached，则无法使用。只有同时安装了Memcached和Memcache，才能在PHP中使用Memcached。</p></blockquote><blockquote><p>Memcache是这个项目的名称，而memcached是它服务器端的主程序文件名。</p></blockquote><h2 id="安装memcache"><a href="#安装memcache" class="headerlink" title="安装memcache"></a>安装memcache</h2><p>安装memcache分为两个过程：</p><ul><li>memcache服务器端的安装</li><li>memcached客户端的安装</li></ul><p>所谓服务器端的安装就是在服务器（一般都是linux系统）上安装Memcache实现数据的存储 所谓客户端的安装就是指php（或者其他程序，Memcache还有其他不错的api接口提供）去使用服务器端的Memcache提供的函数，需要php添加扩展。</p><p><a href="http://pan.baidu.com/s/1gdKbp8R">下载地址</a><br>（这是在网上找的下载地址，我试过，可以下载）</p><p>解压下载后的文件，把它放到一个目录中，如<code>D:\memcached</code></p><p>打开cmd，进入memcached解压后存放的目录，运行命令：</p><blockquote><p>memcached.exe -d install</p></blockquote><p>如果没有意外的话已经安装成功了。（目录中应该有memcached.exe这个文件）</p><p>测试是否安装成功：</p><p>打开cmd，进入memcached解压后存放的目录，运行命令：</p><blockquote><p>memcached -h</p></blockquote><p>若安装成功，会出现多列提示</p><p>启动memcached：</p><p>打开cmd，进入memcached解压后存放的目录，运行命令：</p><blockquote><p>memcached.exe -d start</p></blockquote><h2 id="安装memcache的php扩展"><a href="#安装memcache的php扩展" class="headerlink" title="安装memcache的php扩展"></a>安装memcache的php扩展</h2><p><a href="http://windows.php.net/downloads/pecl/releases/memcache/3.0.8/">下载地址</a></p><p>（注意：要下载对应php版本和系统位数的dll文件，可在phpinfo里查看需要的版本）</p><p>把php_memcache.dll放到php的ext目录下，如：</p><p><code>D:\wampin\php\ext</code></p><p>打开php.ini，在extension处添加一行代码：</p><p><code>extension=php_memcache.dll</code></p><p>重启wamp。</p><p>查看php的extensions服务，php_memcache现在应该可以使用了，即处于打钩状态，之</p><p>前是处于叹号状态的，若还处于叹号状态，用鼠标在上面点击一下就好了。</p><p>通过代码测试php是否已经可以使用memcached：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$memcache</span> = <span class="hljs-keyword">new</span> Memcache;<span class="hljs-variable">$memcache</span>-&gt;connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">11211</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Memcached&#x27;s version: &quot;</span> . <span class="hljs-variable">$memcache</span>-&gt;getVersion() . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(    <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-string">&quot;http://www.cnblogs.com/wujuntian/&quot;</span>,           <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&quot;编程人，在天涯&quot;</span>);<span class="hljs-variable">$memcache</span>-&gt;set(<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-variable">$data</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<span class="hljs-variable">$info</span> = <span class="hljs-variable">$memcache</span>-&gt;get(<span class="hljs-string">&quot;info&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span>;print_r(<span class="hljs-variable">$info</span>);</code></pre></div><p>若能打印出memcache中的信息，则说明php的memcache扩展已安装成功且能使用了！</p><p>更多操作如下：</p><div class="code-wrapper"><pre><code class="hljs php">&lt; ?php<span class="hljs-comment">//连接</span><span class="hljs-variable">$mem</span> = <span class="hljs-keyword">new</span> Memcache;<span class="hljs-variable">$mem</span>-&gt;connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">11211</span>);<span class="hljs-comment">//保存数据</span><span class="hljs-variable">$mem</span>-&gt;set(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;This is first value&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>);<span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span> .<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//替换数据</span><span class="hljs-variable">$mem</span>-&gt;replace(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;This is replace value&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>);<span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span> . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//保存数组</span><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>);<span class="hljs-variable">$mem</span>-&gt;set(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-variable">$arr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>);<span class="hljs-variable">$val2</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key2&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key2 value: &quot;</span>;print_r(<span class="hljs-variable">$val2</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//删除数据$mem-&gt;delete(&#x27;key1&#x27;);</span><span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span> . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//清除所有数据</span><span class="hljs-variable">$mem</span>-&gt;flush();<span class="hljs-variable">$val2</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key2&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key2 value: &quot;</span>;print_r(<span class="hljs-variable">$val2</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<span class="hljs-comment">//关闭连接</span><span class="hljs-variable">$mem</span>-&gt;close();如果正常的话，浏览器将输出：Get key1 value: This is first valueGet key1 value: This is replace valueGet key2 value: <span class="hljs-keyword">Array</span> ( [<span class="hljs-number">0</span>] =&gt; aaa [<span class="hljs-number">1</span>] =&gt; bbb [<span class="hljs-number">2</span>] =&gt; ccc [<span class="hljs-number">3</span>] =&gt; ddd )Get key1 value:Get key2 value:</code></pre></div><h2 id="程序代码分析"><a href="#程序代码分析" class="headerlink" title="程序代码分析"></a>程序代码分析</h2><p>初始化一个Memcache的对象：</p><p><code>$mem = new Memcache;</code></p><p>连接到我们的Memcache服务器端，第一个参数是服务器的IP地址，也可以是主机名，第二个参数是Memcache的开放的端口：</p><p><code>$mem-&gt;connect(&quot;127.0.0.1&quot;,11211);</code></p><p>保存一个数据到Memcache服务器上，第一个参数是数据的key，用来定位一个数据，第二个参数是需要保存的数据内容，这里是一个字符串，第三个参数是一个标记，一般设置为0或者MEMCACHE_COMPRESSED就行了，第四个参数是数据的有效期，就是说数据在这个时间内是有效的，如果过去这个时间，那么会被Memcache服务器端清除掉这个数据，单位是秒，如果设置为0，则是永远有效，我们这里设置了60，就是一分钟有效时间：</p><p><code>$mem-&gt;set(&#39;key1&#39;, &#39;This is first value&#39;, 0, 60);</code></p><p>从Memcache服务器端获取一条数据，它只有一个参数，就是需要获取数据的key，我们这里是上一步设置的key1，现在获取这个数据后输出输出：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span>;</code></pre></div><p>现在是使用replace方法来替换掉上面key1的值，replace方法的参数跟set是一样的，不过第一个参数key1是必须是要替换数据内容的key，最后输出了：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$mem</span>-&gt;replace(<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;This is replace value&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>);<span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span>;</code></pre></div><p>同样的，Memcache也是可以保存数组的，下面是在Memcache上面保存了一个数组，然后获取回来并输出</p><div class="code-wrapper"><pre><code class="hljs routeros"><span class="hljs-variable">$arr</span> = array(<span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>);<span class="hljs-variable">$mem</span>-&gt;<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&#x27;key2&#x27;</span>, <span class="hljs-variable">$arr</span>, 0, 60);<span class="hljs-variable">$val2</span> = <span class="hljs-variable">$mem</span>-&gt;<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;key2&#x27;</span>);print_r(<span class="hljs-variable">$val2</span>);</code></pre></div><p>现在删除一个数据，使用delte接口，参数就是一个key，然后就能够把Memcache服务器这个key的数据删除，最后输出的时候没有结果</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$mem</span>-&gt;delete(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-variable">$val</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key1&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key1 value: &quot;</span> . <span class="hljs-variable">$val</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</code></pre></div><p>最后我们把所有的保存在Memcache服务器上的数据都清除，会发现数据都没有了，最后输出key2的数据为空，最后关闭连接</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$mem</span>-&gt;flush();<span class="hljs-variable">$val2</span> = <span class="hljs-variable">$mem</span>-&gt;get(<span class="hljs-string">&#x27;key2&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Get key2 value: &quot;</span>;print_r(<span class="hljs-variable">$val2</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>cache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php中逗号与点号的区别</title>
    <link href="/2017/09/15/133/"/>
    <url>/2017/09/15/133/</url>
    
    <content type="html"><![CDATA[<p>前不久笔试有涉及逗号与点号的区别问题，一直没在意。</p><p>echo ‘abc’.’def’; //用点号连接字符串echo ‘abc’,’def’; //用逗号连接字符串<br>也许很多人都知道逗号要比点号快，但是不知道为什么.更不知道这两者到底有什么区别.</p><p>那么下面我们就举一些例子</p><p>echo ‘1+5=’ . 1+5;<br>看看上面的，输出的结果是6，而不是1+5=6.有些神奇吧?</p><p>更神奇的是你看下面的例子.</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> <span class="hljs-string">&quot;1+5=&quot;</span> . <span class="hljs-number">5</span>+<span class="hljs-number">1</span>; //输出<span class="hljs-number">2</span></code></pre></div><p>结果十分奇怪。我们看到，我们把5和1换下位置.结果就变成2了.</p><p>为什么会这样？难道在PHP中加法是没有交换律的?当然不是</p><p>我们先不去想为什么，如果我把上面的点号换成逗号试下.</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">1</span>+<span class="hljs-number">5</span>=&#x27; , <span class="hljs-number">5</span>+<span class="hljs-number">1</span>; //输出 <span class="hljs-number">1</span>+<span class="hljs-number">5</span>=<span class="hljs-number">6</span><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">1</span>+<span class="hljs-number">5</span>=&#x27; , <span class="hljs-number">1</span>+<span class="hljs-number">5</span>; //输出 <span class="hljs-number">1</span>+<span class="hljs-number">5</span>=<span class="hljs-number">6</span></code></pre></div><p>可以看出，只有使用逗号我们才可以得到意料中的结果.</p><p>那为什么点号就不行呢?逗号为什么就行呢?</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> (&#x27;<span class="hljs-number">1</span>+<span class="hljs-number">5</span>&#x27; . <span class="hljs-number">5</span>)+<span class="hljs-number">1</span>; //输出<span class="hljs-number">2</span></code></pre></div><p>我们给前面的加个括号后，得到的结果是一样的，证明PHP是先连接字符串再进行加法计算了，按照从左向右的方向进行的.</p><p>既然是先连接的字符串.那么就应该是”1+55”了，然后再用这个字符串加上1，那为什么就会输出2呢?</p><p>这个跟PHP中字符串变成数字的机制是相关的.我们来看下面的例子。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">int</span>)<span class="hljs-string">&#x27;abc1&#x27;</span>; <span class="hljs-comment">//输出0</span><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">int</span>)<span class="hljs-string">&#x27;1abc&#x27;</span>; <span class="hljs-comment">//输出1</span><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">int</span>)<span class="hljs-string">&#x27;2abc&#x27;</span>; <span class="hljs-comment">//输出2</span><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">int</span>)<span class="hljs-string">&#x27;22abc&#x27;</span>; <span class="hljs-comment">//输出22</span></code></pre></div><p>从上面的例子我们可以看出，如果将一个字符串强制转换成一个数字，PHP会去搜索这个字符串的开头，如果开头是数字就转换，如果不是就直接返回0。</p><p>回到刚才的1+55，既然这个字符串是1+55，所以强制类型转换后就应该是1了，在此基础上加1，当然是2了。</p><p>为了证明我们的猜想，我们来验证一下.</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">5</span>+<span class="hljs-number">1</span>=&#x27; . <span class="hljs-number">1</span>+<span class="hljs-number">5</span>; //输出<span class="hljs-number">10</span><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">5</span>+<span class="hljs-number">1</span>=&#x27; . <span class="hljs-number">5</span>+<span class="hljs-number">1</span>; //输出<span class="hljs-number">6</span><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">1</span>+<span class="hljs-number">5</span>=&#x27; . <span class="hljs-number">1</span>+<span class="hljs-number">5</span>; //输出<span class="hljs-number">6</span><span class="hljs-attribute">echo</span> &#x27;<span class="hljs-number">1</span>+<span class="hljs-number">5</span>=&#x27; . <span class="hljs-number">5</span>+<span class="hljs-number">1</span>; //输出<span class="hljs-number">2</span></code></pre></div><p>结果证明，我们的设想是正确的。</p><p>那么为什么使用逗号就没有上面的问题了呢?</p><p>手册上说了，用逗号是multiple parameters.</p><p>也就是说是多参数.换句话说，逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.</p><p>这样的话,echo会对每个参数先进行计算,最后再进行连接后输出,所以我们用逗号就不存在上面的问题了。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP操作MySQL事务实例</title>
    <link href="/2017/09/15/132/"/>
    <url>/2017/09/15/132/</url>
    
    <content type="html"><![CDATA[<p>一般来说，事务都应该具备ACID特征。所谓ACID是Atomic（原子性），Consistent（一致性），Isolated（隔离性），Durable（持续性）四个词的首字母所写，下面以“银行转帐”为例来分别说明一下它们的含义：</p><ol><li><p>原子性：组成事务处理的语句形成了一个逻辑单元，不能只执行其中的一部分。换句话说，事务是不可分割的最小单元。比如：银行转帐过程中，必须同时从一个帐户减去转帐金额，并加到另一个帐户中，只改变一个帐户是不合理的。</p></li><li><p>一致性：在事务处理执行前后，数据库是一致的。也就是说，事务应该正确的转换系统状态。比如：银行转帐过程中，要么转帐金额从一个帐户转入另一个帐户，要么两个帐户都不变，没有其他的情况。</p></li><li><p>隔离性：一个事务处理对另一个事务处理没有影响。就是说任何事务都不可能看到一个处在不完整状态下的事务。比如说，银行转帐过程中，在转帐事务没有提交之前，另一个转帐事务只能处于等待状态。</p></li><li><p>持久性：事务处理的效果能够被永久保存下来。反过来说，事务应当能够承受所有的失败，包括服务器、进程、通信以及媒体失败等等。比如：银行转帐过程中，转帐后帐户的状态要能被保存下来。</p></li></ol><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;update User set ScoreCount = ScoreCount +10 where ID= &#x27;123456&#x27;&quot;</span>;<span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;update ScoreDetail  set FScore = 300 where ID= &#x27;123456&#x27;&quot;</span>;<span class="hljs-variable">$sql3</span> = <span class="hljs-string">&quot;insert into  ScoreDetail ID,Score) values (&#x27;123456&#x27;,60)&quot;</span>;<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;DB_Lib2Test&#x27;</span>);<span class="hljs-variable">$mysqli</span>-&gt;autocommit(<span class="hljs-literal">false</span>);<span class="hljs-comment">//开始事务</span><span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-variable">$sql1</span>);<span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-variable">$sql2</span>);<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$mysqli</span>-&gt;errno) &#123;    <span class="hljs-variable">$mysqli</span>-&gt;commit();    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;ok&#x27;</span>;&#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;err&#x27;</span>;    <span class="hljs-variable">$mysqli</span>-&gt;rollback();&#125;<span class="hljs-variable">$mysqli</span>-&gt;autocommit(<span class="hljs-literal">true</span>);<span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;update User set ScoreCount = ScoreCount +10 where ID= &#x27;123456&#x27;&quot;</span>;<span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;update ScoreDetail  set FScore = 300 where ID= &#x27;123456&#x27;&quot;</span>;<span class="hljs-variable">$sql3</span> = <span class="hljs-string">&quot;insert into  ScoreDetail ID,Score) values (&#x27;123456&#x27;,60)&quot;</span>;<span class="hljs-variable">$conn</span> = mysql_connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>);mysql_select_db(<span class="hljs-string">&#x27;test2&#x27;</span>);mysql_query(<span class="hljs-string">&#x27;start transaction&#x27;</span>);<span class="hljs-comment">//mysql_query(&#x27;SET autocommit=0&#x27;);</span>mysql_query(<span class="hljs-variable">$sql1</span>);mysql_query(<span class="hljs-variable">$sql2</span>);<span class="hljs-keyword">if</span> (mysql_errno()) &#123;    mysql_query(<span class="hljs-string">&#x27;rollback&#x27;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;err&#x27;</span>;&#125; <span class="hljs-keyword">else</span> &#123;    mysql_query(<span class="hljs-string">&#x27;commit&#x27;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;ok&#x27;</span>;&#125;<span class="hljs-comment">// mysql_query(&#x27;SET autocommit=1&#x27;);</span><span class="hljs-comment">// mysql_query($sql3);</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信模板短信</title>
    <link href="/2017/07/25/131/"/>
    <url>/2017/07/25/131/</url>
    
    <content type="html"><![CDATA[ <div class="code-wrapper"><pre class="brush:php;toolbar:false">```/*&nbsp;*&nbsp;发送微信模板短信&nbsp;*&nbsp;$openid&nbsp;&nbsp;微信用户openid&nbsp;*&nbsp;$href&nbsp;&nbsp;&nbsp;&nbsp;短信链接到的网址&nbsp;*/function&nbsp;wx_send($openid,&nbsp;$href){&nbsp;&nbsp;&nbsp;&nbsp;$tpl&nbsp;=&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//接收者d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;touser&quot;=&gt;$openid,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里是你要发送的模板类型id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;template_id&quot;=&gt;&quot;uWkFcjxKGrMLdZZM3WcFEh9Tkk_Dh2bU1SICF92n-RY&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这里是点击模板跳转的页面&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;url&quot;&nbsp;=&gt;&nbsp;$href,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//标题颜色&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;topcolor&quot;&nbsp;=&gt;&nbsp;&quot;#FFAE89&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;data&quot;&nbsp;=&gt;&nbsp;array(//这里的first,keyword&nbsp;都要对应这模板里面的信息写&nbsp;颜色可自定义&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;first&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;购车通知&quot;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;keyword1&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;195800元&quot;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;keyword2&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;奥迪A3&nbsp;2017款&nbsp;Sportback&nbsp;35&nbsp;TFSI&nbsp;风尚型&quot;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;keyword3&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;南京市雨花台区&quot;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;keyword4&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;02588888888&quot;),//这里是通用的&nbsp;就类似与备注的存在&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;remark&quot;&nbsp;=&gt;&nbsp;array(&quot;value&quot;&nbsp;=&gt;&nbsp;&quot;支付购车款后，请尽快办理车辆过户手续&quot;,&quot;color&quot;&nbsp;=&gt;&nbsp;&quot;#FF7256&quot;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;);&nbsp;&nbsp;&nbsp;&nbsp;$json_template&nbsp;=&nbsp;json_encode($tpl);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url&nbsp;=&nbsp;&quot;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=&quot;.get_access_token();&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;json_decode(http_request($url,urldecode($json_template)),true);&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($res[&quot;errcode&quot;]&nbsp;==&nbsp;0){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;ok&quot;;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($res);&nbsp;&nbsp;&nbsp;&nbsp;}}/*&nbsp;*&nbsp;获取access_token&nbsp;*/function&nbsp;get_access_token(){&nbsp;&nbsp;&nbsp;&nbsp;$appid&nbsp;=&nbsp;z_get_config(&#39;wechat_appid&#39;);&nbsp;&nbsp;&nbsp;&nbsp;$appsecret&nbsp;=&nbsp;z_get_config(&#39;wechat_appsecret&#39;);&nbsp;&nbsp;&nbsp;&nbsp;$url_get=&#39;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#39;.$appid.&#39;&amp;secret=&#39;.$appsecret;&nbsp;&nbsp;&nbsp;&nbsp;$json=z_get_json($url_get);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$json[&#39;access_token&#39;];}function&nbsp;http_request($url,&nbsp;$data&nbsp;=&nbsp;array()){&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYPEER,&nbsp;FALSE);&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYHOST,&nbsp;FALSE);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;post数据&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_POST,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;把post的变量加上&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_POSTFIELDS,&nbsp;$data);&nbsp;&nbsp;&nbsp;&nbsp;$output&nbsp;=&nbsp;curl_exec($ch);&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$output;}function&nbsp;z_get_json($url){&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYPEER,&nbsp;FALSE);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYHOST,&nbsp;FALSE);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;1);&nbsp;&nbsp;&nbsp;&nbsp;$output&nbsp;=&nbsp;curl_exec($ch);&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;json_decode($output,&nbsp;true);}```</pre></div><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云身份证实名认证</title>
    <link href="/2017/07/25/130/"/>
    <url>/2017/07/25/130/</url>
    
    <content type="html"><![CDATA[<p>直接上代码，使用的是阿里云的接口。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 身份证校验</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sfz_verify</span>(<span class="hljs-params"><span class="hljs-variable">$idcard</span>, <span class="hljs-variable">$name</span></span>)</span>&#123;    <span class="hljs-variable">$host</span> = <span class="hljs-string">&quot;http://idcard.market.alicloudapi.com&quot;</span>;    <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;/lianzhuo/idcard&quot;</span>;    <span class="hljs-variable">$method</span> = <span class="hljs-string">&quot;GET&quot;</span>;    <span class="hljs-variable">$appcode</span> = z_get_config(<span class="hljs-string">&#x27;sfz_appcode&#x27;</span>);    <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>();    array_push(<span class="hljs-variable">$headers</span>, <span class="hljs-string">&quot;Authorization:APPCODE &quot;</span> . <span class="hljs-variable">$appcode</span>);    <span class="hljs-variable">$querys</span> = <span class="hljs-string">&quot;cardno=<span class="hljs-subst">$idcard</span>&amp;name=<span class="hljs-subst">$name</span>&quot;</span>;    <span class="hljs-variable">$bodys</span> = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-variable">$url</span> = <span class="hljs-variable">$host</span> . <span class="hljs-variable">$path</span> . <span class="hljs-string">&quot;?&quot;</span> . <span class="hljs-variable">$querys</span>;    <span class="hljs-variable">$curl</span> = curl_init();    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_CUSTOMREQUEST, <span class="hljs-variable">$method</span>);    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="hljs-variable">$headers</span>);    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_FAILONERROR, <span class="hljs-literal">false</span>);    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-literal">true</span>);    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == strpos(<span class="hljs-string">&quot;$&quot;</span>.<span class="hljs-variable">$host</span>, <span class="hljs-string">&quot;https://&quot;</span>))&#123;        curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>);        curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">false</span>);    &#125;    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$curl</span>);        <span class="hljs-keyword">if</span> (curl_getinfo(<span class="hljs-variable">$curl</span>, CURLINFO_HTTP_CODE) == <span class="hljs-string">&#x27;200&#x27;</span>) &#123;        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$header</span>, <span class="hljs-variable">$body</span>) = explode(<span class="hljs-string">&quot;\r\n\r\n&quot;</span>, <span class="hljs-variable">$output</span>, <span class="hljs-number">2</span>);    &#125;    <span class="hljs-comment">//dump($output);</span>        curl_close(<span class="hljs-variable">$curl</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$body</span>;&#125;</code></pre></div><p>正确返回值如下：</p><div class="code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;resp&quot;</span>: &#123;    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;desc&quot;</span>: <span class="hljs-string">&quot;匹配&quot;</span>  &#125;,  <span class="hljs-attr">&quot;data&quot;</span>: &#123;    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>,    <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;广东省清远市清新县&quot;</span>,    <span class="hljs-attr">&quot;birthday&quot;</span>: <span class="hljs-string">&quot;1989-05-25&quot;</span>  &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决动态添加元素绑定事件在ios上面失效问题</title>
    <link href="/2017/07/15/128/"/>
    <url>/2017/07/15/128/</url>
    
    <content type="html"><![CDATA[<p>当你的DOM节点是动态生成在页面上的时候。 普通的点击$(element).click()会因为获取不到dom元素而致使点击失效。</p><p>这种情况下一般使用时间托管例如jq的:</p><blockquote><p>$(document).on(element,’click’,fn)</p></blockquote><p>这个通过事件托管可以让jquery获取到动态生成的dom节点，以此解决点击失效的问题。</p><p>然而在iOS上这样的方法解决不了这个问题,原因是:</p><p>在ios系统中,例如document,div,body这些本身并没有可以被点击的属性的元素不能作为托管点击事件的父元素。所以,用这样的方法进行事件托管，ios会获取不到你的document的点击事件，自然无法获取到你想要绑定的元素身上。</p><p>解决办法就是把document换成你想要绑定元素的父元素上可以是最大的那个div，然后在最大元素的样式中加入cursor:pointer; 这个属性可以让父元素变成拥有可被点击属性的盒子，这样就可以解决动态数据无法绑定事件的问题。</p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ueditor远程图片本地化的实现</title>
    <link href="/2017/07/13/127/"/>
    <url>/2017/07/13/127/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-top: 0px !important; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">前不久客户反馈说，在秀米网上编辑好文章，发布到我们后台，前台图片无法显示，最先想到的是图片域名限制。发邮件给秀米，秀米给出的建议是类似微信后台做图片本地化。</p><p data-source-line="3" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">开发组内部讨论后，看到了这篇文章，<a href="http://blog.csdn.net/alex_fung/article/details/50802565" style="box-sizing: border-box; color: rgb(64, 120, 192); text-decoration: none; background-color: transparent;">UEditor编辑器如何关闭抓取远程图片本地化功能</a>，so easy?按文章说明设置，测试,失败！</p><p data-source-line="5" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">百度看了下，大都是这样解答，说明应该是有人实现了，秀米编辑器核心代码也正是ueditor核心代码，那就只能自己捣鼓了。</p><p data-source-line="7" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">具体捣鼓过程如下：</p><blockquote data-source-line="8" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 1em; color: rgb(119, 119, 119); border-left-width: 0.25em; border-left-style: solid; border-left-color: rgb(221, 221, 221); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">注意：捣鼓前先备份下，以备修改错误导致其他问题</p></blockquote><ol data-source-line="10" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding-left: 2em; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>打开ueditor.config.js，在配置项中加入</p></li></ol><div class="code-wrapper"><pre data-source-line="11" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">,catchRemoteImageEnable:true</pre></div><ol start="2" data-source-line="14" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding-left: 2em; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>打开ueditor.config.js，搜索catchremoteimage，在加入console.warn(url)，看看上传地址。前台测试后看到/Skin/public/ueditor/php/controller.php?action=catchimage</p></li><li><p>打开php/controller.php 可以看到</p></li></ol><div class="code-wrapper"><pre data-source-line="17" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">case&nbsp;&#39;catchimage&#39;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;include(&quot;action_crawler.php&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</pre></div><p data-source-line="22" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">接着打开统计目录下action_crawler.php</p><div class="code-wrapper"><pre data-source-line="23" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">include(&quot;Uploader.class.php&quot;);$item&nbsp;=&nbsp;new&nbsp;Uploader($imgUrl,&nbsp;$config,&nbsp;&quot;remote&quot;);</pre></div><p data-source-line="29" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">看到这两段代码。继续打开统计目录下Uploader.class.php</p><div class="code-wrapper"><pre data-source-line="30" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">//构造函数如下public&nbsp;function&nbsp;__construct($fileField,&nbsp;$config,&nbsp;$type&nbsp;=&nbsp;&quot;upload&quot;)&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;fileField&nbsp;=&nbsp;$fileField;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;config&nbsp;=&nbsp;$config;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;type&nbsp;=&nbsp;$type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($type&nbsp;==&nbsp;&quot;remote&quot;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;saveRemote();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if($type&nbsp;==&nbsp;&quot;base64&quot;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;upBase64();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;upFile();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateMap[&#39;ERROR_TYPE_NOT_ALLOWED&#39;]&nbsp;=&nbsp;iconv(&#39;unicode&#39;,&nbsp;&#39;utf-8&#39;,&nbsp;$this-&gt;stateMap[&#39;ERROR_TYPE_NOT_ALLOWED&#39;]);&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><p data-source-line="48" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">搜索saveRemote，主要修复fileType与oriName两块。</p><div class="code-wrapper"><pre data-source-line="49" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">/**&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;拉取远程图片&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;mixed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;saveRemote()&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$imgUrl&nbsp;=&nbsp;htmlspecialchars($this-&gt;fileField);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$imgUrl&nbsp;=&nbsp;str_replace(&quot;&amp;amp;&quot;,&nbsp;&quot;&amp;&quot;,&nbsp;$imgUrl);<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//http开头验证<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strpos($imgUrl,&nbsp;&quot;http&quot;)&nbsp;!==&nbsp;0)&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_HTTP_LINK&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preg_match(&#39;/(^https*://[^:/]+)/&#39;,&nbsp;$imgUrl,&nbsp;$matches);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$host_with_protocol&nbsp;=&nbsp;count($matches)&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;$matches[1]&nbsp;:&nbsp;&#39;&#39;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是否是合法&nbsp;url<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!filter_var($host_with_protocol,&nbsp;FILTER_VALIDATE_URL))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;INVALID_URL&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preg_match(&#39;/^https*://(.+)/&#39;,&nbsp;$host_with_protocol,&nbsp;$matches);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$host_without_protocol&nbsp;=&nbsp;count($matches)&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;$matches[1]&nbsp;:&nbsp;&#39;&#39;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;此时提取出来的可能是&nbsp;ip&nbsp;也有可能是域名，先获取&nbsp;ip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ip&nbsp;=&nbsp;gethostbyname($host_without_protocol);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;判断是否是私有&nbsp;ip<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!filter_var($ip,&nbsp;FILTER_VALIDATE_IP,&nbsp;FILTER_FLAG_NO_PRIV_RANGE))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;INVALID_IP&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取请求头并检测死链&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$heads&nbsp;=&nbsp;get_headers($imgUrl,&nbsp;1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(stristr($heads[0],&nbsp;&quot;200&quot;)&nbsp;&amp;&amp;&nbsp;stristr($heads[0],&nbsp;&quot;OK&quot;)))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_DEAD_LINK&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//格式验证(扩展名验证和Content-Type验证)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fileType&nbsp;=&nbsp;strtolower(strrchr($imgUrl,&nbsp;&#39;.&#39;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//13sai&nbsp;20170712&nbsp;&nbsp;秀米网链接接如下<a href="http://img.xiumi.us/xmi/ua/h4qG/i/b8f2af6986e8dba51615a9d85cc82f3b-sz_1952250.JPG?x-oss-process=style/xm&nbsp;%EF%BC%8C%E6%88%91%E4%BB%AC%E5%AE%8C%E5%96%84%E4%B8%8B">http://img.xiumi.us/xmi/ua/h4qG/i/b8f2af6986e8dba51615a9d85cc82f3b-sz_1952250.JPG?x-oss-process=style/xm&nbsp;，我们完善下</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fileType&nbsp;=&nbsp;(strpos($fileType,&nbsp;&#39;?&#39;)&nbsp;&gt;&nbsp;0)?&nbsp;strtolower(substr($fileType,0,strpos($fileType,&#39;?&#39;)))&nbsp;:&nbsp;strtolower($fileType);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$fileType;die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!in_array($fileType,&nbsp;$this-&gt;config[&#39;allowFiles&#39;])&nbsp;||&nbsp;!isset($heads[&#39;Content-Type&#39;])&nbsp;||&nbsp;!stristr($heads[&#39;Content-Type&#39;],&nbsp;&quot;image&quot;))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_HTTP_CONTENTTYPE&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//打开输出缓冲区并获取远程图片<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ob_start();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$context&nbsp;=&nbsp;stream_context_create(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&#39;http&#39;&nbsp;=&gt;&nbsp;array(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;follow_location&#39;&nbsp;=&gt;&nbsp;false&nbsp;//&nbsp;don&#39;t&nbsp;follow&nbsp;redirects<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readfile($imgUrl,&nbsp;false,&nbsp;$context);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$img&nbsp;=&nbsp;ob_get_contents();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ob_end_clean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//13sai&nbsp;20170712&nbsp;&nbsp;此处正则有问题，修改如下<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//preg_match(&quot;/<a href="%5B%5E/%5D*">/</a>[.]?[^./]*$/&quot;,&nbsp;$imgUrl,&nbsp;$m);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preg_match(&quot;//[A-za-z0-9-]+.&quot;.$fileType.&quot;/&quot;,&nbsp;strtolower($imgUrl),&nbsp;$m);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//var_dump($m);die();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;oriName&nbsp;=&nbsp;$m&nbsp;?&nbsp;ltrim($m[0],&#39;/&#39;):&quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$this-&gt;oriName&nbsp;=&nbsp;$m&nbsp;?&nbsp;$m[1]:&quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$this-&gt;oriName;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;fileSize&nbsp;=&nbsp;strlen($img);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;fileType&nbsp;=&nbsp;$this-&gt;getFileExt();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;fullName&nbsp;=&nbsp;$this-&gt;getFullName();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;filePath&nbsp;=&nbsp;$this-&gt;getFilePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;fileName&nbsp;=&nbsp;$this-&gt;getFileName();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$dirname&nbsp;=&nbsp;dirname($this-&gt;filePath);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//检查文件大小是否超出限制<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$this-&gt;checkSize())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_SIZE_EXCEED&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建目录失败<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!file_exists($dirname)&nbsp;&amp;&amp;&nbsp;!mkdir($dirname,&nbsp;0777,&nbsp;true))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_CREATE_DIR&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(!is_writeable($dirname))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_DIR_NOT_WRITEABLE&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//移动文件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!(file_put_contents($this-&gt;filePath,&nbsp;$img)&nbsp;&amp;&amp;&nbsp;file_exists($this-&gt;filePath)))&nbsp;{&nbsp;//移动失败<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;getStateInfo(&quot;ERROR_WRITE_CONTENT&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//移动成功<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;stateInfo&nbsp;=&nbsp;$this-&gt;stateMap[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><ol start="4" data-source-line="151" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; padding-left: 2em; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);" class=" list-paddingleft-2"><li><p>打开php/config.json，修改大小、格式、存储路径等参数</p></li></ol><div class="code-wrapper"><pre data-source-line="152" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">/<em>&nbsp;抓取远程图片配置&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherLocalDomain&quot;:&nbsp;[&quot;127.0.0.1&quot;,&nbsp;&quot;localhost&quot;,&nbsp;&quot;img.baidu.com&quot;],&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherActionName&quot;:&nbsp;&quot;catchimage&quot;,&nbsp;/<em>&nbsp;执行抓取远程图片的action名称&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherFieldName&quot;:&nbsp;&quot;source&quot;,&nbsp;/<em>&nbsp;提交的图片列表表单名称&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherPathFormat&quot;:&nbsp;&quot;/Upload/ueditor/image/{yyyy}{mm}{dd}/{time}{rand:6}&quot;,&nbsp;/<em>&nbsp;上传保存路径,可以自定义保存路径和文件名格式&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherUrlPrefix&quot;:&nbsp;&quot;&quot;,&nbsp;/<em>&nbsp;图片访问路径前缀&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherMaxSize&quot;:&nbsp;20480000,&nbsp;/<em>&nbsp;上传大小限制，单位B&nbsp;</em>/&nbsp;&nbsp;&nbsp;&nbsp;&quot;catcherAllowFiles&quot;:&nbsp;[&quot;.png&quot;,&nbsp;&quot;.jpg&quot;,&nbsp;&quot;.jpeg&quot;,&nbsp;&quot;.gif&quot;,&nbsp;&quot;.bmp&quot;],&nbsp;/<em>&nbsp;抓取图片格式显示&nbsp;</em>/</pre></div><p data-source-line="163" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px !important; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 21px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">5.保存修改上传，测试成功！</p><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ueditor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csv导出导入</title>
    <link href="/2017/05/31/124/"/>
    <url>/2017/05/31/124/</url>
    
    <content type="html"><![CDATA[ <h1><span style="font-size: 24px;"><strong>CSV（逗号分隔值文件格式）</strong></span></h1><p>逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。通常，所有记录都有完全相同的字段序列。</p><p><br/></p><p>对于大数量的导出，csv导出的速度ko excel导出速度，而csv文件也能用excel打开，这大大提高了页面性能。唯一不好的就是csv导出不比excel导出灵活，加单元格样式、合并单元格就显示不出优势来了。我们来看看代码：</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php$data&nbsp;=&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;姓名&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;性别&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;年龄&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;城市&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;张三&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;男&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;34岁&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;北京&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;李四&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;男&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;38岁&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;天津&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;王五&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;男&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;90岁&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;湖北&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;赵六&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;男&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;12岁&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;陕西&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;));/*&nbsp;*&nbsp;功能描述:将数组数据写入cvs文件&nbsp;*&nbsp;*&nbsp;参数:&nbsp;*&nbsp;$data:需要写入的数组格式的数据&nbsp;*&nbsp;$filename:csv文件的名称,如果没有确定,默认为当前时间(格式为:YmdHis)&nbsp;*&nbsp;*&nbsp;*&nbsp;*/function&nbsp;write_csv($data&nbsp;=&nbsp;null,&nbsp;$filename&nbsp;=&nbsp;null)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!&nbsp;($data&nbsp;||&nbsp;$filename))&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;}<p>&nbsp;&nbsp;&nbsp;&nbsp;$fp&nbsp;=&nbsp;fopen&nbsp;(&nbsp;$filename&nbsp;,&nbsp;&#39;w&#39;&nbsp;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(&nbsp;$data&nbsp;as&nbsp;$fields&nbsp;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fputcsv&nbsp;(&nbsp;$fp,&nbsp;$fields&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;fclose&nbsp;(&nbsp;$fp&nbsp;);<br>}<br>/*<br>&nbsp;<em>&nbsp;功能描述:不写入cvs文件,并且输出的到浏览器<br>&nbsp;</em><br>&nbsp;<em>&nbsp;参数:<br>&nbsp;</em>&nbsp;$data:需要写入的数组格式的数据<br>&nbsp;<em>&nbsp;$filename:csv文件的名称,如果没有确定,默认为当前时间(格式为:YmdHis)<br>&nbsp;</em><br>&nbsp;*<br>&nbsp;<em>&nbsp;</em>/<br>function&nbsp;output_csv($data&nbsp;=&nbsp;null,&nbsp;$filename&nbsp;=&nbsp;null)&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!&nbsp;($data&nbsp;||&nbsp;$filename))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;header(&#39;Content-Type:application/force-download&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;content-Disposition:attachment;filename={$filename}&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(&nbsp;$data&nbsp;as&nbsp;$fields&nbsp;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;($fields&nbsp;as&nbsp;$value){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$value.&#39;,&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;<br>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>/*<br>&nbsp;<em>&nbsp;功能描述:读取cvs文件<br>&nbsp;</em><br>&nbsp;<em>&nbsp;参数:<br>&nbsp;</em>&nbsp;$filename:要读取的csv文件的名称<br>&nbsp;*<br>&nbsp;*<br>&nbsp;<em>&nbsp;</em>/<br>function&nbsp;read_csv($filename=null)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if(!$filename){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;$handle=fopen($filename,&#39;r&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;if(!$handle){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;meta&nbsp;charset=&#39;utf-8&#39;/&gt;&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;$row=1;<br>&nbsp;&nbsp;&nbsp;&nbsp;while($data=fgetcsv($handle,1000,&quot;,&quot;)){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$num=count($data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;br&gt;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;&quot;&lt;h1&gt;&nbsp;&nbsp;第&nbsp;$row&nbsp;行&nbsp;,共有&nbsp;$num&nbsp;个字段&nbsp;&lt;br&nbsp;/&gt;&lt;/h1&gt;<br>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$row&nbsp;++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;($c=0;$c&lt;$num;$c++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$data[$c].&quot;    &quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}<br>/*<br>&nbsp;<em>&nbsp;功能描述:读取cvs文件,输出到浏览器,采用file_get_contents处理<br>&nbsp;</em><br>&nbsp;<em>&nbsp;参数:<br>&nbsp;</em>&nbsp;$filename:要读取的csv文件的名称<br>&nbsp;*<br>&nbsp;*<br>&nbsp;<em>&nbsp;</em>/<br>function&nbsp;read_output_file_get_contents($filename=null){<br>&nbsp;&nbsp;&nbsp;&nbsp;if(!$filename){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;header(&#39;Content-Type:application/force-download&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;header(&quot;content-Disposition:filename={$filename}&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;file_get_contents($filename);<br>}<br>/*<br>&nbsp;<em>&nbsp;功能描述:读取cvs文件,输出到浏览器,采用fopen处理<br>&nbsp;</em><br>&nbsp;<em>&nbsp;参数:<br>&nbsp;</em>&nbsp;$filename:要读取的csv文件的名称<br>&nbsp;*<br>&nbsp;*<br>&nbsp;<em>&nbsp;</em>/<br>function&nbsp;read_output_fopen($filename=null){<br>&nbsp;&nbsp;&nbsp;&nbsp;if(!$filename){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;$file_handle&nbsp;=&nbsp;fopen($filename,&nbsp;&quot;r&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;meta&nbsp;charset=&#39;utf-8&#39;/&gt;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(!feof($file_handle))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$line&nbsp;=&nbsp;fgets($file_handle);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$line.&#39;&lt;br/&gt;&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;fclose($file_handle);<br>}</p><p>//&nbsp;output_csv($data,&#39;ggg.xls&#39;);<br>//output_csv($data,&#39;ggg.csv&#39;);</p><p>//&nbsp;read_csv(&#39;ggg.csv&#39;);</p><p>//read_output_file_get_contents(&#39;ggg.csv&#39;);</p><p>//&nbsp;read_output_fopen(&#39;ggg.csv&#39;);</pre></div><p>简单明了，无需多言。<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CSV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js浮点数计算误差bug</title>
    <link href="/2017/05/24/123/"/>
    <url>/2017/05/24/123/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-top: 0px !important; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">最近在做项目测试时，用到了JS浮点数计算，0.2+0.1结果为0.30000000000000004。因为都是取一位小数，就把计算后面加了个toFixed(1).虽然解决了问题，但还是详细看了下其中缘由。</p><blockquote data-source-line="4" style="box-sizing: border-box; margin: 0px 0px 16px; padding: 0px 15px; color: rgb(119, 119, 119); border-left-width: 4px; border-left-style: solid; border-left-color: rgb(221, 221, 221); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px;">计算机中的浮点数：</p></blockquote><p data-source-line="6" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">浮点指的是带有小数的数值，浮点运算即是小数的四则运算，常用来测量电脑运算速度。大部份计算机采用二進制（b=2）的表示方法。位(bit)是衡量浮点数所需存储空间的单位，通常为32位或64位，分别被叫作单精度和双精度。</p><div class="code-wrapper"><pre data-source-line="8" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">误差现象：console.log(0.1+0.2);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.30000000000000004console.log(0.15+0.15);&nbsp;&nbsp;//&nbsp;输出&nbsp;0.3console.log(0.7+0.1);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.7999999999999999console.log(0.6+0.2);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.8console.log(0.3*3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.8999999999999999console.log(3*3/10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.9</pre></div><p data-source-line="19" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">从以上现象可以看出，并不是所有的浮点数运算都会出问题，只是部分。</p><div class="code-wrapper"><pre data-source-line="20" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">0.7+0.1&nbsp;输出有偏差0.6+0.2&nbsp;输出正确</pre></div><p data-source-line="25" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">具体是什么原因呢？</p><p data-source-line="28" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">误差原因：</p><p data-source-line="30" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">不仅在 JavaScript 中存在这个「问题」，所有的支持二进制浮点数运算（绝大部分都是 IEEE 754[1] 的实现）的系统都存在这个现象。其原因就是，在有限的存储空间下，绝大部分的十进制小数都不能用二进制浮点数来精确表示。例如，0.1 这个简单的十进制小数就不能用二进制浮点数来表示。所谓「计算机浮点数」，其实就是二进制的「科学计数法」。在十进制中，科学计数法的形式是：相应的，二进制的科学计数法就是：而在有限的存储空间下，十进制小数 0.1 无论如何也不能用这种形式来表示，因此，计算机在存储它时，产生了精度丢失，所以就出现了问题中所描述的现象。二进制浮点数具体的储存、运算细节，可以查阅现在应用最广的 IEEE 754。</p><p data-source-line="35" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">解决方案：</p><div class="code-wrapper"><pre data-source-line="36" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">如何解决呢？看这个例子：console.log(0.3*3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.8999999999999999console.log(3*3/10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.9</pre></div><p data-source-line="41" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">浮点数计算有问题，整数计算是没问题的，那么将浮点转化成正数运算，之后再切回浮点就可以保证没有偏差了</p><p data-source-line="43" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">注：不推荐js做太多的浮点运算。</p><p data-source-line="45" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">以下方法可以帮助你修正浮点运算的偏差：</p><div class="code-wrapper"><pre data-source-line="46" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">//&nbsp;浮点数求和function&nbsp;add(a,&nbsp;b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c,&nbsp;d,&nbsp;e;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;a.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;b.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e&nbsp;=&nbsp;Math.pow(10,&nbsp;Math.max(c,&nbsp;d)),&nbsp;(mul(a,&nbsp;e)&nbsp;+&nbsp;mul(b,&nbsp;e))&nbsp;/&nbsp;e;}&nbsp;//&nbsp;浮点数相减function&nbsp;sub(a,&nbsp;b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c,&nbsp;d,&nbsp;e;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;a.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;b.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e&nbsp;=&nbsp;Math.pow(10,&nbsp;Math.max(c,&nbsp;d)),&nbsp;(mul(a,&nbsp;e)&nbsp;-&nbsp;mul(b,&nbsp;e))&nbsp;/&nbsp;e;}&nbsp;//&nbsp;浮点数相乘function&nbsp;mul(a,&nbsp;b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;=&nbsp;a.toString(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;b.toString();&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;+=&nbsp;d.split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;+=&nbsp;e.split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(f)&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(d.replace(&quot;.&quot;,&nbsp;&quot;&quot;))&nbsp;*&nbsp;Number(e.replace(&quot;.&quot;,&nbsp;&quot;&quot;))&nbsp;/&nbsp;Math.pow(10,&nbsp;c);}&nbsp;//&nbsp;浮点数相除function&nbsp;div(a,&nbsp;b)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c,&nbsp;d,&nbsp;e&nbsp;=&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;a.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(g)&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;b.toString().split(&quot;.&quot;)[1].length;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(g)&nbsp;{}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;c&nbsp;=&nbsp;Number(a.toString().replace(&quot;.&quot;,&nbsp;&quot;&quot;)),&nbsp;d&nbsp;=&nbsp;Number(b.toString().replace(&quot;.&quot;,&nbsp;&quot;&quot;)),&nbsp;mul(c&nbsp;/&nbsp;d,&nbsp;Math.pow(10,&nbsp;f&nbsp;-&nbsp;e));}</pre></div><p data-source-line="107" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">验证：</p><div class="code-wrapper"><pre data-source-line="108" style="box-sizing: border-box; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; font-size: 11.9px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);">console.log(0.1+0.2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.30000000000000004console.log(add(0.1,&nbsp;0.2));&nbsp;&nbsp;//&nbsp;输出&nbsp;0.3console.log(0.7+0.1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.7999999999999999console.log(add(0.7,&nbsp;0.1));&nbsp;&nbsp;//&nbsp;输出&nbsp;0.8console.log(0.3*3);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.8999999999999999console.log(mul(0.3,&nbsp;3));&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;输出&nbsp;0.9</pre></div><p data-source-line="119" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px !important; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 22.4px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);">采用优化方法后计算的结果都是正确的。</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用formdata提交表单</title>
    <link href="/2017/05/11/121/"/>
    <url>/2017/05/11/121/</url>
    
    <content type="html"><![CDATA[<p>XMLHttpRequest Level 2 添加了一个新的接口——FormData。利用 FormData 对象，我们可以通过 JavaScript;用一些键值对来模拟一系列表单控件，我们还可以使用 XMLHttpRequest 的 send() 方法来异步的提交表单。与普通的 Ajax 相比，使用 FormData 的最大优点就是我们可以异步上传二进制文件。</p><p>直接上实例：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;artCreateForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;:U(&#x27;artCreate&#x27;)&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;column_id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;$artColumn&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 标题 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-10 col-sm-5 validate[required,maxSize[128]]&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 所属分类 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_category_id&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;art_category_id&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>默认分类<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">volist</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;categoryList&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vo&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;$vo.cate_id&#125;&quot;</span>&gt;</span>&#123;$vo.cate_name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">volist</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 摘要 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_summary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;摘要&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 缩略图 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;preview&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_thumb&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 相关附件 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_upload_file&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/plain&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;art_content&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:90%;height:240px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 排序 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;排序&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-10 col-sm-5 validate[required,custom[integer]]&quot;</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;help-inline col-xs-12 col-sm-7&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span>默认为0，数值越大越靠前<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 点击次数 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_view_number&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击次数&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-10 col-sm-5 validate[required,custom[integer]]&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-3 control-label no-padding-right&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;form-field-1&quot;</span>&gt;</span> 发布时间 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;art_post_time&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;?php echo date(&#x27;Y-m-d H:i:s&#x27;,time());?&gt;&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;WdatePicker(&#123;dateFmt:&#x27;yyyy-MM-dd HH:mm:ss&#x27;&#125;)&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix form-actions&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-offset-3 col-md-9&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-ok bigger-110&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>                提交            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>            <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;backid&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-undo bigger-110&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>                返回列表            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>                                                                                           <span class="hljs-comment">&lt;!-- 配置文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/webui/ueditor/ueditor.config.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 编辑器源码文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/webui/ueditor/ueditor.all.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> ue = UE.getEditor(<span class="hljs-string">&#x27;art_content&#x27;</span>, &#123;&#125;);</span><span class="javascript">            <span class="hljs-comment">/*返回列表*/</span></span><span class="javascript">            $(<span class="hljs-string">&quot;#backid&quot;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&quot;&#123;:U(&#x27;artList&#x27;,array(&#x27;column_id&#x27;=&gt;$artColumn))&#125;&quot;</span>;</span><span class="javascript">            &#125;);</span><span class="javascript">            $(<span class="hljs-string">&#x27;#confirm&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-keyword">if</span>(!$(<span class="hljs-string">&#x27;#artCreateForm&#x27;</span>).validationEngine(<span class="hljs-string">&#x27;validate&#x27;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><span class="javascript">                <span class="hljs-keyword">var</span> $This = $(<span class="hljs-built_in">this</span>);</span><span class="javascript">                $This.attr(<span class="hljs-string">&#x27;disabled&#x27;</span>,<span class="hljs-string">&#x27;disabled&#x27;</span>);</span><span class="javascript">                <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData($(<span class="hljs-string">&quot;#artCreateForm&quot;</span>)[<span class="hljs-number">0</span>]);  </span><span class="javascript">                <span class="hljs-keyword">var</span> iUrl = <span class="hljs-string">&#x27;&#123;:U(&#x27;</span>artCreate<span class="hljs-string">&#x27;)&#125;&#x27;</span>;</span><span class="javascript">                $.ajax(&#123;</span><span class="javascript">                    <span class="hljs-attr">url</span>: iUrl,</span><span class="javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><span class="javascript">                    <span class="hljs-attr">data</span>: formData,</span><span class="javascript">                    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;JSON&#x27;</span>,</span><span class="javascript">                    <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,</span><span class="javascript">                    <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,</span><span class="javascript">                    <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>  </span><span class="javascript">                &#125;).done(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>&#123;  </span><span class="javascript">                    <span class="hljs-keyword">if</span>(ret.code)&#123;  </span><span class="javascript">                         sysTips(ret.info,<span class="hljs-number">1</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                             location.href=<span class="hljs-string">&quot;&#123;:U(&#x27;artList&#x27;,array(&#x27;column_id&#x27;=&gt;$artColumn))&#125;&quot;</span>;</span><span class="javascript">                         &#125;);</span><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;  </span><span class="javascript">                        sysTips(ret.info,<span class="hljs-number">2</span>); </span><span class="javascript">                    &#125;</span><span class="javascript">                &#125;);</span><span class="javascript">                $This.removeAttr(<span class="hljs-string">&#x27;disabled&#x27;</span>);</span><span class="javascript">            &#125;);</span><span class="javascript">        &#125;);</span><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计的范式与反范式</title>
    <link href="/2017/05/02/120/"/>
    <url>/2017/05/02/120/</url>
    
    <content type="html"><![CDATA[ <p>之前有些过关于数据库设计范式的总结文章，其实很多时候，实际操作时并非完全遵循范式去设计数据库。</p><p>通常在设计数据库时需要遵循以下原则：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>核心业务使用范式。在类似交易有关的这种敏感和核心业务中，强调数据安全和一致性，需要遵循范式保证机密数据不被破坏，核心业务不出现不一致的情况。什么样的业务才能叫核心业务，这个需要根据实际情况而定。</p></li><li><p>弱一致性需求------反ACID。在对一些数据一致性要求不高的场合，不必完全遵循ACID，出现适当的数据不一致时可以容忍的。如在线人数统计等。最近几年流行的NoSQL技术，就是基于弱一致性需求，降低数据完整性和一致性换取效率的。</p></li><li><p>空间换时间，冗余换效率。由于一条可见记录被拆分到了多个表中进行记录，当数据量比较大的时候，联表查询就变得比较费时，SQL语句也变得复杂，难于优化。此时就需要适当的冗余了。就拿前不久做的考试系统导出学生信息与答题明细时，一共需要联查6个表，这是非常耗时的。我们后面试着在考完试之后，把这些需要导出的信息统一放进一张新表，导出时的查询效率大大提升。</p></li><li><p>避免不必要的冗余。范式理论不是想反就能反的，反范式不是说不要范式，而是在必要的时候创建冗余表或总结表。不必要的冗余仍然是要避免的。所有的原则都是有使用场景的，我们不应该固守规则，在某些情况，要懂得变通。就如做人一样，不能墨守成规，要学会变通。<br/></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wamp一直橙色，而80端口又未被占用</title>
    <link href="/2017/04/13/119/"/>
    <url>/2017/04/13/119/</url>
    
    <content type="html"><![CDATA[ <p>因为前几天把电脑系统玩崩了，又得重装wamp，这次发现wamp安装后一直是橙色，apache一直没有正常启动。</p><p>经测试，80端口未被占用，百度很多解决方案，都没有解决问题，最后在豆瓣看到一个解决方案。</p><p>apache-&gt;services-&gt;安装服务，安装成功后，重启，久违的绿。</p><p><br/></p><p>后来想了想，应该还是网络设置问题，因为安装的时候跳出启动服务的提示。</p><p><br/></p><p>总算是解决了，心情舒畅。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wamp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mouseover,mouseout,mouseenter,mouseleave的区别</title>
    <link href="/2017/04/05/117/"/>
    <url>/2017/04/05/117/</url>
    
    <content type="html"><![CDATA[ <p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 24px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;">mouseover与mouseenter:</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 24px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;">不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。 只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Helvetica, Arial, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 24px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;">mouseout与mouseleave:</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px ! important; color: rgb(36, 41, 46); font-family: -apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 24px; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; -webkit-text-stroke-width: 0px;">不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。 只有在鼠标指针离开被选元素时，才会触发 mouseleave 事件。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows7搭建PHP开发环境</title>
    <link href="/2017/03/09/111/"/>
    <url>/2017/03/09/111/</url>
    
    <content type="html"><![CDATA[ <p>上个月电脑突然连不上无线网了，便又一次重装了系统，恰好之前主管介绍过windows搭建PHP环境，便考虑操作一下。主管的文档很详尽，但安装是确实遇到了其他问题，便记录下。</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>安装PHP</p></li></ol><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p><span style=";font-family:宋体;font-size:14px"><span style="font-family:Calibri">php-5.3.29-nts-Win32-VC9-x86.zip</span><span style="font-family:宋体">解析到</span></span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">E:\PHP\PHP5.3.29</span><span style="font-size: 14px; font-family: 宋体;">下，并创建</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">temp</span><span style="font-size: 14px; font-family: 宋体;">和</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">sessions</span><span style="font-size: 14px; font-family: 宋体;">两个目录；</span></p></li><li><p><span style=";font-family:Calibri;font-size:14px">&nbsp;</span><span style="font-family: 宋体; font-size: 14px;">给文件夹PHP5.2.29加上</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">users</span><span style="font-family: 宋体; font-size: 14px;">组的读写权限；</span></p></li><li><p><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">将</span>php_5.3.29.ini<span style="font-family:宋体">文件名改为</span><span style="font-family:Calibri">php.ini</span><span style="font-family:宋体">并复制到</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);"><span style="font-family: 宋体;">E</span><span style="font-family: Calibri;">:\PHP\PHP5.3.29</span></span><span style="font-family:宋体">下；</span></span></p></li><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family: 宋体; font-size: 14px;">添加环境变量，右击计算机选择属性---打开系统属性<span style="font-family:Calibri">---</span>高级<span style="font-family:Calibri">---</span>环境变量<span style="font-family:Calibri">---</span>在系统变量一栏中选择<span style="font-family:Calibri">Path</span>点击编辑，加上</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">E<span style="font-size: 14px; font-family: Calibri;">:\PHP\PHP5.3.29</span></span><span style="font-family: 宋体; font-size: 14px;">，注意有分号；而后在点击新建，变量名填写</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">PHPRC</span><span style="font-family: 宋体; font-size: 14px;">，变量值添加</span><span style="font-family: 宋体; font-size: 14px; color: rgb(255, 0, 0);">E<span style="font-size: 14px; font-family: Calibri;">:\PHP\PHP5.3.29</span></span></p></li><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">安装下</span>vcredist_x86.exe<span style="font-family:宋体">；（这步骤一定不能省，装的是window7旗舰版，不知道为啥安装个*86的）</span></span></p></li><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family: 宋体; font-size: 14px;"><span style="font-family:Calibri">WIN+R</span>打开运行窗口，输cmd打开批处理窗口，输入</span><span style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);">php -v</span><span style="font-family: 宋体; font-size: 14px;">&nbsp;如果能显示版本号说明环境配置成功。</span></p></li></ul><p style=";text-align:justify;text-justify:inter-ideograph"><br/></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family:宋体"><span style="font-size: 14px;">这里添加权限与配置环境变量就不详细说明了，百度一下你就知道。</span></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family:宋体"><span style="font-size: 14px;"><br/></span></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family:宋体"><span style="font-size: 14px;">2.配置IIS</span></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family:宋体"><span style="font-size: 14px;">windows7旗舰版自带的是IIS6.0，记得要打开IIS服务，并勾选对应服务（尤其注意<span style="font-size: 14px; color: rgb(255, 0, 0);">万维网服务下面应用程序开发功能里的CGI</span>务必打开）</span></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">添加</span>PHP<span style="font-family:宋体">映射，打开</span><span style="font-family:Calibri">IIS</span><span style="font-family:宋体">，打开处理程序映射；</span></span></p></li><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family: 宋体; font-size: 14px;">点击添加模块映射，请求路径</span><span style="font-family: 宋体; font-size: 14px;">”输入</span><span style="font-size: 14px; font-family: Calibri;">*.php</span><span style="font-family: 宋体; font-size: 14px;">，“模块”选择</span><span style="font-size: 14px; font-family: Calibri;">FastCgiModule</span><span style="font-family: 宋体; font-size: 14px;">，“可执行文件”选择</span><span style="font-size: 14px; font-family: Calibri;">PHP</span><span style="font-family: 宋体; font-size: 14px;">存放目录下的</span><span style="font-size: 14px; font-family: Calibri;">php-cgi.exe</span><span style="font-family: 宋体; font-size: 14px;">，注意，选择时需要将筛选后缀由</span><span style="font-size: 14px; font-family: Calibri;">*.dll</span><span style="font-family: 宋体; font-size: 14px;">改为</span><span style="font-size: 14px; font-family: Calibri;">*.exe</span><span style="font-family: 宋体; font-size: 14px;">，“名称”处输入相应的标示。</span></p></li></ul><p style=";text-align:justify;text-justify:inter-ideograph"><br/></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family: 宋体; font-size: 14px;"><br/></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family: 宋体; font-size: 14px;">3.安装MYSQL</span></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">根据系统版本选择对应的安装包，将</span>MYSQL<span style="font-family:宋体">安装包解压后，将</span><span style="font-family:Calibri">my.ini</span><span style="font-family:宋体">文件复制到根目录下；</span></span></p></li><li><p style=";text-align:justify;text-justify:inter-ideograph"><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">输入</span><span style="font-family:Calibri">cmd</span><span style="font-family:宋体">打开窗口，进入</span><span style="font-family:Calibri">mysql</span><span style="font-family:宋体">文件夹下的</span><span style="font-family:Calibri">bin</span><span style="font-family:宋体">目录下。例如演示的是解压在E</span><span style="font-family:Calibri">:PHP\mysql-5.6.17-winx64</span><span style="font-family:宋体">，就参考如下操作；</span></span></p></li><li><p><span style="font-size: 14px; font-family: 宋体;">输入</span><span style="font-family: 宋体; font-size: 12px; color: rgb(255, 0, 0);">mysqld.exe&nbsp;install MYSQL&nbsp;--defaults-file=&quot;D:\mysql-5.6.17-winx64\my.ini&quot;</span><span style="color: rgb(0, 128, 0); font-size: 12px; font-family: 宋体;">，</span><span style=";font-family:宋体;font-size:14px"><span style="font-family:宋体">回车后会提示有</span>success的提示；</span></p></li><li><p><span style="font-family: 宋体; font-size: 14px;">安装成功后直接用命令启动即可，还是之前的</span><span style="font-family: 宋体; font-size: 14px;">cmd窗口，输入net start mysql启动服务</span></p></li></ul><p><br/></p><p><span style="font-family:宋体"><span style="font-size: 14px;">此处我输入命令时提示</span></span><span style="font-family:宋体"><span style="font-size: 14px;">Install/Remove of the Service Denied，如果你也遇到，请以管理员身份运行cmd，然后运行命令，就会看到success了。</span></span></p><p style=";text-align:justify;text-justify:inter-ideograph"><span style="font-family:宋体"><span style="font-size: 14px;"><br/></span></span>三步我们就搭建好了PHP开发环境：IIS+MYSQL+PHP。</p><p style="text-align: left;">打开浏览器输入127.0.0.1你可以看到</p><p style="text-align: left;"><img src="/upload/ueditor/image/20170309/1489066504544242.png" title="1489066504544242.png" alt="welcome.png"/></p><p style="text-align: left;"><br/></p><p style="text-align: left;">What&#39;s wrong?</p><p style="text-align: left;">打开C:\inetpub\wwwroot,新建php文件test.php输入</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?phpecho(&#39;Good&nbsp;job!&#39;);?&gt;</pre></div><p>浏览器输入127.0.0.0.1/test.php，你就会看到干得不错！</p><p style="text-align: justify;"><br/></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php图片上加文字</title>
    <link href="/2017/03/07/110/"/>
    <url>/2017/03/07/110/</url>
    
    <content type="html"><![CDATA[ <p>最近需要使用PHP合成证书图片，便于用户保存，就考虑使用的php的GD库，在图片上加文字。</p><p>原理比较简单，请看代码：</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php//指定图片路径$src&nbsp;=&nbsp;&#39;time.jpg&#39;;//获取图片信息$info&nbsp;=&nbsp;getimagesize($src);//获取图片扩展名$type&nbsp;=&nbsp;image_type_to_extension($info[2],false);<p>//动态的把图片导入内存中<br>$image&nbsp;=&nbsp;imagecreatefromjpeg($src);</p><p>//文字颜色<br>$col2&nbsp;=&nbsp;imagecolorallocate($image,500,100,0);</p><p>//指定字体内容与字体<br>$content&nbsp;=&nbsp;&quot;小清新&quot;;<br>$font&nbsp;=&nbsp;&#39;C:\Windows\Fonts\simfang.ttf&#39;;</p><p>//给图片添加文字<br>imagefttext($image,24,0,80,180,$col2,$font,$content);</p><p>//指定输入类型<br>header(&quot;Content-type:&quot;.$info[&#39;mime&#39;]);<br>imagejpeg($image);<br>//保存图片&nbsp;&nbsp;imagejpeg($image,&#39;12.jpg&#39;);<br>imagedestroy($image);<br>?&gt;</pre></div><p><img src="/upload/ueditor/image/20170307/1488849055113477.jpg" title="1488849055113477.jpg" alt="tupian.php.jpg"/></p><p>注意：</p><p><span style="color: rgb(255, 0, 0);">中文要用imagefttext，并指定的字体要支持中文。</span><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于ThinkPHP的几个跨模块或项目的问题</title>
    <link href="/2017/03/02/100/"/>
    <url>/2017/03/02/100/</url>
    
    <content type="html"><![CDATA[<p>最近同事TP开发时遇到引入不同项目模板文件的问题，查找后发现可以这么用：</p><div class="code-wrapper"><pre><code class="hljs cmake">&lt;<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;主题名@模块名:操作名&quot;</span> /&gt;</code></pre></div><p>demo:</p><div class="code-wrapper"><pre><code class="hljs cmake">&lt;<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;Home@Index:index&quot;</span> /&gt;</code></pre></div><p>然而，需要引用Tpl里面的公共文件，这就闹腾了，后面脑洞大开，写成了这样。</p><div class="code-wrapper"><pre><code class="hljs cmake">&lt;<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;Home@:header&quot;</span> /&gt;</code></pre></div><p>目录结构如下：Admin/Index/index引入Home公共Tpl下的header</p><p><img src="/upload/ueditor/image/20170302/1488443206528808.png" alt="目录结构"></p><p>此外想到不同模块掉方法的方法A，也是十分常见的。</p><div class="code-wrapper"><pre><code class="hljs stylus">语法：<span class="hljs-function"><span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-string">&#x27;[项目://][分组/]模块&#x27;</span>,<span class="hljs-string">&#x27;控制器层名称&#x27;</span>)</span></span></code></pre></div><p>用起来也很好。</p><p>就是这些了，这就是不同项目调用模板与调用方法的方法。</p><blockquote><p>注意：我用的是3.1，其他版本可能略有不同。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端定位</title>
    <link href="/2017/02/16/99/"/>
    <url>/2017/02/16/99/</url>
    
    <content type="html"><![CDATA[ <p>去年年底，有个O2O的项目，需要手机定位，之前定位都是根据ip定位，只能精确到地级市，可客户怎么着也要定位到区县一级，不得不做一些改进。</p><p>当时正好有另一个网站，用到了手机定位，而且经度不错，copy了代码，够此项目使用了。后面搞技术分享的时候就考虑说下这个问题，便整理了下。</p><p><br/></p><p>思路：</p><p>获取经纬度，进行逆向地址解析。</p><p><br/></p><p>方法：</p><ol style="list-style-type: decimal;" class=" list-paddingleft-2"><li><p>微信jssdk。（只能用于微信）<br/></p></li><li><p>使用浏览器geolocation获取经纬度，百度api逆地址解析。（ios对geolocation并不友好）</p></li><li><p>腾讯地图提供的前端定位api。</p></li></ol><p><br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">baidumap<p>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;Content-Type&quot;&nbsp;content=&quot;text/html;&nbsp;charset=utf-8&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;initial-scale=1.0,&nbsp;user-scalable=no&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body,&nbsp;html{width:&nbsp;100%;height:&nbsp;100%;margin:0;font-family:&quot;微软雅黑&quot;;font-size:14px;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#allmap&nbsp;{width:100%;height:500px;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;<a href="http://api.map.baidu.com/api?v=2.0&amp;ak=NAmyvPsMlhSHds2GfAGEvAB76blt1G4j&quot;&gt;&lt;/script">http://api.map.baidu.com/api?v=2.0&amp;ak=NAmyvPsMlhSHds2GfAGEvAB76blt1G4j&quot;&gt;&lt;/script</a>&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;百度地图–逆地址解析&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div&nbsp;id=&quot;demo&quot;&gt;&lt;/div&gt;<br>&lt;div&nbsp;id=&quot;detail&quot;&gt;&lt;/div&gt;<br>&lt;button&nbsp;onclick=&quot;getLocation()&quot;&gt;点击定位&lt;/button&gt;<br>注意：ios10以上暂不支持geolocation<br>&lt;div&nbsp;id=&quot;allmap&quot;&gt;&lt;/div&gt;<br>&lt;script&gt;<br>var&nbsp;x=document.getElementById(&quot;demo&quot;);<br>var&nbsp;d=document.getElementById(&quot;detail&quot;);<br>function&nbsp;getLocation(){<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(navigator.geolocation){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;navigator.geolocation.getCurrentPosition(showPosition);<br>&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x.innerHTML=&quot;Geolocation&nbsp;is&nbsp;not&nbsp;supported&nbsp;by&nbsp;this&nbsp;browser.&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>function&nbsp;showPosition(pos){<br>&nbsp;&nbsp;x.innerHTML=&quot;Latitude:&nbsp;&quot;&nbsp;+&nbsp;pos.coords.latitude&nbsp;+&nbsp;<br>&nbsp;&nbsp;&quot;&lt;br&nbsp;/&gt;Longitude:&nbsp;&quot;&nbsp;+&nbsp;pos.coords.longitude;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;百度地图API功能<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;map&nbsp;=&nbsp;new&nbsp;BMap.Map(&quot;allmap&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;point&nbsp;=&nbsp;new&nbsp;BMap.Point(pos.coords.longitude,pos.coords.latitude);<br>&nbsp;&nbsp;&nbsp;&nbsp;map.centerAndZoom(point,10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;geoc&nbsp;=&nbsp;new&nbsp;BMap.Geocoder();&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;geoc.getLocation(point,&nbsp;function(rs){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;addComp&nbsp;=&nbsp;rs.addressComponents;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.innerHTML&nbsp;=&nbsp;addComp.province&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.city&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.district&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.street&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.streetNumber;<br>&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;map.addEventListener(&quot;touchend&quot;,&nbsp;function(e){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;pt&nbsp;=&nbsp;e.point;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoc.getLocation(pt,&nbsp;function(rs){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;addComp&nbsp;=&nbsp;rs.addressComponents;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.innerHTML&nbsp;=&nbsp;addComp.province&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.city&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.district&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.street&nbsp;+&nbsp;&quot;,&nbsp;&quot;&nbsp;+&nbsp;addComp.streetNumber;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>}<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre></div><p><br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">qqmap</p><p>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;&nbsp;<br>&lt;head&gt;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;http-equiv=&quot;Content-Type&quot;&nbsp;content=&quot;text/html;&nbsp;charset=UTF-8&quot;&gt;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;前端定位模块–腾讯地图&lt;/title&gt;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100%;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#pos-area&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;#009DDC;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-top:&nbsp;10px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overflow:&nbsp;scroll;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;left;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;white;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#demo&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;8px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;small;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#btn-area&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-bottom:&nbsp;10px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;12px&nbsp;8px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;42%;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border-radius:&nbsp;8px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;#009DDC;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;white;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;<a href="https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js&quot;&gt;&lt;/script">https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js&quot;&gt;&lt;/script</a>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;btn-area&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onclick=&quot;geolocation.getLocation(showPosition,&nbsp;showErr,&nbsp;options)&quot;&gt;获取精确定位信息&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onclick=&quot;geolocation.getIpLocation(showPosition,&nbsp;showErr)&quot;&gt;获取粗糙定位信息&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onclick=&quot;showWatchPosition()&quot;&gt;开始监听位置&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;onclick=&quot;showClearWatch()&quot;&gt;停止监听位置&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;pos-area&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;id=&quot;demo&quot;&gt;点击上面的按钮，获得对应信息：&lt;br&nbsp;/&gt;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/JavaScript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;geolocation&nbsp;=&nbsp;new&nbsp;qq.maps.Geolocation(&quot;OB4BZ-D4W3U-B7VVO-4PJWW-6TKDJ-WPB77&quot;,&nbsp;&quot;myapp&quot;);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;pos-area&quot;).style.height&nbsp;=&nbsp;(document.body.clientHeight&nbsp;-&nbsp;110)&nbsp;+&nbsp;&#39;px&#39;;<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;positionNum&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;options&nbsp;=&nbsp;{timeout:&nbsp;8000};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;showPosition(position)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;positionNum&nbsp;++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).innerHTML&nbsp;+=&nbsp;&quot;序号：&quot;&nbsp;+&nbsp;positionNum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).appendChild(document.createElement(&#39;pre&#39;)).innerHTML&nbsp;=&nbsp;JSON.stringify(position,&nbsp;null,&nbsp;4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;pos-area&quot;).scrollTop&nbsp;=&nbsp;document.getElementById(&quot;pos-area&quot;).scrollHeight;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;showErr()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;positionNum&nbsp;++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).innerHTML&nbsp;+=&nbsp;&quot;序号：&quot;&nbsp;+&nbsp;positionNum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).appendChild(document.createElement(&#39;p&#39;)).innerHTML&nbsp;=&nbsp;&quot;定位失败！&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;pos-area&quot;).scrollTop&nbsp;=&nbsp;document.getElementById(&quot;pos-area&quot;).scrollHeight;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;showWatchPosition()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).innerHTML&nbsp;+=&nbsp;&quot;开始监听位置！&lt;br&nbsp;/&gt;&lt;br&nbsp;/&gt;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geolocation.watchPosition(showPosition);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;pos-area&quot;).scrollTop&nbsp;=&nbsp;document.getElementById(&quot;pos-area&quot;).scrollHeight;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;showClearWatch()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geolocation.clearWatch();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;demo&quot;).innerHTML&nbsp;+=&nbsp;&quot;停止监听位置！&lt;br&nbsp;/&gt;&lt;br&nbsp;/&gt;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;pos-area&quot;).scrollTop&nbsp;=&nbsp;document.getElementById(&quot;pos-area&quot;).scrollHeight;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre></div><p><br/></p><p><br/></p><p>更多请参考：<br/>geolocation：<br/><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation">https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation</a><br/><a href="http://www.w3school.com.cn/html5/html_5_geolocation.asp">http://www.w3school.com.cn/html5/html_5_geolocation.asp</a><br/><br/><br/>百度地图api：<br/><a href="http://developer.baidu.com/map/jsdemo.htm#i7_2">http://developer.baidu.com/map/jsdemo.htm#i7_2</a><br/><br/><br/>腾讯地图api：<br/><a href="http://lbs.qq.com/tool/component-geolocation.html">http://lbs.qq.com/tool/component-geolocation.html</a><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫</title>
    <link href="/2017/01/14/98/"/>
    <url>/2017/01/14/98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近在玩Python，自己平时喜欢和同事看电影，就寻思写了个爬虫来定时爬取优惠电影。</p></blockquote><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># author: 13sai    </span><span class="hljs-comment"># code: utf-8    </span><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen    <span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup    <span class="hljs-keyword">import</span> re    <span class="hljs-keyword">import</span> datetime    now = datetime.datetime.now()    week = now.weekday()    <span class="hljs-keyword">if</span> week &lt; <span class="hljs-number">5</span>:        week = <span class="hljs-number">4</span> - week    <span class="hljs-keyword">else</span>:        week = <span class="hljs-number">12</span> - week    delta = datetime.timedelta(days=week)    n_days = now + delta    nowtime = n_days.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)  <span class="hljs-comment"># 每周五    </span>jiage = <span class="hljs-built_in">int</span>(<span class="hljs-number">30</span>)  <span class="hljs-comment">#价格    </span>url_gwl = urlopen(<span class="hljs-string">&quot;http://www.gewara.com/cinema/ajax/getOpiItemPage.xhtml?cid=cinemaid&amp;mid=&amp;fyrq=&quot;</span>+nowtime).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    soupurl_gwl = BeautifulSoup(url_gwl,<span class="hljs-string">&quot;html.parser&quot;</span>)    ids_gwl = soupurl_gwl.findAll(<span class="hljs-string">&quot;a&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;href&quot;</span>:<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&#125;)    <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span>    str1 = <span class="hljs-string">&#x27;&#x27;</span>    str2 = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> idattr_gwl <span class="hljs-keyword">in</span> ids_gwl:        res_gwl = urlopen(<span class="hljs-string">&quot;http://www.gewara.com/movie/ajax/getOpiItemNew.xhtml?movieid=&quot;</span>+idattr_gwl[<span class="hljs-string">&#x27;id&#x27;</span>]+<span class="hljs-string">&quot;&amp;fyrq=&quot;</span>+nowtime+<span class="hljs-string">&quot;&amp;cid=cinemaid&quot;</span>).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)        soup_gwl = BeautifulSoup(res_gwl,<span class="hljs-string">&quot;html.parser&quot;</span>)        <span class="hljs-comment"># print(soup)    </span>    links_gwl = soup_gwl.findAll(<span class="hljs-string">&quot;span&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;opiPrice&quot;</span>&#125;)        arrtime_gwl = soup_gwl.findAll(<span class="hljs-string">&quot;span&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;opitime&quot;</span>&#125;)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(links_gwl)):        <span class="hljs-keyword">if</span> links_gwl[i].find(<span class="hljs-string">&quot;b&quot;</span>) != <span class="hljs-literal">None</span>:               <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(links_gwl[i].find(<span class="hljs-string">&quot;b&quot;</span>).get_text()) &lt; jiage:                   str1 = str1+<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>+arrtime_gwl[i].get_text()+<span class="hljs-string">&quot;票价：&quot;</span>+links_gwl[i].find(<span class="hljs-string">&quot;b&quot;</span>).get_text()+idattr_gwl.find(<span class="hljs-string">&#x27;img&#x27;</span>)[<span class="hljs-string">&#x27;alt&#x27;</span>]+<span class="hljs-string">&quot;&lt;a href=&#x27;http://www.gewara.com/movie/ajax/getOpiItemNew.xhtml?movieid=&quot;</span>+idattr_gwl[<span class="hljs-string">&#x27;id&#x27;</span>]+<span class="hljs-string">&quot;&amp;fyrq=&quot;</span>+nowtime+<span class="hljs-string">&quot;&amp;cid=cinemaid&#x27;&gt;点击查看&lt;/a&gt;&lt;/p&gt;&quot;</span>    url_tb = urlopen(<span class="hljs-string">&quot;http://dianying.taobao.com/showList.htm?spm=a1z21.3046609.w2.3.9ilG5t&amp;n_s=new&quot;</span>).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)    soupurl_tb = BeautifulSoup(url_tb,<span class="hljs-string">&quot;html.parser&quot;</span>)    ids_tb = soupurl_tb.findAll(<span class="hljs-string">&quot;a&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;movie-card&quot;</span>&#125;)    <span class="hljs-keyword">for</span> idattr_tb <span class="hljs-keyword">in</span> ids_tb:        pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;showId=(\d+)&quot;</span>)        id_group_tb = pattern.search(idattr_tb[<span class="hljs-string">&#x27;href&#x27;</span>])        <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span>:            res_tb = urlopen(<span class="hljs-string">&quot;http://dianying.taobao.com/cinemaDetailSchedule.htm?cinemaId=cinemaid&amp;activityId=&amp;fCode=&amp;showId=&quot;</span>+id_group_tb.group(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;&amp;showDate=&quot;</span>+nowtime).read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)            soup_tb = BeautifulSoup(res_tb,<span class="hljs-string">&quot;html.parser&quot;</span>)            <span class="hljs-comment"># print(soup)    </span>        links_tb = soup_tb.findAll(<span class="hljs-string">&quot;td&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;hall-price&quot;</span>&#125;)            arrtime_tb = soup_tb.findAll(<span class="hljs-string">&quot;td&quot;</span>,attrs =&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;hall-time&quot;</span>&#125;)            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(links_tb)):            <span class="hljs-keyword">if</span> links_tb[i].find(<span class="hljs-string">&quot;em&quot;</span>) != <span class="hljs-literal">None</span>:                   <span class="hljs-keyword">if</span> <span class="hljs-built_in">float</span>(links_tb[i].find(<span class="hljs-string">&quot;em&quot;</span>).get_text()) &lt; jiage:                       name_tb = idattr_tb.find(<span class="hljs-string">&#x27;span&#x27;</span>,attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>:<span class="hljs-string">&quot;bt-l&quot;</span>&#125;)                       str2 = str2+<span class="hljs-string">&quot;&lt;p&gt;&quot;</span>+arrtime_tb[i].get_text()+<span class="hljs-string">&quot;票价：&quot;</span>+links_tb[i].find(<span class="hljs-string">&quot;em&quot;</span>).get_text()+name_tb.get_text()+<span class="hljs-string">&quot;&lt;a href=&#x27;http://dianying.taobao.com/cinemaDetailSchedule.htm?cinemaId=cinemaid&amp;activityId=&amp;fCode=&amp;showId=&quot;</span>+id_group_tb.group(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;&amp;showDate=&quot;</span>+nowtime+<span class="hljs-string">&quot;&#x27;&gt;点击查看&lt;/a&gt;&lt;/p&gt;&quot;</span>    str1 = str1.strip()    str2 = str2.strip()    <span class="hljs-keyword">if</span> str1 != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> str2 != <span class="hljs-string">&#x27;&#x27;</span>:        <span class="hljs-keyword">from</span> email <span class="hljs-keyword">import</span> encoders        <span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header        <span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText        <span class="hljs-keyword">from</span> email.utils <span class="hljs-keyword">import</span> parseaddr, formataddr        <span class="hljs-keyword">import</span> smtplib        <span class="hljs-comment"># 第三方 SMTP 服务      </span>    mail_host=<span class="hljs-string">&quot;smtp.qq.com&quot;</span>  <span class="hljs-comment">#设置服务器      </span>    mail_user=<span class="hljs-string">&quot;@&quot;</span>    <span class="hljs-comment">#用户名      </span>    mail_pass=<span class="hljs-string">&quot;@&quot;</span>   <span class="hljs-comment">#口令,QQ邮箱是输入授权码    </span>    sender = <span class="hljs-string">&#x27;@&#x27;</span>          receivers = [<span class="hljs-string">&#x27;@&#x27;</span>]  <span class="hljs-comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱      </span>    <span class="hljs-keyword">if</span> str1 != <span class="hljs-string">&#x27;&#x27;</span>:            <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;格瓦拉：&lt;br/&gt;&quot;</span>+str1+<span class="hljs-string">&quot;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&quot;</span>        <span class="hljs-keyword">if</span> str2 != <span class="hljs-string">&#x27;&#x27;</span>:            <span class="hljs-built_in">str</span> = <span class="hljs-built_in">str</span>+<span class="hljs-string">&quot;淘票票：&lt;br/&gt;&quot;</span>+str2+<span class="hljs-string">&quot;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&quot;</span>        message = MIMEText(<span class="hljs-built_in">str</span>, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)        message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)        message[<span class="hljs-string">&#x27;To&#x27;</span>] =  Header(<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)        subject = <span class="hljs-string">&#x27;优惠电影&#x27;</span>         message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)        <span class="hljs-keyword">try</span>:        smtpObj = smtplib.SMTP_SSL(mail_host, <span class="hljs-number">465</span>)        smtpObj.login(mail_user,mail_pass)        smtpObj.sendmail(sender, receivers, message.as_string())        smtpObj.quit()        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;邮件发送成功&quot;</span>)        <span class="hljs-keyword">except</span> smtplib.SMTPException:        <span class="hljs-built_in">print</span>(smtplib.SMTPException)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;暂无优惠电影&quot;</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript函数设置默认参数</title>
    <link href="/2017/01/12/97/"/>
    <url>/2017/01/12/97/</url>
    
    <content type="html"><![CDATA[ <p data-source-line="1" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal; margin-top: 0px !important;">PHP函数中，可以直接在参数后面加=，设置默认值，如：</p><div class="code-wrapper"><pre data-source-line="2" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;sum($a,$b,$c=0){&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;+&nbsp;b&nbsp;+&nbsp;c;}</pre></div><p data-source-line="7" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">例：</p><div class="code-wrapper"><pre data-source-line="8" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">echo&nbsp;sum(1,2)；&nbsp;//输出3</pre></div><p data-source-line="12" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">假如你认为javascript也可以这样写，你就大错特错了。</p><p data-source-line="2" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal; margin-top: 0px !important;"><br/></p><p data-source-line="2" style="box-sizing: border-box; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal; margin-top: 0px !important;">在javascript中如何为函数设置默认参数值，下面提供几种方法供大家参考。 第一种方法：</p><div class="code-wrapper"><pre data-source-line="4" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;example(a,b){&nbsp;&nbsp;&nbsp;var&nbsp;a&nbsp;=&nbsp;arguments[0]&nbsp;?&nbsp;arguments[0]&nbsp;:&nbsp;1;//设置参数a的默认值为1&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;arguments[1]&nbsp;?&nbsp;arguments[1]&nbsp;:&nbsp;2;//设置参数b的默认值为2&nbsp;&nbsp;&nbsp;return&nbsp;a+b;&nbsp;}</pre></div><p data-source-line="11" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">注意以上函数也可写作如下：</p><div class="code-wrapper"><pre data-source-line="12" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;example(){&nbsp;&nbsp;&nbsp;var&nbsp;a&nbsp;=&nbsp;arguments[0]&nbsp;?&nbsp;arguments[0]&nbsp;:&nbsp;1;//设置第一个参数的默认值为1&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;arguments[1]&nbsp;?&nbsp;arguments[1]&nbsp;:&nbsp;2;//设置第二个参数的默认值为2&nbsp;&nbsp;&nbsp;return&nbsp;a+b;&nbsp;}</pre></div><p data-source-line="19" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">例：</p><div class="code-wrapper"><pre data-source-line="20" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">alert(&nbsp;example()&nbsp;);&nbsp;//输出3&nbsp;alert(&nbsp;example(10)&nbsp;);&nbsp;//输出12&nbsp;alert(&nbsp;example(10,20)&nbsp;);&nbsp;//输出30&nbsp;alert(&nbsp;example(null,20)&nbsp;);&nbsp;//输出20</pre></div><p data-source-line="28" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">第二种方法：</p><div class="code-wrapper"><pre data-source-line="29" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;example(name,age){&nbsp;&nbsp;&nbsp;name=name||&#39;貂蝉&#39;;&nbsp;&nbsp;&nbsp;age=age||21;&nbsp;&nbsp;&nbsp;alert(&#39;你好！我是&#39;+name+&#39;，今年&#39;+age+&#39;岁。&#39;);&nbsp;}</pre></div><p data-source-line="36" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">该函数也可以写作如下：</p><div class="code-wrapper"><pre data-source-line="37" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;example(name,age){&nbsp;&nbsp;&nbsp;if(!name){name=&#39;貂蝉&#39;;}&nbsp;&nbsp;&nbsp;if(!age){age=21;}&nbsp;&nbsp;&nbsp;alert(&#39;你好！我是&#39;+name+&#39;，今年&#39;+age+&#39;岁。&#39;);&nbsp;}</pre></div><p data-source-line="44" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">例：</p><div class="code-wrapper"><pre data-source-line="45" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">example(&#39;杨胖子&#39;);//输出：你好！我是杨胖子，今年21岁。&nbsp;&nbsp;example(&#39;西施&#39;,305);//输出：你好！我是西施，今年305岁。&nbsp;&nbsp;example(null,10);//输出：你好！我是貂蝉，今年10岁。</pre></div><p data-source-line="52" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">第三种方法，这种方法适合用于参数较多的情况，Jquery插件中很常见：</p><div class="code-wrapper"><pre data-source-line="53" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">function&nbsp;example(setting){&nbsp;&nbsp;&nbsp;var&nbsp;defaultSetting={&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;小明&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&#39;16&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sex:&#39;男&#39;,&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;&nbsp;$.extend(defaultSetting,settings);&nbsp;&nbsp;&nbsp;var&nbsp;message=&#39;姓名：&#39;+defaultSetting.name&nbsp;&nbsp;&nbsp;+&#39;，年龄：&#39;+defaultSetting.age&nbsp;&nbsp;&nbsp;+&#39;，性别：&#39;+defaultSetting.sex&nbsp;&nbsp;&nbsp;+&#39;。&#39;;&nbsp;&nbsp;&nbsp;alert(message);&nbsp;}</pre></div><p data-source-line="68" style="box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal;">例：</p><div class="code-wrapper"><pre data-source-line="69" style="box-sizing: border-box; font-stretch: normal; font-size: 13.6px; line-height: 1.45; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; word-wrap: normal; margin-top: 0px; margin-bottom: 16px; padding: 16px; overflow: auto; border-radius: 3px; color: rgb(51, 51, 51); background-color: rgb(247, 247, 247);">example({&nbsp;&nbsp;&nbsp;name:&#39;小红&#39;,&nbsp;&nbsp;&nbsp;sex:&#39;女&#39;});&nbsp;//输出：姓名：小红，性别：女，年龄：16。</pre></div><p data-source-line="76" style="box-sizing: border-box; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif, &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;; line-height: 25.6px; white-space: normal; margin-bottom: 0px !important;">三种方法都可以，最后一种需要引用jquery库。</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP中order使用方法</title>
    <link href="/2017/01/06/96/"/>
    <url>/2017/01/06/96/</url>
    
    <content type="html"><![CDATA[ <p>order方法属于模型的连贯操作方法之一，用于对数据库操作的结果进行排序，相当于是在select语句中一个order by的子句。</p><p>例：</p><div class="code-wrapper"><pre>$Model-&gt;where(&#39;status=1&#39;)-&gt;order(&#39;id&nbsp;desc&#39;)-&gt;limit(5)-&gt;select();</pre></div><p><br style="text-align: left; text-indent: 2em;"/>支持对多个字段的排序，例如：</p><div class="code-wrapper"><pre>$Model-&gt;where(&#39;status=1&#39;)-&gt;order(&#39;id&nbsp;desc,time&nbsp;asc&#39;)-&gt;limit(5)-&gt;select();</pre></div><p>如果没有指定排序规则，默认为asc。</p><p><br style="text-align: left; text-indent: 2em;"/></p><p>如果你的字段和mysql关键字有冲突，那么建议采用数组方式调用，例如：</p><div class="code-wrapper"><pre>$Model-&gt;where(&#39;status=1&#39;)-&gt;order(array(&#39;order&#39;,&#39;id&#39;=&gt;&#39;desc&#39;))-&gt;limit(5)-&gt;select();</pre></div><p><br/></p><p><br/></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows7创建任务计划</title>
    <link href="/2017/01/05/95/"/>
    <url>/2017/01/05/95/</url>
    
    <content type="html"><![CDATA[ <p><span style="border: medium none;"></span>最近在做个程序，爬取优惠电影票的程序，程序存在本地，每次需要cmd运行下，有点麻烦，有时候会忘记，因为考虑创建任务计划。</p><p>创建其实很简单，第一步，进入任务计划管理（控制面板或者直接搜索程序）</p><p><img src="/upload/ueditor/image/20170105/1483593956686165.png" title="1483593956686165.png" alt="1.png"/></p><p><br/></p><p>你可以看见本机的任务计划列表。</p><p>点击右侧创建基本任务，</p><p><br/></p><p><img src="/upload/ueditor/image/20170105/1483594065861502.png" style="" title="1483594065861502.png"/></p><p>名称描述触发时间就由你定，<br/></p><p><img src="/upload/ueditor/image/20170105/1483594065556877.png" style="" title="1483594065556877.png"/></p><p><br/></p><p>选择启动程序，程序脚本写在上面，起始于写入改程序所在目录。</p><p><br/></p><p><img src="/upload/ueditor/image/20170105/1483594065442904.png" style="" title="1483594065442904.png"/></p><p><br/></p><p>点击下一步，点击完成，这样就完成了。</p><p>是不是很简单。<br/></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信JSSDK分享</title>
    <link href="/2016/12/27/94/"/>
    <url>/2016/12/27/94/</url>
    
    <content type="html"><![CDATA[ <p>微信JS-SDK是微信公众平台面向网页开发者提供的基于微信内的网页开发工具包。</p><p>通过使用微信JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p><p>此文档面向网页开发者介绍微信JS-SDK如何使用及相关注意事项。</p><p></p><h3><span class="mw-headline" id="JSSDK.E4.BD.BF.E7.94.A8.E6.AD.A5.E9.AA.A4"><strong>JSSDK使用步骤</strong></span></h3><h4><span class="mw-headline" id=".E6.AD.A5.E9.AA.A4.E4.B8.80.EF.BC.9A.E7.BB.91.E5.AE.9A.E5.9F.9F.E5.90.8D"><strong>步骤一：绑定域名</strong></span></h4><p>先登录<a href="http://mp.weixin.qq.com" class="external text" rel="nofollow" target="_blank">微信公众平台</a>进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><p>备注：登录后可在“开发者中心”查看对应的接口权限。</p><h4><span class="mw-headline" id=".E6.AD.A5.E9.AA.A4.E4.BA.8C.EF.BC.9A.E5.BC.95.E5.85.A5JS.E6.96.87.E4.BB.B6"><strong>步骤二：引入JS文件</strong></span></h4><p>在需要调用JS接口的页面引入如下JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.0.0.js" class="external free" rel="nofollow" target="_blank">http://res.wx.qq.com/open/js/jweixin-1.0.0.js</a></p><p><span style="color:#FF0000">请注意，如果你的页面启用了https，务必引入 <a href="https://res.wx.qq.com/open/js/jweixin-1.0.0.js" class="external free" rel="nofollow" target="_blank">https://res.wx.qq.com/open/js/jweixin-1.0.0.js</a> ，否则将无法在iOS9.0以上系统中成功使用JSSDK</span></p><p>如需使用摇一摇周边功能，请引入 jweixin-1.1.0.js</p><p>备注：支持使用 AMD/CMD 标准模块加载方法加载</p><h4><span class="mw-headline" id=".E6.AD.A5.E9.AA.A4.E4.B8.89.EF.BC.9A.E9.80.9A.E8.BF.87config.E6.8E.A5.E5.8F.A3.E6.B3.A8.E5.85.A5.E6.9D.83.E9.99.90.E9.AA.8C.E8.AF.81.E9.85.8D.E7.BD.AE"><strong>步骤三：通过config接口注入权限验证配置</strong></span></h4><p><span style="color:#FF0000">所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用,目前Android微信客户端不支持pushState的H5新特性，所以使用pushState来实现web app的页面会导致签名失败，此问题会在Android6.2中修复）。</span></p><div class="code-wrapper"><pre>wx.config({&nbsp;&nbsp;&nbsp;&nbsp;debug:&nbsp;true,&nbsp;//&nbsp;开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。&nbsp;&nbsp;&nbsp;&nbsp;appId:&nbsp;&#39;&#39;,&nbsp;//&nbsp;必填，公众号的唯一标识&nbsp;&nbsp;&nbsp;&nbsp;timestamp:&nbsp;,&nbsp;//&nbsp;必填，生成签名的时间戳&nbsp;&nbsp;&nbsp;&nbsp;nonceStr:&nbsp;&#39;&#39;,&nbsp;//&nbsp;必填，生成签名的随机串&nbsp;&nbsp;&nbsp;&nbsp;signature:&nbsp;&#39;&#39;,//&nbsp;必填，签名，见附录1&nbsp;&nbsp;&nbsp;&nbsp;jsApiList:&nbsp;[]&nbsp;//&nbsp;必填，需要使用的JS接口列表，所有JS接口列表见附录2});</pre></div><h4><span class="mw-headline" id=".E6.AD.A5.E9.AA.A4.E5.9B.9B.EF.BC.9A.E9.80.9A.E8.BF.87ready.E6.8E.A5.E5.8F.A3.E5.A4.84.E7.90.86.E6.88.90.E5.8A.9F.E9.AA.8C.E8.AF.81"><strong>步骤四：通过ready接口处理成功验证</strong></span></h4><div class="code-wrapper"><pre>wx.ready(function(){<p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。<br>});</pre></div><p><br/></p><h4><span class="mw-headline" id=".E6.AD.A5.E9.AA.A4.E4.BA.94.EF.BC.9A.E9.80.9A.E8.BF.87error.E6.8E.A5.E5.8F.A3.E5.A4.84.E7.90.86.E5.A4.B1.E8.B4.A5.E9.AA.8C.E8.AF.81"><strong>步骤五：通过error接口处理失败验证</strong></span></h4><div class="code-wrapper"><pre>wx.error(function(res){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</p><p>});</pre></div><h3><span class="mw-headline" id=".E6.8E.A5.E5.8F.A3.E8.B0.83.E7.94.A8.E8.AF.B4.E6.98.8E"><strong>接口调用说明</strong></span></h3><p>所有接口通过wx对象(也可使用jWeixin对象)来调用，参数是一个对象，除了每个接口本身需要传的参数之外，还有以下通用参数：</p><ol class=" list-paddingleft-2"><li><p>success：接口调用成功时执行的回调函数。</p></li><li><p>fail：接口调用失败时执行的回调函数。</p></li><li><p>complete：接口调用完成时执行的回调函数，无论成功或失败都会执行。</p></li><li><p>cancel：用户点击取消时的回调函数，仅部分有用户取消操作的api才会用到。</p></li><li><p>trigger: 监听Menu中的按钮点击时触发的方法，该方法仅支持Menu中的相关接口。</p></li></ol><p>备注：<span style="color:red">不要尝试在trigger中使用ajax异步请求修改本次分享的内容，因为客户端分享操作是一个同步操作，这时候使用ajax的回包会还没有返回</span>。</p><p><br/>以上几个函数都带有一个参数，类型为对象，其中除了每个接口本身返回的数据之外，还有一个通用属性errMsg，其值格式如下：</p><ol class=" list-paddingleft-2"><li><p>调用成功时：&quot;xxx:ok&quot; ，其中xxx为调用的接口名</p></li><li><p>用户取消时：&quot;xxx:cancel&quot;，其中xxx为调用的接口名</p></li><li><p>调用失败时：其值为具体错误信息</p></li></ol><p><br/></p><p><br/></p><p>我们重点介绍生成这些配置信息</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php<br>class&nbsp;JssdkAction&nbsp;extends&nbsp;AppbaseAction{<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$appId&nbsp;=&nbsp;&quot;@&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$appSecret&nbsp;=&nbsp;&quot;@&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<em>继承父类</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;function&nbsp;_initialize()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::_initialize();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;getSignPackage()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$jsapiTicket&nbsp;=&nbsp;$this-&gt;getJsApiTicket();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;注意&nbsp;URL&nbsp;一定要动态获取，不能&nbsp;hardcode.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$protocol&nbsp;=&nbsp;(!empty($_SERVER[&#39;HTTPS&#39;])&nbsp;&amp;&amp;&nbsp;$_SERVER[&#39;HTTPS&#39;]&nbsp;!==&nbsp;&#39;off&#39;&nbsp;||&nbsp;$_SERVER[&#39;SERVER_PORT&#39;]&nbsp;==&nbsp;443)&nbsp;?&nbsp;&quot;https://&quot;&nbsp;:&nbsp;&quot;http://&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url&nbsp;=&nbsp;&quot;$protocol$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$timestamp&nbsp;=&nbsp;time();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$nonceStr&nbsp;=&nbsp;$this-&gt;createNonceStr();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这里参数的顺序要按照&nbsp;key&nbsp;值&nbsp;ASCII&nbsp;码升序排序<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$string&nbsp;=&nbsp;&quot;jsapi_ticket=$jsapiTicket&amp;noncestr=$nonceStr&amp;timestamp=$timestamp&amp;url=$url&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$signature&nbsp;=&nbsp;sha1($string);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$signPackage&nbsp;=&nbsp;array(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;appId&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;$this-&gt;appId,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;nonceStr&quot;&nbsp;&nbsp;=&gt;&nbsp;$nonceStr,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;timestamp&quot;&nbsp;=&gt;&nbsp;$timestamp,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;url&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;$url,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&quot;jsapiTicket&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;$jsapiTicket,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;signature&quot;&nbsp;=&gt;&nbsp;$signature,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;rawString&quot;&nbsp;=&gt;&nbsp;$string<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$signPackage;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;createNonceStr($length&nbsp;=&nbsp;16)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$chars&nbsp;=&nbsp;&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;($i&nbsp;=&nbsp;0;&nbsp;$i&nbsp;&lt;&nbsp;$length;&nbsp;$i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;.=&nbsp;substr($chars,&nbsp;mt_rand(0,&nbsp;strlen($chars)&nbsp;-&nbsp;1),&nbsp;1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$str;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;getJsApiTicket()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;jsapi_ticket&nbsp;应该全局存储与更新，以下代码以写入到文件中做示例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;json_decode(file_get_contents(&quot;jsapi_ticket.json&quot;),true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($data-&gt;expire_time&nbsp;&lt;&nbsp;time())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$accessToken&nbsp;=&nbsp;$this-&gt;getAccessToken();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果是企业号用以下&nbsp;URL&nbsp;获取&nbsp;ticket<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;$url&nbsp;=&nbsp;&quot;<a href="https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket?access_token=$accessToken">https://qyapi.weixin.qq.com/cgi-bin/get_jsapi_ticket?access_token=$accessToken</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;access_token=$accessToken">https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi&amp;access_token=$accessToken</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;z_get_json($url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ticket&nbsp;=&nbsp;$res[&#39;ticket&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($ticket)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data-&gt;expire_time&nbsp;=&nbsp;time()&nbsp;+&nbsp;7200;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data-&gt;jsapi_ticket&nbsp;=&nbsp;$ticket;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fp&nbsp;=&nbsp;fopen(&quot;jsapi_ticket.json&quot;,&nbsp;&quot;w&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;json_encode($data));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$accessToken;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ticket&nbsp;=&nbsp;$data[&#39;jsapi_ticket&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$ticket;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$ticket;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;getAccessToken()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;access_token&nbsp;应该全局存储与更新，以下代码以写入到文件中做示例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;json_decode(file_get_contents(&quot;access_token.json&quot;));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($data-&gt;expire_time&nbsp;&lt;&nbsp;time())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果是企业号用以下URL获取access_token<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;$url&nbsp;=&nbsp;&quot;<a href="https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=$this-&gt;appId&amp;corpsecret=$this-&gt;appSecret">https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=$this-&gt;appId&amp;corpsecret=$this-&gt;appSecret</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$this-&gt;appId&amp;secret=$this-&gt;appSecret">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$this-&gt;appId&amp;secret=$this-&gt;appSecret</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$res&nbsp;=&nbsp;z_get_json($url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$access_token&nbsp;=&nbsp;$res[&#39;access_token&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($access_token)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data-&gt;expire_time&nbsp;=&nbsp;time()&nbsp;+&nbsp;7200;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data-&gt;access_token&nbsp;=&nbsp;$access_token;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fp&nbsp;=&nbsp;fopen(&quot;access_token.json&quot;,&nbsp;&quot;w&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fwrite($fp,&nbsp;json_encode($data));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose($fp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//var_dump($res);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$access_token&nbsp;=&nbsp;$data-&gt;access_token;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$access_token;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}</pre></div><p>另一个组的调用</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php</p><p>class&nbsp;ActivityAction&nbsp;extends&nbsp;BaseAction&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/<em>继承父类</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;function&nbsp;_initialize()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::_initialize();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;detail(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;navname&nbsp;=&nbsp;&#39;活动信息&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$a&nbsp;=&nbsp;M(&quot;vw_activity&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data&nbsp;=&nbsp;$a-&gt;where(&quot;a_id=&#39;%s&#39;&quot;,$a_id)-&gt;find();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$jssdk&nbsp;=&nbsp;A(&#39;Jssdk&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;signPackage&nbsp;=&nbsp;$jssdk-&gt;getSignPackage();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data&nbsp;=&nbsp;$data;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;display();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}</pre></div><p>前台tpl：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;script&nbsp;src=&quot;<a href="http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&gt;&lt;/script">http://res.wx.qq.com/open/js/jweixin-1.0.0.js&quot;&gt;&lt;/script</a>&gt;<br>&lt;script&gt;<br>$(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;wx.config({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;debug:&nbsp;false,&nbsp;&nbsp;//true为调试模式，调试时可启用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appId:&nbsp;&#39;{$signPackage[&quot;appId&quot;]}&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timestamp:&nbsp;&#39;{$signPackage[&quot;timestamp&quot;]}&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonceStr:&nbsp;&#39;{$signPackage[&quot;nonceStr&quot;]}&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signature:&nbsp;&#39;{$signPackage[&quot;signature&quot;]}&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jsApiList:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;checkJsApi&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;onMenuShareTimeline&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;onMenuShareAppMessage&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;wx.ready(function&nbsp;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wx.onMenuShareAppMessage({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;&#39;{$data[&#39;a_name&#39;]}&#39;,&nbsp;//&nbsp;分享标题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;desc:&nbsp;&#39;{$data[&#39;a_desc&#39;]}&#39;,&nbsp;//&nbsp;分享描述<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link:&nbsp;&#39;&#39;,&nbsp;//&nbsp;分享链接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgUrl:&nbsp;&#39;http://{:$_SERVER[&#39;SERVER_NAME&#39;].$data[&#39;a_thumb&#39;]}&#39;,&nbsp;//&nbsp;分享图标<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//type:&nbsp;&#39;&#39;,&nbsp;//&nbsp;分享类型,music、video或link，不填默认为link<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dataUrl:&nbsp;&#39;&#39;,&nbsp;//&nbsp;如果type是music或video，则要提供数据链接，默认为空<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:&nbsp;function&nbsp;()&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aideTips(&#39;分享成功！&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancel:&nbsp;function&nbsp;()&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aideTips(&#39;分享失败！&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wx.onMenuShareTimeline({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;&#39;{$data[&#39;a_name&#39;]}&#39;,&nbsp;//&nbsp;分享标题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//desc:&nbsp;&#39;{$data[&#39;a_desc&#39;]}&#39;,&nbsp;//&nbsp;分享描述<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link:&nbsp;&#39;&#39;,&nbsp;//&nbsp;分享链接<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imgUrl:&nbsp;&#39;http://{:$_SERVER[&#39;SERVER_NAME&#39;].$data[&#39;a_thumb&#39;]}&#39;,&nbsp;//&nbsp;分享图标，注意不要用相对地址<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:&nbsp;function&nbsp;()&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aideTips(&#39;分享成功！&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancel:&nbsp;function&nbsp;()&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aideTips(&#39;分享失败！&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;//aideTips(&#39;分享失败！&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>})<br>&lt;/script&gt;</pre></div><p>看看效果，</p><p><img src="/upload/ueditor/image/20161227/1482824955130759.png" title="1482824955130759.png" alt="QQ图片20161227154858.png"/></p><p>更多时间请看 <a href="https://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html#.E8.8E.B7.E5.8F.96.E2.80.9C.E5.88.86.E4.BA.AB.E5.88.B0.E6.9C.8B.E5.8F.8B.E5.9C.88.E2.80.9D.E6.8C.89.E9.92.AE.E7.82.B9.E5.87.BB.E7.8A.B6.E6.80.81.E5.8F.8A.E8.87.AA.E5.AE.9A.E4.B9.89.E5.88.86.E4.BA.AB.E5.86.85.E5.AE.B9.E6.8E.A5.E5.8F.A3" target="_blank" title="微信jssdk">微信jssdk</a><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端美观的城市列表</title>
    <link href="/2016/12/24/92/"/>
    <url>/2016/12/24/92/</url>
    
    <content type="html"><![CDATA[ <p>最近项目中有一个需求是要定位到城市的，因为风格参照美团，所以找了个类似风格的demo。</p><p>直接上代码吧：</p><p style="line-height: 16px;"><img style="vertical-align: middle; margin-right: 2px;" src="http://www.13sai.com/ui/js/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif"/><a style="font-size:12px; color:#0066cc;" href="/upload/ueditor/file/20161224/1482545368517616.zip" title="citylist.zip">citylist.zip</a></p><p>文件不大，但可惜的是，只能定位到地级市，恰好配合sina的开放api配合使用。perfect！</p><p>具体获取地理位置请看：<br/></p><p><a href="http://www.13sai.com/index.php/index/content/id/45" target="_blank" title="js获取当前地理位置与ip">js获取当前地理位置与ip</a><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现上传图片前本地预览</title>
    <link href="/2016/12/13/91/"/>
    <url>/2016/12/13/91/</url>
    
    <content type="html"><![CDATA[<p>直接上代码：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-comment">/**</span></span><span class="hljs-comment"><span class="javascript">* 从 file 域获取 本地图片 url</span></span><span class="hljs-comment"><span class="javascript">*/</span></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileUrl</span>(<span class="hljs-params">sourceId</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> url;</span><span class="javascript">    <span class="hljs-keyword">if</span> (navigator.userAgent.indexOf(<span class="hljs-string">&quot;MSIE&quot;</span>)&gt;=<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// IE</span></span><span class="javascript">        url = <span class="hljs-built_in">document</span>.getElementById(sourceId).value;</span><span class="javascript">    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// Chrome</span></span><span class="javascript">        url = <span class="hljs-built_in">window</span>.URL.createObjectURL(<span class="hljs-built_in">document</span>.getElementById(sourceId).files.item(<span class="hljs-number">0</span>));</span><span class="javascript">    &#125;</span><span class="javascript">    <span class="hljs-keyword">return</span> url;</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="javascript"><span class="hljs-comment">/**</span></span><span class="hljs-comment"><span class="javascript">* 将本地图片 显示到浏览器上</span></span><span class="hljs-comment"><span class="javascript">*/</span></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">preImg</span>(<span class="hljs-params">sourceId, targetId</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> url = getFileUrl(sourceId);</span><span class="javascript">    <span class="hljs-keyword">var</span> imgPre = <span class="hljs-built_in">document</span>.getElementById(targetId);</span><span class="javascript">    imgPre.src = url;</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;imgOne&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgOne&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;preImg(this.id,&#x27;imgPre&#x27;);&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;imgPre&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300px&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASP连接mysql数据库</title>
    <link href="/2016/11/30/90/"/>
    <url>/2016/11/30/90/</url>
    
    <content type="html"><![CDATA[ <p>最近公司主站要上个抽奖页面，后台也要增加查询功能，我就负责增加后台列表页，其实就一个页面而已。</p><p>自己之前从没接触过asp，貌似也out了，但还是试着用ASP来写这个页面。</p><p>之前主站的数据都是存在sqlserver里，而这次我们把数据表放在了mysql数据库里，不得不写个连接数据库的config，那么我们开始：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">dim&nbsp;myHost,myDB,myUID,myPWDmyHost&nbsp;=&nbsp;&quot;localhost&quot;myDB&nbsp;=&nbsp;&quot;db&quot;myUID&nbsp;=&nbsp;&quot;user&quot;myPWD&nbsp;=&nbsp;&quot;pw&quot;myCharSet&nbsp;=&nbsp;&quot;utf8&quot;strconnection=&quot;driver={MySQL&nbsp;ODBC&nbsp;3.51&nbsp;Driver};server=&quot;&nbsp;&amp;&nbsp;myHost&nbsp;&amp;&nbsp;&quot;;database=&quot;&nbsp;&amp;&nbsp;myDB&nbsp;&amp;&nbsp;&quot;;uid=&quot;&nbsp;&amp;&nbsp;myUID&nbsp;&amp;&nbsp;&quot;;password=&quot;&nbsp;&amp;&nbsp;myPWDset&nbsp;conn&nbsp;=&nbsp;Server.CreateObject(&quot;ADODB.Connection&quot;)conn.open&nbsp;strconnectionconn.execute(&quot;set&nbsp;names&nbsp;&#39;&quot;&nbsp;&amp;&nbsp;myCharSet&nbsp;&amp;&nbsp;&quot;&#39;&quot;)</pre></div><p>然后报错：<br/></p><p><img src="/upload/ueditor/image/20161130/1480494304377085.png" title="1480494304377085.png" alt="QQ截图20161130162303.png"/></p><p><br/></p><p>驱动没装，装好odbc驱动，注意版本（3.51或其他版本）要与程序对应。</p><p>重试，报错消失。</p><p><br/></p><p>查询</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">name&nbsp;=&nbsp;Request.Form(&quot;name&quot;)mobile&nbsp;=&nbsp;Request.Form(&quot;mobile&quot;)where&nbsp;=&nbsp;&quot;&nbsp;where&nbsp;1=1&quot;If&nbsp;name&lt;&gt;&quot;&quot;&nbsp;Then&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;=&nbsp;where&nbsp;&amp;&nbsp;&quot;&nbsp;and&nbsp;name&nbsp;like&nbsp;&#39;%&quot;&amp;&nbsp;name&nbsp;&amp;&quot;%&#39;&quot;End&nbsp;IfIf&nbsp;mobile&lt;&gt;&quot;&quot;&nbsp;Then&nbsp;&nbsp;&nbsp;&nbsp;where&nbsp;=&nbsp;where&nbsp;&amp;&nbsp;&quot;&nbsp;and&nbsp;mobile&nbsp;like&nbsp;&#39;%&quot;&amp;&nbsp;mobile&nbsp;&amp;&quot;%&#39;&quot;End&nbsp;If&lt;table&nbsp;id=&quot;example2&quot;&nbsp;class=&quot;table&nbsp;table-hover&nbsp;table-striped&nbsp;dataTable&nbsp;&quot;&nbsp;&gt;&nbsp;&nbsp;&lt;thead&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&nbsp;role=&quot;row&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;序号&lt;/th&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;姓名&lt;/th&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;手机号&lt;/th&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;&nbsp;&nbsp;&nbsp;&lt;/thead&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;%    sql&nbsp;=&nbsp;&quot;select&nbsp;*&nbsp;from&nbsp;activity_customer&nbsp;&quot;&amp;&nbsp;where&nbsp;&amp;&quot;&nbsp;order&nbsp;by&nbsp;ac_id&nbsp;desc&quot;    set&nbsp;rs=server.CreateObject(&quot;adodb.recordset&quot;)    call&nbsp;manage()&nbsp;    sub&nbsp;manage()    &nbsp;&nbsp;&nbsp;&nbsp;&#39;必须&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;rs.CursorLocation=3&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;rs.open&nbsp;sql,adodataconn,1,1    &nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i=1&nbsp;to&nbsp;rs.recordcount<pre><code class="hljs">%&amp;gt;&amp;lt;tr&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;td&amp;gt;&amp;lt;%=rs(&amp;quot;id&amp;quot;)%&amp;gt;&amp;lt;/td&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;td&amp;gt;&amp;lt;%=rs(&amp;quot;name&amp;quot;)%&amp;gt;&amp;lt;/td&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;td&amp;gt;&amp;lt;%=rs(&amp;quot;mobile&amp;quot;)%&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;%    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;******************上面是你要显示的******************&amp;#39;    rs.movenext    if&amp;nbsp;rs.eof&amp;nbsp;then    &amp;nbsp;&amp;nbsp;Exit&amp;nbsp;For    End&amp;nbsp;if    Next    &amp;nbsp;response.write&amp;nbsp;&amp;quot;&amp;lt;/tbody&amp;gt;&amp;quot;    &amp;nbsp;response.write&amp;nbsp;&amp;quot;&amp;lt;/table&amp;gt;&amp;quot;            rs.close    set&amp;nbsp;rs=nothingend&amp;nbsp;subset&amp;nbsp;conn=nothing&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;注意下&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;rs.CursorLocation=3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/upload/ueditor/image/20161130/1480495561126675.png&quot; title=&quot;1480495561126675.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;CursorLocation 属性可设置或返回一个 long 值，该值指示游标服务的位置。默认值是 AdUseServer。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;还有一个就是每次记得关闭数据库与数据集。&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;也就是&lt;/p&gt;&lt;pre class=&quot;brush:html;toolbar:false&quot;&gt;set&amp;nbsp;rs=nothing</code></pre></div><p>set&nbsp;conn=nothing</pre><p><br/></p><p>好了，这样就实现了数据库连接与查询搜索。</p><p><br/></p><p>所以说，遇到不熟悉的语言不要怕，有强大的搜索引擎与结果呢。</p><p>多读书，多看报，少吃零食，多睡觉，我行，你也行。</p><p>希望对你有所帮助！</p></p>]]></content>
    
    
    <categories>
      
      <category>asp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛云上传视频</title>
    <link href="/2016/11/28/89/"/>
    <url>/2016/11/28/89/</url>
    
    <content type="html"><![CDATA[ <p>近期客户需要做一个视频上传的功能，又嫌弃优酷、腾讯平台的广告，客户不差钱，因而选择了七牛云。</p><p>七牛云的开发者文档还是很详尽的，上传、重命名、转码，一应俱全，而且PHP,JAVA,PYTHON等各种语言sdk都很详细。</p><p><br/></p><p>我用的是3.1版本的ThinkPHP，先去七牛开发者中心下载PHP的sdk到TP的扩展库Vendor目录下，命名为Qiniu。</p><p><br/></p><p>接着新建QiniuAction.class.php</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php//&nbsp;引入鉴权类&nbsp;引入上传类use&nbsp;Qiniu\Auth;use&nbsp;Qiniu\Storage\UploadManager;use&nbsp;Qiniu\Processing\PersistentFop;<p>class&nbsp;QiniuAction&nbsp;extends&nbsp;AppbaseAction&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;upload(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//防止盗用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(session(&#39;m_id&#39;)&nbsp;==&nbsp;&#39;&#39;){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;小样，不给你上传！&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return&nbsp;=&nbsp;array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;status&#39;]&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//判断文件大小<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$maxSize&nbsp;=&nbsp;z_get_config(&#39;max_upload_video_size&#39;)&nbsp;<em>&nbsp;1024&nbsp;</em>&nbsp;1024;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($_FILES[&#39;uploadv&#39;][size]&nbsp;&gt;&nbsp;$maxSize){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;info&#39;]&nbsp;=&nbsp;&#39;文件过大，不能超过&#39;.z_get_config(&#39;max_upload_video_size&#39;).&#39;M&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($return);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//判断类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr_type&nbsp;=&nbsp;array(&#39;mp4&#39;,&#39;avi&#39;,&#39;rmvb&#39;,&#39;mp4&#39;,&#39;mpeg&#39;,&#39;wmv&#39;,,&#39;mpv&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fileType&nbsp;=&nbsp;pathinfo($_FILES[&#39;uploadv&#39;][&#39;name&#39;],PATHINFO_EXTENSION);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!in_array($fileType,&nbsp;$arr_type)){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;info&#39;]&nbsp;=&nbsp;&#39;不支持此格式，请上传&#39;.implode(&#39;,&#39;,$arr_type).&#39;类型的视频&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($return);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//引入库<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vendor(&#39;Qiniu.autoload&#39;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;构建鉴权对象<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$accessKey&nbsp;=&nbsp;ak;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$secretKey&nbsp;=&nbsp;sk;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$auth&nbsp;=&nbsp;new&nbsp;Auth($accessKey,&nbsp;$secretKey);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;要上传的空间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$bucket&nbsp;=&nbsp;&#39;train&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;要上传文件的本地路径<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$filePath&nbsp;=&nbsp;$_FILES[&#39;uploadv&#39;][&#39;tmp_name&#39;];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上传到七牛后保存的文件名&nbsp;采用id加当前时间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$filename&nbsp;=&nbsp;&#39;qn_&#39;.$mid.&#39;_&#39;.time().&#39;.&#39;.$fileType;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//要进行转码的转码操作&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fops&nbsp;=&nbsp;&quot;avthumb/mp4/s/1280x720/vb/5m&quot;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//可以对转码后的文件进行使用saveas参数自定义命名，当然也可以不指定文件会默认命名并保存在当间<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$savekey&nbsp;=&nbsp;Qiniuase64_urlSafeEncode($bucket.&#39;:&#39;.$filename);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$fops&nbsp;=&nbsp;$fops.&#39;|saveas/&#39;.$savekey;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$policy&nbsp;=&nbsp;array(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;persistentOps&#39;&nbsp;=&gt;&nbsp;$fops,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;persistentPipeline&#39;&nbsp;=&gt;&nbsp;$pipeline<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$uptoken&nbsp;=&nbsp;$auth-&gt;uploadToken($bucket,&nbsp;null,&nbsp;3600,&nbsp;$policy);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$uploadMgr&nbsp;=&nbsp;new&nbsp;UploadManager();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list($ret,&nbsp;$err)&nbsp;=&nbsp;$uploadMgr-&gt;putFile($uptoken,&nbsp;null,&nbsp;$filePath);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//返回<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($err&nbsp;!==&nbsp;null)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($err);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return&nbsp;=&nbsp;$ret;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;status&#39;]&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;video&#39;]&nbsp;=&nbsp;$filename;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($return);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</pre></div><p><br/></p><p>前台：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false"><br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type2{display:&nbsp;none;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#progress{position:relative;&nbsp;margin-left:150px;&nbsp;&nbsp;width:200px;padding:&nbsp;1px;&nbsp;border-radius:3px;&nbsp;display:none;}&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#bar&nbsp;{background-color:&nbsp;#D0333A;&nbsp;display:block;&nbsp;width:0%;&nbsp;height:30px;&nbsp;&nbsp;border-radius:3px;&nbsp;color:&nbsp;#666;&nbsp;text-align:&nbsp;center;&nbsp;line-height:&nbsp;30px;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;fabu&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;span&nbsp;class=&quot;wd-fr&quot;&gt;&lt;a&nbsp;href=&quot;{:U(&#39;Home/Train/index&#39;)}&quot;&gt;返回课程列表&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;method=&quot;post&quot;&nbsp;action=&quot;{:U(&#39;Home/Train/fabu&#39;)}&quot;&nbsp;&nbsp;id=&quot;fabuForm&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;onsubmit=&quot;return&nbsp;jQuery(this).validationEngine(&#39;validate&#39;);&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;value=&quot;{$data_t[&#39;t_id&#39;]}&quot;&nbsp;name=&quot;teacher_id&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;id=&quot;t-video&quot;&nbsp;name=&quot;t_video&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;课程标题：&lt;/label&gt;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;t_name&quot;&nbsp;class=&quot;validate[required,maxSize[100]]&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;课程分类：&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;volist&nbsp;name=&quot;list_lx&quot;&nbsp;id=&quot;vo&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;radio&quot;&nbsp;name=&quot;t_type&quot;&nbsp;value=&quot;{$vo[&#39;d_value&#39;]}&quot;&nbsp;class=&quot;validate[required,groupRequired[lx]]&quot;&nbsp;&lt;if&nbsp;condition=&quot;$i&nbsp;eq&nbsp;1&quot;&gt;checked&lt;/if&gt;&gt;{$vo[&#39;d_title&#39;]}&amp;nbsp;&amp;nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/volist&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;type2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;课程地点：&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;t_didian&quot;&nbsp;class=&quot;validate[required,maxSize[50]]&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;type2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;课程时间：&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;t_shijian&quot;&nbsp;class=&quot;validate[required]&quot;&nbsp;onFocus=&quot;WdatePicker({lang:&#39;zh-cn&#39;,dateFmt:&#39;yyyy-M-d&nbsp;HH:mm:ss&#39;})&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;课程描述：&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;t_desc&quot;&nbsp;class=&quot;validate[required,maxSize[500]]&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&nbsp;class=&quot;tijiao-btn&nbsp;wd-fr&quot;&gt;提交&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;id=&quot;form1&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;&lt;label&nbsp;for=&quot;&quot;&gt;上传视频区：&lt;/label&gt;&lt;input&nbsp;style=&quot;padding-left:&nbsp;10px;display:&nbsp;inline-block;width:&nbsp;600px;&quot;&nbsp;type=&quot;file&quot;&nbsp;name=&quot;uploadv&quot;&nbsp;id=&quot;uploadvideo&quot;&nbsp;accept=&quot;video/*&quot;&gt;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;progress&quot;&gt;&lt;div&nbsp;id=&quot;bar&quot;&gt;&lt;/div&gt;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;button&quot;&nbsp;id=&quot;upload-vb&quot;&nbsp;class=&quot;tijiao-btn&quot;&gt;上传&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div&nbsp;class=&quot;am-modal&nbsp;am-modal-alert&quot;&nbsp;tabindex=&quot;-1&quot;&nbsp;id=&quot;my-alert&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-modal-dialog&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-modal-hd&quot;&gt;爱的温馨提示&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-modal-bd&quot;&nbsp;id=&quot;tips-text&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-modal-footer&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;am-modal-btn&quot;&gt;我知道了&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;/Skin/public/uploadify/jquery.uploadify.min.js&quot;&gt;&lt;/script&gt;</p><p>&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;src=&quot;/Skin/public/ueditor/ueditor.config.js&quot;&gt;&lt;/script&gt;<br>&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;src=&quot;/Skin/public/ueditor/ueditor.all.min.js&quot;&gt;&nbsp;&lt;/script&gt;<br>&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;src=&quot;/Skin/public/ueditor/lang/zh-cn/zh-cn.js&quot;&gt;&lt;/script&gt;<br>&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ue&nbsp;=&nbsp;UE.getEditor(&#39;editor&#39;,{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toolbars:[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&#39;bold&#39;,&nbsp;&#39;cleardoc&#39;,&nbsp;&#39;lineheight&#39;,&nbsp;&#39;|&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;customstyle&#39;,&nbsp;&#39;fontfamily&#39;,&nbsp;&#39;fontsize&#39;,&nbsp;&#39;|&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;justifyleft&#39;,&nbsp;&#39;justifycenter&#39;,&nbsp;&#39;justifyright&#39;,&nbsp;&#39;justifyjustify&#39;,&nbsp;&#39;|&#39;,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;imagenone&#39;,&nbsp;&#39;imageleft&#39;,&nbsp;&#39;imageright&#39;,&nbsp;&#39;imagecenter&#39;,&nbsp;&#39;insertimage&#39;,&#39;attachment&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&lt;/script&gt;<br>&lt;script&nbsp;src=&quot;/Skin/public/My97datepicker/WdatePicker.js&quot;&nbsp;charset=&quot;utf-8&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#uploadvideo&#39;).on(&#39;change&#39;,function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;filename&nbsp;=&nbsp;$(this).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;filetype&nbsp;=&nbsp;filename.substr(filename.lastIndexOf(&quot;.&quot;)).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr&nbsp;=&nbsp;[&#39;.rmvb&#39;,&#39;.mp4&#39;,&#39;.mpeg&#39;,&#39;.wmv&#39;,&#39;.avi&#39;,&#39;.mov&#39;,&#39;.mpv&#39;,&#39;.png&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//console.log(arr.toString().indexOf(filetype))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(arr.toString().indexOf(filetype)&gt;-1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#upload-vb&#39;).on(&#39;click&#39;,fsubmit);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#upload-vb&#39;).unbind(&#39;click&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;不支持此格式，请上传&#39;+arr.join(&#39;,&#39;)+&#39;格式视频&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&lt;script&gt;<br>function&nbsp;fsubmit(){&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;new&nbsp;FormData($(&#39;#form1&#39;)[0]);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;$.ajax({&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;&#39;{:U(&#39;Home/Qiniu/upload&#39;)}&#39;,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;POST&#39;,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;data,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType:&nbsp;&#39;JSON&#39;,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache:&nbsp;false,&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;processData:&nbsp;false,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentType:&nbsp;false,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beforeSend:&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#progress&#39;).show()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr:&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//进度条<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;xhr&nbsp;=&nbsp;$.ajaxSettings.xhr();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xhr.upload.onprogress&nbsp;=&nbsp;function(progress)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(progress.lengthComputable)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jindu&nbsp;=&nbsp;(progress.loaded&nbsp;/&nbsp;progress.total&nbsp;<em>&nbsp;100).toFixed(1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#bar&#39;).css(&#39;width&#39;,jindu</em>2).html(jindu+&#39;%&#39;)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;xhr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success:&nbsp;function(data)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(data.status&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#t-video&#39;).val(data.video);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tips(&#39;上传成功！&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tips(data.info);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error:&nbsp;function(err){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tips(&#39;上传失败！&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;});&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;&nbsp;<br>}<br>&lt;/script&gt;<br>&lt;include&nbsp;file=&quot;./Tpl/foot&quot;&nbsp;/&gt;</pre></div><p><br/></p><p>这样就完成了，希望对你有所帮助，少走弯路。<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makedown</title>
    <link href="/2016/11/08/81/"/>
    <url>/2016/11/08/81/</url>
    
    <content type="html"><![CDATA[ <p>最近捣鼓github，写文档要用到makedown，便简单地学习了下语法，真的很好用，效果佳，上手快。</p><p><br/></p><p>1. 标题设置（让字体变大，和word的标题意思一样）<br/> 在Markdown当中设置标题，有两种方式：<br/> 第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。<br/> 第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）<br/> <br/> 2. 块注释（blockquote）<br/> 通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）<br/> <br/> 3. 斜体<br/> 将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来<br/> <br/> 4. 粗体<br/> 将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来<br/> <br/> 5. 无序列表<br/> 在文字开头添加(<code>*</code>, <code>+</code>, and <code>-</code>)实现无序列表。但是要注意在(<code>*</code>, <code>+</code>, and <code>-</code>)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）<br/> <br/> 6. 有序列表<br/> 使用数字后面跟上句号。（还要有空格）<br/> <br/> 7. 链接（Links）<br/> Markdown中有两种方式，实现链接，分别为内联方式和引用方式。<br/> </p><div class="code-wrapper"><pre><code class="hljs">内联方式：This is an [example link](http://example.com/).<br/>引用方式：</code><br/><code>I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. &nbsp;<br/><br/>[1]: http://google.com/ &nbsp; &nbsp; &nbsp; &nbsp;&quot;Google&quot; <br/>[2]: http://search.yahoo.com/ &nbsp;&quot;Yahoo Search&quot; <br/>[3]: http://search.msn.com/ &nbsp; &nbsp;&quot;MSN Search&quot;</code></pre></div><p></p><p>&nbsp;</p><p>8. 图片（Images）<br/> 图片的处理方式和链接的处理方式，非常的类似。<br/> 内联方式：<code>![alt text](/path/to/img.jpg &quot;Title&quot;)<br/> 引用方式：</code><code><br/> ![alt text][id] &nbsp; <br/> &nbsp; <br/> [id]: /path/to/img.jpg &quot;Title&quot;<br/> &nbsp; <br/> 9. 代码（HTML中所谓的Code）<br/> 实现方式有两种：<br/> 第一种：简单文字出现一个代码框。使用`&lt;blockquote&gt;`。（`不是单引号而是左上角的ESC下面~中的`）<br/> 第二种：大片文字需要实现代码框。使用Tab和四个空格。<br/> &nbsp; <br/> 10. 脚注（footnote）<br/> 实现方式如下：<br/> hello[^hello]<br/> &nbsp; <br/> &nbsp; <br/> [^hello]: hi<br/> &nbsp; <br/> 11. 下划线<br/> 在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</code></p><p><br/></p><p>12. 插入源代码</p><p>用```包含起来。</p><p>比如插入php</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">```php&lt;?phpecho&nbsp;1;?&gt;```</pre></div><p>是不是够简洁，写小说文档蛮好的。</p><p><br/></p><p>另外推荐一款编辑器cmd makedown，兼容各种系统，虽然觉得不是特强大，但足够日常使用。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>makedown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js之匿名函数与闭包</title>
    <link href="/2016/10/23/79/"/>
    <url>/2016/10/23/79/</url>
    
    <content type="html"><![CDATA[ <h3><span style="color: rgb(0, 0, 0);">1、匿名函数</span></h3><p><span style="color: rgb(0, 0, 0);">简单说就是没有函数名的函数。</span></p><p><span style="color: rgb(0, 0, 0);">创建<span style="color: rgb(0, 0, 0);">匿名函数</span>：</span></p><div class="code-wrapper"><pre><span style="color: rgb(0, 0, 0);">(function(x,&nbsp;y){&nbsp;&nbsp;&nbsp;&nbsp;alert(x&nbsp;+&nbsp;y);&nbsp;&nbsp;})(2,&nbsp;3);<br/></span></pre></div><p><span style="color: rgb(0, 0, 0);">这里创建了一个匿名函数(在第一个括号内)，第二个括号用于调用该匿名函数，并传入参数。</span></p><p><span style="color: rgb(0, 0, 0);">比较典型的还有jquery源码。</span></p><div class="code-wrapper"><pre class="brush:js;toolbar:false"><span style="color: rgb(0, 0, 0);">(function(&nbsp;window,&nbsp;undefined&nbsp;)&nbsp;{...})(&nbsp;window&nbsp;);<br/></span></pre></div><p><span style="color: rgb(0, 0, 0);">比较常用的就是这两种。当然，还有很多方法</span></p><h3><span style="color: rgb(0, 0, 0);">2、闭包</span></h3><p><span style="color: rgb(0, 0, 0);">说到匿名函数，就不得不说说闭包。<br/></span></p><p><span style="color: rgb(0, 0, 0);">使用闭包可以大大减少我们的代码量，使我们的代码看上去更加清晰等等，功能十分强大。</span></p><p><span style="color: rgb(0, 0, 0);">闭包的含义：说白了就是函数的嵌套，内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕。</span></p><div class="code-wrapper"><pre><span style="color: rgb(0, 0, 0);">function checkClosure(){&nbsp;&nbsp;&nbsp;&nbsp;<br/> &nbsp; &nbsp;var&nbsp;str&nbsp;=&nbsp;&#39;rain-man&#39;;&nbsp;&nbsp;&nbsp;&nbsp;<br/> &nbsp; &nbsp;setTimeout(function(){&nbsp;<br/> &nbsp; &nbsp; &nbsp; &nbsp;alert(str);&nbsp;<br/> &nbsp; &nbsp;}&nbsp;//这是一个匿名函数&nbsp;&nbsp;&nbsp;&nbsp;<br/> &nbsp; &nbsp;,&nbsp;2000);<br/>}<br/>checkClosure();<br/></span></pre></div><p><span style="color: rgb(0, 0, 0);">这个例子看上去十分的简单，仔细分析下它的执行过程还是有许多知识点的：checkClosure函数的执行是瞬间的，在checkClosure的函数体内创建了一个变量str，在checkClosure执行完毕之后str并没有被释放，这是因为setTimeout内的匿名函数存在这对str的引用。待到2秒后函数体内的匿名函数被执行完毕,str才被释放。</span></p><p><br/></p><div class="code-wrapper"><pre><span style="color: rgb(0, 0, 0);">function&nbsp;forTimeout(x,&nbsp;y){&nbsp;&nbsp;&nbsp;&nbsp;<br/> &nbsp; &nbsp;alert(x&nbsp;+&nbsp;y);<br/>}<br/>function&nbsp;delay(x&nbsp;,&nbsp;y&nbsp;&nbsp;,&nbsp;time){&nbsp;&nbsp;<br/>&nbsp;&nbsp; setTimeout(&#39;forTimeout(&#39;&nbsp;+&nbsp;&nbsp;x&nbsp;+&nbsp;&#39;,&#39;&nbsp;+&nbsp;&nbsp;y&nbsp;+&nbsp;&#39;)&#39;&nbsp;,&nbsp;time);&nbsp;&nbsp;&nbsp;&nbsp;<br/>}<br/><br/>/* 上面的delay函数十分难以阅读，也不容易编写，但如果使用闭包就可以让代码更加清晰&nbsp;* /<br/>function&nbsp;delay(x&nbsp;,&nbsp;y&nbsp;,&nbsp;time){ <br/>&nbsp;&nbsp;&nbsp;setTimeout( function(){&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;forTimeout(x&nbsp;,&nbsp;y)&nbsp; <br/>&nbsp;&nbsp; },&nbsp;time);&nbsp;&nbsp;&nbsp;&nbsp;<br/>}<br/></span></pre></div><p><a href="http://www.cnblogs.com/rainman/archive/2009/05/04/1448899.html#" name="m2"></a></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box ! important; word-wrap: break-word ! important; color: rgb(0, 0, 0);"><strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;">闭包的作用&nbsp;</strong></span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">在了解闭包的作用之前，我们先了解一下 javascript中的GC机制:在javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象一直会保存在内存中。</span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">在上述例子中，B定义在A中，因此B依赖于A,而外部变量 c 又引用了B, 所以A间接的被 c 引用，也就是说，A不会被GC回收，会一直保存在内存中。为了证明我们的推理，举例：</span></p><div class="code-wrapper"><pre class="brush:js;toolbar:false"><span style="color: rgb(0, 0, 0);">function&nbsp;A(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;count&nbsp;=&nbsp;0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;B(){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count&nbsp;++;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(count);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;B;<br/>}<br/>var&nbsp;c&nbsp;=&nbsp;A();<br/>c();//&nbsp;1<br/>c();//&nbsp;2<br/>c();//&nbsp;3<br/></span></pre></div><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">count是A中的一个变量，它的值在B中被改变，函数B每执行一次，count的值就在原来的基础上累加1。因此，A中的count一直保存在内存中。</span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">这就是闭包的作用，有时候我们需要一个模块中定义这样一个变量：希望这个变量一直保存在内存中但又不会“污染”全局的变量，这个时候，我们就可以用闭包来定义这个模块。</span></p><p><span style="color: rgb(0, 0, 0);">匿名函数最大的用途是创建闭包（这是JavaScript语言的特性之一），并且还可以构建命名空间，以减少全局变量的使用。</span></p><p><span style="color: rgb(0, 0, 0);"><br/></span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box ! important; word-wrap: break-word ! important; color: rgb(0, 0, 0);"><strong style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;">高端写法</strong></span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">上面的写法其实是最简单最原始的写法，而在实际应用中，没人这么玩，特别是在一些大型JS框架中更不会这么写。下面是一个简单的demo组件：</span></p><div class="code-wrapper"><pre class="brush:js;toolbar:false">(function(document){&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;viewport;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;obj&nbsp;=&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init:function(id){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport&nbsp;=&nbsp;document.querySelector(&quot;#&quot;+id);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addChild:function(child){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport.appendChild(child);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeChild:function(child){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport.removeChild(child);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;window.jView&nbsp;=&nbsp;obj;})(document);</pre></div><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行。主要是要理解这种写法是怎么实现闭包功能的。</span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">可以将上面的代码结构分成两部分：(function(){}) 和 () , 第1个()是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加()就表示执行这个匿名函数。</span></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">因此这段代码执行执行过程可以分解如下：</span></p><div class="code-wrapper"><pre class="brush:js;toolbar:false"><span style="color: rgb(0, 0, 0);">var&nbsp;fun =&nbsp;function(document){<br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;viewport;<br/>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;obj&nbsp;=&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init:function(id){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport&nbsp;=&nbsp;document.querySelector(&quot;#&quot;+id);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addChild:function(child){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport.appendChild(child);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeChild:function(child){<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewport.removeChild(child);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;window.jView&nbsp;=&nbsp;obj;<br/>};</span></pre></div><div class="code-wrapper"><pre class="brush:js;toolbar:false"><span style="color: rgb(0, 0, 0);">fun(document);<br/></span></pre></div><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">在这段代码中似乎看到了闭包的影子，但 fun 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：</span></p><div class="code-wrapper"><pre class="brush:js;toolbar:false"><span style="color: rgb(0, 0, 0);">window.jView&nbsp;=&nbsp;obj;<br/></span></pre></div><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><br style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"/></p><p style="margin: 0px; padding: 0px; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important; clear: both; min-height: 1em; white-space: pre-wrap; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 25.6000003814697px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255);"><span style="color: rgb(0, 0, 0);">obj 是在 fun 中定义的一个对象，这个对象中定义了一系列方法， 执行window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj 。而 obj 对象中的函数又引用了 fun 中的变量 viewport ,因此 fun 中的 viewport 不会被GC回收，会一直保存到内存中，所以这种写法满足闭包的条件。</span></p><p><br class="Apple-interchange-newline"/></p><p><a href="http://www.cnblogs.com/rainman/archive/2009/05/04/1448899.html#" name="m3"></a></p><h3><span style="color: rgb(0, 0, 0);">4、内存泄露</span></h3><p><span style="color: rgb(0, 0, 0);">使用闭包十分容易造成浏览器的内存泄露，所以切勿滥用，感兴趣的可以自行查看相关文章，如<a title="JavaScript之详述闭包导致的内存泄露" target="_blank" href="http://blog.csdn.net/u012876641/article/details/29185323">JavaScript之详述闭包导致的内存泄露</a></span><span style="color: rgb(0, 0, 0);">。</span></p><p><span style="color: rgb(0, 0, 0);"><br/></span></p><p><span style="color: rgb(0, 0, 0);">参考：</span></p><p><span style="color: rgb(0, 0, 0);"><a title="让你分分钟学会 javascript 闭包" target="_blank" href="http://www.cnblogs.com/onepixel/p/5062456.html">让你分分钟学会 javascript 闭包</a><br/></span></p><p><span style="color: rgb(0, 0, 0);"><a title="JavaScript中的匿名函数及函数的闭包" target="_blank" href="http://www.cnblogs.com/rainman/archive/2009/05/04/1448899.html">JavaScript中的匿名函数及函数的闭包</a><br/></span></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js正则函数match、exec、test、search、replace、split</title>
    <link href="/2016/10/19/78/"/>
    <url>/2016/10/19/78/</url>
    
    <content type="html"><![CDATA[ <p>js正则函数test、search、match、exec、replace、split使用介绍:</p><p>1.test</p><p>test() 方法用于检测一个字符串是否匹配某个模式.</p><p><span style="font-weight:bold">返回值</span></p><p>如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p><p>例：</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;console.log(pattern.test(str1));console.log(pattern.test(str2));</pre></div><p><img alt="test1.png" src="/upload/ueditor/image/20161019/1476852210171536.png" title="1476852210171536.png"/></p><p><br/></p><p><br/></p><p>2.search</p><p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</p><p><span style="font-weight:bold">返回值</span></p><p>stringObject 中第一个与 regexp 相匹配的子串的起始位置。</p><p>注释：如果没有找到任何匹配的子串，则返回 -1。</p><p><span style="font-weight:bold">说明</span></p><p>search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。</p><p>例：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;console.log(str1.search(pattern));console.log(str2.search(pattern));</pre></div><p><img alt="search.png" src="/upload/ueditor/image/20161019/1476852229434195.png" title="1476852229434195.png"/></p><p><br/></p><p><br/></p><p>3.match</p><p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><p><span style="font-weight:bold">返回值</span></p><p>存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。</p><p><span style="font-weight:bold">说明</span></p><p>match() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。</p><p>如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。 index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。</p><p>如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。</p><p>例：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;<p>console.log(str1.match(pattern));<br>console.log(str2.match(pattern));</pre></div><p><img alt="match.png" src="/upload/ueditor/image/20161019/1476852243110983.png" title="1476852243110983.png"/></p><p><br/></p><p>注意：在全局检索模式下，match() 即不提供与子表达式匹配的文本的信息，也不声明每个匹配子串的位置。如果您需要这些全局检索的信息，可以使用下面介绍的exec()。</p><p><br/></p><p><br/></p><p>4.exec</p><p>exec() 方法用于检索字符串中的正则表达式的匹配。</p><p><span style="font-weight:bold">返回值</span></p><p>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><p><span style="font-weight:bold">说明</span></p><p>exec() 方法的功能非常强大，它是一个通用的方法，而且使用起来也比 test() 方法以及支持正则表达式的 String 对象的方法更为复杂。</p><p>如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。此数组的第 0 个元素是与正则表达式相匹配的文本，第 1 个元素是与 RegExpObject 的第 1 个子表达式相匹配的文本（如果有的话），第 2 个元素是与 RegExpObject 的第 2 个子表达式相匹配的文本（如果有的话），以此类推。除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。我们可以看得出，在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。</p><p>但是，当 RegExpObject 是一个全局正则表达式时，exec() 的行为就稍微复杂一些。它会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。这就是说，您可以通过反复调用 exec() 方法来遍历字符串中的所有匹配文本。当 exec() 再也找不到匹配的文本时，它将返回 null，并把 lastIndex 属性重置为 0。</p><p><span style="font-weight:bold">提示和注释</span></p><p>重要事项：如果在一个字符串中完成了一次模式匹配之后要开始检索新的字符串，就必须手动地把 lastIndex 属性重置为 0。</p><p>有没有看晕，哈哈，还是看例子吧！</p><p><br/></p><p>例1：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;</p><p>console.log(pattern.exec(str2));<br>console.log(pattern.exec(str2));</pre></div><p><img alt="exec1.png" src="/upload/ueditor/image/20161019/1476852258961892.png" title="1476852258961892.png"/></p><p><br/></p><p>例2：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;</p><p>while&nbsp;((result2&nbsp;=&nbsp;pattern.exec(str2))&nbsp;!=&nbsp;null)&nbsp;&nbsp;{<br>console.log(result2);<br>console.log(result2.index);<br>console.log(pattern.lastIndex);<br>}</pre></div><p><img alt="exec2.png" src="/upload/ueditor/image/20161019/1476852273572698.png" title="1476852273572698.png"/></p><p><br/></p><p><br/></p><p>5.replace</p><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p><p><span style="font-weight:bold">返回值</span></p><p>一个新的字符串，是用 <span style="font-style:italic">replacement</span> 替换了 regexp 的第一次匹配或所有匹配之后得到的。</p><p><span style="font-weight:bold">说明</span></p><p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 <span style="font-style:italic">replacement</span> 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。</p><p><span style="font-style:italic">replacement</span> 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p><p><br/></p><p>例1：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;</p><p>console.log(str2);<br>console.log(str2.replace(pattern,&#39;s&#39;));<br>console.log(str2.replace(pattern,&#39;$1&#39;));</pre></div><p><br/><img alt="replace1.png" src="/upload/ueditor/image/20161019/1476852283555276.png" title="1476852283555276.png"/></p><p>例2：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;</p><p>console.log(str2);<br>console.log(str2.replace(pattern,function(match,$1,index,origin){<br>    console.log(index)<br>    console.log(match)<br>    return&nbsp;$1;<br>}));[object&nbsp;Object]</pre></div><p><br/></p><p><br/></p><p>例3：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;</p><p>console.log(str2);<br>console.log(str2.replace(pattern,function(match,group1,group2,index,origin){<br>    console.log(index)<br>    console.log(match)<br>    num&nbsp;=&nbsp;parseInt(group2);&nbsp;+&nbsp;1;<br>    return&nbsp;group1&nbsp;+&nbsp;num;<br>}));</pre></div><p><img alt="replace3.png" src="/upload/ueditor/image/20161019/1476852306560335.png" title="1476852306560335.png"/></p><p><br/></p><p>6.split</p><p>split() 方法用于把一个字符串分割成字符串数组。</p><p><span style="font-weight:bold">返回值</span></p><p>一个字符串数组。该数组是通过在 <span style="font-style:italic">separator</span> 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 <span style="font-style:italic">separator</span> 自身。</p><p>但是，如果 <span style="font-style:italic">separator</span> 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。</p><p>例1：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;a,b,c,d&quot;;</p><p>console.log(str2);<br>console.log(str2.split(&#39;,&#39;));</pre></div><p><img alt="split1.png" src="/upload/ueditor/image/20161019/1476852339373133.png" title="1476852339373133.png"/></p><p><br/></p><p>例2：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;000&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern&nbsp;=&nbsp;/[a-z]\d[a-z]/g;</p><p>console.log(str2);<br>console.log(str2.split(pattern));</pre></div><p><img alt="split2.png" src="/upload/ueditor/image/20161019/1476852351320706.png" title="1476852351320706.png"/></p><p>最后来看个有趣的，</p><p>例3：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">var&nbsp;str1&nbsp;=&nbsp;&quot;a,b,c,d&quot;;<br>var&nbsp;str2&nbsp;=&nbsp;&quot;0a2b3c4d5e&quot;;<br>var&nbsp;pattern5&nbsp;=&nbsp;/\d/g;<br>var&nbsp;pattern&nbsp;=&nbsp;/[a-z]\d[a-z]/g;<br>var&nbsp;pattern1&nbsp;=&nbsp;/([a-z])\d[a-z]/g;<br>var&nbsp;pattern2&nbsp;=&nbsp;/[a-z]\d([a-z])/g;<br>var&nbsp;pattern3&nbsp;=&nbsp;/([a-z])(\d)[a-z]/g;<br>var&nbsp;pattern4&nbsp;=&nbsp;/([a-z])(\d)([a-z])/g;<br>var&nbsp;pattern5&nbsp;=&nbsp;/([a-z]\d[a-z])/g;</p><p>console.log(str2);<br>console.log(str1.split(&#39;,&#39;,2));<br>console.log(str2.split(pattern));<br>console.log(str2.split(pattern1));<br>console.log(str2.split(pattern2));<br>console.log(str2.split(pattern3));<br>console.log(str2.split(pattern4));<br>console.log(str2.split(pattern5));</pre></div><p><img alt="split3.png" src="/upload/ueditor/image/20161019/1476852362643172.png" title="1476852362643172.png"/></p><p><img data-media-type="image" src="http://www.13sai.com/ui/js/ueditor/themes/default/images/spacer.gif" data-attr-org-src-id="8FF4E840C56A4D60A5EC0F565454E9B4" word_img="file:///D:/Documents/ynote/qq92D480B299A9AF1BD73BBC78E568219E/9b32af6bb83f42a7a5df54d1c91002fc/clipboard.png" style="background:url(http://www.13sai.com/ui/js/ueditor/lang/zh-cn/images/localimage.png) no-repeat center center;border:1px solid #ddd"/></p><p>split第二个参数是限制数组长度，而正则如果使用了group（也就是小括号），返回数组也会把group里的字符包含进去。</p><p><br/></p><p>好了，是不是对这些函数有更深的理解，希望对你有所帮助。<br/></p><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>click事件触发了两次事件</title>
    <link href="/2016/10/12/77/"/>
    <url>/2016/10/12/77/</url>
    
    <content type="html"><![CDATA[ <p>之前遇到过click事件触发了两次alert，不明原因，近几天又想起这事，边查查，开放性问题，其实我还不是很明白。</p><p>直接上网友的例子。<br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;!doctype&nbsp;html&gt;&lt;html&gt;&lt;head&gt;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&lt;title&gt;test&lt;/title&gt;&lt;script&nbsp;src=&quot;http://cdn.bootcss.com/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;style&gt;.toggle&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;margin:4px;&nbsp;&nbsp;&nbsp;&nbsp;background-color:#EFEFEF;&nbsp;&nbsp;&nbsp;&nbsp;border-radius:4px;&nbsp;&nbsp;&nbsp;&nbsp;border:1px&nbsp;solid&nbsp;#D0D0D0;&nbsp;&nbsp;&nbsp;&nbsp;overflow:auto;&nbsp;&nbsp;&nbsp;&nbsp;float:left;}.toggle&nbsp;label&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;/*float:left;*/&nbsp;&nbsp;&nbsp;&nbsp;width:4.0em;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;}<p>.toggle&nbsp;label&nbsp;span&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-align:center;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding:3px;<br>&nbsp;&nbsp;&nbsp;&nbsp;display:block;<br>&nbsp;&nbsp;&nbsp;&nbsp;cursor:&nbsp;pointer;<br>}</p><p>.toggle&nbsp;label&nbsp;input&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:-20px;<br>}</p><p>.toggle&nbsp;.input-checked&nbsp;/<em>,&nbsp;.bounds&nbsp;input:checked&nbsp;+&nbsp;span&nbsp;works&nbsp;for&nbsp;firefox&nbsp;and&nbsp;ie9&nbsp;but&nbsp;breaks&nbsp;js&nbsp;for&nbsp;ie8(ONLY)&nbsp;</em>/&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:#404040;<br>&nbsp;&nbsp;&nbsp;&nbsp;color:#F7F7F7;<br>}</p><p>.toggle&nbsp;input:checked&nbsp;+&nbsp;span&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:#404040;<br>&nbsp;&nbsp;&nbsp;&nbsp;color:#F7F7F7;<br>}</p><p>&lt;/style&gt;<br>&lt;/head&gt;</p><p>&lt;body&gt;</p><p>&lt;div&nbsp;class=&quot;toggle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;radio&quot;&nbsp;name=&quot;toggle&quot;&nbsp;value=&quot;1&quot;&gt;&lt;span&gt;radio1&lt;/span&gt;&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&lt;/div&gt;<br>&lt;div&nbsp;class=&quot;toggle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;radio&quot;&nbsp;name=&quot;toggle&quot;&nbsp;value=&quot;2&quot;&gt;&lt;span&gt;radio2&lt;/span&gt;&lt;/label&gt;<br>&lt;/div&gt;<br>&lt;div&nbsp;class=&quot;toggle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;radio&quot;&nbsp;name=&quot;toggle&quot;&nbsp;value=&quot;3&quot;&gt;&lt;span&gt;radio3&lt;/span&gt;&lt;/label&gt;<br>&lt;/div&gt;</p><p>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;script&gt;<br>$(&#39;label&#39;).click(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;$(this).children(&#39;span&#39;).addClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;$(this).children(&#39;input&#39;).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;$(this).parent(&#39;.toggle&#39;).siblings(&#39;.toggle&#39;).children(&#39;label&#39;).children(&#39;span&#39;).removeClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(value);<br>});<br>&lt;/script&gt;</pre></div><p><img alt="QQ截图20161104170622.png" src="/upload/ueditor/image/20161104/1478250569837601.png" title="1478250569837601.png"/></p><p>有网友改了下js</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">$(&#39;label&#39;).click(function(event){<br>&nbsp;&nbsp;&nbsp;&nbsp;$(this).children(&#39;span&#39;).addClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;$(this).children(&#39;input&#39;).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;$(this).parent(&#39;.toggle&#39;).siblings(&#39;.toggle&#39;).children(&#39;label&#39;).children(&#39;span&#39;).removeClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;&nbsp;&nbsp;//return&nbsp;false<br>});</pre></div><p><code><img alt="2222.png" src="/upload/ueditor/image/20161104/1478250595583948.png" title="1478250595583948.png"/></code></p><p><code>event.target.type</code>主要是这个会触发两个一个是<code>undefined</code>一个是<code>radio</code>。因为label关联的radio也被有一个关联操作。当label被点击时，默认radio也被点击了一次。<br/>解决方法你可以</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">$(&#39;span&#39;).click(function&nbsp;()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;$(&#39;span&#39;).index($(this));<br>&nbsp;&nbsp;&nbsp;&nbsp;$(this).addClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;$(&#39;input&#39;).eq(i).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;span&#39;).not($(this)).removeClass(&#39;input-checked&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(value);<br>})</pre></div><p><code><img alt="22.png" src="/upload/ueditor/image/20161104/1478250610278955.png" title="1478250610278955.png"/></code></p><p>另一友人：</p><p>修改css<br/></p><div class="code-wrapper"><pre class="brush:css;toolbar:false">.toggle&nbsp;label&nbsp;input&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:0px;<br>&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0px;<br>&nbsp;&nbsp;&nbsp;&nbsp;width:50px;<br>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;20px;<br>&nbsp;&nbsp;&nbsp;&nbsp;z-index:&nbsp;9999;<br>&nbsp;&nbsp;&nbsp;&nbsp;opacity:&nbsp;0;<br>}</pre></div><p><br/></p><p><br/></p><p><img alt="22.png" src="/upload/ueditor/image/20161104/1478250620741488.png" title="1478250620741488.png"/></p><p>解决问题，但我不知道为什么，你能告诉我么？<img src="http://img.baidu.com/hi/jx2/j_0057.gif"/></p><p>还有在js后加上return false太阳解决问题。<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>background-image的url属性为空</title>
    <link href="/2016/10/11/76/"/>
    <url>/2016/10/11/76/</url>
    
    <content type="html"><![CDATA[<p>前天同事开发时，遇到一个诡异的问题，每次刷新页面，浏览量会加2，而不是想要的加1。</p><p>检查了代码控制器，没有丝毫问题，上次出现浏览量会加2的情况是因为多写了一次display，只能去头去尾，一部分一部分排查，最后发现是头部用了个background，里面的url是空值，去掉，正常。</p><p>刚查了下网上确实有出现background-image的url属性为空导致二次提交的情况，同事出现浏览量加2也是因此导致。</p><p>说明：</p><ol><li>改变代码习惯。严禁代码中，url/href/src 值为空或 # . 这应该是目前最好的一种方式。</li><li>避免空链接属性空的链接属性是指img、link、script、ifrrame元素的src或href属性被设置了，但是属性却为空。早些版本的Webkit内核浏览器 与Firefox 会把空地址解析为当前页面的地址。如果页面内有多个空链接属性元素，当前页面的服务器则会被请求多次，增加服务器的负载。相较桌面浏览器对内核的更新升级较积极，这个问题在移动浏览器上问题可能较严重。<br>  幸运的是所有主流浏览器面对iframe的src属性为空时，会把空地址解析为about:blank地址，而不会向服务器发出额外的请求。因此链接避免不了出现空的情况，可以用about：blank来代替空的情况。</li></ol><p>贴上文章: </p><ul><li><a href="https://lifesinger.wordpress.com/2011/09/22/empty-src-is-dangerous/"> 空路径对页面性能的影响</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又见BOM</title>
    <link href="/2016/09/27/75/"/>
    <url>/2016/09/27/75/</url>
    
    <content type="html"><![CDATA[ <p style="text-indent: 0em;"><span style="font-family: 宋体,SimSun;">之前写过BOM的问题，今天又一次遇见。进入后台，验证码不显示，各种查找，找不到原因，纳闷，然后同事修改了入口文件编码格式为不加BOM，解决问题。</span></p><p><br/></p><p style="text-indent: 0em;"><span style="font-family: 宋体,SimSun;">BOM —— Byte Order Mark，中文名译作“字节顺序标记”。在这里找到一段关于 BOM 的说明：</span></p><p style="text-indent: 0em;"><span style="font-family: 宋体,SimSun;">在UCS 编码中有一个叫做 &quot;Zero Width No-Break Space&quot; ，中文译名作“零宽无间断间隔”的字符，它的编码是 FEFF。而 FFFE 在 UCS 中是不存在的字符，所以不应该出现在实际传输中。UCS 规范建议我们在传输字节流前，先传输字符 &quot;Zero Width No-Break Space&quot;。这样如果接收者收到 FEFF，就表明这个字节流是 Big-Endian 的；如果收到FFFE，就表明这个字节流是 Little- Endian 的。因此字符 &quot;Zero Width No-Break Space&quot; （零宽无间断间隔）又被称作 BOM。<br/><br/>UTF-8 不需要 BOM 来表明字节顺序，但可以用 BOM 来表明编码方式。字符 &quot;Zero Width No-Break Space&quot; 的 UTF-8 编码是 EF BB BF。所以如果接收者收到以 EF BB BF 开头的字节流，就知道这是 UTF-8编码了。Windows 就是使用 BOM 来标记文本文件的编码方式的。<br/><br/>字符U+FEFF如果出现在字节流的开头，则用来标识该字节流的字节序，是高位在前还是低位在前。如果它出现在字节流的中间，则表达零宽度非换行空格的意义，用户看起来就是一个空格。从Unicode3.2开始，U+FEFF只能出现在字节流的开头，只能用于标识字节序，就如它的名称——字节序标记——所表示的一样；除此以外的用法已被舍弃。取而代之的是，使用U+2060来表达零宽度无断空白。<br/><br/>类似WINDOWS自带的记事本等软件，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM）。它是一串隐藏的字符，用于让记事本等编辑器识别这个文件是否以UTF-8编码。对于一般的文件，这样并不会产生什么麻烦。</span></p><p style="text-indent: 0em;"><span style="font-family: 宋体,SimSun;">但对于 PHP来说，BOM是个大麻烦。PHP并不会忽略BOM，所以在读取、包含或者引用这些文件时，会把BOM作为该文件开头正文的一部分。根据嵌入式语言的特点，这串字符将被直接执行（显示）出 来。由此造成即使页面的 top padding 设置为0，也无法让整个网页紧贴浏览器顶部，因为在html一开头有这3个字符呢！</span></p><p><br/></p><p style="text-indent: 0em;"><span style="font-family: 宋体,SimSun;"><span style="font-family: 宋体; color: black;">如果处理</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">PHP</span><span style="font-family: 宋体; color: black;">文件出现以下问题，多半是因为这个原因：</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;"> <br/></span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">1. </span><span style="font-family: 宋体; color: black;">验证码图片不显示；</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;"><br/></span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">2.</span><span style="font-family: 宋体; color: black;">页面显示一个“锘”字，其他一片空白；</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;"><br/></span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">3.</span><span style="font-family: 宋体; color: black;">不能登录或退出；</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;"><br/></span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">4.</span><span style="font-family: 宋体; color: black;">页顶出现一行空白；</span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;"><br/></span><span style="font-family: &quot;Verdana&quot;,&quot;sans-serif&quot;; color: black;">5.</span><span style="font-family: 宋体; color: black;">页顶出现错误警告。</span></span></p><p><br/><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thinkphp实现ajax分页</title>
    <link href="/2016/09/24/73/"/>
    <url>/2016/09/24/73/</url>
    
    <content type="html"><![CDATA[<p>前两天销售那边说能不能做无刷新分页，我说可以，比正常分页麻烦一点，之前有见过。</p><p>然后想想，试试看，搜了代码，测试修改，成功了。</p><h2 id="ajaxPage-class-php"><a href="#ajaxPage-class-php" class="headerlink" title="ajaxPage.class.php"></a>ajaxPage.class.php</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxPage</span> </span>&#123;    <span class="hljs-comment">// 分页栏每页显示的页数</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rollPage</span> = <span class="hljs-number">5</span>;    <span class="hljs-comment">// 页数跳转时要带的参数</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$parameter</span>  ;    <span class="hljs-comment">// 默认列表每页显示行数</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$listRows</span> = <span class="hljs-number">20</span>;    <span class="hljs-comment">// 起始行数</span>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$firstRow</span> ;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$ajax_func</span> ;    <span class="hljs-comment">// 分页总页面数</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$totalPages</span>  ;    <span class="hljs-comment">// 总行数</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$totalRows</span>  ;    <span class="hljs-comment">// 当前页数</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$nowPage</span>    ;    <span class="hljs-comment">// 分页的栏的总页数</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$coolPages</span>   ;    <span class="hljs-comment">// 分页显示定制</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span>  =    <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;header&#x27;</span>=&gt;<span class="hljs-string">&#x27;条记录&#x27;</span>,<span class="hljs-string">&#x27;prev&#x27;</span>=&gt;<span class="hljs-string">&#x27;上一页&#x27;</span>,<span class="hljs-string">&#x27;next&#x27;</span>=&gt;<span class="hljs-string">&#x27;下一页&#x27;</span>,<span class="hljs-string">&#x27;first&#x27;</span>=&gt;<span class="hljs-string">&#x27;第一页&#x27;</span>,<span class="hljs-string">&#x27;last&#x27;</span>=&gt;<span class="hljs-string">&#x27;最后一页&#x27;</span>,<span class="hljs-string">&#x27;theme&#x27;</span>=&gt;<span class="hljs-string">&#x27;&lt;ul class=&quot;pagination&quot;&gt;&lt;li class=&quot;prev &quot;&gt;&lt;a&gt; %totalRow% %header% %nowPage%/%totalPage% 页 &lt;/a&gt;&lt;/li&gt; %first% %prePage% %upPage% %linkPage% %downPage%  %nextPage% %end% &lt;/ul&gt;&#x27;</span>);    <span class="hljs-comment">// 默认分页变量名</span>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$varPage</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$totalRows</span>,<span class="hljs-variable">$listRows</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$ajax_func</span>,<span class="hljs-variable">$parameter</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;totalRows = <span class="hljs-variable">$totalRows</span>;        <span class="hljs-keyword">$this</span>-&gt;ajax_func = <span class="hljs-variable">$ajax_func</span>;        <span class="hljs-keyword">$this</span>-&gt;parameter = <span class="hljs-variable">$parameter</span>;        <span class="hljs-keyword">$this</span>-&gt;varPage = C(<span class="hljs-string">&#x27;VAR_PAGE&#x27;</span>) ? C(<span class="hljs-string">&#x27;VAR_PAGE&#x27;</span>) : <span class="hljs-string">&#x27;p&#x27;</span> ;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$listRows</span>)) &#123;            <span class="hljs-keyword">$this</span>-&gt;listRows = intval(<span class="hljs-variable">$listRows</span>);        &#125;        <span class="hljs-keyword">$this</span>-&gt;totalPages = ceil(<span class="hljs-keyword">$this</span>-&gt;totalRows/<span class="hljs-keyword">$this</span>-&gt;listRows);     <span class="hljs-comment">//总页数</span>        <span class="hljs-keyword">$this</span>-&gt;coolPages  = ceil(<span class="hljs-keyword">$this</span>-&gt;totalPages/<span class="hljs-keyword">$this</span>-&gt;rollPage);        <span class="hljs-keyword">$this</span>-&gt;nowPage  = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-keyword">$this</span>-&gt;varPage])?intval(<span class="hljs-variable">$_GET</span>[<span class="hljs-keyword">$this</span>-&gt;varPage]):<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;totalPages) &amp;&amp; <span class="hljs-keyword">$this</span>-&gt;nowPage&gt;<span class="hljs-keyword">$this</span>-&gt;totalPages) &#123;            <span class="hljs-keyword">$this</span>-&gt;nowPage = <span class="hljs-keyword">$this</span>-&gt;totalPages;        &#125;        <span class="hljs-keyword">$this</span>-&gt;firstRow = <span class="hljs-keyword">$this</span>-&gt;listRows*(<span class="hljs-keyword">$this</span>-&gt;nowPage-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setConfig</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span></span>) </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-variable">$name</span>])) &#123;            <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-variable">$name</span>]    =   <span class="hljs-variable">$value</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == <span class="hljs-keyword">$this</span>-&gt;totalRows) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;        <span class="hljs-variable">$p</span> = <span class="hljs-keyword">$this</span>-&gt;varPage;        <span class="hljs-variable">$nowCoolPage</span> = ceil(<span class="hljs-keyword">$this</span>-&gt;nowPage/<span class="hljs-keyword">$this</span>-&gt;rollPage);        <span class="hljs-variable">$url</span>  =  <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].(strpos(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>],<span class="hljs-string">&#x27;?&#x27;</span>)?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-string">&quot;?&quot;</span>).<span class="hljs-keyword">$this</span>-&gt;parameter;        <span class="hljs-variable">$parse</span> = parse_url(<span class="hljs-variable">$url</span>);        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$parse</span>[<span class="hljs-string">&#x27;query&#x27;</span>])) &#123;            parse_str(<span class="hljs-variable">$parse</span>[<span class="hljs-string">&#x27;query&#x27;</span>],<span class="hljs-variable">$params</span>);            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$params</span>[<span class="hljs-variable">$p</span>]);            <span class="hljs-variable">$url</span>   =  <span class="hljs-variable">$parse</span>[<span class="hljs-string">&#x27;path&#x27;</span>].<span class="hljs-string">&#x27;?&#x27;</span>.http_build_query(<span class="hljs-variable">$params</span>);        &#125;        <span class="hljs-comment">//上下翻页字符串</span>        <span class="hljs-variable">$upRow</span>   = <span class="hljs-keyword">$this</span>-&gt;nowPage-<span class="hljs-number">1</span>;        <span class="hljs-variable">$downRow</span> = <span class="hljs-keyword">$this</span>-&gt;nowPage+<span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$upRow</span>&gt;<span class="hljs-number">0</span>)&#123;            <span class="hljs-variable">$upPage</span>     =   <span class="hljs-string">&quot;&lt;li class=&#x27;prev&#x27;&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$upRow</span>.<span class="hljs-string">&quot;)&#x27;&gt;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;prev&#x27;</span>].<span class="hljs-string">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$upPage</span>     =   <span class="hljs-string">&quot;&quot;</span>;        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$downRow</span> &lt;= <span class="hljs-keyword">$this</span>-&gt;totalPages)&#123;            <span class="hljs-variable">$downPage</span>   =   <span class="hljs-string">&quot;&lt;li class=&#x27;next&#x27;&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$downRow</span>.<span class="hljs-string">&quot;)&#x27;&gt;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;next&#x27;</span>].<span class="hljs-string">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$downPage</span>   =   <span class="hljs-string">&quot;&quot;</span>;        &#125;                    <span class="hljs-comment">// &lt;&lt; &lt; &gt; &gt;&gt;</span>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$nowCoolPage</span> == <span class="hljs-number">1</span>)&#123;            <span class="hljs-variable">$theFirst</span> = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-variable">$prePage</span> = <span class="hljs-string">&quot;&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$preRow</span> =  <span class="hljs-keyword">$this</span>-&gt;nowPage-<span class="hljs-keyword">$this</span>-&gt;rollPage;            <span class="hljs-variable">$prePage</span> = <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$preRow</span>.<span class="hljs-string">&quot;)&#x27;&gt;上&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;rollPage.<span class="hljs-string">&quot;页&lt;/a&gt;&lt;/li&gt;&quot;</span>;            <span class="hljs-variable">$theFirst</span> = <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(1)&#x27; &gt;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;first&#x27;</span>].<span class="hljs-string">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span>;        &#125;        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$nowCoolPage</span> == <span class="hljs-keyword">$this</span>-&gt;coolPages)&#123;            <span class="hljs-variable">$nextPage</span> = <span class="hljs-string">&quot;&quot;</span>;            <span class="hljs-variable">$theEnd</span>=<span class="hljs-string">&quot;&quot;</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-variable">$nextRow</span> = <span class="hljs-keyword">$this</span>-&gt;nowPage+<span class="hljs-keyword">$this</span>-&gt;rollPage;            <span class="hljs-variable">$theEndRow</span> = <span class="hljs-keyword">$this</span>-&gt;totalPages;            <span class="hljs-variable">$nextPage</span> = <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$nextRow</span>.<span class="hljs-string">&quot;)&#x27; &gt;下&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;rollPage.<span class="hljs-string">&quot;页&lt;/a&gt;&lt;/li&gt;&quot;</span>;            <span class="hljs-variable">$theEnd</span> = <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$theEndRow</span>.<span class="hljs-string">&quot;)&#x27; &gt;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;last&#x27;</span>].<span class="hljs-string">&quot;&lt;/a&gt;&lt;/li&gt;&quot;</span>;        &#125;        <span class="hljs-comment">// 1 2 3 4 5</span>        <span class="hljs-variable">$linkPage</span> = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-keyword">$this</span>-&gt;rollPage;<span class="hljs-variable">$i</span>++)&#123;            <span class="hljs-variable">$page</span>=(<span class="hljs-variable">$nowCoolPage</span>-<span class="hljs-number">1</span>)*<span class="hljs-keyword">$this</span>-&gt;rollPage+<span class="hljs-variable">$i</span>;            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span>!=<span class="hljs-keyword">$this</span>-&gt;nowPage)&#123;                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span>&lt;=<span class="hljs-keyword">$this</span>-&gt;totalPages)&#123;                   <span class="hljs-variable">$linkPage</span> .= <span class="hljs-string">&quot;&lt;li&gt;&lt;a href=&#x27;javascript:&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;ajax_func.<span class="hljs-string">&quot;(&quot;</span>.<span class="hljs-variable">$page</span>.<span class="hljs-string">&quot;)&#x27;&gt;&amp;nbsp;&quot;</span>.<span class="hljs-variable">$page</span>.<span class="hljs-string">&quot;&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&quot;</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;totalPages != <span class="hljs-number">1</span>)&#123;                    <span class="hljs-variable">$linkPage</span> .= <span class="hljs-string">&quot;&lt;li&gt;&lt;span class=&#x27;current&#x27;&gt;&quot;</span>.<span class="hljs-variable">$page</span>.<span class="hljs-string">&quot;&lt;/span&gt;&lt;/li&gt;&quot;</span>;                &#125;            &#125;        &#125;        <span class="hljs-variable">$pageStr</span>  =  str_replace(            <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;%header%&#x27;</span>,<span class="hljs-string">&#x27;%nowPage%&#x27;</span>,<span class="hljs-string">&#x27;%totalRow%&#x27;</span>,<span class="hljs-string">&#x27;%totalPage%&#x27;</span>,<span class="hljs-string">&#x27;%upPage%&#x27;</span>,<span class="hljs-string">&#x27;%downPage%&#x27;</span>,<span class="hljs-string">&#x27;%first%&#x27;</span>,<span class="hljs-string">&#x27;%prePage%&#x27;</span>,<span class="hljs-string">&#x27;%linkPage%&#x27;</span>,<span class="hljs-string">&#x27;%nextPage%&#x27;</span>,<span class="hljs-string">&#x27;%end%&#x27;</span>),            <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;header&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;nowPage,<span class="hljs-keyword">$this</span>-&gt;totalRows,<span class="hljs-keyword">$this</span>-&gt;totalPages,<span class="hljs-variable">$upPage</span>,<span class="hljs-variable">$downPage</span>,<span class="hljs-variable">$theFirst</span>,<span class="hljs-variable">$prePage</span>,<span class="hljs-variable">$linkPage</span>,<span class="hljs-variable">$nextPage</span>,<span class="hljs-variable">$theEnd</span>),<span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;theme&#x27;</span>]);        <span class="hljs-keyword">return</span> <span class="hljs-variable">$pageStr</span>;    &#125;&#125;</code></pre></div><h2 id="IndexAction"><a href="#IndexAction" class="headerlink" title="IndexAction"></a>IndexAction</h2><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new</span>(<span class="hljs-params"></span>)</span>&#123;    import(<span class="hljs-string">&quot;ORG.Util.ajaxPage&quot;</span>);<span class="hljs-comment">// 导入分页类  注意导入的是自己写的AjaxPage类</span>    <span class="hljs-variable">$m</span> = M(<span class="hljs-string">&#x27;vw_article&#x27;</span>);    <span class="hljs-variable">$count</span> = <span class="hljs-variable">$m</span>-&gt;count(); <span class="hljs-comment">//计算记录数</span>    <span class="hljs-variable">$limitRows</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// 设置每页记录数</span>           <span class="hljs-comment">//第三个参数是你需要调用换页的ajax函数名</span>    <span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> AjaxPage(<span class="hljs-variable">$count</span>, <span class="hljs-variable">$limitRows</span>,<span class="hljs-string">&quot;ajaxpage&quot;</span>);    <span class="hljs-variable">$limit</span> = <span class="hljs-variable">$p</span>-&gt;firstRow . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$p</span>-&gt;listRows;    <span class="hljs-variable">$p</span>-&gt;setConfig(<span class="hljs-string">&#x27;theme&#x27;</span>,<span class="hljs-string">&#x27;&lt;ul class=&quot;pagination&quot;&gt; %first% %prePage% %upPage% %linkPage% %downPage%  %nextPage% %end% &lt;/ul&gt;&#x27;</span>);      <span class="hljs-variable">$data</span> = <span class="hljs-variable">$m</span>-&gt;limit(<span class="hljs-variable">$limit</span>)-&gt;select(); <span class="hljs-comment">// 查询数据</span>    <span class="hljs-variable">$page</span> = <span class="hljs-variable">$p</span>-&gt;show(); <span class="hljs-comment">// 产生分页信息，AJAX的连接在此处生成</span>    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-variable">$data</span>);    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$page</span>);    <span class="hljs-keyword">$this</span>-&gt;display();&#125;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newslist</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-variable">$p</span> = I(<span class="hljs-string">&#x27;p&#x27;</span>);    import(<span class="hljs-string">&quot;ORG.Util.ajaxPage&quot;</span>);    <span class="hljs-variable">$m</span> = M(<span class="hljs-string">&#x27;vw_article&#x27;</span>);    <span class="hljs-variable">$count</span> = <span class="hljs-variable">$m</span>-&gt;count(); <span class="hljs-comment">//计算记录数</span>    <span class="hljs-variable">$limitRows</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// 设置每页记录数</span>       <span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> AjaxPage(<span class="hljs-variable">$count</span>, <span class="hljs-variable">$limitRows</span>,<span class="hljs-string">&quot;ajaxpage&quot;</span>); <span class="hljs-comment">//第三个参数是你需要调用换页的ajax函数名</span>    <span class="hljs-variable">$limit</span> = <span class="hljs-variable">$p</span>-&gt;firstRow . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$p</span>-&gt;listRows;    <span class="hljs-variable">$p</span>-&gt;setConfig(<span class="hljs-string">&#x27;theme&#x27;</span>,<span class="hljs-string">&#x27;&lt;ul class=&quot;pagination&quot;&gt; %first% %prePage% %upPage% %linkPage% %downPage%  %nextPage% %end% &lt;/ul&gt;&#x27;</span>);      <span class="hljs-variable">$data</span> = <span class="hljs-variable">$m</span>-&gt;limit(<span class="hljs-variable">$limit</span>)-&gt;select(); <span class="hljs-comment">// 查询数据</span>    <span class="hljs-variable">$page</span> = <span class="hljs-variable">$p</span>-&gt;show(); <span class="hljs-comment">// 产生分页信息，AJAX的连接在此处生成</span>    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-variable">$data</span>);    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$page</span>);    <span class="hljs-keyword">$this</span>-&gt;display(); &#125;</code></pre></div><h2 id="tpl"><a href="#tpl" class="headerlink" title="tpl"></a>tpl</h2><div class="code-wrapper"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page row&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;./sidebar&quot;</span> /&gt;</span></span><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-right&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ajaxPage&quot;</span>&gt;</span></span><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-position&quot;</span>&gt;</span></span><span class="xml">            </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;:U(&#x27;Home/Index/index&#x27;)&#125;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml">&gt;&gt;</span><span class="xquery">&#123;<span class="hljs-variable">$navname</span>&#125;</span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><span class="xml">        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-list&quot;</span>&gt;</span></span><span class="xml">            </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">            </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">volist</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vo&quot;</span>&gt;</span></span><span class="xml">                </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span> &gt;</span></span><span class="xml">                        </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;:U(&#x27;Home/Index/news&#x27;,array(&#x27;art_id&#x27;=&gt;$vo[&#x27;art_id&#x27;],&#x27;art_column&#x27;=&gt;$vo[&#x27;art_column&#x27;]))&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wd-fr&quot;</span>&gt;</span></span><span class="xquery">&#123;<span class="hljs-variable">$vo</span>[<span class="hljs-string">&#x27;art_post_time&#x27;</span>]&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xquery">&#123;:mb_substr(<span class="hljs-variable">$vo</span>[<span class="hljs-string">&#x27;art_name&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><span class="xml"></span><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">volist</span>&gt;</span></span><span class="xml"></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wdphp-page&quot;</span>&gt;</span></span><span class="xml">            </span><span class="xquery">&#123;<span class="hljs-variable">$page</span>&#125;</span><span class="xml"></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>    &lt;/div&gt;&lt;/div&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajaxpage</span>(<span class="hljs-params">id</span>)</span></span></span><span class="xquery">&#123;</span><span class="xquery">        var<span class="hljs-built_in"> id</span> =<span class="hljs-built_in"> id</span>;</span><span class="xquery">        //post可不行</span><span class="xquery">        $.ajax(&#123;</span><span class="xquery">            url: <span class="hljs-string">&quot;&#123;:U(&#x27;Home/Index/userlist&#x27;)&#125;</span></span><span class="xml">&quot;,</span><span class="xml">            data: </span><span class="xquery"><span class="hljs-string">&#123;&#x27;p&#x27;:id&#125;</span></span><span class="xml"><span class="javascript">,</span></span><span class="javascript"><span class="xml">            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span></span></span><span class="xquery"><span class="hljs-string">&#123;</span></span><span class="hljs-string"><span class="xquery">                $(&quot;</span>#ajaxPage<span class="hljs-string">&quot;).html(html);</span></span><span class="hljs-string"><span class="xquery">            &#125;</span></span><span class="xml"></span><span class="xml">        &#125;);</span><span class="xml"></span><span class="xml">     &#125; </span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre></div><p>好了，是不是还蛮顺手。</p><p>但是如果时候那种下滑无刷新的呢，怎么做？加js?</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信扫码登录</title>
    <link href="/2016/09/21/72/"/>
    <url>/2016/09/21/72/</url>
    
    <content type="html"><![CDATA[ <p>准备：申请微信开发者，申请认证，获取appid与appserect。</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php<p>class&nbsp;WechatAction&nbsp;extends&nbsp;AppbaseAction&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$appid&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$secret&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;//private&nbsp;$scope&nbsp;=&nbsp;&quot;snsapi_base&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$scope&nbsp;=&nbsp;&quot;snsapi_login&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;/<em>继承父类</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;function&nbsp;_initialize()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::_initialize();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//微信登录，同意授权，获取code<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;oauthLogin(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$appid&nbsp;=&nbsp;$this-&gt;appid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$scope&nbsp;=&nbsp;$this-&gt;scope;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//回调域<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$redirect_uri&nbsp;=&nbsp;urlencode(&#39;<a href="http://www.13sai.com&/#39;.U(&#39;Member/Wechat/oauthCallback&#39;)">http://www.13sai.com&#39;.U(&#39;Member/Wechat/oauthCallback&#39;)</a>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$url&nbsp;=&nbsp;&quot;<a href="https://open.weixin.qq.com/connect/qrconnect?appid=$appid&amp;redirect_uri=$redirect_uri&amp;response_type=code&amp;scope=$scope&amp;state=1#wechat_redirect">https://open.weixin.qq.com/connect/qrconnect?appid=$appid&amp;redirect_uri=$redirect_uri&amp;response_type=code&amp;scope=$scope&amp;state=1#wechat_redirect</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$url;die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;Location:&quot;.$url);<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//OAthu2.0&nbsp;回调函数<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;oauthCallback(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$appid&nbsp;=&nbsp;$this-&gt;appid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$secret&nbsp;=&nbsp;$this-&gt;secret;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$code&nbsp;=&nbsp;$<em>GET[&quot;code&quot;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取得openid&nbsp;,access_token<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$oauth2Url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=$appid&amp;secret=$secret&amp;code=$code&amp;grant_type=authorization_code">https://api.weixin.qq.com/sns/oauth2/access_token?appid=$appid&amp;secret=$secret&amp;code=$code&amp;grant_type=authorization_code</a>&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$oauth2&nbsp;=&nbsp;z_get_json($oauth2Url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//根据全局access_token和openid查询用户信息&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$access_token&nbsp;=&nbsp;$oauth2[&quot;access_token&quot;];&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$openid&nbsp;=&nbsp;$oauth2[&#39;openid&#39;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$openid;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$get_user_info_url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/sns/userinfo?access_token=$access_token&amp;openid=$openid&amp;lang=zh_CN">https://api.weixin.qq.com/sns/userinfo?access_token=$access_token&amp;openid=$openid&amp;lang=zh_CN</a>&quot;;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$userinfo&nbsp;=&nbsp;z_get_json($get_user_info_url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dump($userinfo);die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//判断注册还是登录<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($userinfo[&#39;openid&#39;]!=&#39;&#39;){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$row&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;where(&quot;m_weixin_unionid=&#39;%s&#39;&quot;,$userinfo[&quot;unionid&quot;])-&gt;find();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($row){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_id&#39;,$row[&#39;m_id&#39;]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_nick_name&#39;,$row[&#39;m_nick_name&#39;]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_login_name&#39;,$row[&#39;m_login_name&#39;]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//U(&#39;Home/Home/index&#39;,null,true,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;/&quot;;&lt;/script&gt;&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建新用户<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;max(&#39;m_id&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rand&nbsp;=&nbsp;mt_rand(1000,9999);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_sex&#39;]&nbsp;&nbsp;=&nbsp;$userinfo[&#39;sex&#39;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_avatar&#39;]&nbsp;&nbsp;=&nbsp;$userinfo[&#39;headimgurl&#39;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_nick_name&#39;]&nbsp;&nbsp;=&nbsp;mb_substr($userinfo[&#39;nickname&#39;],0,6,&quot;utf-8&quot;)&nbsp;.&nbsp;$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_login_name&#39;]&nbsp;=&nbsp;&#39;wx</em>&#39;.$rand.&#39;&#39;.$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_password&#39;]&nbsp;=&nbsp;md5(md5(time()));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_weixin_unionid&#39;]&nbsp;&nbsp;=&nbsp;$userinfo[&quot;unionid&quot;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;from&#39;]&nbsp;=&nbsp;&#39;weixin&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;&#39;.U(&#39;Member/Index/oauthBind&#39;).&#39;&quot;;&lt;/script&gt;&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$str;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</pre></div><p>其中的z_get_json方法如下：</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">function&nbsp;z_get_json($url){<br>&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYPEER,&nbsp;FALSE);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_SSL_VERIFYHOST,&nbsp;FALSE);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;1);<br>&nbsp;&nbsp;&nbsp;&nbsp;$output&nbsp;=&nbsp;curl_exec($ch);<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;json_decode($output,&nbsp;true);<br>}</pre></div><p>前台：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;a&nbsp;href=&quot;{:U(&#39;Member/Wechat/oauthLogin&#39;)}&quot;&gt;&lt;img&nbsp;src=&quot;/webui/home/images/weixin.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;</pre></div><p>效果：</p><p><img alt="QQ截图20161104172914.png" src="/upload/ueditor/image/20161104/1478251790687485.png" title="1478251790687485.png"/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php字符串中双引号及反斜杠替换问题</title>
    <link href="/2016/09/06/71/"/>
    <url>/2016/09/06/71/</url>
    
    <content type="html"><![CDATA[<p>需要转义下</p><p>php字符串中双引号替换:</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-variable">$tmp_data</span> = str_replace(<span class="hljs-string">&quot;&quot;&quot;,&quot;&quot;,$tmp_data);双引号替换为空字符串</span><span class="hljs-string"></span><span class="hljs-string">$tmp_data = str_replace(&quot;&quot;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-variable">$tmp_data</span>);双引号替换为单引号</code></pre></div><p>php字符串中替换反斜杠</p><div class="code-wrapper"><pre><code class="hljs autoit">$tmp_data = str_replace(<span class="hljs-string">&quot;\&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$tmp_data)<span class="hljs-comment">; 反斜杠替换为空字符串</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信登录</title>
    <link href="/2016/09/04/70/"/>
    <url>/2016/09/04/70/</url>
    
    <content type="html"><![CDATA[ <p>微信登录相比qq登录要简单，直接上代码。</p><p>同样需要申请appid与secret</p><p>WechatAction</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php<p>class&nbsp;WechatAction&nbsp;extends&nbsp;AppbaseAction&nbsp;{<br>//申请的appid&nbsp;secret&nbsp;<br>private&nbsp;$appid&nbsp;=&nbsp;&quot;&quot;;<br>private&nbsp;$secret&nbsp;=&nbsp;&quot;&quot;;<br>private&nbsp;$scope&nbsp;=&nbsp;&quot;snsapi_userinfo&quot;;</p><p>/<em>继承父类</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;function&nbsp;_initialize()&nbsp;{<br>parent::_initialize();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;index(){<br>&nbsp;&nbsp;&nbsp;echo&nbsp;111;<br>&nbsp;&nbsp;&nbsp;//echo&nbsp;$this-&gt;appid;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>//微信登录，同意授权，获取code<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;oauthLogin(){<br>$appid&nbsp;=&nbsp;$this-&gt;appid;<br>$scope&nbsp;=&nbsp;$this-&gt;scope;<br>$redirect_uri&nbsp;=&nbsp;urlencode(&#39;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Wechat/oauthCallback&#39;)">http://www.13sai.com&#39;.U(&#39;Wap/Wechat/oauthCallback&#39;)</a>);<br>$url&nbsp;=&nbsp;&quot;<a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=$appid&amp;redirect_uri=$redirect_uri&amp;response_type=code&amp;scope=$scope&amp;state=1#wechat_redirect">https://open.weixin.qq.com/connect/oauth2/authorize?appid=$appid&amp;redirect_uri=$redirect_uri&amp;response_type=code&amp;scope=$scope&amp;state=1#wechat_redirect</a>&quot;;<br>//echo&nbsp;$url;die();<br>header(&quot;Location:&quot;.$url);<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//OAthu2.0&nbsp;回调函数<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;oauthCallback(){<br>$appid&nbsp;=&nbsp;$this-&gt;appid;<br>$secret&nbsp;=&nbsp;$this-&gt;secret;<br>$code&nbsp;=&nbsp;$_GET[&quot;code&quot;];<br>//echo&nbsp;$code.&#39;&lt;br&gt;&#39;;<br>&nbsp;<br>//第一步:取全局access_token<br>$url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$appid&amp;secret=$secret">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$appid&amp;secret=$secret</a>&quot;;<br>$token&nbsp;=&nbsp;z_get_json($url);<br>//dump($token).&#39;&lt;br&gt;&#39;;</p><p>//第二步:取得openid<br>$oauth2Url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=$appid&amp;secret=$secret&amp;code=$code&amp;grant_type=authorization_code">https://api.weixin.qq.com/sns/oauth2/access_token?appid=$appid&amp;secret=$secret&amp;code=$code&amp;grant_type=authorization_code</a>&quot;;<br>$oauth2&nbsp;=&nbsp;z_get_json($oauth2Url);<br>//dump($oauth2).&#39;&lt;br&gt;&#39;;<br>&nbsp;<br>//第三步:根据全局access_token和openid查询用户信息&nbsp;&nbsp;<br>$access_token&nbsp;=&nbsp;$token[&quot;access_token&quot;];&nbsp;&nbsp;<br>$openid&nbsp;=&nbsp;$oauth2[&#39;openid&#39;];&nbsp;&nbsp;<br>$get_user_info_url&nbsp;=&nbsp;&quot;<a href="https://api.weixin.qq.com/cgi-bin/user/info?access_token=$access_token&amp;openid=$openid&amp;lang=zh_CN">https://api.weixin.qq.com/cgi-bin/user/info?access_token=$access_token&amp;openid=$openid&amp;lang=zh_CN</a>&quot;;<br>//echo&nbsp;$get_user_info_url;<br>$userinfo&nbsp;=&nbsp;z_get_json($get_user_info_url);<br>//dump($userinfo);<br>//die();</p><p>//if($userinfo[&#39;openid&#39;]!=&#39;&#39;){<br>//&nbsp;echo&nbsp;&#39;&lt;br&gt;&lt;br&gt;&#39;.$userinfo[&#39;openid&#39;];<br>//}<br>//dump($userinfo);<br>//die();<br>//判断注册还是登录<br>if($userinfo[&#39;openid&#39;]!=&#39;&#39;){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$row&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;where(&quot;m_weixin_openid=&#39;%s&#39;&quot;,$userinfo[&quot;openid&quot;])-&gt;find();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($row){<br>&nbsp;&nbsp;&nbsp;session(&#39;m_id&#39;,$row[&#39;m_id&#39;]);<br>&nbsp;&nbsp;&nbsp;session(&#39;m_nick_name&#39;,$row[&#39;m_nick_name&#39;]);<br>&nbsp;&nbsp;&nbsp;session(&#39;m_login_name&#39;,$row[&#39;m_login_name&#39;]);<br>&nbsp;&nbsp;&nbsp;session(&#39;is_org&#39;,-1);<br>&nbsp;&nbsp;&nbsp;//U(&#39;Home/Home/index&#39;,null,true,true);<br>&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;创建新用户<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;max(&#39;m_id&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rand&nbsp;=&nbsp;mt_rand(1000,9999);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$data[&#39;gender&#39;]&nbsp;&nbsp;=&nbsp;$gender;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_avatar&#39;]&nbsp;&nbsp;=&nbsp;$userinfo[&#39;headimgurl&#39;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_nick_name&#39;]&nbsp;&nbsp;=&nbsp;mb_substr($userinfo[&#39;nickname&#39;],0,6,&quot;utf-8&quot;)&nbsp;.&nbsp;$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_login_name&#39;]&nbsp;=&nbsp;&#39;wx_&#39;.$rand.&#39;&#39;.$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_password&#39;]&nbsp;=&nbsp;md5(md5(time()));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_weixin_openid&#39;]&nbsp;&nbsp;=&nbsp;$userinfo[&quot;openid&quot;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_jingyan&#39;]&nbsp;=&nbsp;50;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session(&#39;kj_object&#39;,$data);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;U(&#39;Wap/Index/login&#39;,&#39;&#39;,&#39;&#39;,true);<br>}<br>}<br>}</pre></div><p>前台模板类似qq &nbsp;微博一键登录，就不赘述了。</p><p>注意：这是微信里的一键登录，需要申请服务号，才能获取授权。</p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键登录（qq,weibo）</title>
    <link href="/2016/09/04/69/"/>
    <url>/2016/09/04/69/</url>
    
    <content type="html"><![CDATA[ <p>首先需要去qq，weibo申请密钥，然后会得到<span style="color: rgb(51, 51, 51); font-family: &#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif; line-height: 28px; text-align: justify; background-color: rgb(255, 255, 255);">APPID和APPKEY</span>，然后一步步操作，都有提示。成功后把配置写在common函数以便后期调用。</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php<p>//qq一键登录</p><p>function&nbsp;qqlogin_config(){<br>&nbsp;&nbsp;&nbsp;&nbsp;define(&quot;QQDEBUG&quot;,&nbsp;false);<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(defined(&quot;QQDEBUG&quot;)&nbsp;&amp;&amp;&nbsp;QQDEBUG)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ini_set(&quot;error_reporting&quot;,&nbsp;E_ALL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@ini_set(&quot;display_errors&quot;,&nbsp;TRUE);<br>&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;    error_reporting(E_ALL^E_NOTICE);<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;session_start();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//申请到的appid<br>&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;appid&quot;]&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&#39;&#39;;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//申请到的appkey<br>&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;appkey&quot;]&nbsp;&nbsp;&nbsp;=&nbsp;&quot;&quot;;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//QQ登录成功后跳转的地址,请确保地址真实可用，否则会导致登录失败。&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;//一定要注意回调地址<br>&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;callback&quot;]&nbsp;=&nbsp;&quot;http://&quot;&nbsp;.&nbsp;$_SERVER[&#39;SERVER_NAME&#39;]&nbsp;.&nbsp;&quot;/index.php/Home/OAuth/qqCallback&quot;;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//QQ授权api接口.按需调用<br>&nbsp;&nbsp;&nbsp;&nbsp;//$_SESSION[&quot;scope&quot;]&nbsp;=&nbsp;&quot;get_user_info,add_share,list_album,add_album,upload_pic,add_topic,add_one_blog,add_weibo&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;scope&quot;]&nbsp;=&nbsp;&quot;get_user_info&quot;;<br>}</p><p>function&nbsp;qqlogin_do_post($url,&nbsp;$data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_RETURNTRANSFER,&nbsp;TRUE);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_POST,&nbsp;TRUE);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_POSTFIELDS,&nbsp;$data);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);<br>&nbsp;&nbsp;&nbsp;&nbsp;$ret&nbsp;=&nbsp;curl_exec($ch);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;$ret;<br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>/<em>———————————————-<br>&nbsp;</em>&nbsp;<br>&nbsp;<em>&nbsp;微博一键登录<br>&nbsp;</em><br>&nbsp;<em>———————————————-</em>/<br>&nbsp;<br>/**<br>&nbsp;<em>&nbsp;微博一键登录&nbsp;-&nbsp;配置<br>&nbsp;</em>/<br>function&nbsp;weibo_config(){<br>&nbsp;&nbsp;&nbsp;&nbsp;define(&nbsp;&quot;WB_AKEY&quot;&nbsp;,&nbsp;&#39;4002186908&#39;&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;define(&nbsp;&quot;WB_SKEY&quot;&nbsp;,&nbsp;&#39;dd81902ee3460eba972f46487aac41e2&#39;&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;define(&nbsp;&quot;WB_CALLBACK_URL&quot;&nbsp;,&nbsp;&#39;<a href="http://www.ayanglao.org.cn&/#39;&nbsp;&nbsp;.&nbsp;U(&#39;Home/OAuth/weiboCallback&#39;)">http://www.ayanglao.org.cn&#39;&nbsp;&nbsp;.&nbsp;U(&#39;Home/OAuth/weiboCallback&#39;)</a>);<br>}</pre></div><p>然后就是OAuthAction</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php</p><p>class&nbsp;OAuthAction&nbsp;extends&nbsp;AppbaseAction&nbsp;{</p><pre><code class="hljs">public&amp;nbsp;function&amp;nbsp;qqLogin()&#123;</code></pre></div><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//….<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qqlogin_config();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&#39;state&#39;]&nbsp;=&nbsp;md5(uniqid(rand(),&nbsp;TRUE));&nbsp;//CSRF&nbsp;protection<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$login_url&nbsp;=&nbsp;&quot;<a href="https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=">https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=</a>&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;$_SESSION[&quot;appid&quot;]&nbsp;.&nbsp;&quot;&amp;redirect_uri=&quot;&nbsp;.&nbsp;urlencode($_SESSION[&quot;callback&quot;])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&quot;&amp;state=&quot;&nbsp;.&nbsp;$_SESSION[&#39;state&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&quot;&amp;scope=&quot;.$_SESSION[&quot;scope&quot;];<br>&nbsp;&nbsp;&nbsp;&nbsp;    //echo&nbsp;$login_url;<br>&nbsp;&nbsp;&nbsp;&nbsp;    //print_r($_SESSION);<br>&nbsp;&nbsp;&nbsp;&nbsp;    //die();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;Location:$login_url&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;qqCallback(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qqlogin_config();<br>        //var_dump($_SESSION);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&nbsp;获取token<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($_REQUEST[&#39;state&#39;]&nbsp;==&nbsp;$_SESSION[&#39;state&#39;])&nbsp;//csrf<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$token_url&nbsp;=&nbsp;&quot;<a href="https://graph.qq.com/oauth2.0/token?grant_type=authorization_code">https://graph.qq.com/oauth2.0/token?grant_type=authorization_code</a>&amp;&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&quot;client_id=&quot;&nbsp;.&nbsp;$_SESSION[&quot;appid&quot;].&nbsp;&quot;&amp;redirect_uri=&quot;&nbsp;.&nbsp;urlencode($_SESSION[&quot;callback&quot;])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&quot;&amp;client_secret=&quot;&nbsp;.&nbsp;$_SESSION[&quot;appkey&quot;].&nbsp;&quot;&amp;code=&quot;&nbsp;.&nbsp;$_REQUEST[&quot;code&quot;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$response&nbsp;=&nbsp;file_get_contents($token_url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strpos($response,&nbsp;&quot;callback&quot;)&nbsp;!==&nbsp;false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$lpos&nbsp;=&nbsp;strpos($response,&nbsp;&quot;(&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rpos&nbsp;=&nbsp;strrpos($response,&nbsp;&quot;)&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$response&nbsp;&nbsp;=&nbsp;substr($response,&nbsp;$lpos&nbsp;+&nbsp;1,&nbsp;$rpos&nbsp;-&nbsp;$lpos&nbsp;-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$msg&nbsp;=&nbsp;json_decode($response);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isset($msg-&gt;error))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;h3&gt;error-token:&lt;/h3&gt;&quot;&nbsp;.&nbsp;$msg-&gt;error;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;h3&gt;msg&nbsp;&nbsp;:&lt;/h3&gt;&quot;&nbsp;.&nbsp;$msg-&gt;error_description;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$params&nbsp;=&nbsp;array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parse_str($response,&nbsp;$params);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//debug<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//print_r($params);die();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//set&nbsp;access&nbsp;token&nbsp;to&nbsp;session<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;access_token&quot;]&nbsp;=&nbsp;$params[&quot;access_token&quot;];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo(&quot;The&nbsp;state&nbsp;does&nbsp;not&nbsp;match.&nbsp;You&nbsp;may&nbsp;be&nbsp;a&nbsp;victim&nbsp;of&nbsp;CSRF.&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&nbsp;获取open_id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em>/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$graph_url&nbsp;=&nbsp;&quot;<a href="https://graph.qq.com/oauth2.0/me?access_token=">https://graph.qq.com/oauth2.0/me?access_token=</a>&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;$_SESSION[&#39;access_token&#39;];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;&nbsp;=&nbsp;file_get_contents($graph_url);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(strpos($str,&nbsp;&quot;callback&quot;)&nbsp;!==&nbsp;false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$lpos&nbsp;=&nbsp;strpos($str,&nbsp;&quot;(&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rpos&nbsp;=&nbsp;strrpos($str,&nbsp;&quot;)&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;&nbsp;=&nbsp;substr($str,&nbsp;$lpos&nbsp;+&nbsp;1,&nbsp;$rpos&nbsp;-&nbsp;$lpos&nbsp;-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$user&nbsp;=&nbsp;json_decode($str);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isset($user-&gt;error))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;h3&gt;error-openid:&lt;/h3&gt;&quot;&nbsp;.&nbsp;$user-&gt;error;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;&lt;h3&gt;msg&nbsp;&nbsp;:&lt;/h3&gt;&quot;&nbsp;.&nbsp;$user-&gt;error_description;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//debug<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo(&quot;Hello&nbsp;&quot;&nbsp;.&nbsp;$user-&gt;openid);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//set&nbsp;openid&nbsp;to&nbsp;session<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$_SESSION[&quot;openid&quot;]&nbsp;=&nbsp;$user-&gt;openid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;todo:&nbsp;进行登录与注册的判断</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>&nbsp;获取用户信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</em>/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$graph_url&nbsp;=&nbsp;&quot;<a href="https://graph.qq.com/user/get_user_info">https://graph.qq.com/user/get_user_info</a>&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    .&nbsp;&#39;?access_token=&#39;&nbsp;.&nbsp;$_SESSION[&#39;access_token&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    .&nbsp;&#39;&amp;oauth_consumer_key=&#39;&nbsp;.&nbsp;$_SESSION[&#39;appid&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.&nbsp;&#39;&amp;openid=&#39;&nbsp;.&nbsp;$_SESSION[&quot;openid&quot;];</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$str&nbsp;&nbsp;=&nbsp;file_get_contents($graph_url);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$json_result&nbsp;=&nbsp;json_decode($str);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($json_result-&gt;ret&nbsp;==&nbsp;&#39;0&#39;){<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;$nickname&nbsp;=&nbsp;$json_result-&gt;nickname;&nbsp;//昵称<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;$avatar&nbsp;=&nbsp;$json_result-&gt;figureurl_qq_2;&nbsp;//40*40的qq头像<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;$gender&nbsp;=&nbsp;$json_result-&gt;gender;&nbsp;//性别<br>&nbsp;&nbsp;&nbsp;&nbsp;        //echo&nbsp;&#39;&lt;meta&nbsp;charset=&quot;utf-8&quot;&nbsp;/&gt;&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;        //echo&nbsp;&quot;昵称：$nickname&lt;br&gt;性别：$gender&lt;br&gt;QQ头像：&lt;img&nbsp;src=$figureurl_qq_1&nbsp;/&gt;&quot;;die();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;        $row&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;where(&quot;m_qq_openid=&#39;%s&#39;&quot;,$<em>SESSION[&quot;openid&quot;])-&gt;find();<br>&nbsp;&nbsp;&nbsp;&nbsp;        if($row){<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_id&#39;,$row[&#39;m_id&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_nick_name&#39;,$row[&#39;m_nick_name&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_login_name&#39;,$row[&#39;m_login_name&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;is_org&#39;,-1);<br>            &nbsp;&nbsp;&nbsp;&nbsp;//U(&#39;Home/Home/index&#39;,null,true,true);<br>            &nbsp;&nbsp;&nbsp;&nbsp;if(session(&#39;shebei&#39;)&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}<br>            &nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;        }else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            //&nbsp;创建新用户<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;max(&#39;m_id&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rand&nbsp;=&nbsp;mt_rand(1000,9999);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    //$data[&#39;gender&#39;]&nbsp;&nbsp;=&nbsp;$gender;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_avatar&#39;]&nbsp;&nbsp;=&nbsp;$avatar;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_nick_name&#39;]&nbsp;&nbsp;=&nbsp;mb_substr($nickname,0,6,&quot;utf-8&quot;)&nbsp;.&nbsp;$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_login_name&#39;]&nbsp;=&nbsp;&#39;qq</em>&#39;.$rand.&#39;&#39;.$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_password&#39;]&nbsp;=&nbsp;md5(md5(time()));<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_qq_openid&#39;]&nbsp;&nbsp;=&nbsp;$_SESSION[&quot;openid&quot;];&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;from&#39;]&nbsp;=&nbsp;&#39;qq&#39;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;kj_object&#39;,$data);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    if(session(&#39;shebei&#39;)&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Home/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Home/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    //echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;&nbsp;        }<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;111&#39;.$str;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;//微博一键登录（登录）<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;weiboLogin(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session_start();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weibo_config();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vendor(&#39;Weibo.saetv2ex&#39;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$o&nbsp;=&nbsp;new&nbsp;SaeTOAuthV2(&nbsp;WB_AKEY&nbsp;,&nbsp;WB_SKEY&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$code_url&nbsp;=&nbsp;$o-&gt;getAuthorizeURL(&nbsp;WB_CALLBACK_URL&nbsp;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;Location:&nbsp;&quot;&nbsp;.&nbsp;$code_url);<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//微博一键登录（回调）<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;weiboCallback(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session_start();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_reporting(E_ERROR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weibo_config();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vendor(&#39;Weibo.saetv2ex&#39;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$o&nbsp;=&nbsp;new&nbsp;SaeTOAuthV2(&nbsp;WB_AKEY&nbsp;,&nbsp;WB_SKEY&nbsp;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(isset($_REQUEST[&#39;code&#39;]))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $keys&nbsp;=&nbsp;array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $keys[&#39;code&#39;]&nbsp;=&nbsp;$_REQUEST[&#39;code&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $keys[&#39;redirect_uri&#39;]&nbsp;=&nbsp;WB_CALLBACK_URL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        $token&nbsp;=&nbsp;$o-&gt;getAccessToken(&nbsp;&#39;code&#39;,&nbsp;$keys&nbsp;)&nbsp;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    }&nbsp;catch&nbsp;(OAuthException&nbsp;$e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($token)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $<em>SESSION[&#39;token&#39;]&nbsp;=&nbsp;$token;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    setcookie(&nbsp;&#39;weibojs</em>&#39;.$o-&gt;client_id,&nbsp;http_build_query($token)&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $c&nbsp;=&nbsp;new&nbsp;SaeTClientV2(&nbsp;WB_AKEY&nbsp;,&nbsp;WB_SKEY&nbsp;,&nbsp;$_SESSION[&#39;token&#39;][&#39;access_token&#39;]&nbsp;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $ms&nbsp;&nbsp;=&nbsp;$c-&gt;home_timeline();&nbsp;//&nbsp;done<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $uid_get&nbsp;=&nbsp;$c-&gt;get_uid();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $uid&nbsp;=&nbsp;$uid_get[&#39;uid&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $user_message&nbsp;=&nbsp;$c-&gt;show_user_by_id(&nbsp;$uid);//根据ID获取用户等基本信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //保存几个基本信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $openid&nbsp;=&nbsp;$user_message[&#39;id&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $nickname&nbsp;=&nbsp;$user_message[&#39;screen_name&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $avatar&nbsp;=&nbsp;$user_message[&#39;profile_image_url&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $gender&nbsp;=&nbsp;$user_message[&#39;gender&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $gender&nbsp;=&nbsp;($gender==&#39;m&#39;)?&#39;男&#39;:&#39;女&#39;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    /<em>以下为写本地数据库</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //通过&nbsp;$openid&nbsp;检查用户是否存在<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //if(存在){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        //&nbsp;创建新用户<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        //&nbsp;设置登录状态<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //dump($user_message);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    $row&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;where(&quot;m_weibo_openid=&#39;%s&#39;&quot;,$openid)-&gt;find();<br>&nbsp;&nbsp;&nbsp;&nbsp;        if($row){<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_id&#39;,$row[&#39;m_id&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_nick_name&#39;,$row[&#39;m_nick_name&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;m_login_name&#39;,$row[&#39;m_login_name&#39;]);<br>            &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;is_org&#39;,-1);<br>            &nbsp;&nbsp;&nbsp;&nbsp;//U(&#39;Home/Home/index&#39;,null,true,true);<br>            &nbsp;&nbsp;&nbsp;&nbsp;if(session(&#39;shebei&#39;)&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Home/index&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}<br>            &nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&quot;;&lt;/script&gt;&amp;#39</a>;;<br>&nbsp;&nbsp;&nbsp;&nbsp;        }else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            //&nbsp;创建新用户<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count&nbsp;=&nbsp;M(&quot;member&quot;)-&gt;max(&#39;m_id&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$rand&nbsp;=&nbsp;mt_rand(1000,9999);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    //$data[&#39;gender&#39;]&nbsp;&nbsp;=&nbsp;$gender;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_avatar&#39;]&nbsp;&nbsp;=&nbsp;$avatar;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_nick_name&#39;]&nbsp;&nbsp;=&nbsp;mb_substr($nickname,0,6,&quot;utf-8&quot;)&nbsp;.&nbsp;$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_login_name&#39;]&nbsp;=&nbsp;&#39;wb_&#39;.$rand.&#39;&#39;.$count;<br>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;m_password&#39;]&nbsp;=&nbsp;md5(md5(time()));<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    $data[&#39;m_weibo_openid&#39;]&nbsp;&nbsp;=&nbsp;$openid;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;$data[&#39;from&#39;]&nbsp;=&nbsp;&#39;weibo&#39;;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;session(&#39;kj_object&#39;,$data);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    if(session(&#39;shebei&#39;)&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Wap/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;            &nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;&lt;script&gt;window.close();window.opener.location.href=&quot;<a href="http://www.13sai.com&/#39;.U(&#39;Home/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39">http://www.13sai.com&#39;.U(&#39;Home/Guide/binding&#39;).&#39;&quot;;&lt;/script&gt;&amp;#39</a>;;<br>            &nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;    </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    //跳转到会员中心</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    echo&nbsp;&#39;授权失败&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}</pre><p>前台调用比较简单</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;yijian&nbsp;wd-center&quot;&gt;<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;class=&quot;wd-left&quot;&gt;使用其他账号登录&lt;/p&gt;<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;onclick=&quot;toQzoneLogin()&quot;&nbsp;class=&quot;other_login&nbsp;other_login_qq&quot;&gt;&lt;img&nbsp;src=&quot;/webui/home/images/Q.png&quot;&gt;&lt;/a&gt;<br>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;onclick=&quot;toWeiboLogin()&quot;&gt;&lt;img&nbsp;src=&quot;/webui/home/images/weibo.png&quot;&gt;&lt;/a&gt;</p><pre><code class="hljs">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/div&amp;gt;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</code></pre></div><p>&lt;script&gt;<br>function&nbsp;toQzoneLogin()<br>{<br>    var&nbsp;A=window.open(&quot;<a href="http://www.ayanglao.org.cn{:U(&#39;Home/OAuth/qqLogin&#39;,&#39;&#39;,false)}/&quot;+Math.random(),&quot;TencentLogin&quot;,&quot;width=600,height=480,menubar=0,scrollbars=1,&nbsp;resizable=1,status=1,titlebar=0,toolbar=0,location=1">http://www.ayanglao.org.cn{:U(&#39;Home/OAuth/qqLogin&#39;,&#39;&#39;,false)}/&quot;+Math.random(),&quot;TencentLogin&quot;,&quot;width=600,height=480,menubar=0,scrollbars=1,&nbsp;resizable=1,status=1,titlebar=0,toolbar=0,location=1</a>&quot;);<br>}</p><p>function&nbsp;toWeiboLogin()<br>{<br>    var&nbsp;A=window.open(&quot;<a href="http://www.ayanglao.org.cn{:U(&#39;Home/OAuth/weiboLogin&#39;,&#39;&#39;,false)}/&quot;+Math.random(),&quot;WeiboLogin&quot;,&quot;width=450,height=320,menubar=0,scrollbars=1,&nbsp;resizable=1,status=1,titlebar=0,toolbar=0,location=1">http://www.ayanglao.org.cn{:U(&#39;Home/OAuth/weiboLogin&#39;,&#39;&#39;,false)}/&quot;+Math.random(),&quot;WeiboLogin&quot;,&quot;width=450,height=320,menubar=0,scrollbars=1,&nbsp;resizable=1,status=1,titlebar=0,toolbar=0,location=1</a>&quot;);<br>}<br>&lt;/script&gt;</pre><p>这样就ok了。下次说说微信登录。<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>api</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决ThinkPHP多文件上传重名的问题</title>
    <link href="/2016/09/04/68/"/>
    <url>/2016/09/04/68/</url>
    
    <content type="html"><![CDATA[<p>前几天开发时，需要同时上传两张图，但总出现问题，打开提示，显示的事文件名已存在。</p><p>各种搜索，没找到解决方法，然后就改成了uploadify上传，但治标不治本，同事说可以修改uploadFile的类，获取savename时增加随机数。</p><p>修改savename</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSaveName</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;    <span class="hljs-variable">$rand</span> = mt_rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>);  <span class="hljs-comment">//生成五位随机数</span>        <span class="hljs-variable">$rule</span> = <span class="hljs-keyword">$this</span>-&gt;saveRule;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$rule</span>)) &#123;<span class="hljs-comment">//没有定义命名规则，则保持文件名不变</span>            <span class="hljs-variable">$saveName</span> = <span class="hljs-variable">$filename</span>[<span class="hljs-string">&#x27;name&#x27;</span>];        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">if</span>(function_exists(<span class="hljs-variable">$rule</span>)) &#123;                <span class="hljs-comment">//使用函数生成一个唯一文件标识号  加入随机数</span>                <span class="hljs-variable">$saveName</span> = <span class="hljs-variable">$rule</span>().<span class="hljs-variable">$rand</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$filename</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];            &#125;<span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">//使用给定的文件名作为标识号</span>                <span class="hljs-variable">$saveName</span> = <span class="hljs-variable">$rule</span>.<span class="hljs-variable">$rand</span>.<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$filename</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];            &#125;        &#125;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;autoSub) &#123;            <span class="hljs-comment">// 使用子目录保存文件</span>            <span class="hljs-variable">$filename</span>[<span class="hljs-string">&#x27;savename&#x27;</span>] = <span class="hljs-variable">$saveName</span>;            <span class="hljs-variable">$saveName</span> = <span class="hljs-keyword">$this</span>-&gt;getSubName(<span class="hljs-variable">$filename</span>).<span class="hljs-variable">$saveName</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-variable">$saveName</span>;    &#125;</code></pre></div><p>这样就几乎不会出现同名的情况了。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uploadify的使用</title>
    <link href="/2016/09/02/67/"/>
    <url>/2016/09/02/67/</url>
    
    <content type="html"><![CDATA[ <p>Uploadify是JQuery的一个上传插件，实现的效果非常不错，带进度显示。</p><p>我用的版本是2.2.</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;file=&quot;./Tpl/head&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--引用css--&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;link&nbsp;href=&quot;/Skin/public/uploadify/uploadify.css&quot;&nbsp;type=&quot;text/css&quot;&nbsp;rel=&quot;stylesheet&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;file=&quot;./Tpl/top&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;main-container&quot;&gt;<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;id=&quot;menu-toggler&quot;&nbsp;href=&quot;#&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;&lt;/span&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;file=&quot;./Tpl/left&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;breadcrumbs&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{ace.settings.check(&#39;breadcrumbs&#39;&nbsp;,&nbsp;&#39;fixed&#39;)}catch(e){}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;i&nbsp;class=&quot;icon-home&nbsp;home-icon&quot;&gt;&lt;/i&gt;&lt;a&nbsp;href=&quot;{:U(&#39;/Admin/Index/index&#39;)}&quot;&gt;管理后台&lt;/a&gt;&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;{$column_name}管理&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;修改&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;&lt;!–&nbsp;.breadcrumb&nbsp;–&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;widget-header&nbsp;widget-header-small&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h5&gt;修改内容&lt;/h5&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;id=&quot;updateForm&quot;&nbsp;action=&quot;{:U(&#39;Admin/Home/caseUpdate&#39;)}&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method=&quot;POST&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;onsubmit=&quot;return&nbsp;jQuery(this).validationEngine(&#39;validate&#39;);&quot;&nbsp;role=&quot;form&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;name=&quot;c_id&quot;&nbsp;value=&quot;{$data.c_id}&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;name=&quot;httpref&quot;&nbsp;value=&quot;{$httpref}&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;col-sm-1&nbsp;control-label&nbsp;no-padding-right&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for=&quot;form-field-1&quot;&gt;&nbsp;标题&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;c_name&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value=&quot;{$data[&#39;c_name&#39;]}&quot;&nbsp;placeholder=&quot;如李潇潇&quot;&nbsp;class=&quot;col-xs-10&nbsp;col-sm-5&nbsp;validate[required,maxSize[40]]&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;col-sm-1&nbsp;control-label&nbsp;no-padding-right&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for=&quot;form-field-1&quot;&gt;&nbsp;头像&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;file_upload&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id=&quot;file_upload&quot;/&gt;&amp;nbsp;&amp;nbsp;大小223px<em>431px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;name=&quot;c_avatar&quot;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id=&quot;c_avatar&quot;&nbsp;value=&quot;{$data[&#39;c_avatar&#39;]}&quot;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;&lt;img&nbsp;src=&quot;{$data[&#39;c_avatar&#39;]}&quot;&nbsp;style=&quot;width:&nbsp;80px;&nbsp;height:&nbsp;100px;&quot;&nbsp;id=&quot;newsimg&quot;&nbsp;class=&quot;newsimgpre&nbsp;uploadimg&quot;&gt;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;clearfix&nbsp;form-actions&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;col-md-offset-1&nbsp;col-md-11&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;class=&quot;btn&nbsp;btn-info&quot;&nbsp;onclick=&quot;$(&#39;#updateForm&#39;).submit();&quot;&nbsp;type=&quot;button&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;i&nbsp;class=&quot;icon-ok&nbsp;bigger-110&quot;&gt;&lt;/i&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提交<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&nbsp;&amp;nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;id=&quot;backid&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;i&nbsp;class=&quot;icon-undo&nbsp;bigger-110&quot;&gt;&lt;/i&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回列表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;file=&quot;./Tpl/bottom&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;#&quot;&nbsp;id=&quot;btn-scroll-up&quot;&nbsp;class=&quot;btn-scroll-up&nbsp;btn&nbsp;btn-sm&nbsp;btn-inverse&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;i&nbsp;class=&quot;icon-double-angle-up&nbsp;icon-only&nbsp;bigger-110&quot;&gt;&lt;/i&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&lt;!–&nbsp;/.main-container&nbsp;–&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;include&nbsp;file=&quot;./Tpl/foot&quot;&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!–引用js–&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;/Skin/public/uploadify/jquery.uploadify.min.js&quot;&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#file_upload&#39;).uploadify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//注意这里&nbsp;&nbsp;uploadify无法传递session&nbsp;&nbsp;只能通过formData<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;formData&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&lt;?php&nbsp;echo&nbsp;session_name();?&gt;&#39;&nbsp;:&nbsp;&#39;&lt;?php&nbsp;echo&nbsp;session_id();?&gt;&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;timestamp&#39;&nbsp;:&nbsp;&#39;&lt;?php&nbsp;echo&nbsp;$timestamp;?&gt;&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;token&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&#39;&lt;?php&nbsp;echo&nbsp;md5(&#39;unique_salt&#39;&nbsp;.&nbsp;$timestamp);?&gt;&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;swf&#39;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&#39;/Skin/public/uploadify/uploadify.swf&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;uploader&#39;&nbsp;:&nbsp;&quot;{:U(&#39;Admin/Home/uploadify&#39;)}&quot;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;buttonText&#39;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&#39;选择图片&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;buttonClass&#39;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;&#39;upload_button&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;fileTypeDesc&#39;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&#39;图片文件&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;width&#39;:&#39;100px&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;height&#39;:&#39;50px&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&#39;fileTypeExts&#39;&nbsp;&nbsp;:&nbsp;&nbsp;&nbsp;&#39;</em>.gif;<em>.jpg;</em>.png;*.jpeg&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&#39;fileSizeLimit&#39;&nbsp;:&nbsp;&#39;50000&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;progressData&#39;:&nbsp;&#39;percentage&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;onUploadSuccess&#39;&nbsp;:&nbsp;function(file,&nbsp;data,&nbsp;response)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//var&nbsp;path=data;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//alert(data)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data&nbsp;=&nbsp;JSON.parse(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(data.status&nbsp;==&nbsp;0){alert(&#39;上传失败&#39;);return&nbsp;false;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#newsimg&#39;).attr(&quot;src&quot;,data.data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#c_avatar&#39;).val(data.data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Your&nbsp;options&nbsp;here<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre></div><p>action</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">public&nbsp;function&nbsp;uploadify()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import(&#39;ORG.Net.UploadFile&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload&nbsp;=&nbsp;new&nbsp;UploadFile();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;maxSize&nbsp;&nbsp;=&nbsp;20480000&nbsp;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;allowExts&nbsp;&nbsp;=&nbsp;array(&#39;jpg&#39;,&nbsp;&#39;jpeg&#39;,&nbsp;&#39;png&#39;,&nbsp;&#39;gif&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;savePath&nbsp;=&nbsp;&nbsp;&#39;./Upload/case/&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;saveRule&nbsp;=&nbsp;&#39;uniqid&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return&nbsp;&nbsp;=&nbsp;array(&#39;status&#39;&nbsp;=&gt;&nbsp;1,&nbsp;&#39;info&#39;&nbsp;=&gt;&nbsp;&#39;上传成功&#39;,&nbsp;&#39;data&#39;&nbsp;=&gt;&nbsp;&#39;&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//$upload-&gt;saveRule&nbsp;=&nbsp;&#39;getrand&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!$upload-&gt;upload()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;status&#39;]&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;info&#39;]&nbsp;&nbsp;&nbsp;=&nbsp;$upload-&gt;getErrorMsg();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;status&#39;]&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$info&nbsp;=&nbsp;&nbsp;$upload-&gt;getUploadFileInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$return[&#39;data&#39;]&nbsp;&nbsp;&nbsp;=&nbsp;&#39;/Upload/case/&#39;.$info[0][savename];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($return);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><p>因为这是后台上传图片的地方，需要限制权限</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">/<em>处理权限</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$session_name&nbsp;=&nbsp;session_name();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//dump($session_name);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//echo&nbsp;$_POST[$session_name];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isset($_POST[$session_name])){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($_SESSION[&#39;u_name&#39;]&nbsp;==&nbsp;&#39;&#39;){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;error(&#39;登录已超时&#39;,&nbsp;U(&quot;Admin/Index/login&quot;),&nbsp;3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><p>来看看效果，还不错哟！</p><p><img src="/upload/ueditor/image/20161123/1479890181738303.png" title="1479890181738303.png" alt="QQ截图20161123163546.png"/></p><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php的break</title>
    <link href="/2016/08/23/65/"/>
    <url>/2016/08/23/65/</url>
    
    <content type="html"><![CDATA[<p>PHP中的break非常常见，相信大家都用过。</p><p>但break后面带参数你见过吗？</p><p>前两天遇到个3层循环的问题，因为需要限制数量，使用break，但break出来，发现页面不是我想要的，然后有记得有跳出多层循环的函数，最后发现只需要在break后面加上2就可以跳出两层循环了。</p><div class="code-wrapper"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;friendlink-ul&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;friendlink-li&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">volist</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cateList&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vo&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;friendlink-li&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">        </span><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">            <span class="hljs-variable">$k</span> = <span class="hljs-number">0</span>;</span><span class="php">        <span class="hljs-meta">?&gt;</span></span><span class="xml"></span><span class="xml">        </span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">volist</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;friendlylinkList&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vof&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&quot;$vof[&#x27;link_cate_id&#x27;] eq $vo[&#x27;cate_id&#x27;]&quot;</span>&gt;</span></span><span class="xml">            </span><span class="php"><span class="hljs-meta">&lt;?php</span></span><span class="php">                <span class="hljs-variable">$k</span>++;</span><span class="php">                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$k</span>&gt;<span class="hljs-number">5</span>) <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;</span><span class="php">            <span class="hljs-meta">?&gt;</span></span><span class="xml"></span><span class="xml">            </span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;$vof[&#x27;linkUrl&#x27;]&#125;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;&#123;$vof[&#x27;linkName&#x27;]&#125;&quot;</span>&gt;</span>&#123;:msubstr($vof[&#x27;linkName&#x27;], 0, 20, &#x27;utf-8&#x27;, false)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">volist</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">volist</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></code></pre></div><p>是不是很好用？</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据类型和常用字段属性</title>
    <link href="/2016/08/10/64/"/>
    <url>/2016/08/10/64/</url>
    
    <content type="html"><![CDATA[ <p class="p1"><span class="s1"></span></p><p>一直以为int(11)就可以存储11位的数字，原来这是不正确的。网上搜搜，总结如下：</p><p><br/></p><p>MySQL中的数据类型大的方面来分，可以分为：日期和时间、数值，以及字符串。</p><p><span style="font-weight:bold">日期和时间数据类型</span></p><p><br/></p><table width="593" cellspacing="0" cellpadding="0"><tbody><tr class="firstRow"><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">MySQL数据类型</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">含义</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">date</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">3字节，日期，格式：2014-09-18</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">time</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">3字节，时间，格式：08:42:30</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">datetime</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">8字节，日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">timestamp</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">4字节，时间戳，格式：2014-09-18 08:42:30</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="99" height="32">year</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">1字节，年份</td></tr></tbody></table><p><br/></p><p><span style="font-weight:bold">数值数据类型</span></p><p><span style="font-weight:bold">整型</span></p><table width="597" cellspacing="0" cellpadding="0"><tbody><tr class="firstRow"><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">MySQL数据类型</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">含义（有符号）</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">tinyint</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">1字节，范围（-128~127）一直误会了</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">smallint</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">2字节，范围（-32768~32767）</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">mediumint</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">3字节，范围（-8388608~8388607）</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">int</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">4字节，范围（-2147483648~2147483647）</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="107" height="32">bigint</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="490" height="32">8字节，范围（+-9.22*10的18次方）</td></tr></tbody></table><p>上面定义的都是有符号的，当然了，也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就要翻翻了，</p><p>比如：</p><p>tinyint unsigned的取值范围为0~255。</p><p><span style="font-weight:bold">浮点型</span></p><table width="598" cellspacing="0" cellpadding="0"><tbody><tr class="firstRow"><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="112" height="32">MySQL数据类型</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="486" height="32">含义</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="112" height="32">float(m, d)</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="486" height="32">4字节，单精度浮点型，m总个数，d小数位</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="112" height="32">double(m, d)</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="486" height="32">8字节，双精度浮点型，m总个数，d小数位</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="112" height="32">decimal(m, d)</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="486" height="32">decimal是存储为字符串的浮点数</td></tr></tbody></table><p>我在MySQL中建立了一个表，有一列为float(5, 3)；做了以下试验：</p><p>1.插入123.45678，最后查询得到的结果为99.999；</p><p>2.插入123.456，最后查询结果为99.999；</p><p>3.插入12.34567，最后查询结果为12.346；</p><p>所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。</p><p><br/></p><p><span style="font-weight:bold">字符串数据类型</span></p><table width="613" cellspacing="0" cellpadding="0"><tbody><tr class="firstRow"><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">MySQL数据类型</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">含义</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">char(n)</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">固定长度，最多255个字符</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">varchar(n)</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">可变长度，最多65535个字符</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">tinytext</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">可变长度，最多255个字符</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">text</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">可变长度，最多65535个字符</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">mediumtext</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">可变长度，最多2的24次方-1个字符</td></tr><tr><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="119" height="32">longtext</td><td style="word-wrap: break-word; vertical-align: middle; white-space: normal;" width="494" height="32">可变长度，最多2的32次方-1个字符</td></tr></tbody></table><p>1.char（n）和varchar（n）中括号中n代表字符的个数，并不代表字节个数，所以当使用了中文的时候(UTF8)意味着可以插入m个中文，但是实际会占用m*3个字节。</p><p>2.同时char和varchar最大的区别就在于char不管实际value都会占用n个字符的空间，而varchar只会占用实际字符应该占用的空间+1，并且实际空间+1&lt;=n。</p><p>3.超过char和varchar的n设置后，字符串会被截断。</p><p>4.char的上限为255字节，varchar的上限65535字节，text的上限为65535。</p><p>5.char在存储的时候会截断尾部的空格，varchar和text不会。</p><p>6.varchar会使用1-3个字节来存储长度，text不会。</p><p><br/></p><p class="p1"><span class="s1"></span></p><p><strong>选择原则：</strong><br/></p><p class="p1"><span class="s1">1、通常最小的是最好的</span></p><p class="p1"><span class="s1">&nbsp; &nbsp; &nbsp;因为这样可以用更少的磁盘、内容、CPU缓存，大大减少IO开销，当然前提是满足业务需要。</span></p><p class="p1"><span class="s1">2、简单就好</span></p><p class="p1"><span class="s1">&nbsp; &nbsp; &nbsp;简单的数据类型操作通常需要更少的CPU周期。例如，整型比字符操作代价更小，因为字符集和校对规则（排序规则）使它比整型更复杂。比如应该使用MySQL内建的类型而不是使用字符型来存储日期和时间。</span></p><p class="p1"><span class="s1">3、尽量避免使用NULL</span></p><p class="p1"><span class="s1">&nbsp; &nbsp; &nbsp;NULL是列默认的属性，通常我们要指定为NOT NULL。有NULL的列值会使得索引、索引统计和值比较更加复杂。可为NULL的列会使用更多的存储空间，在MySQL中也需要对它进行特殊处理，当可为NULL列做索引时，每个索引需要一个额外的字节，在MyISAM更有可能导致固定大小的索引变成可变大小索引，在InnoDB中使用单独的位(bit)存储NULL值。</span></p><p class="p1"><span class="s1"><br/></span></p><p class="p1"><span class="s1">就这些了，大部分网上贴过来的。<br/></span><br/></p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js获取select的值</title>
    <link href="/2016/08/09/63/"/>
    <url>/2016/08/09/63/</url>
    
    <content type="html"><![CDATA[ <p>最近做一个手机项目时，遇到一个问题。</p><p>选分类时需要根据不同类型，改变字段。之前加的是点击事件控制显隐，火狐反应正常，但手机上没有效果。不得不抛弃这种写法，改为获取select选中option值判断，来控制字段显隐。</p><p>点击控制的代码就不写了，比较简单，贴上获取select方法代码：<br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;!--&nbsp;主体&nbsp;--&gt;&lt;div&nbsp;class=&quot;am-container&nbsp;am-margin-top&nbsp;reg&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-tabs-bd&nbsp;sai-noborder&nbsp;am-margin-top&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-tab-panel&nbsp;sai-nopadding&nbsp;am-active&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;method=&quot;post&quot;&nbsp;action=&quot;{:U(&#39;Wap/Index/reg2&#39;)}&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&nbsp;&nbsp;id=&quot;form2&quot;&nbsp;class=&quot;am-form&nbsp;am-form-horizontal&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-form-group&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;团体名称：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;o_name&quot;&nbsp;class=&quot;login-text&nbsp;yan-tt&nbsp;nick&quot;&nbsp;placeholder=&quot;请输入团体名称&quot;&gt;&lt;span&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;类型：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;select&nbsp;name=&quot;o_type&quot;&nbsp;id=&quot;select&quot;&nbsp;onchange=&quot;getValue()&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;volist&nbsp;name=&quot;list_jigou&quot;&nbsp;id=&quot;vo&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;option&nbsp;value=&quot;{$vo[&#39;d_value&#39;]}&quot;&nbsp;&lt;if&nbsp;condition=&quot;$i&nbsp;neq&nbsp;4&quot;&gt;class=&quot;dd&quot;&nbsp;&lt;else/&gt;&nbsp;class=&quot;dd2&quot;&lt;/if&gt;&gt;{$vo[&#39;d_title&#39;]}&lt;/option&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/volist&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/select&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;daima2&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;证件号码：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;o_yingyezhizhao_no&quot;&nbsp;class=&quot;login-text&nbsp;yan-zhzh&quot;&nbsp;placeholder=&quot;请输入等级证书/营业执照等相关证件号码&quot;&gt;&lt;span&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;上传扫描件：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;o_yingyezhizhao_img&nbsp;yan-required&quot;&nbsp;value=&quot;&quot;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;daima&nbsp;sai-hide&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;团体简介：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea&nbsp;name=&quot;o_desc&quot;&nbsp;rows=&quot;5&quot;&nbsp;class=&quot;yan-desc&quot;&nbsp;placeholder=&quot;请简单介绍下您所在的团体，不超过200字！&quot;&gt;&lt;/textarea&gt;&lt;span&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;创建密码：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;name=&quot;o_password&quot;&nbsp;class=&quot;login-text&nbsp;yan-pw&quot;&nbsp;placeholder=&quot;请输入密码&quot;&gt;&lt;span&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;class=&quot;am-u-md-3&quot;&gt;确认密码：&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-u-md-9&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;name=&quot;o_password2&quot;&nbsp;class=&quot;login-text&nbsp;yan-pw2&quot;&nbsp;placeholder=&quot;请再次输入密码&quot;&gt;&lt;span&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;wd-h15&nbsp;wd-clear&quot;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&nbsp;reg-tab-li&nbsp;am-g2&nbsp;am-margin-top&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;button&quot;&nbsp;class=&quot;l-btn&nbsp;btn2&nbsp;am-btn&nbsp;am-btn-block&nbsp;sai-bred&quot;&nbsp;onclick=&quot;sub2();&quot;&gt;注册&lt;/button&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;reg-tab-li&nbsp;am-g&nbsp;reg-tab-li&nbsp;am-g2&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;class=&quot;wd-fs12&nbsp;xieyi&quot;&nbsp;target=&quot;_blank&quot;&nbsp;href=&quot;{:U(&#39;Wap/Index/page&#39;,array(&#39;column_id&#39;=&gt;8))}&quot;&gt;注册代表你同意&lt;em&gt;《爱德国际仁谷注册协议》&lt;/em&gt;&lt;/a&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&lt;/div&gt;<p>&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;;function&nbsp;getValue(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<em>第一种方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;val=&nbsp;$(&quot;#select&nbsp;option:selected&quot;).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;val=&nbsp;$(&#39;#select&#39;).find(&quot;option:selected&quot;).val();</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<em>第二种方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;obj=&nbsp;document.getElementById(&#39;select&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;val&nbsp;=&nbsp;obj.selectedIndex;</em>/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;obj=&nbsp;document.getElementById(&#39;select&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;val&nbsp;=&nbsp;obj.options[obj.options.selectedIndex].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(val&nbsp;==&nbsp;3){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.daima2&#39;).hide();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.daima&#39;).show();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.daima&#39;).hide();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.daima2&#39;).show();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>};<br>&lt;/script&gt;</pre></div><p><br/></p><p>当然注释的两种方法也是可行的，粗粗测试下，火狐也兼容。</p><p>是不是很好用？<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断是否为微信内置浏览器</title>
    <link href="/2016/08/05/62/"/>
    <url>/2016/08/05/62/</url>
    
    <content type="html"><![CDATA[ <p>原理：获取微信内置浏览器的User Agent，并加以判断。</p><p>直接上代码：</p><p>js：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">function&nbsp;isWeiXin(){&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ua&nbsp;=&nbsp;window.navigator.userAgent.toLowerCase();&nbsp;&nbsp;&nbsp;&nbsp;//var&nbsp;ua&nbsp;=&nbsp;navigator.userAgent.toLowerCase();&nbsp;二选一&nbsp;&nbsp;&nbsp;&nbsp;if(ua.match(/MicroMessenger/i)&nbsp;==&nbsp;&#39;micromessenger&#39;){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(1);&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(0);}</pre></div><p>php</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">function&nbsp;isWeixin(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;strpos($_SERVER[&#39;HTTP_USER_AGENT&#39;],&nbsp;&#39;MicroMessenger&#39;)&nbsp;!==&nbsp;false&nbsp;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;}else{    return&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;}}</pre></div><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery判断checkbox是否选中的方法</title>
    <link href="/2016/08/03/61/"/>
    <url>/2016/08/03/61/</url>
    
    <content type="html"><![CDATA[ <p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">需要做一个必须勾选协议才能购买的表单，往往要判断是否勾选checkbox，之前遇到过，但没有好好解决，这次又遇到，边彻底解决这个问题。</p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">其实这个问题的核心是获取checked属性的问题并加以判断，网上文章很多，大致方法有三：</p><div class="code-wrapper"><pre style="font-family: Monaco, Consolas, Courier, &#39;Lucida Console&#39;, monospace; widows: auto;">&lt;form&nbsp;role=&quot;form&quot;&nbsp;action=&quot;&quot;&nbsp;method=&quot;post&quot;&nbsp;onsubmit=&quot;return&nbsp;jQuery(this).validationEngine(&#39;validate&#39;);&quot;&nbsp;id=&quot;form&quot;&gt;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;box-body&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;form-group&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;m_login_name&quot;&gt;购买数量&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;d_number&quot;&nbsp;class=&quot;validate[required,maxSize[10],custom[number]]&nbsp;form-control&quot;&nbsp;placeholder=&quot;请填写数字,单位：个&quot;&nbsp;data-prompt-position=&quot;topLeft&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;form-group&quot;&nbsp;style=&quot;height:&nbsp;100px;&nbsp;overflow-x:&nbsp;hidden;&nbsp;overflow-y:&nbsp;scroll;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;#d2d6de;;&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;协议内容&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;form-group&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;id=&quot;check&quot;&nbsp;checked/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;m_login_name&quot;&gt;我同意《协议》&lt;/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;box-footer&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type=&quot;button&quot;&nbsp;class=&quot;btn&nbsp;btn-primary&quot;&nbsp;id=&quot;buy&quot;&gt;立即购买&lt;/button&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&lt;/div&gt;&lt;/form&gt;</pre></div><div class="code-wrapper"><pre style="font-family: Monaco, Consolas, Courier, &#39;Lucida Console&#39;, monospace; widows: auto;">第一种is(&#39;:checked&#39;)&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;;$(function(){&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#buy&#39;).on(&#39;click&#39;,function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isCheck&nbsp;=&nbsp;$(&#39;#check&#39;).is(&#39;:checked&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert（isCheck&nbsp;）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});})&lt;/script&gt;</pre></div><div class="code-wrapper"><pre style="font-family: Monaco, Consolas, Courier, &#39;Lucida Console&#39;, monospace; widows: auto;">第二种attr(&#39;checked&#39;)&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;;$(function(){&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#buy&#39;).on(&#39;click&#39;,function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isCheck&nbsp;=&nbsp;$(&#39;#check&#39;).attr(&#39;checked&#39;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert（isCheck&nbsp;）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});})&lt;/script&gt;</pre></div><div class="code-wrapper"><pre style="font-family: Monaco, Consolas, Courier, &#39;Lucida Console&#39;, monospace; widows: auto;">第三种checked&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;;$(function(){&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#buy&#39;).on(&#39;click&#39;,function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;isCheck&nbsp;=&nbsp;$(&#39;#check&#39;).checked;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert（isCheck&nbsp;）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});})&lt;/script&gt;</pre></div><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">亲测（firefox，chrome），仅有is(&#39;:checked&#39;)成功获取，选中则true，未选中则为false。</p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">attr会根据初始值，若初始值选中就是checked，否则undefined，点击选择时不会变化值。</p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">checked则一直都是undefined。</p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);"><br style="background-color: inherit;"/></p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">然后想到上次用到的prop，替换掉attr，成功获取，选中则true，未选中则为false。</p><p style="white-space: normal; widows: auto; background-color: rgb(255, 255, 255);">结语：获取checkbox请使用prop(&#39;checked&#39;)或is(&#39;:checked&#39;)，那什么都是骗人的。</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>表单中submit提交失败的问题</title>
    <link href="/2016/08/02/60/"/>
    <url>/2016/08/02/60/</url>
    
    <content type="html"><![CDATA[<p>昨天开发时遇到个表单不能提交的问题，反复检查代码似乎都毫无问题，不得不寻找答案，发现了jquery的这个问题。</p><p>主要代码如下：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return jQuery(this).validationEngine(&#x27;validate&#x27;);&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-body&quot;</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;m_login_name&quot;</span>&gt;</span>购买备注<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;q_remark&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;validate[required,maxSize[200]] </span></span><span class="hljs-string"><span class="hljs-tag">              form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请填写购买备注&quot;</span> <span class="hljs-attr">data-prompt-position</span>=<span class="hljs-string">&quot;topLeft&quot;</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-footer&quot;</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span>立即购买<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/webui/adminlte/plugins/jQuery/jQuery-2.2.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/Skin/public/layer/layer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">        $(<span class="hljs-string">&quot;#submit&quot;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> obj = $(<span class="hljs-built_in">this</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> conload = layer.confirm(<span class="hljs-string">&#x27;确定购买吗？&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                layer.close(conload);</span><span class="javascript">                $(<span class="hljs-string">&#x27;#form&#x27;</span>).submit();</span><span class="javascript">            &#125;);</span><span class="javascript">        &#125;)</span><span class="javascript">    &#125;)</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>然后搜到同样的问题，贴上jquery  api上的说明：</p><blockquote><p>Additional Notes:Forms and their child elements should not use input names or ids that conflict with properties of a form, such as submit, length, or method. Name conflicts can cause confusing failures. For a complete list of rules and to check your markup for these problems, see DOMLint.</p></blockquote><blockquote><p>表单及其子元素不应使用与表单作为name或id的名称，如submit, length, or method,名称冲突可能会导致令人困惑的失败。对于一个完整的规则列表，检查你的标签对于这些问题，查看DOMLint。</p></blockquote><p>因而吧button的id改成tijiao，</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return jQuery(this).validationEngine(&#x27;validate&#x27;);&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-body&quot;</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;m_login_name&quot;</span>&gt;</span>购买备注<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;q_remark&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;validate[required,maxSize[200]] </span></span><span class="hljs-string"><span class="hljs-tag">              form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请填写购买备注&quot;</span> <span class="hljs-attr">data-prompt-position</span>=<span class="hljs-string">&quot;topLeft&quot;</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box-footer&quot;</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tijiao&quot;</span> &gt;</span>立即购买<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/webui/adminlte/plugins/jQuery/jQuery-2.2.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/Skin/public/layer/layer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">        $(<span class="hljs-string">&quot;#tijiao&quot;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> obj = $(<span class="hljs-built_in">this</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> conload = layer.confirm(<span class="hljs-string">&#x27;确定购买吗？&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                layer.close(conload);</span><span class="javascript">                $(<span class="hljs-string">&#x27;#form&#x27;</span>).submit();</span><span class="javascript">            &#125;);</span><span class="javascript">        &#125;)</span><span class="javascript">    &#125;)</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>成功提交表单，so amazing！</p><p>以后务必要注意class和id的命名不要和保留名冲突啦！</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP分页样式</title>
    <link href="/2016/08/01/59/"/>
    <url>/2016/08/01/59/</url>
    
    <content type="html"><![CDATA[<p>分页模块代码位置：/ThinkPHP/Extend/Library/ORG/Util/page.class.php。</p><p>如有需要，可自行修改，一般来说，不用修改，可以在Action中设置样式。setConfig可以修改主题样式，rollPage可以限制页码显示数量。</p><p>上实例：（会员列表分页）</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">memberList</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-variable">$m</span> = M(<span class="hljs-string">&quot;member&quot;</span>);    import(<span class="hljs-string">&#x27;ORG.Util.Page&#x27;</span>);         <span class="hljs-variable">$count</span> = <span class="hljs-variable">$m</span>-&gt;where(<span class="hljs-string">&#x27;status = 1&#x27;</span>)-&gt;count(); <span class="hljs-comment">//查询出总条数</span>    <span class="hljs-variable">$page</span>=<span class="hljs-keyword">new</span> Page(<span class="hljs-variable">$count</span>,<span class="hljs-number">10</span>);     <span class="hljs-variable">$show</span> = <span class="hljs-variable">$Page</span>-&gt;show();    <span class="hljs-variable">$Page</span>-&gt;rollPage = <span class="hljs-number">4</span>; <span class="hljs-comment">//页码显示数量</span>    <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;header&#x27;</span>,<span class="hljs-string">&#x27;个会员&#x27;</span>);      <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;prev&#x27;</span>,<span class="hljs-string">&#x27;上一页&#x27;</span>);    <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;next&#x27;</span>,<span class="hljs-string">&#x27;下一页&#x27;</span>);    <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;first&#x27;</span>,<span class="hljs-string">&#x27;首页&#x27;</span>);    <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;last&#x27;</span>,<span class="hljs-string">&#x27;尾页&#x27;</span>);    <span class="hljs-variable">$page</span>-&gt;setConfig(<span class="hljs-string">&#x27;theme&#x27;</span>,<span class="hljs-string">&quot;&lt;span&gt;共%totalRow%%header% </span><span class="hljs-string">    %nowPage%/%totalPage% 页 %first% %prePage% %upPage% %linkPage% %downPage%</span><span class="hljs-string">    %nextPage% %end%&lt;/span&gt;&quot;</span>);  <span class="hljs-comment">//主题样式</span>    <span class="hljs-variable">$list</span> = <span class="hljs-variable">$m</span>-&gt;where(<span class="hljs-string">&#x27;status = 1&#x27;</span>)    -&gt;order(<span class="hljs-string">&#x27;insert_time DESC&#x27;</span>)    -&gt;limit(<span class="hljs-variable">$Page</span>-&gt;firstRow.<span class="hljs-string">&#x27;,&#x27;</span>.<span class="hljs-variable">$Page</span>-&gt;listRows)-&gt;select();    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-variable">$list</span>);    <span class="hljs-keyword">$this</span>-&gt;assign(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$show</span>);    <span class="hljs-keyword">$this</span>-&gt;display(); &#125;</code></pre></div><p>样式啥的就不说了，都是CSS修改。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebUploader的使用（结合ThinkPHP）</title>
    <link href="/2016/07/18/58/"/>
    <url>/2016/07/18/58/</url>
    
    <content type="html"><![CDATA[ <p>做一个类似社交网站的项目，用到多图上传，然后了解了WebUploader，但第一次使用没有成功，弃之用了swfupload，然后做手机站时，发现如果手机没装flash，这插件用不了，不得不回头，研究用其他的html5+js组件上传，可效果都不如意，自己能力有限，造轮子失败，回头又拾起百度的WebUploader。</p><p>说实话，蛮喜欢百度的团队，之前用过ueditor，baidumap，echarts等，效果都不错，功能也绰绰有余，但WebUploader着实花了我不少时间，但终究还是成功运用了，才发现自己知识有限，走了一圈弯路。</p><p>我用的是ThinkPHP框架，先去github下载最新的WebUploader，主要用到的是dist与examples。api文档什么的，直接点击<a title="webuploader" target="_blank" href="http://fex.baidu.com/webuploader/">webuploader</a>，讲的还蛮详细。</p><p>前台代码：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;div&nbsp;id=&quot;wrapper&quot;&nbsp;style=&quot;display:&nbsp;none;&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;hidden&quot;&nbsp;name=&quot;s&quot;&nbsp;id=&quot;photos&quot;/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;container&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--头部，相册选择和格式选择--&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;uploader&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;queueList&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;dndArea&quot;&nbsp;class=&quot;placeholder&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;filePicker&quot;&gt;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;或将照片拖到这里，单次最多可选9张&lt;/p&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;statusBar&quot;&nbsp;style=&quot;display:none;&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;progress&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;text&quot;&gt;0%&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&nbsp;class=&quot;percentage&quot;&gt;&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&lt;div&nbsp;class=&quot;info&quot;&gt;&lt;/div&gt;--&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;btns&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;filePicker2&quot;&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;uploadBtn&quot;&gt;开始上传&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&lt;/div&gt;&lt;script&nbsp;src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;/Skin/public/webuploader/dist/webuploader.js&quot;&gt;&lt;/script&gt;//webuploader整个放在/Skin/public/目录&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;/Skin/public/webuploader/examples/image-upload/uploader.js&quot;&gt;&lt;/script&gt;</pre></div><p>uploader.js改动：</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">//后台处理地址server:&nbsp;&#39;{:U(&#39;Wap/Weibo/addImages&#39;)}&#39;,//限制图片最多上传9张fileNumLimit:&nbsp;9,<p>//将图片地址返回前台，以便后期写入数据库<br>uploader.on(&nbsp;&#39;uploadSuccess&#39;,&nbsp;function(&nbsp;file&nbsp;,response&nbsp;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&nbsp;&#39;#&#39;+file.id&nbsp;).addClass(&#39;upload-state-done&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//response&nbsp;=&nbsp;JSON.parse(response)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initVal&nbsp;=&nbsp;$(&#39;#photos&#39;).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(initVal&nbsp;==&nbsp;&#39;&#39;){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#photos&#39;).val(response.info);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#photos&#39;).val(initVal+&#39;|&#39;+response.info);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</pre></div><p>后台</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">public&nbsp;function&nbsp;addImages(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import(&quot;ORG.Net.UploadFile&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//导入上传类<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload&nbsp;=&nbsp;new&nbsp;UploadFile();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;maxSize&nbsp;&nbsp;=&nbsp;51200000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;allowExts&nbsp;&nbsp;=&nbsp;array(&#39;jpg&#39;,&nbsp;&#39;jpeg&#39;,&nbsp;&#39;png&#39;,&nbsp;&#39;gif&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;savePath&nbsp;=&nbsp;&nbsp;&#39;./Upload/weibo/&#39;;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$upload-&gt;saveRule&nbsp;=&nbsp;&nbsp;&#39;uniqid&#39;;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!$upload-&gt;upload())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//捕获上传异常<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;error($upload-&gt;getErrorMsg(),&#39;&#39;,3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取得成功上传的文件信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$uploadList&nbsp;=&nbsp;$upload-&gt;getUploadFileInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$s&nbsp;=&nbsp;&#39;&#39;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for($i=0;$i&lt;count($uploadList);$i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//限制图片数量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if($i&nbsp;&gt;&nbsp;8){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$s&nbsp;.=&nbsp;&#39;/Upload/weibo/&#39;.$uploadList[$i][&#39;savename&#39;];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$arr[&#39;info&#39;]&nbsp;=&nbsp;$s;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//也可用ajaxReturn，我个人习惯这样写echo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;json_encode($arr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><p>然后就ok了，样式我就不说了，自己调成需要的样子。</p><p>是不是很好用呢？<br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECharts使用</title>
    <link href="/2016/07/08/56/"/>
    <url>/2016/07/08/56/</url>
    
    <content type="html"><![CDATA[ <p>最近做项目时，要动态读取数据做成图表，然后听同事提到百度的ECharts，很好用。</p><p>ECharts，一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的 Canvas 类库 ZRender<a href="https://github.com/ecomfe/zrender" target="_blank"></a>，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</p><p>ECharts 提供了常规的折线图，柱状图，散点图，饼图，K线图，用于统计的盒形图，用于地理数据可视化的地图，热力图，线图，用于关系数据可视化的关系图，treemap，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。</p><p>来看看使用，直接上例子：<br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;!DOCTYPE&nbsp;html&gt;&lt;html&gt;&lt;head&gt;&lt;meta&nbsp;charset=&quot;utf-8&quot;&nbsp;/&gt;&lt;meta&nbsp;http-equiv=&quot;X-UA-Compatible&quot;&nbsp;content=&quot;IE=EmulateIE7&quot;&nbsp;/&gt;&lt;title&gt;ECharts&lt;/title&gt;&lt;/style&gt;&lt;script&nbsp;src=&quot;echarts.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div&nbsp;id=&quot;main&quot;&nbsp;style=&quot;width:&nbsp;600px;height:400px;&quot;&gt;&lt;/div&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;基于准备好的dom，初始化echarts实例&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;myChart&nbsp;=&nbsp;echarts.init(document.getElementById(&#39;main&#39;));<p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;指定图表的配置项和数据<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;option&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tooltip:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger:&nbsp;&#39;axis&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toolbox:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feature:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataView:&nbsp;{show:&nbsp;true,&nbsp;readOnly:&nbsp;false},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magicType:&nbsp;{show:&nbsp;true,&nbsp;type:&nbsp;[&#39;line&#39;,&nbsp;&#39;bar&#39;]},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restore:&nbsp;{show:&nbsp;true},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveAsImage:&nbsp;{show:&nbsp;true}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;legend:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:[&#39;蒸发量&#39;,&#39;降水量&#39;,&#39;平均温度&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xAxis:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;category&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;[&#39;1月&#39;,&#39;2月&#39;,&#39;3月&#39;,&#39;4月&#39;,&#39;5月&#39;,&#39;6月&#39;,&#39;7月&#39;,&#39;8月&#39;,&#39;9月&#39;,&#39;10月&#39;,&#39;11月&#39;,&#39;12月&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yAxis:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;value&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;水量&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min:&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max:&nbsp;250,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval:&nbsp;50,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axisLabel:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatter:&nbsp;&#39;{value}&nbsp;ml&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;value&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;温度&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min:&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max:&nbsp;25,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval:&nbsp;5,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axisLabel:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatter:&nbsp;&#39;{value}&nbsp;°C&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;series:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;蒸发量&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;bar&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:[2.0,&nbsp;4.9,&nbsp;7.0,&nbsp;23.2,&nbsp;25.6,&nbsp;76.7,&nbsp;135.6,&nbsp;162.2,&nbsp;32.6,&nbsp;20.0,&nbsp;6.4,&nbsp;3.3]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;降水量&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;bar&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:[2.6,&nbsp;5.9,&nbsp;9.0,&nbsp;26.4,&nbsp;28.7,&nbsp;70.7,&nbsp;175.6,&nbsp;182.2,&nbsp;48.7,&nbsp;18.8,&nbsp;6.0,&nbsp;2.3]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;平均温度&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;line&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yAxisIndex:&nbsp;1,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:[2.0,&nbsp;2.2,&nbsp;3.3,&nbsp;4.5,&nbsp;6.3,&nbsp;10.2,&nbsp;20.3,&nbsp;23.4,&nbsp;23.0,&nbsp;16.5,&nbsp;12.0,&nbsp;6.2]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;};</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;使用刚指定的配置项和数据显示图表。<br>&nbsp;&nbsp;&nbsp;&nbsp;myChart.setOption(option);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre></div><p>1.引入echarts.js</p><p>2.加数据</p><p>3.调用</p><p style="text-align: left;">简单吧！<img src="/upload/ueditor/image/20161116/1479279138846181.png" title="1479279138846181.png" alt="QQ截图20161116145142.png"/></p><p style="text-align:center"></p><p style="text-align: left;">下面看看动态添加数据(php):</p><p style="text-align: left;">先看效果：</p><p style="text-align: left;"><img src="/upload/ueditor/image/20161116/1479279097692788.png" title="1479279097692788.png" alt="QQ截图20161116145112.png"/></p><p style="text-align:center"></p><p style="text-align: left;">三种数据，年份，家数，方量。</p><p style="text-align: center;"></p><p>输出数据（tp）：</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">public&nbsp;function&nbsp;szsn(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$where[&#39;c_type&#39;]&nbsp;=&nbsp;4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$c&nbsp;=&nbsp;M(&quot;charts&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取最近7条数据&nbsp;&nbsp;按升序排列<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data111&nbsp;=&nbsp;array_reverse($c-&gt;where($where)-&gt;order(&#39;c_year&nbsp;desc&#39;)-&gt;limit(7)-&gt;getField(&#39;c_year&#39;,true));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data222&nbsp;=&nbsp;array_reverse($c-&gt;where($where)-&gt;order(&#39;c_year&nbsp;desc&#39;)-&gt;limit(7)-&gt;getField(&#39;c_quota1&#39;,true));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;data333&nbsp;=&nbsp;array_reverse($c-&gt;where($where)-&gt;order(&#39;c_year&nbsp;desc&#39;)-&gt;limit(7)-&gt;getField(&#39;c_quota2&#39;,true));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;display();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</pre></div><p>前台tpl：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;div&nbsp;id=&quot;chart3&quot;&nbsp;<br>data-111=&quot;{:implode(&#39;,&#39;,$data111)}&quot;&nbsp;<br>data-222=&quot;{:implode(&#39;,&#39;,$data222)}&quot;&nbsp;<br>data-333=&quot;{:implode(&#39;,&#39;,$data333)}&quot;&nbsp;//合并数组为字符串<br>style=&quot;width:&nbsp;530px;height:290px;&quot;&nbsp;<br>class=&quot;wd-fl&quot;&gt;<br>&lt;/div&gt;<br>&lt;script&nbsp;src=&quot;/Skin/public/echarts/echarts.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script&nbsp;src=&quot;/Skin/public/echarts/macarons.js&quot;&gt;&lt;/script&gt;&nbsp;&nbsp;//引用主题&nbsp;&nbsp;官网有多种主题<br>&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;Chart3&nbsp;=&nbsp;echarts.init(document.getElementById(&#39;chart3&#39;),&#39;macarons&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;data111&nbsp;=&nbsp;$(&#39;#chart3&#39;).attr(&#39;data-111&#39;),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data222&nbsp;=&nbsp;$(&#39;#chart3&#39;).attr(&#39;data-222&#39;),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data333&nbsp;=&nbsp;$(&#39;#chart3&#39;).attr(&#39;data-333&#39;),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr_data111&nbsp;=&nbsp;data111.split(&quot;,&quot;);//拆分字符串为数组&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr_data222&nbsp;=&nbsp;data222.split(&quot;,&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr_data333&nbsp;=&nbsp;data333.split(&quot;,&quot;);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;option3&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tooltip:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger:&nbsp;&#39;axis&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;legend:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:[&#39;方量&#39;,&#39;家数&#39;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xAxis:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;category&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:&nbsp;arr_data111<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yAxis:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;value&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;万方&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min:&nbsp;1000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max:&nbsp;3000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval:&nbsp;400,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axisLabel:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatter:&nbsp;&#39;{value}&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;&#39;value&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;&#39;&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min:&nbsp;40,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max:&nbsp;80,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval:&nbsp;5,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axisLabel:&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatter:&nbsp;&#39;{value}家&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;series:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;方量&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;bar&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:arr_data222<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&#39;家数&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&#39;line&#39;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yAxisIndex:&nbsp;1,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data:arr_data333<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;使用刚指定的配置项和数据显示图表。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chart3.setOption(option3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;</pre></div><p>看懂了吗？是不是很方便，你是不是有更好的idea！</p><p><br/></p><p>更多详情，请看<a href="http://echarts.baidu.com/option.html" target="_blank" title="echarts">echarts</a><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css实现文字竖排</title>
    <link href="/2016/06/21/52/"/>
    <url>/2016/06/21/52/</url>
    
    <content type="html"><![CDATA[ <section id="syntax"><p><span style="font-family: 微软雅黑,Microsoft YaHei;">文字竖排会用到<span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">writing-mode</span>属性，我们先来看看例子。</span></p><div class="code-wrapper"><pre class="brush:css;toolbar:false">.shupai{writing-mode:&nbsp;tb-rl;writing-mode:&nbsp;vertical-rl;-webkit-writing-mode:&nbsp;vertical-rl;color:&nbsp;#3B3533;font-size:&nbsp;20px;}<p>&lt;div&nbsp;class=&quot;shupai&quot;&gt;<br>&lt;p&gt;女王用冰冷的外表保护自己，&lt;/p&gt;&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;其实内心如水，<br>&lt;/p&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;内在好似绵密的奶油，<br>&lt;/p&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;极易被热情融化……<br>&lt;/p&gt;<br>&lt;/div&gt;</pre></div><p><span style="font-family: 微软雅黑,Microsoft YaHei;"></span>效果如图：</p><p><img src="/upload/ueditor/image/20161123/1479890461308740.png" title="1479890461308740.png" alt="QQ截图20161123164020.png" style="width: 568px; height: 454px;" width="568" height="454"/></p><h2><span style="font-size: 16px; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">语法：</span></h2><p><br/></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">writing-mode：horizontal-tb | vertical-rl | vertical-lr |lr-tb|tb-rl</span></p><p><br/></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">默认值：</span><mark><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">horizontal-tb</span></mark></p><p><br/></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">适用于：除&nbsp; </span><a style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); text-decoration: none;" href="http://css.doyoe.com/properties/layout/display.htm"><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">display</span></a><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); text-decoration: none;">&nbsp; </span><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">属性定义为table-row-group | table-column-group | table-row | table-column之外的所有元素</span></p><p><br/></p><br/><p><br/></p></section><p></p><section id="value"><h2><span style="font-size: 16px; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">取值：</span></h2><p><br/></p><ul class=" list-paddingleft-2"><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">horizontal-tb：</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">水平方向自上而下的书写方式。即 left-right-top-bottom（类似IE私有值lr-tb）</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">vertical-rl：</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">垂直方向自右而左的书写方式。即 top-bottom-right-left（类似IE私有值tb-rl）</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">vertical-lr：</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">垂直方向自左而右的书写方式。即 top-bottom-left-right</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">lr-tb：</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">左-右，上-下。对象中的内容在水平方向上从左向右流入，后一行在前一行的下面。 所有的字形都是竖直向上的。这种布局是罗马语系使用的（IE）</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">tb-rl：</span></p></li><li><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">上-下，右-左。对象中的内容在垂直方向上从上向下流入，自右向左。后一竖行在前一竖行的左面。全角字符是竖直向上的，半角字符如拉丁字母或片假名顺时针旋转90度。这种布局是东亚语系通常使用的（IE）</span></p></li></ul><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">用法简单，兼容性不错。</span></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">只是今天，用<span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">writing-mode</span>遇到了奇怪的问题，</span></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);"><img alt="QQ截图20160621171346.png" src="/ueditor/php/upload/image/20160621/1466500541696996.png" title="1466500541696996.png"/></span></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">混凝吐三个字，凝字被土字覆盖了，查了一会没查出原因，把混凝土中凝换成其他字又会正常，奇怪，你知道吗？</span></p><p><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);"></span></p><p><br/></p></section><p></p><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS外边距合并</title>
    <link href="/2016/06/14/51/"/>
    <url>/2016/06/14/51/</url>
    
    <content type="html"><![CDATA[ <p>外边距合并以前确实遇到过，但从没有深究过，没有在意，前几天同事说到这个问题，便查了查。</p><p>外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。</p><p>简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p><p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。请看下图：</p><p><img src="/ueditor/php/upload/image/20160614/1465876802179961.gif" alt="CSS 外边距合并实例 1"/></p><p>当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。请看下图：</p><p><img src="/ueditor/php/upload/image/20160614/1465876803827177.gif" alt="CSS 外边距合并实例 2"/></p><p>尽管看上去有些奇怪，但是外边距甚至可以与自身发生合并。</p><p>假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：</p><p><img src="/ueditor/php/upload/image/20160614/1465876803750334.gif" alt="CSS 外边距合并实例 3"/></p><p>如果这个外边距遇到另一个元素的外边距，它还会发生合并：</p><p><img src="/ueditor/php/upload/image/20160614/1465876804472653.gif" alt="CSS 外边距合并实例 4"/></p><p>这就是一系列的段落元素占用空间非常小的原因，因为它们的所有外边距都合并到一起，形成了一个小的外边距。</p><p>外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。</p><p><img src="/ueditor/php/upload/image/20160614/1465876804668750.gif" alt="CSS 外边距合并的实际意义"/></p><p class="note">注意：只有普通文档流中块状元素的垂直外边距才会发生外边距合并。行内元素、浮动元素或绝对定位元素之间的外边距不会合并。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js判断手机访问并跳转到相应页面</title>
    <link href="/2016/06/13/50/"/>
    <url>/2016/06/13/50/</url>
    
    <content type="html"><![CDATA[<p>方法有很多，列出自己遇到并能成功实现的三种方法。</p><p>1、利用正则判断客户端</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">browserRedirect</span>(<span class="hljs-params"></span>) </span>&#123;     <span class="hljs-keyword">var</span> sUserAgent= navigator.userAgent.toLowerCase();     <span class="hljs-keyword">var</span> bIsIpad= sUserAgent.match(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">&quot;ipad&quot;</span>;     <span class="hljs-keyword">var</span> bIsIphoneOs= sUserAgent.match(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">&quot;iphone os&quot;</span>;     <span class="hljs-keyword">var</span> bIsMidp= sUserAgent.match(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">&quot;midp&quot;</span>;     <span class="hljs-keyword">var</span> bIsUc7= sUserAgent.match(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">&quot;rv:1.2.3.4&quot;</span>;     <span class="hljs-keyword">var</span> bIsUc= sUserAgent.match(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">&quot;ucweb&quot;</span>;     <span class="hljs-keyword">var</span> bIsAndroid= sUserAgent.match(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">&quot;android&quot;</span>;     <span class="hljs-keyword">var</span> bIsCE= sUserAgent.match(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">&quot;windows ce&quot;</span>;     <span class="hljs-keyword">var</span> bIsWM= sUserAgent.match(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">&quot;windows mobile&quot;</span>;    <span class="hljs-keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;     <span class="hljs-built_in">window</span>.location.href= <span class="hljs-string">&#x27;http://www.dou520.wang&#x27;</span>;     &#125; &#125; browserRedirect();Copy</code></pre></div><p>2、引用百度siteapp</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://siteapp.baidu.com/static/webappservice/uaredirect.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">uaredirect(<span class="hljs-string">&quot;http://www.dou520.wang&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>Copy</code></pre></div><p>3.判断，本质同一</p><div class="code-wrapper"><pre><code class="hljs scheme">(<span class="hljs-name">function</span> () &#123;var sUserAgent = navigator.userAgent<span class="hljs-comment">; </span>if (<span class="hljs-name">sUserAgent.indexOf</span>(<span class="hljs-symbol">&#x27;Android</span>&#x27;) &gt; <span class="hljs-number">-1</span> || sUserAgent.indexOf(<span class="hljs-symbol">&#x27;iPhone</span>&#x27;) &gt; <span class="hljs-number">-1</span> || sUserAgent.indexOf(<span class="hljs-symbol">&#x27;iPad</span>&#x27;) &gt; <span class="hljs-number">-1</span> || sUserAgent.indexOf(<span class="hljs-symbol">&#x27;iPod</span>&#x27;) &gt; <span class="hljs-number">-1</span> || sUserAgent.indexOf(<span class="hljs-symbol">&#x27;Symbian</span>&#x27;) &gt; <span class="hljs-number">-1</span>) &#123;      location.href = <span class="hljs-symbol">&#x27;http://www.dou520.wang</span>&#x27;<span class="hljs-comment">;    //手机端地址       </span>&#125; else &#123;&#125;&#125;)()<span class="hljs-comment">;Copy</span></code></pre></div><p>方法其实很多，大部分原理都是通过判断客户端是否为移动端浏览器，然后跳转。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML的快速写法：Emmet</title>
    <link href="/2016/06/07/49/"/>
    <url>/2016/06/07/49/</url>
    
    <content type="html"><![CDATA[ <p>今天同事跟我讲了一个写html标签的快捷方法，真的很好用。其实就是是一款很多编辑器都支持的插件Emmet。<br/></p><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具:</p><p>基本上，大多数的文本编辑器都会允许你存储和重用一些代码块，我们称之为“片段”。虽然片段能很好地推动你得生产力，但大多数的实现都有这样一个缺点：你必须先定义你得代码片段，并且不能再运行时进行拓展。</p><p>Emmet把片段这个概念提高到了一个新的层次：你可以设置CSS形式的能够动态被解析的表达式，然后根据你所输入的缩写来得到相应的内容。</p><p style="text-align: center;"><img src="/ueditor/php/upload/image/20160607/1465298244282226.jpg"/></p><p>Emmet语法很简单，如下：</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&nbsp;E&nbsp;代表HTML标签。&nbsp;E#id&nbsp;代表id属性。&nbsp;E.class&nbsp;代表class属性。&nbsp;E[attr=foo]&nbsp;代表某一个特定属性。</pre></div><div class="code-wrapper"><pre class="brush:html;toolbar:false">&nbsp;E{foo}&nbsp;代表标签包含的内容是foo。&nbsp;E&gt;N&nbsp;代表N是E的子元素。&nbsp;E+N&nbsp;代表N是E的同级元素。&nbsp;E^N&nbsp;代表N是E的上级元素。</pre></div><p><br/></p><br/><p>参考网址，这里很详细：http://www.w3cplus.com/tools/emmet-cheat-sheet.html</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery插件开发</title>
    <link href="/2016/06/04/48/"/>
    <url>/2016/06/04/48/</url>
    
    <content type="html"><![CDATA[ <p><br/></p><p>jQuery自定义了jQuery.extend()和jQuery.fn.extend()方法.其中jQuery.extend()方法能够创建全局函数或者选择器,而jQuery.fn.extend()方法能够创建jQuery对象方法.</p><p>jQuery插件开发就分为这两种： <br/><br/>一、类级别 <br/><br/>类级别你可以理解为扩展jquery类，最明显的例子是$.ajax(...),相当于静态方法。 <br/><br/>开发扩展其方法时使用$.extend方法，即jQuery.extend(object);&nbsp;</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">$.extend({&nbsp;&nbsp;&nbsp;al:function(msg){alert(msg);}});</pre></div><p>调用很简单，$.al(11);效果如下：</p><p><img src="/ueditor/php/upload/image/20160604/1465046777269616.png" title="1465046777269616.png" alt="捕获.PNG"/></p><p><br/></p><p>二、对象级别 <br/><br/>对象级别则可以理解为基于对象的拓展，如$(&quot;#scroll&quot;).slide(...); 这里这个slide呢，就是基于对象的扩展了。 <br/><br/>开发扩展其方法时使用$.fn.extend方法，即jQuery.fn.extend(object);&nbsp;</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">$.fn.extend({&nbsp;shtml:&nbsp;function&nbsp;(showhtml)&nbsp;{&nbsp;jQuery(this).html(showhtml);&nbsp;}&nbsp;})</pre></div><p>调用也很简单，<br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;div&nbsp;class=&quot;msg&quot;&gt;&lt;/div&gt;&lt;script&gt;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.msg&#39;).shtml(&#39;111&#39;);&lt;/script&gt;</pre></div><p>效果如下：</p><p><img src="/ueditor/php/upload/image/20160604/1465046931169395.png" title="1465046931169395.png" alt="捕获.PNG"/></p><p><br/></p><p>这里只是最简单的示例，你可以尝试开发一些复杂美观的插件。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP的组合查询</title>
    <link href="/2016/06/02/47/"/>
    <url>/2016/06/02/47/</url>
    
    <content type="html"><![CDATA[<p>如果你需要在查询的时候同时偶尔使用字符串却又不希望丢失数组方式的灵活的话，可以考虑使用组合查询。<br>组合查询的主体还是采用数组方式查询，只是加入了一些特殊的查询支持，包括字符串模式查询（_string）、复合查询（_complex）、请求字符串 查询（_query），混合查询中的特殊查询每次查询只能定义一个，由于采用数组的索引方式，索引相同的特殊查询会被覆盖。</p><h2 id="一-字符串模式查询（采用-string-作为查询条件）"><a href="#一-字符串模式查询（采用-string-作为查询条件）" class="headerlink" title="一. 字符串模式查询（采用_string 作为查询条件）"></a>一. 字符串模式查询（采用_string 作为查询条件）</h2><p>数组条件还可以和字符串条件混合使用，例如：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;member&quot;</span>); <span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;neq&#x27;</span>,<span class="hljs-number">5</span>);<span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;wzt&#x27;</span>;<span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;_string&#x27;</span>] = <span class="hljs-string">&#x27;status=1 AND score&gt;10&#x27;</span>;<span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-variable">$map</span>)-&gt;select();</code></pre></div><p>最后得到的查询条件：</p><div class="code-wrapper"><pre><code class="hljs autohotkey">( `id` != <span class="hljs-number">5</span> ) <span class="hljs-literal">AND</span> ( `name` = &#x27;wzt&#x27; ) <span class="hljs-literal">AND</span> ( status=<span class="hljs-number">1</span> <span class="hljs-literal">AND</span> score&gt;<span class="hljs-number">10</span> )</code></pre></div><h2 id="二-请求字符串查询方式"><a href="#二-请求字符串查询方式" class="headerlink" title="二. 请求字符串查询方式"></a>二. 请求字符串查询方式</h2><p>请求字符串查询是一种类似于URL传参的方式，可以支持简单的条件判断</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;m_id&#x27;</span>] = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;gt&#x27;</span>,<span class="hljs-string">&#x27;10&#x27;</span>);<span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;_query&#x27;</span>] = <span class="hljs-string">&#x27;status=1&amp;score&gt;60&amp;_logic=or&#x27;</span>;</code></pre></div><p>得到的查询条件是：</p><div class="code-wrapper"><pre><code class="hljs autohotkey">`m_id`&gt;<span class="hljs-number">10</span> <span class="hljs-literal">AND</span> (`status` = &#x27;<span class="hljs-number">1</span>&#x27; <span class="hljs-literal">OR</span> `score` &gt; &#x27;<span class="hljs-number">60</span>&#x27;)</code></pre></div><h2 id="三-复合查询"><a href="#三-复合查询" class="headerlink" title="三. 复合查询"></a>三. 复合查询</h2><p>复合查询相当于封装了一个新的查询条件，然后并入原来的查询条件之中，所以可以完成比较复杂的查询条件组装。</p><p>例如:<br>``<br>$where[‘name’]  = array(‘like’, ‘%kw%’);<br>$where[‘title’]  = array(‘like’,’%kw%’);<br>$where[‘_logic’] = ‘or’;<br>$con[‘_complex’] = $where;<br>$con[‘id’]  = array(‘gt’,5);</p><div class="code-wrapper"><pre><code class="hljs">查询条件是</code></pre></div><p>( id &gt; 5) AND ( ( name like ‘%kw%’) OR ( title like ‘%kw%’) )</p><div class="code-wrapper"><pre><code class="hljs excel">复合查询使用了_<span class="hljs-built_in">complex</span>作为子查询条件来定义，配合之前的查询方式，可以非常灵活的制定更加复杂的查询条件。很多查询方式可以相互转换，例如上面的可以改成</code></pre></div><p>$where[‘id’] = array(‘gt’,5);<br>$where[‘_string’] = ‘ (name like “%kw%”)  OR ( title like “%kw%”) ‘;</p><div class="code-wrapper"><pre><code class="hljs">最后生成的SQL语句是一致的。</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP的复合查询</title>
    <link href="/2016/06/01/46/"/>
    <url>/2016/06/01/46/</url>
    
    <content type="html"><![CDATA[<p>复合查询相当于封装了一个新的查询条件，然后并入原来的查询条件之中，所以可以完成比较复杂的查询条件组装。</p><p>例如查询name和title中有kw且id大于10的数据：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$where</span>[<span class="hljs-string">&#x27;name&#x27;</span>]  = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;like&#x27;</span>, <span class="hljs-string">&#x27;%kw%&#x27;</span>);<span class="hljs-variable">$where</span>[<span class="hljs-string">&#x27;title&#x27;</span>]  = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;like&#x27;</span>,<span class="hljs-string">&#x27;%kw%&#x27;</span>);<span class="hljs-variable">$where</span>[<span class="hljs-string">&#x27;_logic&#x27;</span>] = <span class="hljs-string">&#x27;or&#x27;</span>;<span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;_complex&#x27;</span>] = <span class="hljs-variable">$where</span>;<span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;id&#x27;</span>]  = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;gt&#x27;</span>,<span class="hljs-number">10</span>);</code></pre></div><p>相当于sql语句</p><div class="code-wrapper"><pre><code class="hljs n1ql">( id &gt; 10) <span class="hljs-keyword">AND</span> ( ( name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%kw%&#x27;</span>) <span class="hljs-keyword">OR</span> ( <span class="hljs-built_in">title</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%kw%&#x27;</span>) )</code></pre></div><p>其实，很多查询方式可以相互转换，例如上面的查询条件可以改成：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"><span class="hljs-built_in">where</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = array(<span class="hljs-string">&#x27;gt&#x27;</span>,10);</span><span class="hljs-meta">$</span><span class="bash"><span class="hljs-built_in">where</span>[<span class="hljs-string">&#x27;_string&#x27;</span>] = <span class="hljs-string">&#x27; (name like &quot;%kw%&quot;)  OR ( title like &quot;%kw&quot;) &#x27;</span>;</span></code></pre></div><p>复合查询相当于封装了一个新的查询条件，然后并入原来的查询条件之中，所以可以完成比较复杂的查询条件组装。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js获取当前地理位置与ip</title>
    <link href="/2016/05/27/45/"/>
    <url>/2016/05/27/45/</url>
    
    <content type="html"><![CDATA[ <p>pc获取当前地理位置</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.getScript(&#39;http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&#39;,&nbsp;function(_result)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(remote_ip_info.ret&nbsp;==&nbsp;&#39;1&#39;)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;alert里面换行用&nbsp;&nbsp;而非&lt;br&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;国家：&#39;&nbsp;+&nbsp;remote_ip_info.country&nbsp;+&nbsp;&#39;省：&#39;&nbsp;+&nbsp;remote_ip_info.province&nbsp;+&nbsp;&#39;<p>市：&#39;&nbsp;+&nbsp;remote_ip_info.city&nbsp;+&nbsp;&#39;<br>区：&#39;&nbsp;+&nbsp;remote_ip_info.district&nbsp;+&nbsp;&#39;</p><p>ISP：&#39;&nbsp;+&nbsp;remote_ip_info.isp&nbsp;+&nbsp;&#39;<br>类型：&#39;&nbsp;+&nbsp;remote_ip_info.type&nbsp;+&nbsp;&#39;<br>其<br>他：&#39;&nbsp;+&nbsp;remote_ip_info.desc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;没有找到匹配的IP地址信息！&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&lt;/script&gt;</pre></div><p><br style="background-color: inherit;"/></p><p><br style="background-color: inherit;"/></p><p>获取当前ip</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">&lt;script&gt;<br>var&nbsp;url&nbsp;=&nbsp;&#39;<a href="http://chaxun.1616.net/s.php?type=ip&amp;output=json&amp;callback=?&amp;_=&#39;&nbsp;+&nbsp;Math.random()">http://chaxun.1616.net/s.php?type=ip&amp;output=json&amp;callback=?&amp;_=&#39;&nbsp;+&nbsp;Math.random()</a>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.getJSON(url,&nbsp;function(data)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(data.Ip);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&lt;/script&gt;</pre></div><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去除a链接的虚线框</title>
    <link href="/2016/05/18/43/"/>
    <url>/2016/05/18/43/</url>
    
    <content type="html"><![CDATA[ <p>a链接上的虚线框非常常见，而且真的非常难看。如图，</p><p><img alt="QQ截图20160518115050.png" src="/ueditor/php/upload/image/20160518/1463543706450238.png" title="1463543706450238.png"/></p><p>如何去除呢？</p><p>只需要加一行代码，完美解决。</p><div class="code-wrapper"><pre class="brush:css;toolbar:false">a{blr:expression(this.onFocus=this.blur());&nbsp;/*for&nbsp;IE&nbsp;*/&nbsp;outline:none;&nbsp;/*for&nbsp;FF&nbsp;*/&nbsp;}</pre></div><p><img alt="QQ截图20160518115626.png" src="/ueditor/php/upload/image/20160518/1463543830115287.png" title="1463543830115287.png"/></p><p><br/></p><p>谷歌系还有一个输入框高亮显示的智能模式，其实也不怎么好看，去除加入：</p><p><img alt="QQ截图20160518115929.png" src="/ueditor/php/upload/image/20160518/1463544015893893.png" title="1463544015893893.png"/></p><div class="code-wrapper"><pre class="brush:css;toolbar:false">input,textarea{outline:&nbsp;none;}</pre></div><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鲜为人知的z-index</title>
    <link href="/2016/05/07/42/"/>
    <url>/2016/05/07/42/</url>
    
    <content type="html"><![CDATA[ <p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">z-index一般理解就是设置标签在z轴先后顺序，z-index值大的显示在最前面，小的则会被遮挡，真的是这样吗？我们来一探究竟！<span style="background-color: rgb(255, 255, 255); line-height: 1.6;"></span></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">z-index可以设置成三个值：</p><ul class=" list-paddingleft-2" style="margin-top: 0px; margin-bottom: 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><li><p style="margin: 5px 0px; background-color: inherit;">默认值auto。</p></li><li><p style="margin: 5px 0px; background-color: inherit;">数值。指示层叠级数，可以是负值。</p></li><li><p style="margin: 5px 0px; background-color: inherit;">inherit。继承父元素。</p></li></ul><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><span style="background-color: inherit; color: rgb(255, 0, 0);"><strong style="background-color: inherit;">层叠顺序&nbsp;stacking order</strong></span></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">HTML文档中的每个元素都能在文档中其它元素的之前或者之后。这就是所谓的层叠顺序。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">层叠顺序不是z-index独有的，每个元素都有层叠顺序，元素渲染的先后顺序跟它有很大关系。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">当元素发生层叠时，元素的层级高的会优先显示在上面，层级一样的则会根据dom的先后顺序进行渲染，后面的会覆盖前面的。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><img style="width: 529px; height: 337px;" alt="QQ图片20160507141037.png" src="/ueditor/php/upload/image/20160507/1462601721469932.png" title="1462601721469932.png" height="337" width="529"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; text-align: center;"><br/></p><p>试试看不用z-index来改变元素层叠顺序，<br/></p><br/><blockquote style="background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;style&gt;&nbsp;&nbsp;&nbsp;&nbsp;#box1{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;red;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:inline-block;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;#box2{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;yellow;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;300px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-top:-200px;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;&lt;div&nbsp;id=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div&nbsp;id=&quot;box2&quot;&gt;&lt;/div&gt;</pre></div><p style="margin: 5px 0px; background-color: inherit;"><span style="background-color: inherit; font-family: inherit; color: rgb(255, 0, 0) !important; font-size: inherit !important;"></span><img style="width: 394px; height: 317px;" alt="1.png" src="/ueditor/php/upload/image/20160507/1462601749681902.png" title="1462601749681902.png" height="317" width="394"/></p></blockquote><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">这里只做了细微的修改，就是给box1加了一个display:inline-block;的样式，从七阶图中看出，display：block的元素的层叠水平低于display：inline-block的元素，所以浏览器就将box2渲染到box1上面。</p><p><br/></p><br/><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><span style="background-color: inherit; color: rgb(255, 0, 0);"><strong style="background-color: inherit;">层叠上下文&nbsp;stacking context</strong></span></p><p style="margin-top:0px; margin-bottom:10px; color:rgb(51,51,51); font-family:Monaco,&#39;Microsoft YaHei&#39;,&#39;Hiragino Sans GB W3&#39;,Tahoma,Arial; font-size:13px; line-height:25px"><span style="font-size: 16px;">一组拥有公共父级的元素在层叠顺序中一起上移或者下移被称为层叠上下文。透彻的理解层叠上下文是真正掌握z-index和层叠顺序如何工作的关键所在。</span></p><p style="margin-top:0px; margin-bottom:10px; color:rgb(51,51,51); font-family:Monaco,&#39;Microsoft YaHei&#39;,&#39;Hiragino Sans GB W3&#39;,Tahoma,Arial; font-size:13px; line-height:25px"><span style="font-size: 16px;">每个层叠上下文有一个单独的HTML元素作为它的根元 素。当一个新的层叠上下文在一个元素上形成的时候，层叠上下文将其所有的子元素都限制在层叠顺序的一个特定位置。这意味着如果一个元素被层叠 顺序底部的一个层叠上下文所包含，将没有办法将其置于另一个不同的具有更高层叠顺序的层叠上下文中包含的元素之前，即便这个元素有无限大的z-index值。</span></p><p style="margin-top:0px; margin-bottom:10px; color:rgb(51,51,51); font-family:Monaco,&#39;Microsoft YaHei&#39;,&#39;Hiragino Sans GB W3&#39;,Tahoma,Arial; font-size:13px; line-height:25px"><span style="font-size: 16px;">在一个元素上形成层叠上下文有如下方式：</span></p><ul class=" list-paddingleft-2" style="padding:0px; margin:0px 0px 10px 25px; color:rgb(51,51,51); font-family:Monaco,&#39;Microsoft YaHei&#39;,&#39;Hiragino Sans GB W3&#39;,Tahoma,Arial; font-size:13px; line-height:25px"><li><p><span style="font-size: 16px;">当一个元素是文档的根元素（&lt;html&gt;元 素）</span></p></li><li><p><span style="font-size: 16px;">当一个元素有除static之外的position属性值且z-index值不为auto</span></p></li><li><p><span style="font-size: 16px;">当一个元素有小于1的opacity值</span></p></li><li><p><span style="font-size: 16px;"><span style="background-color: inherit; line-height: 1.6;"><span style="font-size: 16px;">当一个元素</span>的transform不等于none</span></span></p></li></ul><p style="margin-top:0px; margin-bottom:10px; color:rgb(51,51,51); font-family:Monaco,&#39;Microsoft YaHei&#39;,&#39;Hiragino Sans GB W3&#39;,Tahoma,Arial; font-size:13px; line-height:25px"><span style="font-size: 16px;">前两种形成层叠上下文的方式很有意义，且一般Web开发者都能够理解（即使他们不知道它们的叫法）。</span></p><p><br/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">结合七阶图，最下层background便是建立在层叠上下文的基础上的，也就是说在层叠上下文中，所有的元素都会渲染在该元素的层叠上下文背景和边框上面；因而在block、float元素等不存在层级上下文的元素中，当子元素设置z-index为负时，子元素会被父元素遮挡。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><blockquote style="background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;style&gt;&nbsp;&nbsp;&nbsp;&nbsp;#box1{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;red;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;#box2{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z-index:-1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;300px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;yellow;&nbsp;&nbsp;&nbsp;&nbsp;}&lt;/style&gt;&nbsp;&lt;div&nbsp;id=&quot;box1&quot;&gt;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id=&quot;box2&quot;&gt;&lt;/div&gt;&lt;/div&gt;</pre></div></blockquote><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><img style="width: 338px; height: 323px;" alt="222.PNG" src="/ueditor/php/upload/image/20160507/1462602108773447.png" title="1462602108773447.png" height="323" width="338"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; color: rgb(62, 62, 62); font-family: &quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size: 16px; text-align: left;">这里，box并没有创建层叠上下文，当子元素box2设置z-index:-1时，box2所在的层叠上下文是根元素，即html根标签，根据七阶图可以看出，box2会渲染在html标签上面，box1(z-index:auto)下面，所以box2被遮挡了。<img data-src="http://mmbiz.qpic.cn/mmbiz/zPh0erYjkib0TXMuJRGH7TPOQvyawxuLGlgQF8nXibribchibjLZGbyztenMq8UhYTxtiaSibeFI4Cu96Qj9TgxD6VBQ/0?wx_fmt=png" data-type="png" data-ratio="0.5863309352517986" data-w="" src="http://www.dou520.wang/admin/ueditor/themes/default/images/spacer.gif" data-media-type="image" data-inited="true" style="background:url(http://www.dou520.wang/admin/ueditor/lang/zh-cn/images/localimage.png) no-repeat center center;border:1px solid #ddd" word_img="file:///D:/Documents/ynote/qq92D480B299A9AF1BD73BBC78E568219E/1c051bf1c9be4533ad8e901866f592f3/640.webp"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">那么怎么解决这个问题呢？</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">简单吧，为box1建立一个层叠上下文（比如设置z-index:1;）即可，box1中的元素无论z-index是负的多少，都会显示在box1的背景之上，</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">如图：</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><img style="width: 368px; height: 376px;" alt="222222.PNG" src="/ueditor/php/upload/image/20160507/1462602203684709.png" title="1462602203684709.png" height="376" width="368"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px; text-align: center;"><img data-src="http://mmbiz.qpic.cn/mmbiz/zPh0erYjkib0TXMuJRGH7TPOQvyawxuLGsI141ibkC84m67UbkItIj8VsQt1wWkfy1EVibBCicOuL5V0nWtUmFuMCw/0?wx_fmt=png" data-type="png" data-ratio="0.420863309352518" data-w="" src="http://www.dou520.wang/admin/ueditor/themes/default/images/spacer.gif" data-media-type="image" data-inited="true" style="background:url(http://www.dou520.wang/admin/ueditor/lang/zh-cn/images/localimage.png) no-repeat center center;border:1px solid #ddd" word_img="file:///D:/Documents/ynote/qq92D480B299A9AF1BD73BBC78E568219E/cd3b54e3321c40d2a703d7fdb3438476/640.webp"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">这里我用了前面说的的第一种方式去创建层叠上下文，即定位元素中z-index不为auto的元素会建立层叠上下文。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">为什么box1的z-index小于box2的z-index，box2却显示在box1上面呢？</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">层叠水平仅在同一父级层叠上下文中进行比较，即层叠上下文box1中的子元素的层叠水平不会和另一个层叠上下文中的元素进行比较，当然也不会和box1自己比较。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px; color: rgb(62, 62, 62); font-family: &quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size: 16px; text-align: left;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">所以文章开头的问题，答案是否定的。</p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><br style="background-color: inherit;"/></p><p style="margin: 5px 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;">总结：</p><ol class=" list-paddingleft-2" style="margin-top: 0px; margin-bottom: 0px; background-color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; color: rgb(62, 62, 62); font-family: &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif; font-size: 16px;"><li><p style="margin: 5px 0px; background-color: inherit;">理解七阶图</p></li><li><p style="margin: 5px 0px; background-color: inherit;">z-index仅在设置position不等于static的元素中有效<br/></p></li><li><p style="margin: 5px 0px; background-color: inherit;">z-index层叠水平的比较仅限于同一级别的层叠上下文中</p></li></ol><p><br class="Apple-interchange-newline"/></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js与PHP跳出循环</title>
    <link href="/2016/04/25/41/"/>
    <url>/2016/04/25/41/</url>
    
    <content type="html"><![CDATA[<p>javascript</p><p>先看break：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;   <span class="hljs-built_in">document</span>.write(i);   <span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<span class="hljs-keyword">break</span>;&#125;&#125;</code></pre></div><p>输出的结果为：12345，当i的值等于5的时候直接通过break跳出了循环，不再继续往下运行。</p><p>再来看continue:</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;   <span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>)&#123;<span class="hljs-keyword">continue</span>;&#125;   <span class="hljs-built_in">document</span>.write(i);&#125;</code></pre></div><p>输出的结果为：1234678910，当i的值等于5的时候跳了过去继续向下执行循环。</p><p>最后来看return，return只能出现在函数里面，如果出现在上面的实例里的for循环里会报错，而return出现在函数里的作用就是即使函数下面还有内容也不会再执行了。</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (username==<span class="hljs-string">&quot;&quot;</span>)&#123;   alert(<span class="hljs-string">&quot;请输入用户名&quot;</span>);   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-keyword">if</span>(qq==<span class="hljs-string">&quot;&quot;</span>)&#123;   alert(<span class="hljs-string">&quot;请输入QQ&quot;</span>);   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre></div><p>当username为空时，就不会再向下执行。</p><p>此外，break 语句和 continue 语句都可以与有标签的语句联合使用，返回代码中的特定位置。</p><p>通常，当循环内部还有循环时，会这样做，例如：</p><div class="code-wrapper"><pre><code class="hljs mipsasm">var iNum = <span class="hljs-number">0</span>;<span class="hljs-symbol"></span><span class="hljs-symbol">outermost:</span>for (var i=<span class="hljs-number">0</span><span class="hljs-comment">; i&lt;10; i++) &#123;</span>  for (var <span class="hljs-keyword">j=0; </span><span class="hljs-keyword">j&lt;10; </span><span class="hljs-keyword">j++) </span>&#123;    if (i == <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-keyword">j </span>== <span class="hljs-number">5</span>) &#123;    <span class="hljs-keyword">break </span>outermost;  &#125;  iNum++;  &#125;&#125;alert(iNum)<span class="hljs-comment">;    //输出 &quot;55&quot;Copy</span></code></pre></div><p>在上面的例子中，标签 outermost 表示的是第一个 for 语句。正常情况下，每个 for 语句执行 10 次代码块，这意味着<br>iNum++ 正常情况下将被执行 100 次，在执行完成时，iNum 应该等于 100。这里的 break<br>语句有一个参数，即停止循环后要跳转到的语句的标签。这样 break 语句不止能跳出内部 for 语句（即使用变量 j 的语句），还能跳出外部<br>for 语句（即使用变量 i 的语句）。因此，iNum 最后的值是 55，因为当 i 和 j 的值都等于 5 时，循环将终止。</p><p>PHP</p><p>**continue<br>**continue<br>是用来用在循环结构中，控制程序放弃本次循环continue语句之后的代码并转而进行下一次循环。如果在非循环结构中(例如if语句中，switch语句中)使用continue，程序将会出错。<br>**例如在下面的这段PHP代码片段中：<br>**</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>;<span class="hljs-variable">$i</span> &lt;= <span class="hljs-number">100</span>; <span class="hljs-variable">$i</span>++ )&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span> % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> || <span class="hljs-variable">$i</span> % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">continue</span>;&#125; <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span>”<span class="hljs-variable">$i</span>&lt;br/&gt;”;&#125;&#125;</code></pre></div><p>输出100以内，既不能被7整除又不能被3整除的那些自然数，循环中先用if条件语句判断那些能被整除的数，然后执行 continue，就直接进入了下个循环。不会执行下面的输出语句了。<br>**<br>break<br>**break是被用在上面所提的各种循环和switch语句中的。作用是跳出当前的语法结构，执行下面的语句。break语句可以带一个参数n，表示跳出循环的层数，如果要跳出多重循环的话，可以用n来表示跳出的层数，如果不带参数默认是跳出本重循环。<br>看下面这个多重循环嵌套的例子：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>;<span class="hljs-variable">$i</span> &lt;= <span class="hljs-number">10</span>; <span class="hljs-variable">$i</span>++ )&#123;  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">1</span>;<span class="hljs-variable">$j</span> &lt;= <span class="hljs-number">10</span>;<span class="hljs-variable">$j</span>++)&#123;    <span class="hljs-variable">$m</span> = <span class="hljs-variable">$i</span>  <span class="hljs-variable">$i</span> + <span class="hljs-variable">$j</span>  <span class="hljs-variable">$j</span>;    <span class="hljs-keyword">echo</span>”<span class="hljs-variable">$m</span> &lt;br/&gt;”;    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$m</span> &lt; <span class="hljs-number">90</span> || <span class="hljs-variable">$m</span> &gt; <span class="hljs-number">190</span>) &#123;    <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;    &#125;  &#125;&#125;</code></pre></div><p>这里使用了break 2跳出了两重循环，将2去掉，得到的结果是完全不一样的。</p><p>如果不使用参数，跳出的只是本次循环，第一层循环会继续执行下去。</p><p>**<br>exit<br>**exit是用来结束程序执行的。可以用在任何地方，本身没有跳出循环的含义。exit可以带一个参数，如果参数是字符串，PHP将会直接把字符串输出，如果参数是integer整形（范围是0-254），那个参数将会被作为结束状态使用。</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1000</span>;<span class="hljs-variable">$i</span> &gt;= <span class="hljs-number">1</span> ; <span class="hljs-variable">$i</span>– )&#123;  <span class="hljs-keyword">if</span>( sqrt(<span class="hljs-variable">$i</span>) &gt;= <span class="hljs-number">29</span>)&#123;    <span class="hljs-keyword">echo</span>”<span class="hljs-variable">$i</span> &lt;br/&gt;”;  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">exit</span>;  &#125;&#125;<span class="hljs-keyword">echo</span>”本行将不会被输出”;</code></pre></div><p>例子中直接在从循环里结束了代码的运行，这样会导致后面的代码都不会被执行，如果是在一个php web 页面里面，甚至连exit后面的html代码都不会被输出。</p><p>**return<br>**return</p><p>语句是用来结束一段代码，并返回一个参数的。可以从一个函数里调用，也可以从一个include()或者require()语句包含的文件里来调用，也可以是在主程序里调用，如果是在函数里调用程序将会马上结束运行并返回参数，如果是include()或者require()语句包含的文件中被调用，程序<br>执行将会马上返回到调用该文件的程序，而返回值将作为include()或者require()的返回值。而如果是在主程序中调用，那么主程序将会马上停<br>止执行</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">1000</span>;<span class="hljs-variable">$i</span> &gt;= <span class="hljs-number">1</span> ; <span class="hljs-variable">$i</span>– )&#123;  <span class="hljs-keyword">if</span>( sqrt(<span class="hljs-variable">$i</span>) &gt;= <span class="hljs-number">29</span>)&#123;    <span class="hljs-keyword">echo</span>”<span class="hljs-variable">$i</span> &lt;br/&gt;”;  &#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">return</span>;  &#125;&#125;<span class="hljs-keyword">echo</span>”本行将不会被输出”;</code></pre></div><p>和上面使用exit的效果是一样的。</p><p>在循环结束条件，自然跳出。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wamp设置本地虚机及域名重定向</title>
    <link href="/2016/04/15/40/"/>
    <url>/2016/04/15/40/</url>
    
    <content type="html"><![CDATA[ <p><span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">1.</span><span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">打开wamp里打开httpd.conf文件（wamp/bin/apache/apache2.4.9/conf）</span></p><p><span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">搜索&nbsp;“Include conf/extra/httpd-vhosts.conf”，确保前面没有 # 注释符，也就是确保引入了 vhosts 虚拟主机配置文件,访问此IP的域名将全部指向 vhosts.conf 中的第一个虚拟主机。这一步千万不能丢。</span><span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;"></span></p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;"><br/></p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">        2.打开C:/WINDOWS/system32/drivers/etc目录下的 hosts ，</p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">加入 127.0.0.1 www.a.com（或者www.b.com,s1,你想设成什么就设成什么）        </p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">            hosts文件是用来解析的，你在浏览器里输入一个域名www.a.com，第一个就是找hosts文件里有没有www.a.com对应的解析记录，找不到再找DNS。</p><p><br/></p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">            3.在虚拟主机设置文件<span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">D:/wamp</span>/wamp/bin/apache/apache2.4.9/conf/extra的httpd-vhosts.conf里设置： <br/></p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">删除 NameVirtualHost *:80 前面的 ##，这样就启用了 vhosts.conf ，默认的httpd.conf默认配置失效。（其实这部分可忽略，现在的版本都有wamp3了，这些新版本中，下面的操作就默认打开了<span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">NameVirtualHost 。</span>）虚拟主机配置将只设置在 httpd-vhosts.conf 里。            </p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">                &lt;VirtualHost *:80&gt;（如果你用的是其他端口修改80即可，我用的是8080端口）            </p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">                &nbsp; &nbsp; DocumentRoot &quot;<span style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;line-height:28px;background-color:#FFFFFF;">D:/wamp/wamp/wwwroot</span>&quot;            （不可接受中文文件夹）</p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">                &nbsp; &nbsp; ServerName www.a.com（与第二步中域名保持一致）            </p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">&nbsp;&nbsp;&nbsp; &nbsp;&lt;Directory /&gt;（设置DocumentRoot可以接受其他盘文件夹）</p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Options Indexes FollowSymLinks<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Order allow,deny<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Allow from all<br/>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Require all granted<br/>&nbsp; &lt;/Directory&gt;                </p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">&lt;/VirtualHost&gt;            </p><p><br/></p><p style="color:#333333;font-family:&#39;Microsoft Yahei&#39;, 微软雅黑, arial, 宋体, sans-serif;font-size:16px;text-align:justify;background-color:#FFFFFF;">                这样就完成了，浏览器输入www.a.com,如果你用的是8080，那就输入www.a.com:8080。当然也可以设置很多，重复第二步第三步即可。            </p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wamp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>评论实时刷新效果</title>
    <link href="/2016/04/12/39/"/>
    <url>/2016/04/12/39/</url>
    
    <content type="html"><![CDATA[ <p>话不多说，直接上示例。</p><p>准备：前台jquery1.8 &nbsp;后台thinkphp3.1 数据库mysql 表comment（字段c_id, m_nick_name, weibo_id, w_content, insert_time, member_id等）</p><p><br/></p><p>html:</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;ul&nbsp;class=&quot;weibo-menu&quot;&gt;&nbsp;&nbsp;&lt;li&gt;转发&lt;/li&gt;&nbsp;&nbsp;&lt;li&gt;&lt;a&nbsp;class=&quot;pinglun&quot;&nbsp;data-rel=&quot;24&quot;&nbsp;onclick=&quot;getComment(24)&quot;&gt;评论&lt;/a&gt;&lt;/li&gt;&nbsp;&nbsp;&lt;li&gt;赞&amp;nbsp;/li&gt;&lt;/ul&gt;&lt;div&nbsp;class=&quot;comment-module-24&quot;&nbsp;style=&quot;display:none;&quot;&gt;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;class=&quot;comment-24&quot;&nbsp;placeholder=&quot;想说点什么&quot;/&gt;&nbsp;&nbsp;&lt;div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;class=&quot;am-btn&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;getComment(24)&quot;&gt;评论&lt;/button&gt;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;am-padding&nbsp;comment-list-24&quot;&gt;&lt;/div&gt;&lt;/div&gt;</pre></div><p>js:</p><div class="code-wrapper"><pre class="brush:js;toolbar:false">$(function()&nbsp;{&nbsp;&nbsp;$(&#39;.pinglun&#39;).on(&#39;click&#39;,&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//评论列表的显示隐藏    &nbsp;&nbsp;id2&nbsp;=&nbsp;$(this).attr(&#39;data-rel&#39;);    &nbsp;&nbsp;$(&#39;.comment-module-&#39;+id2).toggle();&nbsp;&nbsp;});&nbsp;&nbsp;});<p>function&nbsp;getComment(id){<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取对应id<br>&nbsp;&nbsp;&nbsp;&nbsp;comment&nbsp;=&nbsp;$(&#39;.comment-&#39;&nbsp;+&nbsp;id).val();<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;ajax刷新<br>&nbsp;&nbsp;&nbsp;&nbsp;$.post(&quot;{:U(&#39;getComment&#39;)}&quot;,&nbsp;{&nbsp;w_id:&nbsp;id&nbsp;,&nbsp;w_comment:&nbsp;comment},&nbsp;function(data){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//json格式<br>    &nbsp;&nbsp;data&nbsp;=&nbsp;JSON.parse(data);<br>    &nbsp;&nbsp;//初始化变量<br>    &nbsp;&nbsp;html&nbsp;=&nbsp;&#39;&#39;;&nbsp;&nbsp;&nbsp;<br>    &nbsp;&nbsp;//循环输出评论列表并存入html变量<br>    &nbsp;&nbsp;$.each(data,&nbsp;function(i,&nbsp;item)&nbsp;{<br>    &nbsp;&nbsp;&nbsp;&nbsp;html&nbsp;+=&nbsp;&#39;&lt;div&gt;&nbsp;&#39;+&nbsp;item.m_nick_name&nbsp;+&nbsp;&#39;：&#39;+item.w_content&nbsp;+&nbsp;&#39;&lt;br/&gt;&#39;&nbsp;+&nbsp;item.insert_time&nbsp;+&nbsp;&#39;&lt;/div&gt;&lt;hr/&gt;&#39;<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.comment-list-&quot;+id).html(html);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;.comment-&#39;&nbsp;+&nbsp;id).val(&#39;&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>};</pre></div><p><br/></p><p>后台：<br/></p><div class="code-wrapper"><pre class="brush:php;toolbar:false">public&nbsp;function&nbsp;getComment(){<br>    $c&nbsp;=&nbsp;M(&quot;comment&quot;);<br>    $weibo_id&nbsp;=&nbsp;I(&#39;w_id&#39;);<br>    $w_content&nbsp;=&nbsp;I(&#39;w_comment&#39;);<br>&nbsp;&nbsp;&nbsp;&nbsp;//判断是否有评论传入<br>    if($w_content&nbsp;==&nbsp;&#39;&#39;){<br>        $list&nbsp;=&nbsp;$c-&gt;where(&quot;weibo_id=%d&quot;,$weibo_id)-&gt;order(&#39;c_id&nbsp;desc&#39;)-&gt;limit(5)-&gt;select();<br>        echo&nbsp;json_encode($list);<br>    }else{<br>        $data[&#39;weibo_id&#39;]&nbsp;=&nbsp;$weibo_id;<br>        $data[&#39;w_content&#39;]&nbsp;=&nbsp;$w_content;<br>        $data[&#39;member_id&#39;]&nbsp;=&nbsp;session(&#39;m_id&#39;);<br>        $r&nbsp;=&nbsp;$c-&gt;add($data);<br>        $list&nbsp;=&nbsp;$c-&gt;where(&quot;weibo_id=%d&quot;,$weibo_id)-&gt;order(&#39;c_id&nbsp;desc&#39;)-&gt;limit(6)-&gt;select();<br>        echo&nbsp;json_encode($list);<br>    }<br>    &nbsp;&nbsp;&nbsp;&nbsp;<br>}</pre></div><p><br/></p><p><img src="/ueditor/php/upload/image/20160412/1460467257186855.png" style="" title="1460467257186855.png"/></p><p><img src="/ueditor/php/upload/image/20160412/1460467258515707.png" style="" title="1460467258515707.png"/></p><p>PS:</p><h2 style="margin: 0px; padding: 0px; border: 0px; font-family: 微软雅黑; font-size: 14px; white-space: normal; background-color: rgb(249, 249, 249);">定义和用法</h2><p style="margin-top: 12px; margin-bottom: 0px; padding: 0px; border: 0px; line-height: 18px; font-family: Verdana, Arial, 宋体; font-size: 12px; white-space: normal; background-color: rgb(249, 249, 249);">post() 方法通过 HTTP POST 请求从服务器载入数据。</p><h3 style="margin: 20px 0px 0px; padding: 0px; border: 0px; font-size: 12px; font-family: Verdana, Arial, 宋体; white-space: normal; background-color: rgb(249, 249, 249);">语法</h3><div class="code-wrapper"><pre style="margin-top: 10px; margin-bottom: 0px; padding: 10px; border: 1px dotted rgb(119, 136, 85); font-family: Consolas, &#39;Courier New&#39;, Courier, monospace; width: 685px; font-size: 12px; background-color: rgb(245, 245, 245);">jQuery.post(url,data,success(data,&nbsp;textStatus,&nbsp;jqXHR),dataType)</pre></div><table class="dataintable" width="709"><tbody style="margin: 0px; padding: 0px; border: 0px;"><tr style="margin: 0px; padding: 0px; border: 0px;" class="firstRow"><th style="margin: 0px; padding-right: 15px; padding-left: 6px; border-color: rgb(170, 170, 170); vertical-align: baseline; width: 226px; background-color: rgb(213, 213, 213);">参数</th><th style="margin: 0px; padding-right: 15px; padding-left: 6px; border-color: rgb(170, 170, 170); vertical-align: baseline; background-color: rgb(213, 213, 213);">描述</th></tr><tr style="margin: 0px; padding: 0px; border: 0px;"><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);"><em style="margin: 0px; padding: 0px; border: 0px;">url</em></td><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);">必需。规定把请求发送到哪个 URL。</td></tr><tr style="margin: 0px; padding: 0px; border: 0px;"><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);"><em style="margin: 0px; padding: 0px; border: 0px;">data</em></td><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);">可选。映射或字符串值。规定连同请求发送到服务器的数据。</td></tr><tr style="margin: 0px; padding: 0px; border: 0px;"><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);"><em style="margin: 0px; padding: 0px; border: 0px;">success(data, textStatus, jqXHR)</em></td><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);">可选。请求成功时执行的回调函数。</td></tr><tr style="margin: 0px; padding: 0px; border: 0px;"><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);"><em style="margin: 0px; padding: 0px; border: 0px;">dataType</em></td><td style="margin: 0px; padding: 6px 15px 6px 6px; border-color: rgb(170, 170, 170); vertical-align: text-top; background-color: rgb(239, 239, 239);"><p style="border: 0px; line-height: 18px;">可选。规定预期的服务器响应的数据类型。</p><p style="margin-top: 12px; border: 0px; line-height: 18px;">默认执行智能判断（xml、json、script 或 html）。</p></td></tr></tbody></table><p><br/></p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多种font-family</title>
    <link href="/2016/04/06/38/"/>
    <url>/2016/04/06/38/</url>
    
    <content type="html"><![CDATA[<p>修改一个中英文混合css需求时，看到了以下样式。</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">font</span>: <span class="hljs-number">12</span>px/<span class="hljs-number">25</span>px <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-string">&quot;微软雅黑&quot;</span>, <span class="hljs-string">&quot;宋体&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</code></pre></div><p>居然设置了这么多字体。然后就查了查，贴上来。</p><p>font-family的调用方法:</p><p>代码如下:</p><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;    <span class="hljs-attribute">font-family</span>:Arial,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>,SimHei;     <span class="hljs-attribute">font</span>:bold <span class="hljs-number">12px</span>/<span class="hljs-number">0.75em</span> Arial,<span class="hljs-string">&#x27;Times New Roman&#x27;</span>,<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>,SimHei; &#125;</code></pre></div><p>font-family 可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。也就是说，font-family 属性的值是用于某个元素的字体族名称或/及类族名称的一个优先表。浏览器会使用它可识别的第一个值。</p><p>根据font-family的字体调用原则我们可以为英文,中文,等两种字体调用不同的字体来渲染。</p><p>如:<code>Arial,’Times New Roman’</code>这两种字体不认识中文,只认识英文,所以,这两种字体只能渲染英文数字和一些特殊符号,而页面中的中文就会自动调用第三种字体<code>Microsoft YaHei</code>(PS:假如存在这种字体的话)。</p><p>所以,在定义字体的时候把英文的字体写在前面把中文的写在后面。这样，系统就会自动按顺序依次给字用字体，如果当前字体不支持文本，自动换用列表中的下一个字体。</p><p>经过测试，IE9、IE9兼容模式（兼容IE8）、Chrome浏览器最新版本（34.0）、 Firefox浏览器最新版本（29.0）支持该font-family属性；但是某些版本的IE浏览器（IE7、IE8）无法实现该font-family属性的要求，还会暴露出一些奇怪的 bug。如在这些版本的浏览器下使用中文字体（比如微软雅黑），需要把该中文字体放到font-family属性的首位，但是会导致英文字体也会使用该中 文字体渲染。即在这些浏览器（IE7、IE8）下不支持在font-family属性中为英文和中文字体分别使用不同的字体。</p><p>我改成这样，</p><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">font</span>: <span class="hljs-number">12</span>px/<span class="hljs-number">25</span>px <span class="hljs-string">&quot;Times New Roman&quot;</span>, <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>, <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</code></pre></div><p>用360兼容模式测了下，IE7，8都没发现文章中说的问题。</p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>utf-8的BOM头</title>
    <link href="/2016/03/29/34/"/>
    <url>/2016/03/29/34/</url>
    
    <content type="html"><![CDATA[ <p style="line-height: 1.5em;"><span style="font-family: 微软雅黑,Microsoft YaHei;">昨天去客户那里，这边有需求便都交由同时处理，可有个需求他仅仅帮我改了几个汉字，便出现了层上多了段空白，两个人调试了下都没发现问题，最后用谷歌开发者工具发现这个div上面多了</span><span style="font-family: 微软雅黑,Microsoft YaHei; text-decoration: underline;">&amp;#65279</span><span style="font-family: 微软雅黑,Microsoft YaHei;">，删除它即正常。百度下，发现还真有人遇到，是BOM的原因。确实，这个层多处涉及，我就把它作为一个单独文件引入的，同事直接在记事本里修改，以致保存时自动保存为有BOM的utf-8格式。</span></p><p style="line-height: 1.5em;"><img src="/upload/ueditor/image/20161108/1478567415500612.png" title="1478567415500612.png" alt="QQ图片20161108090853.png"/></p><p style="line-height: 1.5em;"><span style="font-family: 微软雅黑,Microsoft YaHei;">UTF-8签名（UTF-8 signature）也叫做BOM（Byte Order Mark），是UTF编码方案里用于标识编码的标准标记。BOM，是UTF编码方案里用于标识编码的标准标记，在UTF-16里本来是FF FE，变成UTF-8就成了EF BB BF。这个标记是可选的，因为UTF8字节没有顺序，所以它可以被用来检测一个字节流是否是UTF-8编码的。微软做这种检测，但有些软件不做这种检测，而把它当作正常字符处理。微软在自己的UTF-8格式的文本文件之前加上了EF BB BF三个字节, windows上面的notepad等程序就是根据这三个字节来确定一个文本文件是ASCII的还是UTF-8的, 然而这个只是微软暗自作的标记, 其它平台上并没有对UTF-8文本文件做个这样的标记。</span></p><p style="line-height: 1.5em;"><span style="font-family: 微软雅黑,Microsoft YaHei;">也就是说一个UTF-8文件可能有BOM，也可能没有BOM。修改模版的时候，由于输出页面使用UTF-8编码，那么修改模版的时候如果有加入中文字符的话，必须把文件转成UTF-8编码才能正常显示，这个时候如果所使用的编辑器自动加上了BOM的话，将会造成在页面上输出这三个字符，显示效果就要看浏览器了，一般是一个空行或是一个乱码。</span><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS编写二三事</title>
    <link href="/2016/03/26/33/"/>
    <url>/2016/03/26/33/</url>
    
    <content type="html"><![CDATA[<p>大约工作两个月后，感觉编写CSS样式有点混乱，便搜集了文章，结合自己的经验，整理如下。</p><h2 id="一、CSS书写顺序（推荐）"><a href="#一、CSS书写顺序（推荐）" class="headerlink" title="一、CSS书写顺序（推荐）"></a>一、CSS书写顺序（推荐）</h2><ol><li>位置属性(position, top, right, z-index, display, float等)</li><li>大小(width, height, padding, margin)</li><li>文字系列(font, line-height, letter-spacing, color- text-align等)</li><li>背景(background, border等)</li><li>其他(animation, transition等)</li></ol><p>其实也很好理解，先定位，接着控制大小，然后编写，再是美化背景，最后其他属性。</p><p>个人习惯把背景写在文字前。</p><p><img src="/ueditor/php/upload/image/20160326/2014030616110315.png" alt="css"></p><h2 id="二、CSS书写规范"><a href="#二、CSS书写规范" class="headerlink" title="二、CSS书写规范"></a>二、CSS书写规范</h2><ol><li>缩写属性 </li></ol><p>CSS中部分属性是可以缩写的，比如padding,border,font等，缩写精简代码同时又能提高用户的阅读体验。</p><p><img src="/ueditor/php/upload/image/20160326/2014030616110316.png" alt="css"></p><ol start="2"><li>简写命名</li></ol><p>简写类名，前提是要让人看懂你的命名。</p><p>另外颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。</p><p><img src="/ueditor/php/upload/image/20160326/2014030616110318.png" alt="css"></p><ol start="3"><li>连字符CSS选择器命名规范</li></ol><ul><li>长名称或词组可以使用中横线来为选择器命名。</li><li>不建议使用“_”下划线来命名CSS选择器，为什么呢？</li></ul><p>输入的时候少按一个shift键； 浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的） 能良好区分JavaScript变量命名（JS变量命名是用“_”）</p><ol start="4"><li>不要滥用id</li></ol><p>id一般在一个页面是唯一的，不能多次使用，而class可以重复使用，另外id的优先级优先于class，所以id应该按需使用，不能滥用。</p><ol start="5"><li>为选择器添加状态前缀</li></ol><p>有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如添加了“.is-”前缀。</p><p><img src="/ueditor/php/upload/image/20160326/2014030616110322.png" alt="css"></p><h2 id="三、CSS命名规范（常见）"><a href="#三、CSS命名规范（常见）" class="headerlink" title="三、CSS命名规范（常见）"></a>三、CSS命名规范（常见）</h2><p>```<br>头：header<br>内容：content/container<br>尾：footer<br>导航：nav<br>侧栏：sidebar<br>登录条：loginbar<br>标志：logo<br>广告：banner<br>页面主体：main<br>热点：hot<br>下载：download<br>子导航：subnav<br>菜单：menu<br>子菜单：submenu<br>搜索：search<br>友情链接：friendlink<br>页脚：footer<br>版权：copyright<br>滚动：scroll<br>内容：content<br>标签：tags<br>文章列表：list<br>提示信息：msg<br>小技巧：tips<br>栏目标题：title<br>加入：joinus<br>指南：guide<br>服务：service<br>注册：regsiter<br>状态：status<br>投票：vote<br>合作伙伴：partner</p><p>注释的写法:<br>/* Header <em>/<br>内容<br>/</em> End Header */</p><h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项:"></a>四、注意事项:</h2><ol><li>定义CSS字符编码@charset “utf-8”</li><li>一律小写</li><li>不加下划线</li><li>命名尽量用英文，尽量不缩写，除非一看就明白的单词</li><li>添加必要的注释</li></ol>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现倒计时</title>
    <link href="/2016/03/21/31/"/>
    <url>/2016/03/21/31/</url>
    
    <content type="html"><![CDATA[<p>setTimeout，setInterval的区别在于setTimeout会在设定的时间后执行一次事件，而setInterval每隔一段设定的时间执行一次事件。</p><p>原理很简单，就是每秒执行一次事件，并在div中显示。</p><p>首先来看看setInterval，</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;daojishi&quot;</span> <span class="hljs-attr">data-rel</span>=<span class="hljs-string">&quot;80&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">daojishi</span>(<span class="hljs-params">limit, id</span>)</span>&#123;</span><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(id).innerText = getTimerString(limit);</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="javascript"><span class="hljs-comment">//把时间换算为时分秒并返回</span></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimerString</span>(<span class="hljs-params">time</span>) </span>&#123;</span><span class="javascript">    h = <span class="hljs-built_in">Math</span>.floor(time / <span class="hljs-number">3600</span>),</span><span class="javascript">    m = <span class="hljs-built_in">Math</span>.floor((time % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>),</span><span class="javascript">    s = <span class="hljs-built_in">Math</span>.floor((time % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>);</span><span class="javascript">    <span class="hljs-keyword">if</span> (time&gt;<span class="hljs-number">0</span>)     </span><span class="javascript">        <span class="hljs-keyword">return</span> h + <span class="hljs-string">&quot;:&quot;</span> + m + <span class="hljs-string">&quot;:&quot;</span> + s;</span><span class="javascript">    <span class="hljs-keyword">else</span></span><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;时间到&quot;</span>;</span><span class="javascript">&#125;</span><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">    </span><span class="javascript"><span class="hljs-keyword">var</span> hour = <span class="hljs-number">60</span> * $(<span class="hljs-string">&#x27;#daojishi&#x27;</span>).attr(<span class="hljs-string">&#x27;data-rel&#x27;</span>);<span class="hljs-comment">//时间换算为秒</span></span><span class="javascript">    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">        hour–;<span class="hljs-comment">//每次时间减一秒</span></span><span class="javascript">        daojishi(hour, <span class="hljs-string">&#x27;daojishi&#x27;</span>);</span><span class="javascript">    &#125;, <span class="hljs-number">1000</span>);</span><span class="javascript">&#125;);</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>Copy</code></pre></div><p>接下来是setTimeout，关键的一步，通过自身调用，实现事件的不断执行。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;daojishi&quot;</span> <span class="hljs-attr">data-rel</span>=<span class="hljs-string">&quot;120&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">daojishi</span>(<span class="hljs-params">limit, id</span>)</span>&#123;</span><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(id).innerText = getTimerString(limit);</span><span class="javascript">    limit--;  <span class="hljs-comment">//每次减去一秒</span></span><span class="javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;daojishi(limit, id);&#125;, <span class="hljs-number">1000</span>);<span class="hljs-comment">//这是关键的一步，通过自身再次调用，实现事件的多次发生</span></span><span class="javascript">&#125;</span><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimerString</span>(<span class="hljs-params">time</span>) </span>&#123;</span><span class="javascript">    h = <span class="hljs-built_in">Math</span>.floor(time / <span class="hljs-number">3600</span>),</span><span class="javascript">    m = <span class="hljs-built_in">Math</span>.floor((time % <span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>),</span><span class="javascript">    s = <span class="hljs-built_in">Math</span>.floor((time % <span class="hljs-number">3600</span>) % <span class="hljs-number">60</span>);</span><span class="javascript">    <span class="hljs-keyword">if</span> (time&gt;<span class="hljs-number">0</span>)     </span><span class="javascript">        <span class="hljs-keyword">return</span> h + <span class="hljs-string">&quot;:&quot;</span> + m + <span class="hljs-string">&quot;:&quot;</span> + s;</span><span class="javascript">    <span class="hljs-keyword">else</span></span><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;时间到&quot;</span>;</span><span class="javascript">&#125;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><span class="javascript"><span class="hljs-keyword">var</span> hour = <span class="hljs-number">60</span> * $(<span class="hljs-string">&#x27;#daojishi&#x27;</span>).attr(<span class="hljs-string">&#x27;data-rel&#x27;</span>);</span><span class="javascript">daojishi( hour, <span class="hljs-string">&#x27;daojishi&#x27;</span>);</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>Copy</code></pre></div><p>需要注意的是时间的换算。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php上传图片并显示</title>
    <link href="/2016/03/21/30/"/>
    <url>/2016/03/21/30/</url>
    
    <content type="html"><![CDATA[ <p>表单代码<br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;html&gt;&lt;body&gt;&lt;form&nbsp;action=&quot;&quot;&nbsp;method=&quot;post&quot;&nbsp;enctype=&quot;multipart/form-data&quot;&gt;&lt;label&nbsp;for=&quot;file&quot;&gt;Filename:&lt;/label&gt;&lt;input&nbsp;type=&quot;file&quot;&nbsp;name=&quot;file&quot;&nbsp;id=&quot;file&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;&lt;input&nbsp;type=&quot;submit&quot;&nbsp;name=&quot;submit&quot;&nbsp;value=&quot;提交&quot;&nbsp;/&gt;&lt;/form&gt;&lt;img&nbsp;src=&quot;&lt;?php&nbsp;echo&nbsp;&quot;upload/&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;];?&gt;&quot;&gt;&lt;/body&gt;&lt;/html&gt;</pre></div><p>注意此处</p><div class="code-wrapper"><pre class="brush:html;toolbar:false">enctype=&quot;multipart/form-data&quot;</pre></div><p>必不可少。</p><p><br/></p><p>本页上传代码</p><div class="code-wrapper"><pre class="brush:php;toolbar:false">&lt;?php//限制格式、大小if&nbsp;((($_FILES[&quot;file&quot;][&quot;type&quot;]&nbsp;==&nbsp;&quot;image/gif&quot;)&nbsp;||&nbsp;($_FILES[&quot;file&quot;][&quot;type&quot;]&nbsp;==&nbsp;&quot;image/jpeg&quot;)&nbsp;||&nbsp;($_FILES[&quot;file&quot;][&quot;type&quot;]&nbsp;==&nbsp;&quot;image/pjpeg&quot;))&nbsp;&amp;&amp;&nbsp;($_FILES[&quot;file&quot;][&quot;size&quot;]&nbsp;&lt;&nbsp;20000)){    if&nbsp;($_FILES[&quot;file&quot;][&quot;error&quot;]&nbsp;&gt;&nbsp;0){        echo&nbsp;&quot;Return&nbsp;Code:&nbsp;&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;error&quot;]&nbsp;.&nbsp;&quot;&lt;br&nbsp;/&gt;&quot;;    }else{        echo&nbsp;&quot;图片名称:&nbsp;&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;]&nbsp;.&nbsp;&quot;&lt;br&nbsp;/&gt;&quot;;        echo&nbsp;&quot;类型:&nbsp;&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;type&quot;]&nbsp;.&nbsp;&quot;&lt;br&nbsp;/&gt;&quot;;        echo&nbsp;&quot;大小:&nbsp;&quot;&nbsp;.&nbsp;($_FILES[&quot;file&quot;][&quot;size&quot;]&nbsp;/&nbsp;1024)&nbsp;.&nbsp;&quot;&nbsp;Kb&lt;br&nbsp;/&gt;&quot;;        echo&nbsp;&quot;临时文件名:&nbsp;&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]&nbsp;.&nbsp;&quot;&lt;br&nbsp;/&gt;&quot;;        if&nbsp;(file_exists(&quot;upload/&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;])){&nbsp;//判断是否重名            echo&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;]&nbsp;.&nbsp;&quot;&nbsp;已经存在.&nbsp;&quot;;        }else{            move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],            &quot;upload/&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;]);            echo&nbsp;存储位置:&nbsp;&quot;&nbsp;.&nbsp;&quot;upload/&quot;&nbsp;.&nbsp;$_FILES[&quot;file&quot;][&quot;name&quot;];        }    }}else{    echo&nbsp;&quot;文件格式不对或超过限制大小&quot;;}?&gt;</pre></div><p><br/></p><p>这样，我们便能实现简单的图片上传了。当然，文件类比，修改即可。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css限制字数（单行）</title>
    <link href="/2016/03/17/29/"/>
    <url>/2016/03/17/29/</url>
    
    <content type="html"><![CDATA[ <p>经常会遇到字数超出导致布局被破坏的情况，这种情况我们就要限制字数了。</p><p>而通过动态语言输出限制略显麻烦，倒不如用css属性限制，这个属性叫做<span style="font-size: 16px;">text-overflow，使用方便，兼容性不错（IE7+）。</span></p><p><br/></p><div class="code-wrapper"><pre class="brush:html;toolbar:false">&lt;style&nbsp;type=&quot;&quot;text/css&quot;&quot;&gt;.div1{border:&nbsp;solid&nbsp;1px&nbsp;#000;width:180px;/*以下需要同时使用，否则无效*/overflow:&nbsp;hidden;text-overflow:&nbsp;ellipsis;white-space:&nbsp;nowrap;}&lt;/style&gt;<p>&lt;div&gt;<br>信用CSS控制文章标题字数用CSS控制文章标题字数<br>&lt;div&gt;<br>&lt;div&nbsp;class=&quot;div1&quot;&gt;<br>用CSS控制文章标题字数用CSS控制文章标题字数用CSS控制文章标题字数用CSS控制文章标题字数<br>&lt;/div&gt;</pre></div><p><span style="background-color: transparent; font-size: 14px; font-family: &#39;Microsoft YaHei&#39;; color: black; font-weight: normal; font-style: normal; text-decoration: none;">text-overflow:</span></p><table cellpadding="0" cellspacing="0"><tbody style="background-color: inherit;"><tr class="firstRow" style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">clip</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="296">修剪文本。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">ellipsis</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="296">显示省略符号来代表被修剪的文本。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; font-style: italic; vertical-align: middle; white-space: normal;" height="32" width="72">string</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="296">使用给定的字符串来代表被修剪的文本。</td></tr></tbody></table><p><br style="background-color: inherit;"/></p><p><span style="background-color: transparent; font-size: 14px; font-family: &#39;Microsoft YaHei&#39;; color: black; font-weight: normal; font-style: normal; text-decoration: none;">white-space:</span></p><table cellpadding="0" cellspacing="0"><tbody style="background-color: inherit;"><tr class="firstRow" style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">normal</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">默认。空白会被浏览器忽略。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">pre</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">空白会被浏览器保留。其行为方式类似 HTML 中的 &lt;pre&gt; 标签。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">nowrap</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">文本不会换行，文本会在在同一行上继续，直到遇到 &lt;br&gt; 标签为止。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">pre-wrap</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">保留空白符序列，但是正常地进行换行。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">pre-line</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">合并空白符序列，但是保留换行符。</td></tr><tr style="background-color: inherit;"><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="72">inherit</td><td style="word-break: break-all; border: 1px solid rgb(153, 153, 153); padding: 5px 16px 5px 12px; min-height: 25px; min-width: 25px; background-color: inherit; word-wrap: break-word; vertical-align: middle; white-space: normal;" height="32" width="293">规定应该从父元素继承 white-space 属性的值。</td></tr></tbody></table><p>注意，<span style="font-size: 16px;">text-overflow</span>只适用于单行且宽度固定时的字数限制。</p></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的HTTP状态码报错及解决方法</title>
    <link href="/2016/03/14/27/"/>
    <url>/2016/03/14/27/</url>
    
    <content type="html"><![CDATA[<p>昨天，修改了网站程序，导致网站无法加载，提示错误500，但其子目录可以打开，以前从未遇到这种情况，提交工单给阿里云，回复主机无异常。晚上回来查看，果然是有程序问题，修改后便能正常打开了。</p><p>想到平常可能会遇到HTTP报错，便来整理整理常见报错信息。</p><h2 id="1、400错误"><a href="#1、400错误" class="headerlink" title="1、400错误"></a>1、400错误</h2><p>解释：</p><p>语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。</p><p>或者请求参数有误。</p><p>问题原因：您所要打开的网页不存在或你填写的身份验证信息不正确。</p><p>解决方法：重新尝试，依然错误后提交工单。</p><h2 id="2、401错误"><a href="#2、401错误" class="headerlink" title="2、401错误"></a>2、401错误</h2><p>最常见的出错提示：401 UNAUTHORIZED<br>问题原因：您试图访问受限页面但未经授权时，网站返回HTTP 401错误。错误登录尝试是导致这一错误的主因。<br>解决方法：联系网站管理员获得正确的账户。提交工单联系技术人员处理。</p><h2 id="3、403错误"><a href="#3、403错误" class="headerlink" title="3、403错误"></a>3、403错误</h2><p>最常见的出错提示：403 FORBIDDEN</p><p>解释：服务器已经理解请求，但是拒绝执行它。</p><p>问题原因：一般是网站没有绑定默认首页或者绑定默认首页错误。<br>解决方法：检查自己程序的默认首页。</p><h2 id="4、404错误"><a href="#4、404错误" class="headerlink" title="4、404错误"></a>4、404错误</h2><p>最常见的出错提示：404 NOT FOUND</p><p>解释：请求失败，请求所希望得到的资源未被在服务器上发现。</p><p>问题原因：打开网站时找不到你所要求的文件(即网页)，该文件不存在。<br>解决方案：<br>1）请您登陆ftp检查文件或网页是否不存在，把缺少的网页文件恢复。<br>2）提交工单恢复数据。</p><h2 id="5、500错误"><a href="#5、500错误" class="headerlink" title="5、500错误"></a>5、500错误</h2><p>最常见的出错提示：500 SERVER ERROR</p><p>解释：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</p><p>问题原因：<br>服务器端的网站程序设计有问题并且服务器没有打开详细错误提示。<br>解决方法：<br>1）下载程序到本地，然后检查程序，上传正确网站程序。<br>2）提交工单联系技术人员处理。</p><h2 id="6、503错误"><a href="#6、503错误" class="headerlink" title="6、503错误"></a>6、503错误</h2><p>解释：</p><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p><p>注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</p><p>问题原因：由于程序网站程序配置不兼容等原因造成应用程序池关闭或者是流量用完了。</p><p>解决方法：<br>1）Linux虚拟主机通过后台重启站点即可恢复正常。如果不行请提交工单。<br>2）widows虚拟主机请提交工单联系技术人员处理。</p><p><img src="/upload/article/httpcode.png" alt="状态码"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说说html编辑器与调试工具</title>
    <link href="/2016/03/04/26/"/>
    <url>/2016/03/04/26/</url>
    
    <content type="html"><![CDATA[ <p>编辑器和调试工具是建站的两大利器，必然会用到，今天来介绍下自己用过的、常见的编辑器。</p><p>一、编辑器</p><p>&nbsp;Dreamweaver 编辑</p><p><img alt="dw.PNG" src="/ueditor/php/upload/image/20160304/1457083065759988.png" title="1457083065759988.png"/><br/>Adobe Dreamweaver，简称“DW”，中文名称 &quot;梦想编织者&quot;，是美国MACROMEDIA公司开发的集网页制作和管理网站于一身的所见即所得网页编辑器，DW是第一套针对专业网页设计师特别发展的视觉化网页开发工具，利用它可以轻而易举地制作出跨越平台限制和跨越浏览器限制的充满动感的网页。</p><p>这是自己用的第一种编辑器，功能强大，编辑、预览、边编辑边预览，自由强大，缺点也很明显，过于荣誉，界面也low。</p><p><br/></p><p>notepad++</p><p><img alt="note.PNG" src="/ueditor/php/upload/image/20160304/1457083077138831.png" title="1457083077138831.png"/><br/></p><p>Notepad++是一款免费但优秀的代码编辑器，运行在Windows环境下，可以支持多种编程语言。它在50多种程序、脚本和标记语言上都有着语法高亮、代码折叠等功能。</p><p>界面清新简约，很不错，功能对于日常开发绰绰有余。不过不知道为何老是中文乱码，然后体验也就一般般，就用回了DW。</p><p><a title="notepad++下载" target="_blank" href="http://notepad-plus.en.softonic.com/">notepad++下载</a></p><p><br/></p><p><a title="notepad++下载" target="_blank" href="http://notepad-plus.en.softonic.com/"><br/></a></p><p>everedit</p><p><img alt="everedit.PNG" src="/ueditor/php/upload/image/20160304/1457083091786106.png" title="1457083091786106.png"/><br/></p><p>EverEdit是一个快速、轻量级和易于扩展的集文本、源代码编辑于一身的高性能纯文本编辑器。它可以运行于Windows XP、Windows Vista、Windows 7、Windows Server 2003+等绝大多数Windows操作系统上，小巧精致的EverEdit是Windows上默认的Notepad很好的替代品。</p><p>这是自己工作后才遇到的，但确实很好用，体积也很小，不用安装就能用。</p><p><a title="everedit下载" target="_blank" href="http://cn.everedit.net/">everedit下载</a></p><p><a title="everedit下载" target="_blank" href="http://cn.everedit.net/"><br/></a></p><p></p><p><a title="everedit下载" target="_blank" href="http://cn.everedit.net/"></a></p><p><a title="everedit下载" target="_blank" href="http://cn.everedit.net/"></a></p><p>sublime text</p><p><img alt="st.PNG" src="/ueditor/php/upload/image/20160304/1457083116662944.png" title="1457083116662944.png"/><br/></p><p>Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。</p><p>这个没用过，但看界面还蛮好看的，拥趸也不少，应该还不错。</p><p><br/></p><p>二、调试工具</p><p>1.firebug</p><p>火狐经典的调试工具，无需多言。</p><p><img alt="fi.PNG" src="/ueditor/php/upload/image/20160304/1457083231641796.png" title="1457083231641796.png"/></p><p><br/></p><p><br/></p><p>2.firefox开发者工具</p><p><img alt="ff.PNG" src="/ueditor/php/upload/image/20160304/1457083242821927.png" title="1457083242821927.png"/></p><p>ctrl+shift+I打开，现在用的最多的，很好用，功能也很强大。</p><p><br/></p><p><br/></p><p>3.chrome开发者工具</p><p>ctrl+shift+I打开，也很好用，跟火狐开发者工具大同小异，国内众多浏览器带的就是chrome开发者工具。</p><p><img alt="ch.PNG" src="/ueditor/php/upload/image/20160304/1457083256873130.png" title="1457083256873130.png"/></p><p><br/></p><p>结语：编辑器很多，调试工具也很多，不需要花太多时间去选择，用习惯就行，用着用着就很顺手了，也会发现越来越多的技巧。<br/></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php生成条形码</title>
    <link href="/2016/03/02/24/"/>
    <url>/2016/03/02/24/</url>
    
    <content type="html"><![CDATA[<p>今天同事做网站要用到生成条形码，这是我俩以前都没遇到过的，便百度了下，尝试了下。</p><p>百度百科定义：条形码(barcode)是将宽度不等的多个黑条和空白，按照一定的编码规则排列，用以表达一组信息的图形标识符。常见的条形码是由反射率相差很大的黑条（简称条）和白条（简称空）排成平行线的图案。在日常生活中，条形码可以标出物品的生产国、制造厂家、商品名称、生产日期、图书分类号、邮件地点起止、类别、日期等许多信息。</p><p>首先去<a href="http://www.barcodebakery.com/en/download">barcodebakery官网下载</a>，注意版本，是否与你用php版本的匹配。</p><p>接下来就简单了，解压放到你的目录，输入地址就能看到展示页。</p><p>这页很专业有木有，而且也太繁杂了，so，如果只是生成条形码图片展示出来，选择test.php吧。</p><p>test.php是另一个简单示例，注意两处，BCGcode39指的是条形码类型，是可换的，比如换成BCGcode128，结合你的需要修改即可。</p><p>$code-&gt;parse(‘HELLO’); 这就表明是生成HELLO的条形码，HELLO可换，常量、变量都可以。</p><p>就这些了，其实很简单，其实并不难。</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThinkPHP之where方法</title>
    <link href="/2016/03/02/25/"/>
    <url>/2016/03/02/25/</url>
    
    <content type="html"><![CDATA[ <p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">ThinkPHP where()方法是 Model 类内置方法，用于设置数据库查询或者更新、删除等操作条件，是ThinkPHP精髓部分，也是必须掌握的点。下面以查询为例，了解下强大的where方法。ThinkPHP支持直接使用字符串作为查询条件，但安全性不高，也可以用对象来作为条件查询，效率不高，所以大多数情况推荐使用数组来作为查询条件，因为会更加安全，更高效。</span></p><h5 style="box-sizing: border-box; margin: 14px 0px 0px; font-size: 16px; white-space: normal; padding: 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">一、使用字符串作为查询条件</span></h5><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">例如：</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">$User&nbsp;=&nbsp;M(&quot;User&quot;);&nbsp;//&nbsp;实例化User对象,user为表名<br/>$User-&gt;where(&#39;id&lt;10&nbsp;AND&nbsp;status=1&#39;)-&gt;select();<br/></span></pre></div><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">最后生成的SQL语句是（表前缀为think_）</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">SELECT&nbsp;*&nbsp;FROM&nbsp;think_user&nbsp;WHERE&nbsp;id&lt;1&nbsp;AND&nbsp;status=1<br/></span></pre></div><h5 style="box-sizing: border-box; margin: 14px 0px 0px; font-size: 16px; white-space: normal; padding: 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">二、使用数组作为查询条件（推荐）</span></h5><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">这种方式是最常用的查询方式，例如：</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">$User&nbsp;=&nbsp;M(&quot;User&quot;);&nbsp;//&nbsp;实例化User对象<br/>$condition[&#39;id&#39;]&nbsp;=&nbsp;<span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 176, 80);">array(&#39;lt&#39;,1);//lt可换成附表中其他TP运算符</span><br/>$condition[&#39;status&#39;]&nbsp;=&nbsp;1;//&nbsp;把查询条件传入查询方法<br/>$User-&gt;where($condition)-&gt;select();<br/></span></pre></div><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">最后生成的SQL语句同上。</span></p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">如果进行多字段查询，那么字段之间的默认逻辑关系是AND，如果<span style="color: rgb(0, 0, 0); font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; box-sizing: border-box; line-height: 27.2px;">逻辑关系是OR</span>，通过使用 _logic 定义查询逻辑：</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">$User&nbsp;=&nbsp;M(&quot;User&quot;);&nbsp;<br/>$condition[&#39;id&#39;]&nbsp;=&nbsp;array(&#39;lt&#39;,1);<br/>$condition[&#39;status&#39;]&nbsp;=&nbsp;1;<br/>$condition[&#39;_logic&#39;]&nbsp;=&nbsp;&#39;OR&#39;;//&nbsp;把查询条件传入查询方法<br/>$User-&gt;where($condition)-&gt;select();<br/></span></pre></div><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">最后生成的SQL语句是</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">SELECT&nbsp;*&nbsp;FROM&nbsp;think_user&nbsp;WHERE&nbsp;`id&lt;1&nbsp;OR&nbsp;`status`=1<br/></span></pre></div><h5 style="box-sizing: border-box; margin: 14px 0px 0px; font-size: 16px; white-space: normal; padding: 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">三、使用对象方式来查询（不推荐）</span></h5><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">这里以stdClass内置对象为例：</span></p><div class="code-wrapper"><pre class="prettyprint linenums webkit prettyprinted" style="box-sizing: border-box; white-space: pre-wrap; font-size: 1.3rem; line-height: 27.2px; margin-top: 0px; margin-bottom: 0px; font-family: Consolas, &#39;Liberation Mono&#39;, Courier, 微软雅黑; padding: 6px; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); border: 1px solid rgb(221, 221, 221); border-radius: 3px; position: relative; background-color: rgb(249, 249, 249);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; font-size: 14px; color: rgb(0, 0, 0);">$User&nbsp;=&nbsp;M(&quot;User&quot;);&nbsp;<br/>//&nbsp;定义查询条件<br/>$condition&nbsp;=&nbsp;new&nbsp;stdClass();&nbsp;<br/>$condition-&gt;id=&nbsp;array(&#39;lt&#39;,1);&nbsp;<br/>$condition-&gt;status=&nbsp;1;&nbsp;<br/>$User-&gt;where($condition)-&gt;select();<br/></span></pre></div><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; white-space: normal; padding: 8px 0px; color: rgb(64, 64, 64); font-family: 微软雅黑; line-height: 27.2px; background-color: rgb(255, 255, 255);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">最后生成的SQL语句和上面一样。</span></p><p><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">附：</span></p><table class="table" width="629"><caption style="margin: 0px; padding: 0px; line-height: 1.8em; text-align: left;"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">ThinkPHP运算符 与 SQL运算符 对照表</span></caption><caption style="margin: 0px; padding: 0px; line-height: 1.8em; text-align: left;"></caption><tbody style="margin: 0px; padding: 0px;"><tr style="margin: 0px; padding: 0px;" class="firstRow"><th width="15%" style="margin: 0px; padding: 2px; border-color: gray; background-color: rgb(204, 204, 204);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">TP运算符</span></th><th width="15%" style="margin: 0px; padding: 2px; border-color: gray; background-color: rgb(204, 204, 204);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">SQL运算符</span></th><th width="45%" style="margin: 0px; padding: 2px; border-color: gray; background-color: rgb(204, 204, 204);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">例子</span></th><th style="margin: 0px; padding: 2px; border-color: gray; background-color: rgb(204, 204, 204);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">实际查询条件</span></th></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">eq</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">=</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;eq&#39;,100);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = 100;</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">neq</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">!=</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;neq&#39;,100);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">id != 100</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">gt</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">&gt;</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;gt&#39;,100);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">id &gt; 100</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">elt</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">&lt;=</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;elt&#39;,100);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">id &lt;= 100</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">like</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">like</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;username&#39;] = array(&#39;like&#39;,&#39;Admin%&#39;);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">username like &#39;Admin%&#39;</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">between</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">between and</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;between&#39;,&#39;1,8&#39;);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">id BETWEEN 1 AND 8</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">not in</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">not in</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;not in&#39;,&#39;1,5,8&#39;);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">id not in(1,5,8)</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">and（默认）</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">and</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(array(&#39;gt&#39;,1),array(&#39;lt&#39;,10));</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">(id &gt; 1) AND (id &lt; 10)</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">or</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">or</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(array(&#39;gt&#39;,3),array(&#39;lt&#39;,10), &#39;or&#39;);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">(id &gt; 3) OR (id &lt; 10)</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">xor（异或）</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">xor</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">两个输入中只有一个是true时，结果为true，否则为false，例子略。</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">1 xor 1 = 0</span></td></tr><tr style="margin: 0px; padding: 0px;"><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">exp</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">综合表达式</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;exp&#39;,&#39;in(1,3,8)&#39;);</span></td><td style="margin: 0px; padding: 3px 0px 2px 5px; border-color: gray; background: rgb(246, 246, 246);"><span style="font-family: 微软雅黑, &#39;Microsoft YaHei&#39;; color: rgb(0, 0, 0);">$map[&#39;id&#39;] = array(&#39;in&#39;,&#39;1,3,8&#39;);</span></td></tr></tbody></table><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让ie7兼容css圆角、阴影</title>
    <link href="/2016/02/16/19/"/>
    <url>/2016/02/16/19/</url>
    
    <content type="html"><![CDATA[ <p>    <span style="font-size:16px;">首先下载ie-css3.htc脚本，然后在css中加入</span><span style="font-size:16px;"></span><span style="font-size:16px;">代码:</span></p><div class="msgborder" id="phpcode2">    <span style="font-size:16px;">例如</span><br /><span style="font-size:16px;"> .div { </span><span style="font-size:16px;"></span><br /><span style="font-size:16px;"> border-radius: 15px; </span><span style="font-size:16px;"></span><br /><span style="font-size:16px;"> box-shadow: 10px 10px 20px #000; </span><br /><span style="font-size:16px;"> behavior: url(ie-css3.htc); </span><br /><span style="font-size:16px;"> } </span><br /></div><br /><span style="font-size:16px;"> 注意：behavior: url(ie-css3.htc) 中的ie-css3.htc地址必须用</span><span style="color:#E53333;font-size:16px;">绝对路径</span><span style="font-size:16px;">或者直接传到网站的根目录下面。 </span><br /><br /><p>    <span style="font-size:16px;"> IE-CSS3.HTC下载地址： </span><span style="font-size:16px;"></span><a target="_blank" href="http://fetchak.com/ie-css3/"><span style="font-size:16px;">前往官网</span></a></p><p>    <span style="font-size:16px;"><br /></span> </p><span style="font-size:16px;">附：</span><br /><span style="font-size:16px;"> •当你使用了这个htc文件后，你的CSS里面，只要写有box-shadow, -moz-box-shadow或-webkit-box-shadow的任何一种，IE就会渲染。 </span><br /><span style="font-size:16px;"> •当使用了这个htc文件后，你不能这样写box-shadow: 0 0 10px red; 而应该是box-shadow: <span style="color:#E53333;">0px 0px </span>10px red; 否则IE中会失效。 </span><br /><span style="font-size:16px;"> •不支持RGBA值中的alpha透明度，</span><span style="font-size:16px;">不支持inset内阴影。 </span><span style="font-size:16px;"></span><br /><span style="font-size:16px;"> •阴影在IE中只会显示为黑色，不管你设置成其它什么颜色。 </span><span style="font-size:16px;"></span>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thinkphp安装配置</title>
    <link href="/2016/02/02/18/"/>
    <url>/2016/02/02/18/</url>
    
    <content type="html"><![CDATA[<p>ThinkPHP是一个快速、简单的基于MVC和面向对象的轻量级PHP开发框架，遵循Apache2开源协议发布，从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，尤其注重开发体验和易用性，并且拥有众多的原创功能和特性，为WEB应用开发提供了强有力的支持。</p><p>下载安装：</p><p><a href="http://thinkphp.cn/down/framework.html">ThinkPHP最新版本可以在官方网站</a>或者<a href="https://github.com/liu21st/thinkphp/downloads">Github</a>下载。</p><p>然后把下载的压缩包解压到web目录下，运行浏览器输入对应网址，看到tp的笑脸就表示安装成功了。</p><p><img src="http://www.thinkphp.cn/Uploads/info/hello.jpg" alt="thinkphp"></p><p>安装基本无压力。</p><p>配置：（我用的是3.2版本）</p><p>修改根目录下入口文件index.php，定义应用目录，都有注释，简单明了，然后浏览器刷新，就自动生成了你的app目录。</p><p>当然你也可以不改，直接用自动生成的Application开发。</p><p>然后开始配置，去app目录下Application\Common\Conf</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计范式</title>
    <link href="/2016/02/01/17/"/>
    <url>/2016/02/01/17/</url>
    
    <content type="html"><![CDATA[<p>为了建立冗余较小、结构合理的数据库，设计数据库时常常遵循一定的规则。在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，常常需要满足一定的范式。</p><p>在实际开发中最为常见的设计范式有三个：</p><h2 id="1．第一范式-确保每列保持原子性"><a href="#1．第一范式-确保每列保持原子性" class="headerlink" title="1．第一范式(确保每列保持原子性)"></a>1．第一范式(确保每列保持原子性)</h2><div class="code-wrapper"><pre><code class="hljs">  第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</code></pre></div><p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便，同时也提高了数据库的性能。</p><h2 id="2．第二范式-确保表中的每列都和主键相关"><a href="#2．第二范式-确保表中的每列都和主键相关" class="headerlink" title="2．第二范式(确保表中的每列都和主键相关)"></a>2．第二范式(确保表中的每列都和主键相关)</h2><div class="code-wrapper"><pre><code class="hljs">  第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</code></pre></div><p>比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键。</p><p>这样就产生一个问题：表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。</p><p>而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。<br>      这样设计，在很大程度上减小了数据库的冗余。如果要获取订单的商品信息，使用商品编号到商品信息表中查询即可。</p><h2 id="3．第三范式-确保每列都和主键列直接相关-而不是间接相关"><a href="#3．第三范式-确保每列都和主键列直接相关-而不是间接相关" class="headerlink" title="3．第三范式(确保每列都和主键列直接相关,而不是间接相关)"></a>3．第三范式(确保每列都和主键列直接相关,而不是间接相关)</h2><div class="code-wrapper"><pre><code class="hljs">  第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</code></pre></div><p>比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。如下面这两个表所示的设计就是一个满足第三范式的数据库表。</p><p>这样在查询订单信息的时候，就可以使用客户编号来引用客户信息表中的记录，也不必在订单信息表中多次输入客户信息的内容，减小了数据冗余。</p><p>当然，在实际应用中，不必苛刻地去满足这些范式，具体情况具体对待，未必就强迫数据遵循范式，我们可以参考范式，结合需求来设计数据库，学会“推陈出新”！</p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说说csshack</title>
    <link href="/2016/01/20/16/"/>
    <url>/2016/01/20/16/</url>
    
    <content type="html"><![CDATA[ <p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    <strong>一、什么是CSS Hack</strong></p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    不同的浏览器对CSS的解析结果是不同的，因此会导致相同的CSS输出的页面效果不同，这就需要CSS Hack来解决浏览器局部的兼容性问题。而这个针对不同的浏览器写不同的CSS 代码的过程，就叫CSS Hack。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    CSS Hack常见的有三种形式：CSS属性Hack、CSS选择符Hack以及IE条件注释Hack， Hack主要针对IE浏览器。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    1、属性级Hack：比如IE6能识别下划线”_”和星号” * “，IE7能识别星号” * “，但不能识别下划线”_”，而firefox两个都不能认识。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    2、选择符级Hack：比如IE6能识别*html .class{}，IE7能识别*+html .class{}或者*:first-child+html .class{}。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    3、IE条件注释Hack：IE条件注释是微软从IE5开始就提供的一种非标准逻辑语句。比如针对所有IE：&lt;!–[if IE]&gt;&lt;!–您的代码–&gt;&lt;![endif]–&gt;，针对IE6及以下版本：&lt;!–[if lt IE 7]&gt;&lt;!–您的代码–&gt;&lt;![endif]–&gt;，这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都 会生效。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    PS：条件注释只有在IE浏览器下才能执行，这个代码在非IE浏览下被当做注释视而不见。可以通过IE条件注释载入不同的CSS、JS、HTML和服务器代码等。</p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    <strong>二、常用的CSS Hack</strong></p><p style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;">    <br /></p><div class="msgheader" style="margin:0px;padding:0px;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;">    代码如下:</div><p style="text-indent:2em;">    /* CSS属性级Hack */</p><p style="text-indent:2em;">    color:red; /* 所有浏览器可识别*/</p><p style="text-indent:2em;">    _color:red; /* 仅IE6 识别 */</p><p style="text-indent:2em;">    *color:red; <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">+color:red;&nbsp;<span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">*+color:red;<span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;line-height:21px;">[color:red;&nbsp;</span>&nbsp;</span></span>/* IE6、IE7 识别 */</p><p style="text-indent:2em;">    color:red9; /* IE6、IE7、IE8、IE9 识别 */</p><p style="text-indent:2em;">    color:red9; /* 仅IE9识别 */</p><p style="text-indent:2em;">    color:red!important; /* IE6 不识别!important*/<br />-------------------------------------------------------------</p><p style="text-indent:2em;">    /* CSS选择符级Hack */</p><p style="text-indent:2em;">    *html #demo { color:red;} /* 仅IE6 识别 */</p><p style="text-indent:2em;">    *+html #demo { color:red;} /* 仅IE7 识别 */</p><p style="text-indent:2em;">    body:nth-of-type(1) #demo { color:red;} /* IE9+、FF3.5+、Chrome、Safari、Opera 可以识别 */</p><p style="text-indent:2em;">    head:first-child+body #demo { color:red; } /* IE7+、FF、Chrome、Safari、Opera 可以识别 */</p><p style="text-indent:2em;">    :root #demo { color:red9; } : /* 仅IE9识别 */<br />--------------------------------------------------------------</p><p style="text-indent:2em;">    /* IE条件注释Hack */</p><p style="text-indent:2em;">    &lt;!--[if IE]&gt;此处内容只有IE可见&lt;![endif]--&gt;&nbsp;</p><p style="text-indent:2em;">    &lt;!--[if IE 6]&gt;此处内容只有IE6.0可见&lt;![endif]--&gt;&nbsp;</p><p style="text-indent:2em;">    &lt;!--[if IE 7]&gt;此处内容只有IE7.0可见&lt;![endif]--&gt;&nbsp;</p><p style="text-indent:2em;">    &lt;!--[if !IE 7]&gt;此处内容只有IE7不能识别，其他版本都能识别，当然要在IE5以上。&lt;![endif]--&gt;</p><p style="text-indent:2em;">    &lt;!--[if gt IE 6]&gt; IE6以上版本可识别,IE6无法识别 &lt;![endif]--&gt;</p><p style="text-indent:2em;">    &lt;!--[if gte IE 7]&gt; IE7以及IE7以上版本可识别 &lt;![endif]--&gt;</p><p style="text-indent:2em;">    &lt;!--[if lt IE 7]&gt; 低于IE7的版本才能识别，IE7无法识别。 &lt;![endif]--&gt;</p><p style="text-indent:2em;">    &lt;!--[if lte IE 7]&gt; IE7以及IE7以下版本可识别&lt;![endif]--&gt;</p><p style="text-indent:2em;">    <span style="font-size:12px;line-height:1.5;">&lt;!--[if !IE]&gt;此处内容只有非IE可见&lt;![endif]--&gt;</span></p><p style="text-indent:2em;">    <br /></p><p style="text-indent:2em;">    <br /></p><h3 style="color:#333333;font-family:Arial;text-indent:2em;background-color:#FFFFFF;">    CSS hack利弊</h3><p style="color:#333333;font-family:Arial;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    一般情况下，我们尽量避免使用CSS hack，但是有些情况为了顾及用户体验实现向下兼容，不得已才使用hack。比如由于IE8及以下版本不支持CSS3,而我们的项目页面使用了大量CSS3新属性在IE9/Firefox/Chrome下正常渲染，这种情况下如果不使用css3pie或htc或条件注释等方法时,可能就得让IE8-的专属hack出马了。使用hack虽然对页面表现的一致性有好处，但过多的滥用会造成html文档混乱不堪，增加管理和维护的负担。</p><p style="color:#333333;font-family:Arial;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    <br /></p><p style="color:#333333;font-family:Arial;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    PS:</p><p style="color:#333333;font-family:Arial;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    说到hack就想到两个词，渐进增强与优雅降级。</p><p style="color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，更关注于内容，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p style="color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p style="color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;text-indent:2em;background-color:#FFFFFF;">    区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p><p style="text-indent:2em;">    <br /></p><p style="text-indent:2em;">    <br /></p><p style="text-indent:2em;">    <br /></p><p style="text-indent:2em;">    <br /></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主流浏览器内核介绍</title>
    <link href="/2016/01/17/15/"/>
    <url>/2016/01/17/15/</url>
    
    <content type="html"><![CDATA[ <p>    作为一名前端开发人员，我觉得很有必要了解主流浏览器的内核。如下是从来自伯乐在线的介绍，有删减。</p><p>    浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。内核的种类很多，但是常见的浏览器内核可以分这四种：Trident、Gecko、Webkit、Blink。<span style="color:#003399;">浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</span></p><h1 id="trident-tradnt">    Trident</h1><hr /><p>    Trident(IE内核)：该内核程序在 1997 年的 IE4 中首次被采用，是微软在 Mosaic（”马赛克”，这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览） 代码的基础之上修改而来的，并沿用到 IE11，也被普遍称作 “IE内核”。</p><p>    Trident实际上是一款开放的内核，其接口内核设计的相当成熟，因此才有许多采用 IE 内核而非 IE 的浏览器(壳浏览器)涌现。由于 IE 本身的 “垄断性而使得 Trident 内核的长期一家独大，微软很长时间都并没有更新 Trident 内核，这导致了两个后果——一是 Trident 内核曾经几乎与 W3C 标准脱节（2005年），二是 Trident 内核的大量 Bug 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器，Firefox 和 Opera 就是这个时候兴起的。非 Trident 内核浏览器的市场占有率大幅提高也致使许多网页开发人员开始注意网页标准和非 IE浏览器的浏览效果问题。</p><p>    补充：IE 从版本 11 开始，初步支持 WebGL 技术。IE8 的 JavaScript 引擎是 Jscript，IE9 开始用 Chakra，这两个版本区别很大，Chakra 无论是速度和标准化方面都很出色。而Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><h1 id="gecko-gek">    Gecko</h1><hr /><p>    Gecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 Mozilla FireFox(火狐浏览器) 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个开源内核，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。</p><h1 id="webkit">    Webkit</h1><hr /><p>    一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。</p><p>    Safari 是苹果公司开发的浏览器，使用了KDE（Linux桌面系统）的 KHTML 作为浏览器的内核，Safari 所用浏览器内核的名称是大名鼎鼎的 WebKit。 Safari 在 2003 年 1 月 7 日首度发行测试版，并成为 Mac OS X v10.3 与之后版本的默认浏览器，也成为苹果其它系列产品的指定浏览器。</p><p>    如上述可知，WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。当年苹果在比较了 Gecko 和 KHTML 后，选择了后者来做引擎开发，是因为 KHTML 拥有清晰的源码结构和极快的渲染速度。</p><h1 id="chromiumbink">    Chromium/Bink</h1><hr /><p>    2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 chromium。</p><p>    chromium fork 自开源引擎 webkit，却把 WebKit 的代码梳理得可读性提高很多，所以以前可能需要一天进行编译的代码，现在只要两个小时就能搞定。因此 Chromium 引擎和其它基于 WebKit 的引擎所渲染页面的效果也是有出入的。谷歌公司还研发了自己的 Javascript 引擎V8，极大地提高了 Javascript 的运算速度。</p><p>    chromium 问世后，带动了国产浏览器行业的发展。一些基于 chromium 的单核，双核浏览器如雨后春笋般拔地而起，例如 搜狗、360、QQ浏览器等等，无一不是套着不同的外壳用着相同的内核。</p><p>    然而 2013 年 4 月 3 日，谷歌称将与 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p>    webkit 用的好好的，为何要投入到一个新的内核中去呢？</p><p>    Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入Webkit。</p><p>    后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。</p><p>    基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎，将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。</p><p>    <br /></p><h1 id="presto-prest">    Presto</h1><hr /><p>    Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌大本营。</p><p>    Opera 的一个里程碑作品是 Opera7.0，因为它使用了 Opera Software&nbsp;自主开发的 Presto 渲染引擎，取代了旧版 Opera 4 至 6 版本使用的 Elektra 排版引擎。该款引擎的特点就是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性。</p><p>    Presto 加入了动态功能，例如网页或其部分可随着 DOM 及 Script 语法的事件而重新排版。Presto 在推出后不断有更新版本推出，使不少错误得以修正，以及阅读 Javascript 效能得以最佳化，并成为当时速度最快的引擎。</p><p>    然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎，Presto 内核的 Opera 浏览器版本永远的停留在了 12.17。</p><h1>    移动端</h1><hr /><p>    移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>    目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><h1>    总结</h1><hr /><p>    浏览器内核主要指的是浏览器的渲染引擎，2013 年以前，代表有 Trident（IE），Gecko（firefox），Webkit（Safari chrome 等）以及 Presto（opera)。2013 年，谷歌开始研发 blink 引擎，chrome 28 以后开始使用，而 opera 则放弃了自主研发的 Presto 引擎，投入谷歌怀抱，和谷歌一起研发 blink 引擎，国内各种 chrome系的浏览器（360、UC、QQ、2345 等等）也纷纷放弃 webkit，投入 blink 的怀抱。</p><p>    <br /></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>别忘了DOCTYPE声明</title>
    <link href="/2016/01/12/13/"/>
    <url>/2016/01/12/13/</url>
    
    <content type="html"><![CDATA[<p>&lt;!DOCTYPE&gt; 声明是很容易被忽略的问题，有几次遇到bug，花了很多时间去研究，却没有成功解决，最后的最后，发现是&lt;!DOCTYPE&gt;声明有误。所以切记，遇到浏览器诡异bug时请先检查&lt;!DOCTYPE&gt;` 声明。</p><p>下面具体看看w3school上的说明：<br>&lt;!DOCTYPE&gt;声明必须是 HTML 文档的第一行，位于 <code>html</code> 标签之前。</p><p>&lt;!DOCTYPE&gt;声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p><p>在 HTML 4.01 中，&lt;!DOCTYPE&gt;` 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</p><p>HTML5 不基于 SGML，所以不需要引用 DTD。</p><p>注释：向 HTML 文档添加 &lt;!DOCTYPE&gt; 声明，这样浏览器才能获知文档类型。&lt;!DOCTYPE&gt; 声明没有结束标签,&lt;!DOCTYPE&gt; 声明对大小写不敏感。</p><h2 id="常用的-DOCTYPE-声明"><a href="#常用的-DOCTYPE-声明" class="headerlink" title="常用的 DOCTYPE 声明"></a>常用的 DOCTYPE 声明</h2><h4 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML 5"></a>HTML 5</h4><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></code></pre></div><h4 id="HTML-4-01-Strict"><a href="#HTML-4-01-Strict" class="headerlink" title="HTML 4.01 Strict"></a>HTML 4.01 Strict</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="HTML-4-01-Transitional"><a href="#HTML-4-01-Transitional" class="headerlink" title="HTML 4.01 Transitional"></a>HTML 4.01 Transitional</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="HTML-4-01-Frameset"><a href="#HTML-4-01-Frameset" class="headerlink" title="HTML 4.01 Frameset"></a>HTML 4.01 Frameset</h4><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="XHTML-1-0-Strict"><a href="#XHTML-1-0-Strict" class="headerlink" title="XHTML 1.0 Strict"></a>XHTML 1.0 Strict</h4><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="XHTML-1-0-Transitional"><a href="#XHTML-1-0-Transitional" class="headerlink" title="XHTML 1.0 Transitional"></a>XHTML 1.0 Transitional</h4><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="XHTML-1-0-Frameset"><a href="#XHTML-1-0-Frameset" class="headerlink" title="XHTML 1.0 Frameset"></a>XHTML 1.0 Frameset</h4><p>该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;</span>&gt;</span></code></pre></div><h4 id="XHTML-1-1"><a href="#XHTML-1-1" class="headerlink" title="XHTML 1.1"></a>XHTML 1.1</h4><p>该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.1//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;</span>&gt;</span></code></pre></div><p>好了，注意 <code>DOCTYPE</code> 声明哟！</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>去掉块状元素与img之间间隙</title>
    <link href="/2015/12/22/7/"/>
    <url>/2015/12/22/7/</url>
    
    <content type="html"><![CDATA[ <p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff;font-weight:bold">造成图片与容器下边界有空隙的原因</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">在网上搜了一下，&nbsp;</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">图片文字等inline元素默认是和父级元素的baseline对齐的，而baseline又和父级底边有一定距离（这个距离和&nbsp;font-size，font-family&nbsp;相关，不一定是 3px），所以设置&nbsp;vertical-align:top/bottom/text-top/text-bottom&nbsp;都可以避免这种情况出现。而且不光li，其他的block元素中包含img也会有这个现象。&nbsp;</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">只要vertical-align不取baseline，这个空隙就消失了。</span></p><p>请看如下实例(注意::测试工具：ff，chrome，360--支持IE7+)</p><p>&lt;style&gt;</p><p>#l1&nbsp;{float:left;background:#000;}</p><p>#l1&nbsp;ul&nbsp;li&nbsp;{list-style:none;padding:0;margin:0}</p><p>img&nbsp;{height:100px;}</p><p>&lt;/style&gt;</p><p>&lt;div&nbsp;id=&quot;l1&quot;&gt;</p><p>&nbsp;&nbsp;&nbsp;&lt;ul&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;img&nbsp;src=&quot;30-023131_451.jpg&quot;&nbsp;/&gt;&lt;/li&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;img&nbsp;src=&quot;30-023131_451.jpg&quot;&nbsp;/&gt;&lt;/li&gt;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;img&nbsp;src=&quot;30-023131_451.jpg&quot;&nbsp;/&gt;&lt;/li&gt;</p><p>&nbsp;&nbsp;&nbsp;&lt;/ul&gt;</p><p>&lt;/div&gt;</p><p>我们会发现li底部与img底部有间隙，so bad！</p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">第一，给图片img标签display:block。</span></p><p>兼容性IE8+，firefox，<span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">chrome</span></p><p>第二，定义容器里的字体大小为0。font-size:0&nbsp;</p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">兼容性IE8+，firefox，chrome</span></p><p><span style="color:#ff0000">第三，定义图片img标签vertical-align:bottom，vertical-align:middle，vertical-align:top</span></p><p><span style="color:#ff0000">img{vertical-align:bottom}</span></p><p><span style="font-family:Microsoft YaHei,STXihei;color:#ff0000;background-color:#ffffff">兼容性IE7+，firefox，chrome</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">&nbsp;</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">第四，给li加高度</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">兼容性IE7+，firefox，chrome</span></p><p><span style="font-family:Microsoft YaHei,STXihei;background-color:#ffffff">测试发现，给img加</span><span style="font-family:Microsoft YaHei,STXihei;color:#ff0000;background-color:#ffffff">vertical-align效果最佳</span></p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>li设置float时如何控制ul的高度</title>
    <link href="/2015/12/08/5/"/>
    <url>/2015/12/08/5/</url>
    
    <content type="html"><![CDATA[<p> 在网页设计中，常常需要对li标签做浮动效果，但是在不同浏览器中会遇到兼容性问题，比如IE中会出现ul高度为0的情况，是效果不能达到预期效果。那么这里我就来讲解一下解决这个问题的几种方法。</p><p>1.给ul元素设置高度height<br>最直接的办法是给ul元素设置一个高度，即ul标签添加height属性，代码如下:</p><p>ul {<br>    list-style-type: none;<br>    height: 30px; /<em>添加高度属性</em>/<br>}</p><p>次方法有个缺点：就是元素的高度不能自适应内容。</p><p>2.添加一个空的div<br>添加一个空的div，这个div和浮动元素同一级别，且位于浮动元素的最后。这个方法必须要为这个div添加一个clear:both属性，代码如下：</p><ul><li>标签1</li><li>标签2</li><li>标签3</li><div style="clear:both;"></div> <!--新添加的空div，它和浮动元素同一级别，且位于最后--></ul><p>3.添加zoom属性，适用于IE</p><p>IE支持一个CSS属性zoom，当定义了这个属性之后在 IE 浏览器里面就会自动适应高度了。设置为zoom:1，代码如下：</p><p>ul {<br>    list-style:none;<br>    zoom:1; /* 适用于IE */<br>}</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解CSS选择器、优先级与匹配原理</title>
    <link href="/2015/12/01/4/"/>
    <url>/2015/12/01/4/</url>
    
    <content type="html"><![CDATA[ <p><span style="font-weight:bold">选择器种类</span></p><p>严格来讲，选择器的种类可以分为三种：标签名选择器、类选择器和ID选择器。而所谓的后代选择器和群组选择器只不过是对前三种选择器的扩展应用。而 在标签内写入style=&quot;&quot;的方式，应该是CSS的一种引入方式，而不是选择器，因为根本就没有用到选择器。而一般人们将上面这几种方式结合在一起，所 以就有了5种或6种选择器了。</p><p><span style="font-weight:bold">三种基本的选择器类型</span></p><p>语法如下：</p><p>◆标签名选择器，如：p{}，即直接使用HTML标签作为选择器。</p><p>◆类选择器，如.polaris{}。</p><p>◆ID选择器，如#polaris{}。</p><p>注意，ID选择器跟类选择器有很大的不同：一个页面内不能出现相同的ID；再就是ID也是后台开发人员会经常用的，所以前端开发人员应该尽量少的使用。当然跟后台人员的工作配合十分娴熟之后，这些都不会成为限制。</p><p><span style="font-weight:bold">扩展选择器</span></p><p>◆后代选择器，如.polaris span img{}，后代选贼器实际上是使用多个选择器加上中间的空格来找到具体的要控制标签。</p><p>◆群组选择器，如div,span,img{}，群组选择器实际上是对CSS的一种简化写法，只不过把有相同定义的不同选择器放在一起，省了很多代码。</p><p><span style="font-weight:bold">选择器的优先级别</span></p><p>了解了各种选择器后，还有一个重要的知识点就是CSS选择器的优先级。这也就是为什么polaris会遇到文章开头的问题。举个简单的例子：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>&lt;div&nbsp;class=&quot;polaris&quot;&gt;&nbsp;</p></li><li><p>&lt;span&nbsp;class=&quot;beijixing&quot;&gt;&nbsp;</p></li><li><p>beijixing &nbsp;</p></li><li><p>&lt;/span&gt;&nbsp;</p></li><li><p>&lt;span&gt;&nbsp;</p></li><li><p>polaris &nbsp;</p></li><li><p>&lt;/span&gt;&nbsp;</p></li><li><p>&lt;/div&gt;&nbsp;</p></li></ol><p>如果已经把.polaris下面span内的字体设置成红色：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>.polaris&nbsp;span&nbsp;{color:red;}&nbsp;</p></li></ol><p>这时，如果要改变.beijixing的颜色为蓝色，用下面的命令是不能实现的：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>.beijixing&nbsp;{color:blue;}&nbsp;</p></li></ol><p>出现这种情况就是因为后一个命令的优先级不够，两条相互冲突的样式设置，浏览器只会执行优先级较高的那个。</p><p><span style="font-weight:bold">那么选择器的优先级是怎么规定的呢？</span></p><p>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。<span style="color:#4f81bd">通常我们用1表示标签名选择器的优先级，用10表示类选择 器的优先级，用100标示ID选择器的优先级。比如上例当中 .polaris span {color:red;}的选择器优先级是 10 + 1 也就是11；而 .polaris 的优先级是10；</span>浏览器自然会显示红色的字。理解了这个道理之后下面的优先级计算自是易如反掌：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>div.test1&nbsp;.span&nbsp;var&nbsp;优先级&nbsp;1+10&nbsp;+10&nbsp;+1 &nbsp;</p></li><li><p>span#xxx&nbsp;.songs&nbsp;li&nbsp;优先级1+100&nbsp;+&nbsp;10&nbsp;+&nbsp;1 &nbsp;</p></li><li><p>#xxx&nbsp;li&nbsp;优先级&nbsp;100&nbsp;+1&nbsp;</p></li></ol><p><span style="color:#9bbb59">对于什么情况下使用什么选择器，用不同选择器的原则是：第一：准确的选到要控制的标签；第二：使用最合理优先级的选择器；第三：HTML和CSS代码尽量简洁美观。通常：</span></p><p><span style="color:#9bbb59">1、最常用的选择器是类选择器。</span></p><p><span style="color:#9bbb59">2、li、td、dd等经常大量连续出现，并且样式相同或者相类似的标签，我们采用类选择器跟标签名选择器结合的后代选择器 .xx li/td/dd {} 的方式选择。</span></p><p><span style="color:#9bbb59">3、极少的情况下会用ID选择器，当然很多前端开发人员喜欢header，footer，banner，conntent设置成ID选择器的，因为相同的样式在一个页面里不可能有第二次。</span></p><p>在这里不得不提使用在标签内引入CSS的方式来写CSS，即：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>&lt;div&nbsp;style=&quot;color:red&quot;&gt;polaris&lt;/div&gt;&nbsp;</p></li></ol><p>这时候的优先级是最高的。我们给它的优先级是1000，这种写法不推荐使用，特别是对新手来说。这也完全违背了内容和显示分离的思想。DIV+CSS的优点也不能再有任何体现。</p><p><span style="font-weight:bold">后代选择器的定位原则</span></p><p>在这里介绍一下对于后代选择器，浏览器是如何查找元素的呢？</p><p>浏览器CSS匹配不是从左到右进行查找，而是从右到左进行查找。比如DIV#divBox p span.red{color:red;}，浏览器的查找顺序如下：先查找html中所有class=&#39;red&#39;的span元素，找到后，再查找其父辈元 素中是否有p元素，再判断p的父元素中是否有id为divBox的div元素，如果都存在则匹配上。</p><p>浏览器从右到左进行查找的好处是为了尽早过滤掉一些无关的样式规则和元素。比如如下html和css:</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>&lt;style&gt;&nbsp;</p></li><li><p>DIV#divBox&nbsp;p&nbsp;span.red{color:red;} &nbsp;</p></li><li><p>&gt;&lt;style&gt;&nbsp;</p></li><li><p>&lt;body&gt;&nbsp;</p></li><li><p>&lt;div&nbsp;id=&quot;divBox&quot;&gt;&nbsp;</p></li><li><p>&lt;p&gt;&lt;span&gt;s1&lt;/span&gt;&lt;/p&gt;&nbsp;</p></li><li><p>&lt;p&gt;&lt;span&gt;s2&lt;/span&gt;&lt;/p&gt;&nbsp;</p></li><li><p>&lt;p&gt;&lt;span&gt;s3&lt;/span&gt;&lt;/p&gt;&nbsp;</p></li><li><p>&lt;p&gt;&lt;span&nbsp;class=&#39;red&#39;&gt;s4&lt;/span&gt;&lt;/p&gt;&nbsp;</p></li><li><p>&lt;/div&gt;&nbsp;</p></li><li><p>&lt;/body&gt;&nbsp;</p></li></ol><p>如果按从左到右查找，哪会先查找到很多不相关的p和span元素。而如果按从左到右的方式进行查找，则首先就查找到&lt;span class=&#39;red&#39;&gt;的元素。firefox称这种查找方式为key selector(关键字查询)，所谓的关键字就是样式规则中最后(最右边)的规则，上面的key就是span.red。</p><p><span style="font-weight:bold">简洁、高效的CSS</span></p><p>所谓高效的CSS就是让浏览器在查找style匹配的元素的时候尽量进行少的查找，下面列出一些我们常见的写CSS犯一些低效错误：</p><p>◆不要在ID选择器前使用标签名</p><p>一般写法：DIV#divBox</p><p>更好写法：#divBox</p><p>解释： 因为ID选择器是唯一的，加上div反而增加不必要的匹配。</p><p>◆不要再class选择器前使用标签名</p><p>一般写法：span.red</p><p>更好写法：.red</p><p>解释：同第一条，但如果你定义了多个.red，而且在不同的元素下是样式不一样，则不能去掉，比如你css文件中定义如下：</p><ol yne-block-type="list" class=" list-paddingleft-2"><li><p>p.red{color:red;} &nbsp;</p></li><li><p>span.red{color:#ff00ff}&nbsp;</p></li></ol><p>如果是这样定义的就不要去掉，去掉后就会混淆，不过建议最好不要这样写</p><p>◆尽量少使用层级关系</p><p>一般写法：#divBox p .red{color:red;}</p><p>更好写法：.red{..}</p><p>◆使用class代替层级关系</p><p>一般写法：#divBox ul li a{display:block;}</p><p>更好写法：.block{display:block;}</p><p><br/></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于mysql数据库可查询不可写入的问题</title>
    <link href="/2015/12/01/3/"/>
    <url>/2015/12/01/3/</url>
    
    <content type="html"><![CDATA[<p>之前不知道改了数据库里的表单，然后就不能写入数据到数据库了，自己研究了一下，实在是弄不清为何。 </p><p>只得找baidu了，说是木有权限，或者说是字符类型什么的不对。（吐槽一句，有时候百度出来的结果很多，但大同小异，都解决不了自己弄出来的问题），权限是有的，因为之前可以。</p><p>那就改了字符类型，仍然不能插入数据。 只能自己捣鼓，恰巧需要新建表，插入一条数据，成功，再插入，失败，发现id相同，换id，成功。</p><p>然后就想是不是id的问题。 改id为自增，提示设为主键，改主键为id，改自增，提示id45错误，删除45数据，重新插入，成功。</p>]]></content>
    
    
    <categories>
      
      <category>db</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
